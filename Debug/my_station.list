
my_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beb0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800c080  0800c080  0000d080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5b0  0800c5b0  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5b0  0800c5b0  0000d5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5b8  0800c5b8  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5b8  0800c5b8  0000d5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5bc  0800c5bc  0000d5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c5c0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  200001d8  0800c798  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  0800c798  0000e9f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016885  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d95  00000000  00000000  00024a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00027828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001069  00000000  00000000  00028ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045c1  00000000  00000000  00029d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a713  00000000  00000000  0002e312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e57bc  00000000  00000000  00048a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e1e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e40  00000000  00000000  0012e224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00135064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c068 	.word	0x0800c068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800c068 	.word	0x0800c068

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800102c:	22b0      	movs	r2, #176	@ 0xb0
 800102e:	2100      	movs	r1, #0
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f008 fb00 	bl	8009636 <memset>
    return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f002 fa19 	bl	800347c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 fcd7 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 ffa9 	bl	8001fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001052:	f000 ff87 	bl	8001f64 <MX_DMA_Init>
  MX_ADC1_Init();
 8001056:	f000 fd3d 	bl	8001ad4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800105a:	f000 fd8d 	bl	8001b78 <MX_I2C1_Init>
  MX_SPI1_Init();
 800105e:	f000 fdb9 	bl	8001bd4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001062:	f000 ff01 	bl	8001e68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001066:	f000 ff29 	bl	8001ebc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800106a:	f000 ff51 	bl	8001f10 <MX_USART6_UART_Init>
  MX_UART4_Init();
 800106e:	f000 fed1 	bl	8001e14 <MX_UART4_Init>
  MX_TIM2_Init();
 8001072:	f000 fde5 	bl	8001c40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001076:	f000 fe31 	bl	8001cdc <MX_TIM3_Init>
  MX_TIM4_Init();
 800107a:	f000 fe7d 	bl	8001d78 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 800107e:	2064      	movs	r0, #100	@ 0x64
 8001080:	f002 fa6e 	bl	8003560 <HAL_Delay>
  receive_data =E220_write_register(0x2, 0x64);
 8001084:	2164      	movs	r1, #100	@ 0x64
 8001086:	2002      	movs	r0, #2
 8001088:	f001 f968 	bl	800235c <E220_write_register>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b7b      	ldr	r3, [pc, #492]	@ (8001280 <main+0x240>)
 8001092:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001094:	2064      	movs	r0, #100	@ 0x64
 8001096:	f002 fa63 	bl	8003560 <HAL_Delay>

  HAL_Delay(100);
 800109a:	2064      	movs	r0, #100	@ 0x64
 800109c:	f002 fa60 	bl	8003560 <HAL_Delay>
  receive_data =E220_write_register(0x2, 0x64);
 80010a0:	2164      	movs	r1, #100	@ 0x64
 80010a2:	2002      	movs	r0, #2
 80010a4:	f001 f95a 	bl	800235c <E220_write_register>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b74      	ldr	r3, [pc, #464]	@ (8001280 <main+0x240>)
 80010ae:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 80010b0:	2064      	movs	r0, #100	@ 0x64
 80010b2:	f002 fa55 	bl	8003560 <HAL_Delay>

  receive_data =E220_write_register(0x3, 0x40);
 80010b6:	2140      	movs	r1, #64	@ 0x40
 80010b8:	2003      	movs	r0, #3
 80010ba:	f001 f94f 	bl	800235c <E220_write_register>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001280 <main+0x240>)
 80010c4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 80010c6:	2064      	movs	r0, #100	@ 0x64
 80010c8:	f002 fa4a 	bl	8003560 <HAL_Delay>
  receive_data =E220_write_register(0x4, 0x10); // ch
 80010cc:	2110      	movs	r1, #16
 80010ce:	2004      	movs	r0, #4
 80010d0:	f001 f944 	bl	800235c <E220_write_register>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b69      	ldr	r3, [pc, #420]	@ (8001280 <main+0x240>)
 80010da:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 80010dc:	2064      	movs	r0, #100	@ 0x64
 80010de:	f002 fa3f 	bl	8003560 <HAL_Delay>
  receive_data =E220_write_register(0x5, 0x40);//40
 80010e2:	2140      	movs	r1, #64	@ 0x40
 80010e4:	2005      	movs	r0, #5
 80010e6:	f001 f939 	bl	800235c <E220_write_register>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b64      	ldr	r3, [pc, #400]	@ (8001280 <main+0x240>)
 80010f0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 80010f2:	2064      	movs	r0, #100	@ 0x64
 80010f4:	f002 fa34 	bl	8003560 <HAL_Delay>
  receive_data =E220_write_register(0x6, 0x00);
 80010f8:	2100      	movs	r1, #0
 80010fa:	2006      	movs	r0, #6
 80010fc:	f001 f92e 	bl	800235c <E220_write_register>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b5e      	ldr	r3, [pc, #376]	@ (8001280 <main+0x240>)
 8001106:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001108:	2064      	movs	r0, #100	@ 0x64
 800110a:	f002 fa29 	bl	8003560 <HAL_Delay>
  receive_data =E220_write_register(0x7, 0x00);
 800110e:	2100      	movs	r1, #0
 8001110:	2007      	movs	r0, #7
 8001112:	f001 f923 	bl	800235c <E220_write_register>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b59      	ldr	r3, [pc, #356]	@ (8001280 <main+0x240>)
 800111c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 800111e:	2064      	movs	r0, #100	@ 0x64
 8001120:	f002 fa1e 	bl	8003560 <HAL_Delay>
  receive_data =E220_write_register(0, 0x06); // h 0x06
 8001124:	2106      	movs	r1, #6
 8001126:	2000      	movs	r0, #0
 8001128:	f001 f918 	bl	800235c <E220_write_register>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b53      	ldr	r3, [pc, #332]	@ (8001280 <main+0x240>)
 8001132:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	@ 0x64
 8001136:	f002 fa13 	bl	8003560 <HAL_Delay>

  receive_data =E220_write_register(0x1, 0x03); // low 0x03
 800113a:	2103      	movs	r1, #3
 800113c:	2001      	movs	r0, #1
 800113e:	f001 f90d 	bl	800235c <E220_write_register>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b4e      	ldr	r3, [pc, #312]	@ (8001280 <main+0x240>)
 8001148:	701a      	strb	r2, [r3, #0]
  HAL_Delay(200);
 800114a:	20c8      	movs	r0, #200	@ 0xc8
 800114c:	f002 fa08 	bl	8003560 <HAL_Delay>

  receive_data = E220_read_register(0);
 8001150:	2000      	movs	r0, #0
 8001152:	f001 f94b 	bl	80023ec <E220_read_register>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b49      	ldr	r3, [pc, #292]	@ (8001280 <main+0x240>)
 800115c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	@ 0x64
 8001160:	f002 f9fe 	bl	8003560 <HAL_Delay>
  receive_data = E220_read_register(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f001 f941 	bl	80023ec <E220_read_register>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b44      	ldr	r3, [pc, #272]	@ (8001280 <main+0x240>)
 8001170:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001172:	2064      	movs	r0, #100	@ 0x64
 8001174:	f002 f9f4 	bl	8003560 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);//m0
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	4841      	ldr	r0, [pc, #260]	@ (8001284 <main+0x244>)
 800117e:	f003 fd47 	bl	8004c10 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001182:	2064      	movs	r0, #100	@ 0x64
 8001184:	f002 f9ec 	bl	8003560 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET); //m1
 8001188:	2201      	movs	r2, #1
 800118a:	2102      	movs	r1, #2
 800118c:	483d      	ldr	r0, [pc, #244]	@ (8001284 <main+0x244>)
 800118e:	f003 fd3f 	bl	8004c10 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001192:	2064      	movs	r0, #100	@ 0x64
 8001194:	f002 f9e4 	bl	8003560 <HAL_Delay>

  lwgps_init(&gps);
 8001198:	483b      	ldr	r0, [pc, #236]	@ (8001288 <main+0x248>)
 800119a:	f7ff ff43 	bl	8001024 <lwgps_init>


  HAL_TIM_Base_Start_IT(&htim2);
 800119e:	483b      	ldr	r0, [pc, #236]	@ (800128c <main+0x24c>)
 80011a0:	f004 fd54 	bl	8005c4c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80011a4:	483a      	ldr	r0, [pc, #232]	@ (8001290 <main+0x250>)
 80011a6:	f004 fd51 	bl	8005c4c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80011aa:	483a      	ldr	r0, [pc, #232]	@ (8001294 <main+0x254>)
 80011ac:	f004 fd4e 	bl	8005c4c <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_IT(&hadc1);
 80011b0:	4839      	ldr	r0, [pc, #228]	@ (8001298 <main+0x258>)
 80011b2:	f002 fa3d 	bl	8003630 <HAL_ADC_Start_IT>

  //HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
  HAL_UART_Receive_DMA(&huart3, Lora_Control_Buffer, 72);
 80011b6:	2248      	movs	r2, #72	@ 0x48
 80011b8:	4938      	ldr	r1, [pc, #224]	@ (800129c <main+0x25c>)
 80011ba:	4839      	ldr	r0, [pc, #228]	@ (80012a0 <main+0x260>)
 80011bc:	f005 fade 	bl	800677c <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(Lora_Rx_Buffer[0]==2 && Lora_Rx_Buffer[47] == 0x31){
 80011c0:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <main+0x264>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	f040 8192 	bne.w	80014ee <main+0x4ae>
 80011ca:	4b36      	ldr	r3, [pc, #216]	@ (80012a4 <main+0x264>)
 80011cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80011d0:	2b31      	cmp	r3, #49	@ 0x31
 80011d2:	f040 818c 	bne.w	80014ee <main+0x4ae>

	  		  Sustainer.satsinview=Lora_Rx_Buffer[1];
 80011d6:	4b33      	ldr	r3, [pc, #204]	@ (80012a4 <main+0x264>)
 80011d8:	785a      	ldrb	r2, [r3, #1]
 80011da:	4b33      	ldr	r3, [pc, #204]	@ (80012a8 <main+0x268>)
 80011dc:	701a      	strb	r2, [r3, #0]

	  		  Sustainer_union_converter();
 80011de:	f001 fa75 	bl	80026cc <Sustainer_union_converter>
	  		  Sustainer.battery=Lora_Rx_Buffer[46];
 80011e2:	4b30      	ldr	r3, [pc, #192]	@ (80012a4 <main+0x264>)
 80011e4:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80011e8:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <main+0x268>)
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  		  Sustainer.mod=Lora_Rx_Buffer[70];
 80011ee:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <main+0x264>)
 80011f0:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80011f4:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <main+0x268>)
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	  		  Sustainer.communication=Lora_Rx_Buffer[48];
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <main+0x264>)
 80011fc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8001200:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <main+0x268>)
 8001202:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	  			 //EGU PART
	  			 EGU_ARIZA=Lora_Rx_Buffer[49];
 8001206:	4b27      	ldr	r3, [pc, #156]	@ (80012a4 <main+0x264>)
 8001208:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800120c:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <main+0x26c>)
 800120e:	701a      	strb	r2, [r3, #0]
	  			 EGU_AYRILMA_TESPIT=Lora_Rx_Buffer[50];
 8001210:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <main+0x264>)
 8001212:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8001216:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <main+0x270>)
 8001218:	701a      	strb	r2, [r3, #0]

	  			 float2unit8 f2u8_EGU_BATTERY;
	  			for(uint8_t i=0;i<4;i++)
 800121a:	2300      	movs	r3, #0
 800121c:	77fb      	strb	r3, [r7, #31]
 800121e:	e00e      	b.n	800123e <main+0x1fe>
	  			{
	  				f2u8_EGU_BATTERY.array[i]=Lora_Rx_Buffer[i+51];
 8001220:	7ffb      	ldrb	r3, [r7, #31]
 8001222:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	491e      	ldr	r1, [pc, #120]	@ (80012a4 <main+0x264>)
 800122a:	5c8a      	ldrb	r2, [r1, r2]
 800122c:	3318      	adds	r3, #24
 800122e:	f107 0108 	add.w	r1, r7, #8
 8001232:	440b      	add	r3, r1
 8001234:	f803 2c08 	strb.w	r2, [r3, #-8]
	  			for(uint8_t i=0;i<4;i++)
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	3301      	adds	r3, #1
 800123c:	77fb      	strb	r3, [r7, #31]
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d9ed      	bls.n	8001220 <main+0x1e0>
	  			}
	  			 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <main+0x274>)
 8001248:	6013      	str	r3, [r2, #0]

	  			 float2unit8 f2u8_EGU_ANGLE;
	  			for(uint8_t i=0;i<4;i++)
 800124a:	2300      	movs	r3, #0
 800124c:	77bb      	strb	r3, [r7, #30]
 800124e:	e00e      	b.n	800126e <main+0x22e>
	  			{
	  				f2u8_EGU_ANGLE.array[i]=Lora_Rx_Buffer[i+55];
 8001250:	7fbb      	ldrb	r3, [r7, #30]
 8001252:	f103 0237 	add.w	r2, r3, #55	@ 0x37
 8001256:	7fbb      	ldrb	r3, [r7, #30]
 8001258:	4912      	ldr	r1, [pc, #72]	@ (80012a4 <main+0x264>)
 800125a:	5c8a      	ldrb	r2, [r1, r2]
 800125c:	3318      	adds	r3, #24
 800125e:	f107 0108 	add.w	r1, r7, #8
 8001262:	440b      	add	r3, r1
 8001264:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  			for(uint8_t i=0;i<4;i++)
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	3301      	adds	r3, #1
 800126c:	77bb      	strb	r3, [r7, #30]
 800126e:	7fbb      	ldrb	r3, [r7, #30]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d9ed      	bls.n	8001250 <main+0x210>
	  			}
	  			  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <main+0x278>)
 8001278:	6013      	str	r3, [r2, #0]

	  			  float2unit8 f2u8_EGU_IRTIFA;
	  			for(uint8_t i=0;i<4;i++)
 800127a:	2300      	movs	r3, #0
 800127c:	777b      	strb	r3, [r7, #29]
 800127e:	e02c      	b.n	80012da <main+0x29a>
 8001280:	200008a0 	.word	0x200008a0
 8001284:	40020400 	.word	0x40020400
 8001288:	200007f0 	.word	0x200007f0
 800128c:	200002e8 	.word	0x200002e8
 8001290:	20000330 	.word	0x20000330
 8001294:	20000378 	.word	0x20000378
 8001298:	200001f4 	.word	0x200001f4
 800129c:	20000588 	.word	0x20000588
 80012a0:	20000450 	.word	0x20000450
 80012a4:	20000540 	.word	0x20000540
 80012a8:	200007b4 	.word	0x200007b4
 80012ac:	20000630 	.word	0x20000630
 80012b0:	20000631 	.word	0x20000631
 80012b4:	20000638 	.word	0x20000638
 80012b8:	20000640 	.word	0x20000640
	  			{
	  				f2u8_EGU_IRTIFA.array[i]=Lora_Rx_Buffer[i+59];
 80012bc:	7f7b      	ldrb	r3, [r7, #29]
 80012be:	f103 023b 	add.w	r2, r3, #59	@ 0x3b
 80012c2:	7f7b      	ldrb	r3, [r7, #29]
 80012c4:	49ae      	ldr	r1, [pc, #696]	@ (8001580 <main+0x540>)
 80012c6:	5c8a      	ldrb	r2, [r1, r2]
 80012c8:	3318      	adds	r3, #24
 80012ca:	f107 0108 	add.w	r1, r7, #8
 80012ce:	440b      	add	r3, r1
 80012d0:	f803 2c10 	strb.w	r2, [r3, #-16]
	  			for(uint8_t i=0;i<4;i++)
 80012d4:	7f7b      	ldrb	r3, [r7, #29]
 80012d6:	3301      	adds	r3, #1
 80012d8:	777b      	strb	r3, [r7, #29]
 80012da:	7f7b      	ldrb	r3, [r7, #29]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d9ed      	bls.n	80012bc <main+0x27c>
	  			}
	  		  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4aa8      	ldr	r2, [pc, #672]	@ (8001584 <main+0x544>)
 80012e4:	6013      	str	r3, [r2, #0]

	  		  EGU_FITIL=Lora_Rx_Buffer[50];
 80012e6:	4ba6      	ldr	r3, [pc, #664]	@ (8001580 <main+0x540>)
 80012e8:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80012ec:	4ba6      	ldr	r3, [pc, #664]	@ (8001588 <main+0x548>)
 80012ee:	701a      	strb	r2, [r3, #0]
	  //	/*  EGU_UCUS_BASLADIMI*/sustv4_mod=Lora_Rx_Buffer[63];
	  		  EGU_STAGE_DURUM=Lora_Rx_Buffer[64];
 80012f0:	4ba3      	ldr	r3, [pc, #652]	@ (8001580 <main+0x540>)
 80012f2:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80012f6:	4ba5      	ldr	r3, [pc, #660]	@ (800158c <main+0x54c>)
 80012f8:	701a      	strb	r2, [r3, #0]
	  		  EGU_MOTOR_ATESLEME_TALEP_IN=Lora_Rx_Buffer[65];
 80012fa:	4ba1      	ldr	r3, [pc, #644]	@ (8001580 <main+0x540>)
 80012fc:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001300:	4ba3      	ldr	r3, [pc, #652]	@ (8001590 <main+0x550>)
 8001302:	701a      	strb	r2, [r3, #0]
	  		  float2unit8 f2u8_altitude;
	  		  f2u8_altitude.array[0] = Lora_Rx_Buffer[66];
 8001304:	4b9e      	ldr	r3, [pc, #632]	@ (8001580 <main+0x540>)
 8001306:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800130a:	733b      	strb	r3, [r7, #12]
	  		  f2u8_altitude.array[1] = Lora_Rx_Buffer[67];
 800130c:	4b9c      	ldr	r3, [pc, #624]	@ (8001580 <main+0x540>)
 800130e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001312:	737b      	strb	r3, [r7, #13]
	  		  f2u8_altitude.array[2] = Lora_Rx_Buffer[68];
 8001314:	4b9a      	ldr	r3, [pc, #616]	@ (8001580 <main+0x540>)
 8001316:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800131a:	73bb      	strb	r3, [r7, #14]
	  		  f2u8_altitude.array[3] = Lora_Rx_Buffer[69];
 800131c:	4b98      	ldr	r3, [pc, #608]	@ (8001580 <main+0x540>)
 800131e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001322:	73fb      	strb	r3, [r7, #15]
	  		  Sustainer.maxAltitude=f2u8_altitude.fVal;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4a9b      	ldr	r2, [pc, #620]	@ (8001594 <main+0x554>)
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30



				sprintf(s_altitude,"%4.3f",Sustainer.altitude);
 800132a:	4b9a      	ldr	r3, [pc, #616]	@ (8001594 <main+0x554>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f92a 	bl	8000588 <__aeabi_f2d>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4997      	ldr	r1, [pc, #604]	@ (8001598 <main+0x558>)
 800133a:	4898      	ldr	r0, [pc, #608]	@ (800159c <main+0x55c>)
 800133c:	f008 f918 	bl	8009570 <siprintf>
				sprintf(s_temperature,"%2.2f",Sustainer.temperature);
 8001340:	4b94      	ldr	r3, [pc, #592]	@ (8001594 <main+0x554>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f91f 	bl	8000588 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4994      	ldr	r1, [pc, #592]	@ (80015a0 <main+0x560>)
 8001350:	4894      	ldr	r0, [pc, #592]	@ (80015a4 <main+0x564>)
 8001352:	f008 f90d 	bl	8009570 <siprintf>
				sprintf(s_speed,"%2.2f",Sustainer.speed);
 8001356:	4b8f      	ldr	r3, [pc, #572]	@ (8001594 <main+0x554>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f914 	bl	8000588 <__aeabi_f2d>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	498e      	ldr	r1, [pc, #568]	@ (80015a0 <main+0x560>)
 8001366:	4890      	ldr	r0, [pc, #576]	@ (80015a8 <main+0x568>)
 8001368:	f008 f902 	bl	8009570 <siprintf>
				sprintf(s_roll,"%2.2f",Sustainer.normal);
 800136c:	4b89      	ldr	r3, [pc, #548]	@ (8001594 <main+0x554>)
 800136e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f909 	bl	8000588 <__aeabi_f2d>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4989      	ldr	r1, [pc, #548]	@ (80015a0 <main+0x560>)
 800137c:	488b      	ldr	r0, [pc, #556]	@ (80015ac <main+0x56c>)
 800137e:	f008 f8f7 	bl	8009570 <siprintf>
				sprintf(s_pitch,"%2.2f",Sustainer.pitch);
 8001382:	4b84      	ldr	r3, [pc, #528]	@ (8001594 <main+0x554>)
 8001384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8fe 	bl	8000588 <__aeabi_f2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4983      	ldr	r1, [pc, #524]	@ (80015a0 <main+0x560>)
 8001392:	4887      	ldr	r0, [pc, #540]	@ (80015b0 <main+0x570>)
 8001394:	f008 f8ec 	bl	8009570 <siprintf>
				sprintf(s_latitude,"%2.6f",Sustainer.gpslatitude);
 8001398:	4b7e      	ldr	r3, [pc, #504]	@ (8001594 <main+0x554>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8f3 	bl	8000588 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4983      	ldr	r1, [pc, #524]	@ (80015b4 <main+0x574>)
 80013a8:	4883      	ldr	r0, [pc, #524]	@ (80015b8 <main+0x578>)
 80013aa:	f008 f8e1 	bl	8009570 <siprintf>
				sprintf(s_longitude,"%2.6f",Sustainer.gpslongitude);
 80013ae:	4b79      	ldr	r3, [pc, #484]	@ (8001594 <main+0x554>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8e8 	bl	8000588 <__aeabi_f2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	497d      	ldr	r1, [pc, #500]	@ (80015b4 <main+0x574>)
 80013be:	487f      	ldr	r0, [pc, #508]	@ (80015bc <main+0x57c>)
 80013c0:	f008 f8d6 	bl	8009570 <siprintf>
				sprintf(s_bat,"%2d",Sustainer.battery);
 80013c4:	4b73      	ldr	r3, [pc, #460]	@ (8001594 <main+0x554>)
 80013c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80013ca:	461a      	mov	r2, r3
 80013cc:	497c      	ldr	r1, [pc, #496]	@ (80015c0 <main+0x580>)
 80013ce:	487d      	ldr	r0, [pc, #500]	@ (80015c4 <main+0x584>)
 80013d0:	f008 f8ce 	bl	8009570 <siprintf>
				sprintf(s_sats,"%2d",Sustainer.satsinview);
 80013d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001594 <main+0x554>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4979      	ldr	r1, [pc, #484]	@ (80015c0 <main+0x580>)
 80013dc:	487a      	ldr	r0, [pc, #488]	@ (80015c8 <main+0x588>)
 80013de:	f008 f8c7 	bl	8009570 <siprintf>
				sprintf(s_comm,"%2d",Sustainer.communication);
 80013e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001594 <main+0x554>)
 80013e4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80013e8:	461a      	mov	r2, r3
 80013ea:	4975      	ldr	r1, [pc, #468]	@ (80015c0 <main+0x580>)
 80013ec:	4877      	ldr	r0, [pc, #476]	@ (80015cc <main+0x58c>)
 80013ee:	f008 f8bf 	bl	8009570 <siprintf>
				sprintf(s_comm,"%2d",Sustainer.communication);
 80013f2:	4b68      	ldr	r3, [pc, #416]	@ (8001594 <main+0x554>)
 80013f4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80013f8:	461a      	mov	r2, r3
 80013fa:	4971      	ldr	r1, [pc, #452]	@ (80015c0 <main+0x580>)
 80013fc:	4873      	ldr	r0, [pc, #460]	@ (80015cc <main+0x58c>)
 80013fe:	f008 f8b7 	bl	8009570 <siprintf>
				//sprintf(s_dist,"%4.2f",s_distance);

				sprintf(e_altitude,"%4.2f",EGU_IRTIFA);
 8001402:	4b60      	ldr	r3, [pc, #384]	@ (8001584 <main+0x544>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8be 	bl	8000588 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	496f      	ldr	r1, [pc, #444]	@ (80015d0 <main+0x590>)
 8001412:	4870      	ldr	r0, [pc, #448]	@ (80015d4 <main+0x594>)
 8001414:	f008 f8ac 	bl	8009570 <siprintf>
				sprintf(e_angle,"%2.2f",EGU_ANGLE);
 8001418:	4b6f      	ldr	r3, [pc, #444]	@ (80015d8 <main+0x598>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f8b3 	bl	8000588 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	495e      	ldr	r1, [pc, #376]	@ (80015a0 <main+0x560>)
 8001428:	486c      	ldr	r0, [pc, #432]	@ (80015dc <main+0x59c>)
 800142a:	f008 f8a1 	bl	8009570 <siprintf>
				sprintf(e_bat,"%2d",EGU_BATTERY);
 800142e:	4b6c      	ldr	r3, [pc, #432]	@ (80015e0 <main+0x5a0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f8a8 	bl	8000588 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4960      	ldr	r1, [pc, #384]	@ (80015c0 <main+0x580>)
 800143e:	4869      	ldr	r0, [pc, #420]	@ (80015e4 <main+0x5a4>)
 8001440:	f008 f896 	bl	8009570 <siprintf>
				sprintf(e_flight,"%d",EGU_UCUS_BASLADIMI);
 8001444:	4b68      	ldr	r3, [pc, #416]	@ (80015e8 <main+0x5a8>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4968      	ldr	r1, [pc, #416]	@ (80015ec <main+0x5ac>)
 800144c:	4868      	ldr	r0, [pc, #416]	@ (80015f0 <main+0x5b0>)
 800144e:	f008 f88f 	bl	8009570 <siprintf>
				sprintf(e_stage,"%d",EGU_AYRILMA_TESPIT);
 8001452:	4b68      	ldr	r3, [pc, #416]	@ (80015f4 <main+0x5b4>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4964      	ldr	r1, [pc, #400]	@ (80015ec <main+0x5ac>)
 800145a:	4867      	ldr	r0, [pc, #412]	@ (80015f8 <main+0x5b8>)
 800145c:	f008 f888 	bl	8009570 <siprintf>
				sprintf(e_fitil,"%d",EGU_FITIL);
 8001460:	4b49      	ldr	r3, [pc, #292]	@ (8001588 <main+0x548>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4961      	ldr	r1, [pc, #388]	@ (80015ec <main+0x5ac>)
 8001468:	4864      	ldr	r0, [pc, #400]	@ (80015fc <main+0x5bc>)
 800146a:	f008 f881 	bl	8009570 <siprintf>
				// Nextion_SendFloatToTextbox("s1", Sustainer.altitude);
				 NEXTION_SendString("s1", s_altitude);
 800146e:	494b      	ldr	r1, [pc, #300]	@ (800159c <main+0x55c>)
 8001470:	4863      	ldr	r0, [pc, #396]	@ (8001600 <main+0x5c0>)
 8001472:	f000 ffeb 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("s2", s_temperature);
 8001476:	494b      	ldr	r1, [pc, #300]	@ (80015a4 <main+0x564>)
 8001478:	4862      	ldr	r0, [pc, #392]	@ (8001604 <main+0x5c4>)
 800147a:	f000 ffe7 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("s3", s_speed);
 800147e:	494a      	ldr	r1, [pc, #296]	@ (80015a8 <main+0x568>)
 8001480:	4861      	ldr	r0, [pc, #388]	@ (8001608 <main+0x5c8>)
 8001482:	f000 ffe3 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("s4", s_roll);
 8001486:	4949      	ldr	r1, [pc, #292]	@ (80015ac <main+0x56c>)
 8001488:	4860      	ldr	r0, [pc, #384]	@ (800160c <main+0x5cc>)
 800148a:	f000 ffdf 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("s5", s_pitch);
 800148e:	4948      	ldr	r1, [pc, #288]	@ (80015b0 <main+0x570>)
 8001490:	485f      	ldr	r0, [pc, #380]	@ (8001610 <main+0x5d0>)
 8001492:	f000 ffdb 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("s6", s_sats);
 8001496:	494c      	ldr	r1, [pc, #304]	@ (80015c8 <main+0x588>)
 8001498:	485e      	ldr	r0, [pc, #376]	@ (8001614 <main+0x5d4>)
 800149a:	f000 ffd7 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("s7", s_latitude);
 800149e:	4946      	ldr	r1, [pc, #280]	@ (80015b8 <main+0x578>)
 80014a0:	485d      	ldr	r0, [pc, #372]	@ (8001618 <main+0x5d8>)
 80014a2:	f000 ffd3 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("s8", s_longitude);
 80014a6:	4945      	ldr	r1, [pc, #276]	@ (80015bc <main+0x57c>)
 80014a8:	485c      	ldr	r0, [pc, #368]	@ (800161c <main+0x5dc>)
 80014aa:	f000 ffcf 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("s9", s_bat);
 80014ae:	4945      	ldr	r1, [pc, #276]	@ (80015c4 <main+0x584>)
 80014b0:	485b      	ldr	r0, [pc, #364]	@ (8001620 <main+0x5e0>)
 80014b2:	f000 ffcb 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("t57", s_comm);
 80014b6:	4945      	ldr	r1, [pc, #276]	@ (80015cc <main+0x58c>)
 80014b8:	485a      	ldr	r0, [pc, #360]	@ (8001624 <main+0x5e4>)
 80014ba:	f000 ffc7 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("t", s_dist);
 80014be:	495a      	ldr	r1, [pc, #360]	@ (8001628 <main+0x5e8>)
 80014c0:	485a      	ldr	r0, [pc, #360]	@ (800162c <main+0x5ec>)
 80014c2:	f000 ffc3 	bl	800244c <NEXTION_SendString>


				 NEXTION_SendString("m1", e_altitude);
 80014c6:	4943      	ldr	r1, [pc, #268]	@ (80015d4 <main+0x594>)
 80014c8:	4859      	ldr	r0, [pc, #356]	@ (8001630 <main+0x5f0>)
 80014ca:	f000 ffbf 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("m3", e_angle);
 80014ce:	4943      	ldr	r1, [pc, #268]	@ (80015dc <main+0x59c>)
 80014d0:	4858      	ldr	r0, [pc, #352]	@ (8001634 <main+0x5f4>)
 80014d2:	f000 ffbb 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("m2", e_bat);
 80014d6:	4943      	ldr	r1, [pc, #268]	@ (80015e4 <main+0x5a4>)
 80014d8:	4857      	ldr	r0, [pc, #348]	@ (8001638 <main+0x5f8>)
 80014da:	f000 ffb7 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("m4", e_flight);
 80014de:	4944      	ldr	r1, [pc, #272]	@ (80015f0 <main+0x5b0>)
 80014e0:	4856      	ldr	r0, [pc, #344]	@ (800163c <main+0x5fc>)
 80014e2:	f000 ffb3 	bl	800244c <NEXTION_SendString>
				 NEXTION_SendString("m5", e_stage);
 80014e6:	4944      	ldr	r1, [pc, #272]	@ (80015f8 <main+0x5b8>)
 80014e8:	4855      	ldr	r0, [pc, #340]	@ (8001640 <main+0x600>)
 80014ea:	f000 ffaf 	bl	800244c <NEXTION_SendString>

	  }



	  if(Lora_Rx_Buffer[0]==1 && Lora_Rx_Buffer[47]==0x32){
 80014ee:	4b24      	ldr	r3, [pc, #144]	@ (8001580 <main+0x540>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	f040 8131 	bne.w	800175a <main+0x71a>
 80014f8:	4b21      	ldr	r3, [pc, #132]	@ (8001580 <main+0x540>)
 80014fa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80014fe:	2b32      	cmp	r3, #50	@ 0x32
 8001500:	f040 812b 	bne.w	800175a <main+0x71a>

	  		  Booster.satsinview=Lora_Rx_Buffer[1];
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <main+0x540>)
 8001506:	785a      	ldrb	r2, [r3, #1]
 8001508:	4b4e      	ldr	r3, [pc, #312]	@ (8001644 <main+0x604>)
 800150a:	701a      	strb	r2, [r3, #0]

	      	  Booster_union_converter();
 800150c:	f000 ffc4 	bl	8002498 <Booster_union_converter>
	  		  Booster.battery=Lora_Rx_Buffer[46];
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <main+0x540>)
 8001512:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8001516:	4b4b      	ldr	r3, [pc, #300]	@ (8001644 <main+0x604>)
 8001518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  		  Booster.mod=Lora_Rx_Buffer[70];
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <main+0x540>)
 800151e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001522:	4b48      	ldr	r3, [pc, #288]	@ (8001644 <main+0x604>)
 8001524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	  		  Booster.communication=Lora_Rx_Buffer[48];
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <main+0x540>)
 800152a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800152e:	4b45      	ldr	r3, [pc, #276]	@ (8001644 <main+0x604>)
 8001530:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	  		  float2unit8 f2u8_booster;
	  		  f2u8_booster.array[0] = Lora_Rx_Buffer[66];
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <main+0x540>)
 8001536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800153a:	723b      	strb	r3, [r7, #8]
	  		  f2u8_booster.array[1] = Lora_Rx_Buffer[67];
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <main+0x540>)
 800153e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001542:	727b      	strb	r3, [r7, #9]
	  		  f2u8_booster.array[2] = Lora_Rx_Buffer[68];
 8001544:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <main+0x540>)
 8001546:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800154a:	72bb      	strb	r3, [r7, #10]
	  		  f2u8_booster.array[3] = Lora_Rx_Buffer[69];
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <main+0x540>)
 800154e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001552:	72fb      	strb	r3, [r7, #11]
	  		  Booster.maxAltitude = f2u8_booster.fVal;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4a3b      	ldr	r2, [pc, #236]	@ (8001644 <main+0x604>)
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30


	  		sprintf(b_altitude,"%4.3f",Booster.altitude);
 800155a:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <main+0x604>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f812 	bl	8000588 <__aeabi_f2d>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	490b      	ldr	r1, [pc, #44]	@ (8001598 <main+0x558>)
 800156a:	4837      	ldr	r0, [pc, #220]	@ (8001648 <main+0x608>)
 800156c:	f008 f800 	bl	8009570 <siprintf>
			sprintf(b_temperature,"%2.2f",Booster.temperature);
 8001570:	4b34      	ldr	r3, [pc, #208]	@ (8001644 <main+0x604>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f807 	bl	8000588 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	e066      	b.n	800164c <main+0x60c>
 800157e:	bf00      	nop
 8001580:	20000540 	.word	0x20000540
 8001584:	2000063c 	.word	0x2000063c
 8001588:	20000635 	.word	0x20000635
 800158c:	20000633 	.word	0x20000633
 8001590:	20000632 	.word	0x20000632
 8001594:	200007b4 	.word	0x200007b4
 8001598:	0800c080 	.word	0x0800c080
 800159c:	20000698 	.word	0x20000698
 80015a0:	0800c088 	.word	0x0800c088
 80015a4:	200006a0 	.word	0x200006a0
 80015a8:	200006a8 	.word	0x200006a8
 80015ac:	200006b0 	.word	0x200006b0
 80015b0:	200006b8 	.word	0x200006b8
 80015b4:	0800c090 	.word	0x0800c090
 80015b8:	200006c0 	.word	0x200006c0
 80015bc:	200006cc 	.word	0x200006cc
 80015c0:	0800c098 	.word	0x0800c098
 80015c4:	200006d8 	.word	0x200006d8
 80015c8:	200006dc 	.word	0x200006dc
 80015cc:	200006e0 	.word	0x200006e0
 80015d0:	0800c09c 	.word	0x0800c09c
 80015d4:	2000071c 	.word	0x2000071c
 80015d8:	20000640 	.word	0x20000640
 80015dc:	20000728 	.word	0x20000728
 80015e0:	20000638 	.word	0x20000638
 80015e4:	20000724 	.word	0x20000724
 80015e8:	20000634 	.word	0x20000634
 80015ec:	0800c0a4 	.word	0x0800c0a4
 80015f0:	20000730 	.word	0x20000730
 80015f4:	20000631 	.word	0x20000631
 80015f8:	20000734 	.word	0x20000734
 80015fc:	20000738 	.word	0x20000738
 8001600:	0800c0a8 	.word	0x0800c0a8
 8001604:	0800c0ac 	.word	0x0800c0ac
 8001608:	0800c0b0 	.word	0x0800c0b0
 800160c:	0800c0b4 	.word	0x0800c0b4
 8001610:	0800c0b8 	.word	0x0800c0b8
 8001614:	0800c0bc 	.word	0x0800c0bc
 8001618:	0800c0c0 	.word	0x0800c0c0
 800161c:	0800c0c4 	.word	0x0800c0c4
 8001620:	0800c0c8 	.word	0x0800c0c8
 8001624:	0800c0cc 	.word	0x0800c0cc
 8001628:	200006e4 	.word	0x200006e4
 800162c:	0800c0d0 	.word	0x0800c0d0
 8001630:	0800c0d4 	.word	0x0800c0d4
 8001634:	0800c0d8 	.word	0x0800c0d8
 8001638:	0800c0dc 	.word	0x0800c0dc
 800163c:	0800c0e0 	.word	0x0800c0e0
 8001640:	0800c0e4 	.word	0x0800c0e4
 8001644:	2000077c 	.word	0x2000077c
 8001648:	20000644 	.word	0x20000644
 800164c:	460b      	mov	r3, r1
 800164e:	49b4      	ldr	r1, [pc, #720]	@ (8001920 <main+0x8e0>)
 8001650:	48b4      	ldr	r0, [pc, #720]	@ (8001924 <main+0x8e4>)
 8001652:	f007 ff8d 	bl	8009570 <siprintf>
			sprintf(b_speed,"%2.2f",Booster.speed);
 8001656:	4bb4      	ldr	r3, [pc, #720]	@ (8001928 <main+0x8e8>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff94 	bl	8000588 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	49ae      	ldr	r1, [pc, #696]	@ (8001920 <main+0x8e0>)
 8001666:	48b1      	ldr	r0, [pc, #708]	@ (800192c <main+0x8ec>)
 8001668:	f007 ff82 	bl	8009570 <siprintf>
			sprintf(b_roll,"%2.2f",Booster.normal);
 800166c:	4bae      	ldr	r3, [pc, #696]	@ (8001928 <main+0x8e8>)
 800166e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff89 	bl	8000588 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	49a9      	ldr	r1, [pc, #676]	@ (8001920 <main+0x8e0>)
 800167c:	48ac      	ldr	r0, [pc, #688]	@ (8001930 <main+0x8f0>)
 800167e:	f007 ff77 	bl	8009570 <siprintf>
			sprintf(b_pitch,"%2.2f",Booster.pitch);
 8001682:	4ba9      	ldr	r3, [pc, #676]	@ (8001928 <main+0x8e8>)
 8001684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff7e 	bl	8000588 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	49a3      	ldr	r1, [pc, #652]	@ (8001920 <main+0x8e0>)
 8001692:	48a8      	ldr	r0, [pc, #672]	@ (8001934 <main+0x8f4>)
 8001694:	f007 ff6c 	bl	8009570 <siprintf>
			sprintf(b_latitude,"%2.6f",Booster.gpslatitude);
 8001698:	4ba3      	ldr	r3, [pc, #652]	@ (8001928 <main+0x8e8>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff73 	bl	8000588 <__aeabi_f2d>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	49a4      	ldr	r1, [pc, #656]	@ (8001938 <main+0x8f8>)
 80016a8:	48a4      	ldr	r0, [pc, #656]	@ (800193c <main+0x8fc>)
 80016aa:	f007 ff61 	bl	8009570 <siprintf>
			sprintf(b_longitude,"%2.6f",Booster.gpslongitude);
 80016ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001928 <main+0x8e8>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff68 	bl	8000588 <__aeabi_f2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	499e      	ldr	r1, [pc, #632]	@ (8001938 <main+0x8f8>)
 80016be:	48a0      	ldr	r0, [pc, #640]	@ (8001940 <main+0x900>)
 80016c0:	f007 ff56 	bl	8009570 <siprintf>
			sprintf(b_bat,"%2d",Booster.battery);
 80016c4:	4b98      	ldr	r3, [pc, #608]	@ (8001928 <main+0x8e8>)
 80016c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016ca:	461a      	mov	r2, r3
 80016cc:	499d      	ldr	r1, [pc, #628]	@ (8001944 <main+0x904>)
 80016ce:	489e      	ldr	r0, [pc, #632]	@ (8001948 <main+0x908>)
 80016d0:	f007 ff4e 	bl	8009570 <siprintf>
			sprintf(b_sats,"%2d",Booster.satsinview);
 80016d4:	4b94      	ldr	r3, [pc, #592]	@ (8001928 <main+0x8e8>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	499a      	ldr	r1, [pc, #616]	@ (8001944 <main+0x904>)
 80016dc:	489b      	ldr	r0, [pc, #620]	@ (800194c <main+0x90c>)
 80016de:	f007 ff47 	bl	8009570 <siprintf>
			sprintf(b_comm,"%2d",Booster.communication);
 80016e2:	4b91      	ldr	r3, [pc, #580]	@ (8001928 <main+0x8e8>)
 80016e4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80016e8:	461a      	mov	r2, r3
 80016ea:	4996      	ldr	r1, [pc, #600]	@ (8001944 <main+0x904>)
 80016ec:	4898      	ldr	r0, [pc, #608]	@ (8001950 <main+0x910>)
 80016ee:	f007 ff3f 	bl	8009570 <siprintf>
		//	sprintf(b_dist,"%4.2f",bs_distance);

			NEXTION_SendString("bs1", b_altitude);
 80016f2:	4998      	ldr	r1, [pc, #608]	@ (8001954 <main+0x914>)
 80016f4:	4898      	ldr	r0, [pc, #608]	@ (8001958 <main+0x918>)
 80016f6:	f000 fea9 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("bs2", b_temperature);
 80016fa:	498a      	ldr	r1, [pc, #552]	@ (8001924 <main+0x8e4>)
 80016fc:	4897      	ldr	r0, [pc, #604]	@ (800195c <main+0x91c>)
 80016fe:	f000 fea5 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("bs3", b_speed);
 8001702:	498a      	ldr	r1, [pc, #552]	@ (800192c <main+0x8ec>)
 8001704:	4896      	ldr	r0, [pc, #600]	@ (8001960 <main+0x920>)
 8001706:	f000 fea1 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("bs4", b_roll);
 800170a:	4989      	ldr	r1, [pc, #548]	@ (8001930 <main+0x8f0>)
 800170c:	4895      	ldr	r0, [pc, #596]	@ (8001964 <main+0x924>)
 800170e:	f000 fe9d 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("bs5", b_pitch);
 8001712:	4988      	ldr	r1, [pc, #544]	@ (8001934 <main+0x8f4>)
 8001714:	4894      	ldr	r0, [pc, #592]	@ (8001968 <main+0x928>)
 8001716:	f000 fe99 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("bs6", b_sats);
 800171a:	498c      	ldr	r1, [pc, #560]	@ (800194c <main+0x90c>)
 800171c:	4893      	ldr	r0, [pc, #588]	@ (800196c <main+0x92c>)
 800171e:	f000 fe95 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("bs7", b_latitude);
 8001722:	4986      	ldr	r1, [pc, #536]	@ (800193c <main+0x8fc>)
 8001724:	4892      	ldr	r0, [pc, #584]	@ (8001970 <main+0x930>)
 8001726:	f000 fe91 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("bs8", b_longitude);
 800172a:	4985      	ldr	r1, [pc, #532]	@ (8001940 <main+0x900>)
 800172c:	4891      	ldr	r0, [pc, #580]	@ (8001974 <main+0x934>)
 800172e:	f000 fe8d 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("bs9", b_bat);
 8001732:	4985      	ldr	r1, [pc, #532]	@ (8001948 <main+0x908>)
 8001734:	4890      	ldr	r0, [pc, #576]	@ (8001978 <main+0x938>)
 8001736:	f000 fe89 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("t56", b_comm);
 800173a:	4985      	ldr	r1, [pc, #532]	@ (8001950 <main+0x910>)
 800173c:	488f      	ldr	r0, [pc, #572]	@ (800197c <main+0x93c>)
 800173e:	f000 fe85 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("t17", b_dist);
 8001742:	498f      	ldr	r1, [pc, #572]	@ (8001980 <main+0x940>)
 8001744:	488f      	ldr	r0, [pc, #572]	@ (8001984 <main+0x944>)
 8001746:	f000 fe81 	bl	800244c <NEXTION_SendString>

			NEXTION_SendString("m7", e_engine_request);
 800174a:	498f      	ldr	r1, [pc, #572]	@ (8001988 <main+0x948>)
 800174c:	488f      	ldr	r0, [pc, #572]	@ (800198c <main+0x94c>)
 800174e:	f000 fe7d 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("t59", e_fitil);
 8001752:	498f      	ldr	r1, [pc, #572]	@ (8001990 <main+0x950>)
 8001754:	488f      	ldr	r0, [pc, #572]	@ (8001994 <main+0x954>)
 8001756:	f000 fe79 	bl	800244c <NEXTION_SendString>
//			HAL_UART_Transmit(&huart3,send_data ,4, 100);
//			HAL_UART_Receive(&huart3, receive_data, 4, 100);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);

	  }
	  if(Lora_Rx_Buffer[0]==3 && Lora_Rx_Buffer[47]==0x33)
 800175a:	4b8f      	ldr	r3, [pc, #572]	@ (8001998 <main+0x958>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d164      	bne.n	800182c <main+0x7ec>
 8001762:	4b8d      	ldr	r3, [pc, #564]	@ (8001998 <main+0x958>)
 8001764:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001768:	2b33      	cmp	r3, #51	@ 0x33
 800176a:	d15f      	bne.n	800182c <main+0x7ec>
		  {

		  Payload.satsinview=Lora_Rx_Buffer[1];
 800176c:	4b8a      	ldr	r3, [pc, #552]	@ (8001998 <main+0x958>)
 800176e:	785a      	ldrb	r2, [r3, #1]
 8001770:	4b8a      	ldr	r3, [pc, #552]	@ (800199c <main+0x95c>)
 8001772:	701a      	strb	r2, [r3, #0]

		  Payload_union_converter();
 8001774:	f001 f916 	bl	80029a4 <Payload_union_converter>

		  Payload.battery=Lora_Rx_Buffer[46];
 8001778:	4b87      	ldr	r3, [pc, #540]	@ (8001998 <main+0x958>)
 800177a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800177e:	4b87      	ldr	r3, [pc, #540]	@ (800199c <main+0x95c>)
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		  Payload.mod=Lora_Rx_Buffer[70];
 8001784:	4b84      	ldr	r3, [pc, #528]	@ (8001998 <main+0x958>)
 8001786:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800178a:	4b84      	ldr	r3, [pc, #528]	@ (800199c <main+0x95c>)
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		  Payload.communication=Lora_Rx_Buffer[48];
 8001790:	4b81      	ldr	r3, [pc, #516]	@ (8001998 <main+0x958>)
 8001792:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8001796:	4b81      	ldr	r3, [pc, #516]	@ (800199c <main+0x95c>)
 8001798:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	        // payload ekran

			sprintf(p_altitude,"%4.2f",Payload.altitude);
 800179c:	4b7f      	ldr	r3, [pc, #508]	@ (800199c <main+0x95c>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fef1 	bl	8000588 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	497d      	ldr	r1, [pc, #500]	@ (80019a0 <main+0x960>)
 80017ac:	487d      	ldr	r0, [pc, #500]	@ (80019a4 <main+0x964>)
 80017ae:	f007 fedf 	bl	8009570 <siprintf>
			sprintf(p_latitude,"%2.6f",Payload.gpslatitude);
 80017b2:	4b7a      	ldr	r3, [pc, #488]	@ (800199c <main+0x95c>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fee6 	bl	8000588 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	495d      	ldr	r1, [pc, #372]	@ (8001938 <main+0x8f8>)
 80017c2:	4879      	ldr	r0, [pc, #484]	@ (80019a8 <main+0x968>)
 80017c4:	f007 fed4 	bl	8009570 <siprintf>
			sprintf(p_gpsaltitude,"%4.2f",Payload.gpsaltitude);
 80017c8:	4b74      	ldr	r3, [pc, #464]	@ (800199c <main+0x95c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fedb 	bl	8000588 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4972      	ldr	r1, [pc, #456]	@ (80019a0 <main+0x960>)
 80017d8:	4874      	ldr	r0, [pc, #464]	@ (80019ac <main+0x96c>)
 80017da:	f007 fec9 	bl	8009570 <siprintf>
			sprintf(p_longitude,"%2.6f",Payload.gpslongitude);
 80017de:	4b6f      	ldr	r3, [pc, #444]	@ (800199c <main+0x95c>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fed0 	bl	8000588 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4952      	ldr	r1, [pc, #328]	@ (8001938 <main+0x8f8>)
 80017ee:	4870      	ldr	r0, [pc, #448]	@ (80019b0 <main+0x970>)
 80017f0:	f007 febe 	bl	8009570 <siprintf>
			sprintf(p_bat,"%2d",Payload.battery);
 80017f4:	4b69      	ldr	r3, [pc, #420]	@ (800199c <main+0x95c>)
 80017f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80017fa:	461a      	mov	r2, r3
 80017fc:	4951      	ldr	r1, [pc, #324]	@ (8001944 <main+0x904>)
 80017fe:	486d      	ldr	r0, [pc, #436]	@ (80019b4 <main+0x974>)
 8001800:	f007 feb6 	bl	8009570 <siprintf>

			NEXTION_SendString("vp1", p_latitude);
 8001804:	4968      	ldr	r1, [pc, #416]	@ (80019a8 <main+0x968>)
 8001806:	486c      	ldr	r0, [pc, #432]	@ (80019b8 <main+0x978>)
 8001808:	f000 fe20 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("vp2", p_longitude);
 800180c:	4968      	ldr	r1, [pc, #416]	@ (80019b0 <main+0x970>)
 800180e:	486b      	ldr	r0, [pc, #428]	@ (80019bc <main+0x97c>)
 8001810:	f000 fe1c 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("vp3", p_gpsaltitude);
 8001814:	4965      	ldr	r1, [pc, #404]	@ (80019ac <main+0x96c>)
 8001816:	486a      	ldr	r0, [pc, #424]	@ (80019c0 <main+0x980>)
 8001818:	f000 fe18 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("vp4", p_altitude);
 800181c:	4961      	ldr	r1, [pc, #388]	@ (80019a4 <main+0x964>)
 800181e:	4869      	ldr	r0, [pc, #420]	@ (80019c4 <main+0x984>)
 8001820:	f000 fe14 	bl	800244c <NEXTION_SendString>
			NEXTION_SendString("vp5", p_bat);
 8001824:	4963      	ldr	r1, [pc, #396]	@ (80019b4 <main+0x974>)
 8001826:	4868      	ldr	r0, [pc, #416]	@ (80019c8 <main+0x988>)
 8001828:	f000 fe10 	bl	800244c <NEXTION_SendString>





	  if(flag_adc_cnt >=10 && flag_adc ==1)
 800182c:	4b67      	ldr	r3, [pc, #412]	@ (80019cc <main+0x98c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b09      	cmp	r3, #9
 8001832:	f67f acc5 	bls.w	80011c0 <main+0x180>
 8001836:	4b66      	ldr	r3, [pc, #408]	@ (80019d0 <main+0x990>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	f47f acc0 	bne.w	80011c0 <main+0x180>
	  	  {
	  		  if(adc > 2476) adc = 2234;
 8001840:	4b64      	ldr	r3, [pc, #400]	@ (80019d4 <main+0x994>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80019d8 <main+0x998>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	dd02      	ble.n	800185a <main+0x81a>
 8001854:	4b5f      	ldr	r3, [pc, #380]	@ (80019d4 <main+0x994>)
 8001856:	4a61      	ldr	r2, [pc, #388]	@ (80019dc <main+0x99c>)
 8001858:	601a      	str	r2, [r3, #0]
	  		  if(adc < 1755) adc = 1755;
 800185a:	4b5e      	ldr	r3, [pc, #376]	@ (80019d4 <main+0x994>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80019e0 <main+0x9a0>
 8001864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	d502      	bpl.n	8001874 <main+0x834>
 800186e:	4b59      	ldr	r3, [pc, #356]	@ (80019d4 <main+0x994>)
 8001870:	4a5c      	ldr	r2, [pc, #368]	@ (80019e4 <main+0x9a4>)
 8001872:	601a      	str	r2, [r3, #0]
	  		  // 6V = 1755 adc val 1,41V
	  		  // 8.4V = 2476 adc val 1,99V 0,58V
	  		  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ;
 8001874:	4b57      	ldr	r3, [pc, #348]	@ (80019d4 <main+0x994>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80019e8 <main+0x9a8>
 800187e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001882:	ee16 0a90 	vmov	r0, s13
 8001886:	f7fe fe7f 	bl	8000588 <__aeabi_f2d>
 800188a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001908 <main+0x8c8>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe fed2 	bl	8000638 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	a31c      	add	r3, pc, #112	@ (adr r3, 8001910 <main+0x8d0>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fd11 	bl	80002c8 <__aeabi_dsub>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	a31a      	add	r3, pc, #104	@ (adr r3, 8001918 <main+0x8d8>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe ffea 	bl	800088c <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f9b2 	bl	8000c28 <__aeabi_d2f>
 80018c4:	ee07 0a10 	vmov	s14, r0
 80018c8:	eddf 7a48 	vldr	s15, [pc, #288]	@ 80019ec <main+0x9ac>
 80018cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d0:	4b47      	ldr	r3, [pc, #284]	@ (80019f0 <main+0x9b0>)
 80018d2:	edc3 7a00 	vstr	s15, [r3]
	  		 // adc_pil_val = (adc-1755)/(2746-1755)*100;

	      	sprintf(st_bat,"%2d",(uint8_t)adc_pil_val);
 80018d6:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <main+0x9b0>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80018e4:	793b      	ldrb	r3, [r7, #4]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	4916      	ldr	r1, [pc, #88]	@ (8001944 <main+0x904>)
 80018ec:	4841      	ldr	r0, [pc, #260]	@ (80019f4 <main+0x9b4>)
 80018ee:	f007 fe3f 	bl	8009570 <siprintf>
	      	NEXTION_SendString("t54", st_bat);
 80018f2:	4940      	ldr	r1, [pc, #256]	@ (80019f4 <main+0x9b4>)
 80018f4:	4840      	ldr	r0, [pc, #256]	@ (80019f8 <main+0x9b8>)
 80018f6:	f000 fda9 	bl	800244c <NEXTION_SendString>

	  		flag_adc=0;
 80018fa:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <main+0x990>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
	  		flag_adc_cnt=0;
 8001900:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <main+0x98c>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
	  if(Lora_Rx_Buffer[0]==2 && Lora_Rx_Buffer[47] == 0x31){
 8001906:	e45b      	b.n	80011c0 <main+0x180>
 8001908:	66666666 	.word	0x66666666
 800190c:	400a6666 	.word	0x400a6666
 8001910:	28f5c28f 	.word	0x28f5c28f
 8001914:	3ff68f5c 	.word	0x3ff68f5c
 8001918:	28f5c290 	.word	0x28f5c290
 800191c:	3fe28f5c 	.word	0x3fe28f5c
 8001920:	0800c088 	.word	0x0800c088
 8001924:	2000064c 	.word	0x2000064c
 8001928:	2000077c 	.word	0x2000077c
 800192c:	20000654 	.word	0x20000654
 8001930:	2000065c 	.word	0x2000065c
 8001934:	20000664 	.word	0x20000664
 8001938:	0800c090 	.word	0x0800c090
 800193c:	2000066c 	.word	0x2000066c
 8001940:	20000678 	.word	0x20000678
 8001944:	0800c098 	.word	0x0800c098
 8001948:	20000684 	.word	0x20000684
 800194c:	20000688 	.word	0x20000688
 8001950:	2000068c 	.word	0x2000068c
 8001954:	20000644 	.word	0x20000644
 8001958:	0800c0e8 	.word	0x0800c0e8
 800195c:	0800c0ec 	.word	0x0800c0ec
 8001960:	0800c0f0 	.word	0x0800c0f0
 8001964:	0800c0f4 	.word	0x0800c0f4
 8001968:	0800c0f8 	.word	0x0800c0f8
 800196c:	0800c0fc 	.word	0x0800c0fc
 8001970:	0800c100 	.word	0x0800c100
 8001974:	0800c104 	.word	0x0800c104
 8001978:	0800c108 	.word	0x0800c108
 800197c:	0800c10c 	.word	0x0800c10c
 8001980:	20000690 	.word	0x20000690
 8001984:	0800c110 	.word	0x0800c110
 8001988:	20000740 	.word	0x20000740
 800198c:	0800c114 	.word	0x0800c114
 8001990:	20000738 	.word	0x20000738
 8001994:	0800c118 	.word	0x0800c118
 8001998:	20000540 	.word	0x20000540
 800199c:	20000744 	.word	0x20000744
 80019a0:	0800c09c 	.word	0x0800c09c
 80019a4:	20000708 	.word	0x20000708
 80019a8:	200006f0 	.word	0x200006f0
 80019ac:	20000710 	.word	0x20000710
 80019b0:	200006fc 	.word	0x200006fc
 80019b4:	20000718 	.word	0x20000718
 80019b8:	0800c11c 	.word	0x0800c11c
 80019bc:	0800c120 	.word	0x0800c120
 80019c0:	0800c124 	.word	0x0800c124
 80019c4:	0800c128 	.word	0x0800c128
 80019c8:	0800c12c 	.word	0x0800c12c
 80019cc:	20000623 	.word	0x20000623
 80019d0:	20000624 	.word	0x20000624
 80019d4:	20000628 	.word	0x20000628
 80019d8:	451ac000 	.word	0x451ac000
 80019dc:	450ba000 	.word	0x450ba000
 80019e0:	44db6000 	.word	0x44db6000
 80019e4:	44db6000 	.word	0x44db6000
 80019e8:	457ff000 	.word	0x457ff000
 80019ec:	42c80000 	.word	0x42c80000
 80019f0:	2000062c 	.word	0x2000062c
 80019f4:	200006ec 	.word	0x200006ec
 80019f8:	0800c130 	.word	0x0800c130

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b094      	sub	sp, #80	@ 0x50
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	2234      	movs	r2, #52	@ 0x34
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f007 fe13 	bl	8009636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <SystemClock_Config+0xd0>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	4a28      	ldr	r2, [pc, #160]	@ (8001acc <SystemClock_Config+0xd0>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a30:	4b26      	ldr	r3, [pc, #152]	@ (8001acc <SystemClock_Config+0xd0>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <SystemClock_Config+0xd4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a48:	4a21      	ldr	r2, [pc, #132]	@ (8001ad0 <SystemClock_Config+0xd4>)
 8001a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <SystemClock_Config+0xd4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a66:	2302      	movs	r3, #2
 8001a68:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a70:	2304      	movs	r3, #4
 8001a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001a74:	2354      	movs	r3, #84	@ 0x54
 8001a76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fd69 	bl	8005560 <HAL_RCC_OscConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a94:	f001 f8a0 	bl	8002bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a98:	230f      	movs	r3, #15
 8001a9a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fa09 	bl	8004ecc <HAL_RCC_ClockConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001ac0:	f001 f88a 	bl	8002bd8 <Error_Handler>
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3750      	adds	r7, #80	@ 0x50
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ada:	463b      	mov	r3, r7
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001ae8:	4a21      	ldr	r2, [pc, #132]	@ (8001b70 <MX_ADC1_Init+0x9c>)
 8001aea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001aee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001af2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b14:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b16:	4a17      	ldr	r2, [pc, #92]	@ (8001b74 <MX_ADC1_Init+0xa0>)
 8001b18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b34:	480d      	ldr	r0, [pc, #52]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b36:	f001 fd37 	bl	80035a8 <HAL_ADC_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b40:	f001 f84a 	bl	8002bd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001b44:	230c      	movs	r3, #12
 8001b46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <MX_ADC1_Init+0x98>)
 8001b56:	f001 ff7b 	bl	8003a50 <HAL_ADC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b60:	f001 f83a 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200001f4 	.word	0x200001f4
 8001b70:	40012000 	.word	0x40012000
 8001b74:	0f000001 	.word	0x0f000001

08001b78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001b7e:	4a13      	ldr	r2, [pc, #76]	@ (8001bcc <MX_I2C1_Init+0x54>)
 8001b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001b84:	4a12      	ldr	r2, [pc, #72]	@ (8001bd0 <MX_I2C1_Init+0x58>)
 8001b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001b96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb4:	4804      	ldr	r0, [pc, #16]	@ (8001bc8 <MX_I2C1_Init+0x50>)
 8001bb6:	f003 f845 	bl	8004c44 <HAL_I2C_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bc0:	f001 f80a 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000023c 	.word	0x2000023c
 8001bcc:	40005400 	.word	0x40005400
 8001bd0:	00061a80 	.word	0x00061a80

08001bd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <MX_SPI1_Init+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c20:	220a      	movs	r2, #10
 8001c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <MX_SPI1_Init+0x64>)
 8001c26:	f003 ff39 	bl	8005a9c <HAL_SPI_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c30:	f000 ffd2 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000290 	.word	0x20000290
 8001c3c:	40013000 	.word	0x40013000

08001c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8001c64:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c66:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 8001c72:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c74:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7a:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b15      	ldr	r3, [pc, #84]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c86:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001c88:	f003 ff91 	bl	8005bae <HAL_TIM_Base_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c92:	f000 ffa1 	bl	8002bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001ca4:	f004 f932 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001cae:	f000 ff93 	bl	8002bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <MX_TIM2_Init+0x98>)
 8001cc0:	f004 fb5a 	bl	8006378 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cca:	f000 ff85 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200002e8 	.word	0x200002e8

08001cdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce2:	f107 0308 	add.w	r3, r7, #8
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <MX_TIM3_Init+0x94>)
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001d74 <MX_TIM3_Init+0x98>)
 8001cfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <MX_TIM3_Init+0x94>)
 8001d00:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001d04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <MX_TIM3_Init+0x94>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300-1;
 8001d0c:	4b18      	ldr	r3, [pc, #96]	@ (8001d70 <MX_TIM3_Init+0x94>)
 8001d0e:	f240 122b 	movw	r2, #299	@ 0x12b
 8001d12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d14:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <MX_TIM3_Init+0x94>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <MX_TIM3_Init+0x94>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d20:	4813      	ldr	r0, [pc, #76]	@ (8001d70 <MX_TIM3_Init+0x94>)
 8001d22:	f003 ff44 	bl	8005bae <HAL_TIM_Base_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d2c:	f000 ff54 	bl	8002bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <MX_TIM3_Init+0x94>)
 8001d3e:	f004 f8e5 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001d48:	f000 ff46 	bl	8002bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d54:	463b      	mov	r3, r7
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_TIM3_Init+0x94>)
 8001d5a:	f004 fb0d 	bl	8006378 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d64:	f000 ff38 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000330 	.word	0x20000330
 8001d74:	40000400 	.word	0x40000400

08001d78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <MX_TIM4_Init+0x94>)
 8001d96:	4a1e      	ldr	r2, [pc, #120]	@ (8001e10 <MX_TIM4_Init+0x98>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <MX_TIM4_Init+0x94>)
 8001d9c:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001da0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <MX_TIM4_Init+0x94>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001da8:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <MX_TIM4_Init+0x94>)
 8001daa:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001dae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <MX_TIM4_Init+0x94>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <MX_TIM4_Init+0x94>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dbc:	4813      	ldr	r0, [pc, #76]	@ (8001e0c <MX_TIM4_Init+0x94>)
 8001dbe:	f003 fef6 	bl	8005bae <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001dc8:	f000 ff06 	bl	8002bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <MX_TIM4_Init+0x94>)
 8001dda:	f004 f897 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001de4:	f000 fef8 	bl	8002bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_TIM4_Init+0x94>)
 8001df6:	f004 fabf 	bl	8006378 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e00:	f000 feea 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000378 	.word	0x20000378
 8001e10:	40000800 	.word	0x40000800

08001e14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_UART4_Init+0x4c>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <MX_UART4_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <MX_UART4_Init+0x4c>)
 8001e20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_UART4_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_UART4_Init+0x4c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <MX_UART4_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_UART4_Init+0x4c>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <MX_UART4_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_UART4_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_UART4_Init+0x4c>)
 8001e4c:	f004 fb24 	bl	8006498 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e56:	f000 febf 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200003c0 	.word	0x200003c0
 8001e64:	40004c00 	.word	0x40004c00

08001e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <MX_USART2_UART_Init+0x50>)
 8001e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e72:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e8e:	220c      	movs	r2, #12
 8001e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e92:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e9e:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <MX_USART2_UART_Init+0x4c>)
 8001ea0:	f004 fafa 	bl	8006498 <HAL_UART_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eaa:	f000 fe95 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000408 	.word	0x20000408
 8001eb8:	40004400 	.word	0x40004400

08001ebc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <MX_USART3_UART_Init+0x4c>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <MX_USART3_UART_Init+0x50>)
 8001ec4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <MX_USART3_UART_Init+0x4c>)
 8001ec8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ecc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <MX_USART3_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <MX_USART3_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <MX_USART3_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <MX_USART3_UART_Init+0x4c>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <MX_USART3_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <MX_USART3_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <MX_USART3_UART_Init+0x4c>)
 8001ef4:	f004 fad0 	bl	8006498 <HAL_UART_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001efe:	f000 fe6b 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000450 	.word	0x20000450
 8001f0c:	40004800 	.word	0x40004800

08001f10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <MX_USART6_UART_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <MX_USART6_UART_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <MX_USART6_UART_Init+0x4c>)
 8001f1c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001f20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <MX_USART6_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <MX_USART6_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <MX_USART6_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <MX_USART6_UART_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <MX_USART6_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <MX_USART6_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	@ (8001f5c <MX_USART6_UART_Init+0x4c>)
 8001f48:	f004 faa6 	bl	8006498 <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f52:	f000 fe41 	bl	8002bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000498 	.word	0x20000498
 8001f60:	40011400 	.word	0x40011400

08001f64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <MX_DMA_Init+0x3c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <MX_DMA_Init+0x3c>)
 8001f74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <MX_DMA_Init+0x3c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	200c      	movs	r0, #12
 8001f8c:	f002 f873 	bl	8004076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f90:	200c      	movs	r0, #12
 8001f92:	f002 f88c 	bl	80040ae <HAL_NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b38      	ldr	r3, [pc, #224]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a37      	ldr	r2, [pc, #220]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b35      	ldr	r3, [pc, #212]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a30      	ldr	r2, [pc, #192]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8001fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a29      	ldr	r2, [pc, #164]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b27      	ldr	r3, [pc, #156]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a22      	ldr	r2, [pc, #136]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <MX_GPIO_Init+0xfc>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 800202a:	2200      	movs	r2, #0
 800202c:	f642 4112 	movw	r1, #11282	@ 0x2c12
 8002030:	481c      	ldr	r0, [pc, #112]	@ (80020a4 <MX_GPIO_Init+0x100>)
 8002032:	f002 fded 	bl	8004c10 <HAL_GPIO_WritePin>
                          |GATE_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|Led2_Pin
 8002036:	2200      	movs	r2, #0
 8002038:	f246 011f 	movw	r1, #24607	@ 0x601f
 800203c:	481a      	ldr	r0, [pc, #104]	@ (80020a8 <MX_GPIO_Init+0x104>)
 800203e:	f002 fde7 	bl	8004c10 <HAL_GPIO_WritePin>
                          |Led1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 CS_Pin Buzzer_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8002042:	f642 4312 	movw	r3, #11282	@ 0x2c12
 8002046:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	2301      	movs	r3, #1
 800204a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	4812      	ldr	r0, [pc, #72]	@ (80020a4 <MX_GPIO_Init+0x100>)
 800205c:	f002 fc44 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 Button_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|Button_Pin;
 8002060:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	480b      	ldr	r0, [pc, #44]	@ (80020a4 <MX_GPIO_Init+0x100>)
 8002076:	f002 fc37 	bl	80048e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin Led2_Pin
                           Led1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|Led2_Pin
 800207a:	f246 031f 	movw	r3, #24607	@ 0x601f
 800207e:	617b      	str	r3, [r7, #20]
                          |Led1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002080:	2301      	movs	r3, #1
 8002082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <MX_GPIO_Init+0x104>)
 8002094:	f002 fc28 	bl	80048e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	@ 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020800 	.word	0x40020800
 80020a8:	40020400 	.word	0x40020400

080020ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

	if(htim==&htim2)// Lora timer
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d10f      	bne.n	80020dc <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		flag_lora=1;
 80020bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]

		flag_adc_cnt++;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020cc:	701a      	strb	r2, [r3, #0]
		if(flag_adc_cnt >=11) flag_adc_cnt=0;
 80020ce:	4b17      	ldr	r3, [pc, #92]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b0a      	cmp	r3, #10
 80020d4:	d902      	bls.n	80020dc <HAL_TIM_PeriodElapsedCallback+0x30>
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
	}

	if(htim==&htim3)// sensor timer 30ms
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a14      	ldr	r2, [pc, #80]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d112      	bne.n	800210a <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		flag_sensor_imu=1;
 80020e4:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]

		flag_counter++;
 80020ea:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80020f4:	701a      	strb	r2, [r3, #0]
		if(flag_counter == 10)
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b0a      	cmp	r3, #10
 80020fc:	d105      	bne.n	800210a <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			flag_sensor_barometre =1;
 80020fe:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
			flag_counter=0;
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim==&htim4)// megü timer
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a0c      	ldr	r2, [pc, #48]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d102      	bne.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		flag_megu=1;
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]

	}

}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	200002e8 	.word	0x200002e8
 8002128:	2000061e 	.word	0x2000061e
 800212c:	20000623 	.word	0x20000623
 8002130:	20000330 	.word	0x20000330
 8002134:	20000620 	.word	0x20000620
 8002138:	20000622 	.word	0x20000622
 800213c:	20000621 	.word	0x20000621
 8002140:	20000378 	.word	0x20000378
 8002144:	2000061f 	.word	0x2000061f

08002148 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
//	}
//	HAL_UART_Receive_IT(&huart2, &rx_data_gps, 1);
//	}


	if(huart == &huart3){
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a19      	ldr	r2, [pc, #100]	@ (80021b8 <HAL_UART_RxCpltCallback+0x70>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d12b      	bne.n	80021b0 <HAL_UART_RxCpltCallback+0x68>
//			rx_index_lora=0;
//
//			}
		//HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);

				if((Lora_Control_Buffer[0] != 1 &&Lora_Control_Buffer[47] != 50) && (Lora_Control_Buffer[0] != 2 &&Lora_Control_Buffer[47] != 49)&& (Lora_Control_Buffer[0] != 3 &&Lora_Control_Buffer[47] != 0x33))
 8002158:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <HAL_UART_RxCpltCallback+0x74>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d01a      	beq.n	8002196 <HAL_UART_RxCpltCallback+0x4e>
 8002160:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <HAL_UART_RxCpltCallback+0x74>)
 8002162:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002166:	2b32      	cmp	r3, #50	@ 0x32
 8002168:	d015      	beq.n	8002196 <HAL_UART_RxCpltCallback+0x4e>
 800216a:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <HAL_UART_RxCpltCallback+0x74>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d011      	beq.n	8002196 <HAL_UART_RxCpltCallback+0x4e>
 8002172:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <HAL_UART_RxCpltCallback+0x74>)
 8002174:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002178:	2b31      	cmp	r3, #49	@ 0x31
 800217a:	d00c      	beq.n	8002196 <HAL_UART_RxCpltCallback+0x4e>
 800217c:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <HAL_UART_RxCpltCallback+0x74>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d008      	beq.n	8002196 <HAL_UART_RxCpltCallback+0x4e>
 8002184:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <HAL_UART_RxCpltCallback+0x74>)
 8002186:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800218a:	2b33      	cmp	r3, #51	@ 0x33
 800218c:	d003      	beq.n	8002196 <HAL_UART_RxCpltCallback+0x4e>
				{
					//memcpy(Lora_Rx_Buffer,Lora_Control_Buffer, Lora_Rx_Buffer_SIZE);
					correct_packet(Lora_Control_Buffer,Lora_Rx_Buffer_SIZE);
 800218e:	2148      	movs	r1, #72	@ 0x48
 8002190:	480a      	ldr	r0, [pc, #40]	@ (80021bc <HAL_UART_RxCpltCallback+0x74>)
 8002192:	f000 f839 	bl	8002208 <correct_packet>
//					}
//					for(int i =0; i<52;i++)
//					{
//						Lora_Rx_Buffer[i+20] =Lora_Control_Buffer[i+20];
//					}
					memcpy(Lora_Rx_Buffer , Lora_Control_Buffer , Lora_Rx_Buffer_SIZE);
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <HAL_UART_RxCpltCallback+0x78>)
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_UART_RxCpltCallback+0x74>)
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	2348      	movs	r3, #72	@ 0x48
 80021a0:	461a      	mov	r2, r3
 80021a2:	f007 faea 	bl	800977a <memcpy>
					HAL_UART_Receive_DMA(&huart3, Lora_Control_Buffer, 72);
 80021a6:	2248      	movs	r2, #72	@ 0x48
 80021a8:	4904      	ldr	r1, [pc, #16]	@ (80021bc <HAL_UART_RxCpltCallback+0x74>)
 80021aa:	4803      	ldr	r0, [pc, #12]	@ (80021b8 <HAL_UART_RxCpltCallback+0x70>)
 80021ac:	f004 fae6 	bl	800677c <HAL_UART_Receive_DMA>
			//}


		}

}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000450 	.word	0x20000450
 80021bc:	20000588 	.word	0x20000588
 80021c0:	20000540 	.word	0x20000540

080021c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <HAL_ADC_ConvCpltCallback+0x34>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10c      	bne.n	80021f0 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 80021d6:	4809      	ldr	r0, [pc, #36]	@ (80021fc <HAL_ADC_ConvCpltCallback+0x38>)
 80021d8:	f001 fc18 	bl	8003a0c <HAL_ADC_GetValue>
 80021dc:	ee07 0a90 	vmov	s15, r0
 80021e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_ADC_ConvCpltCallback+0x3c>)
 80021e6:	edc3 7a00 	vstr	s15, [r3]
		flag_adc=1;
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_ADC_ConvCpltCallback+0x40>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
	}
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40012000 	.word	0x40012000
 80021fc:	200001f4 	.word	0x200001f4
 8002200:	20000628 	.word	0x20000628
 8002204:	20000624 	.word	0x20000624

08002208 <correct_packet>:



void correct_packet(uint8_t *buffer, int buffer_size) {
 8002208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
	  int start_index = -1;
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
 8002218:	617b      	str	r3, [r7, #20]

	// Paketlerin başlangıcını tespit et
	for (int i = 0; i < buffer_size; i++) {
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e04d      	b.n	80022bc <correct_packet+0xb4>
		if ((buffer[i] == PACKET1_ID && buffer[(i + 47) % buffer_size] == PACKET1_MARKER && buffer[(i + 71) % buffer_size] == PACKET_END) ||
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d11d      	bne.n	8002268 <correct_packet+0x60>
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	332f      	adds	r3, #47	@ 0x2f
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	fb93 f2f2 	sdiv	r2, r3, r2
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	fb01 f202 	mul.w	r2, r1, r2
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b31      	cmp	r3, #49	@ 0x31
 8002248:	d10e      	bne.n	8002268 <correct_packet+0x60>
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	3347      	adds	r3, #71	@ 0x47
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	fb93 f2f2 	sdiv	r2, r3, r2
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	fb01 f202 	mul.w	r2, r1, r2
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b0a      	cmp	r3, #10
 8002266:	d023      	beq.n	80022b0 <correct_packet+0xa8>
			(buffer[i] == PACKET2_ID && buffer[(i + 47) % buffer_size] == PACKET2_MARKER && buffer[(i + 71) % buffer_size] == PACKET_END)) {
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	781b      	ldrb	r3, [r3, #0]
		if ((buffer[i] == PACKET1_ID && buffer[(i + 47) % buffer_size] == PACKET1_MARKER && buffer[(i + 71) % buffer_size] == PACKET_END) ||
 8002270:	2b01      	cmp	r3, #1
 8002272:	d120      	bne.n	80022b6 <correct_packet+0xae>
			(buffer[i] == PACKET2_ID && buffer[(i + 47) % buffer_size] == PACKET2_MARKER && buffer[(i + 71) % buffer_size] == PACKET_END)) {
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	332f      	adds	r3, #47	@ 0x2f
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	fb93 f2f2 	sdiv	r2, r3, r2
 800227e:	6839      	ldr	r1, [r7, #0]
 8002280:	fb01 f202 	mul.w	r2, r1, r2
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	461a      	mov	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b32      	cmp	r3, #50	@ 0x32
 8002290:	d111      	bne.n	80022b6 <correct_packet+0xae>
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3347      	adds	r3, #71	@ 0x47
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	fb93 f2f2 	sdiv	r2, r3, r2
 800229c:	6839      	ldr	r1, [r7, #0]
 800229e:	fb01 f202 	mul.w	r2, r1, r2
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b0a      	cmp	r3, #10
 80022ae:	d102      	bne.n	80022b6 <correct_packet+0xae>
			start_index = i;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	617b      	str	r3, [r7, #20]
			break;
 80022b4:	e006      	b.n	80022c4 <correct_packet+0xbc>
	for (int i = 0; i < buffer_size; i++) {
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	3301      	adds	r3, #1
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbad      	blt.n	8002220 <correct_packet+0x18>
		}
	}

	// Eğer başlangıç bulunduysa ve başta değilse buffer'ı düzelt
	if (start_index > 0) {
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	dd42      	ble.n	8002350 <correct_packet+0x148>
 80022ca:	466b      	mov	r3, sp
 80022cc:	461e      	mov	r6, r3
		uint8_t temp_buffer[buffer_size];
 80022ce:	6839      	ldr	r1, [r7, #0]
 80022d0:	1e4b      	subs	r3, r1, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	460a      	mov	r2, r1
 80022d6:	2300      	movs	r3, #0
 80022d8:	4690      	mov	r8, r2
 80022da:	4699      	mov	r9, r3
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f0:	460a      	mov	r2, r1
 80022f2:	2300      	movs	r3, #0
 80022f4:	4614      	mov	r4, r2
 80022f6:	461d      	mov	r5, r3
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	00eb      	lsls	r3, r5, #3
 8002302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002306:	00e2      	lsls	r2, r4, #3
 8002308:	460b      	mov	r3, r1
 800230a:	3307      	adds	r3, #7
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	ebad 0d03 	sub.w	sp, sp, r3
 8002314:	466b      	mov	r3, sp
 8002316:	3300      	adds	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]

		// Buffer'daki doğru veriyi temp_buffer'a kopyala
		memcpy(temp_buffer, &buffer[start_index], buffer_size - start_index);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	18d1      	adds	r1, r2, r3
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	461a      	mov	r2, r3
 8002328:	68b8      	ldr	r0, [r7, #8]
 800232a:	f007 fa26 	bl	800977a <memcpy>
		memcpy(&temp_buffer[buffer_size - start_index], buffer, start_index);
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4413      	add	r3, r2
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	f007 fa1c 	bl	800977a <memcpy>

		// Düzeltilmiş veriyi orijinal buffer'a kopyala
		memcpy(buffer, temp_buffer, buffer_size);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f007 fa16 	bl	800977a <memcpy>
 800234e:	46b5      	mov	sp, r6
	}

}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800235c <E220_write_register>:

int8_t E220_write_register(uint8_t reg,uint8_t parameter)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	460a      	mov	r2, r1
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	4613      	mov	r3, r2
 800236a:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800236c:	2201      	movs	r2, #1
 800236e:	2101      	movs	r1, #1
 8002370:	481c      	ldr	r0, [pc, #112]	@ (80023e4 <E220_write_register+0x88>)
 8002372:	f002 fc4d 	bl	8004c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8002376:	2201      	movs	r2, #1
 8002378:	2102      	movs	r1, #2
 800237a:	481a      	ldr	r0, [pc, #104]	@ (80023e4 <E220_write_register+0x88>)
 800237c:	f002 fc48 	bl	8004c10 <HAL_GPIO_WritePin>

	HAL_Delay(3);
 8002380:	2003      	movs	r0, #3
 8002382:	f001 f8ed 	bl	8003560 <HAL_Delay>

	uint8_t send_data[4]={CMD_SET_REG,reg,1,parameter};
 8002386:	23c0      	movs	r3, #192	@ 0xc0
 8002388:	733b      	strb	r3, [r7, #12]
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	737b      	strb	r3, [r7, #13]
 800238e:	2301      	movs	r3, #1
 8002390:	73bb      	strb	r3, [r7, #14]
 8002392:	79bb      	ldrb	r3, [r7, #6]
 8002394:	73fb      	strb	r3, [r7, #15]
	uint8_t receive_data[4]={0};
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]

	HAL_UART_Transmit(&huart3,send_data ,4, 100);
 800239a:	f107 010c 	add.w	r1, r7, #12
 800239e:	2364      	movs	r3, #100	@ 0x64
 80023a0:	2204      	movs	r2, #4
 80023a2:	4811      	ldr	r0, [pc, #68]	@ (80023e8 <E220_write_register+0x8c>)
 80023a4:	f004 f8c8 	bl	8006538 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, receive_data, 4, 100);
 80023a8:	f107 0108 	add.w	r1, r7, #8
 80023ac:	2364      	movs	r3, #100	@ 0x64
 80023ae:	2204      	movs	r2, #4
 80023b0:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <E220_write_register+0x8c>)
 80023b2:	f004 f94c 	bl	800664e <HAL_UART_Receive>


	if(receive_data[0]==CMD_READ_REG && receive_data[1]==reg && receive_data[2]==1 && receive_data[3] == parameter)
 80023b6:	7a3b      	ldrb	r3, [r7, #8]
 80023b8:	2bc1      	cmp	r3, #193	@ 0xc1
 80023ba:	d10d      	bne.n	80023d8 <E220_write_register+0x7c>
 80023bc:	7a7b      	ldrb	r3, [r7, #9]
 80023be:	79fa      	ldrb	r2, [r7, #7]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d109      	bne.n	80023d8 <E220_write_register+0x7c>
 80023c4:	7abb      	ldrb	r3, [r7, #10]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d106      	bne.n	80023d8 <E220_write_register+0x7c>
 80023ca:	7afb      	ldrb	r3, [r7, #11]
 80023cc:	79ba      	ldrb	r2, [r7, #6]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d102      	bne.n	80023d8 <E220_write_register+0x7c>
		return receive_data[3];
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	e001      	b.n	80023dc <E220_write_register+0x80>
	else
		return -1;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295

}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40020400 	.word	0x40020400
 80023e8:	20000450 	.word	0x20000450

080023ec <E220_read_register>:
int8_t E220_read_register(uint8_t reg)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]


	uint8_t send_data[3]={CMD_READ_REG,reg,1};
 80023f6:	23c1      	movs	r3, #193	@ 0xc1
 80023f8:	733b      	strb	r3, [r7, #12]
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	737b      	strb	r3, [r7, #13]
 80023fe:	2301      	movs	r3, #1
 8002400:	73bb      	strb	r3, [r7, #14]
	uint8_t receive_data[4]={0};
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart3,send_data ,3, 100);
 8002406:	f107 010c 	add.w	r1, r7, #12
 800240a:	2364      	movs	r3, #100	@ 0x64
 800240c:	2203      	movs	r2, #3
 800240e:	480e      	ldr	r0, [pc, #56]	@ (8002448 <E220_read_register+0x5c>)
 8002410:	f004 f892 	bl	8006538 <HAL_UART_Transmit>



	HAL_UART_Receive(&huart3, receive_data, 4, 100);
 8002414:	f107 0108 	add.w	r1, r7, #8
 8002418:	2364      	movs	r3, #100	@ 0x64
 800241a:	2204      	movs	r2, #4
 800241c:	480a      	ldr	r0, [pc, #40]	@ (8002448 <E220_read_register+0x5c>)
 800241e:	f004 f916 	bl	800664e <HAL_UART_Receive>

	if(receive_data[0]==CMD_READ_REG && receive_data[1]==reg && receive_data[2]==1)
 8002422:	7a3b      	ldrb	r3, [r7, #8]
 8002424:	2bc1      	cmp	r3, #193	@ 0xc1
 8002426:	d109      	bne.n	800243c <E220_read_register+0x50>
 8002428:	7a7b      	ldrb	r3, [r7, #9]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	429a      	cmp	r2, r3
 800242e:	d105      	bne.n	800243c <E220_read_register+0x50>
 8002430:	7abb      	ldrb	r3, [r7, #10]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <E220_read_register+0x50>
		return receive_data[3];
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	b25b      	sxtb	r3, r3
 800243a:	e001      	b.n	8002440 <E220_read_register+0x54>
	else
		return -1;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000450 	.word	0x20000450

0800244c <NEXTION_SendString>:


void NEXTION_SendString (char *ID, char *string)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b090      	sub	sp, #64	@ 0x40
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s.txt=\"%s\"", ID, string);
 8002456:	f107 0008 	add.w	r0, r7, #8
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	490b      	ldr	r1, [pc, #44]	@ (800248c <NEXTION_SendString+0x40>)
 8002460:	f007 f886 	bl	8009570 <siprintf>
 8002464:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, len, 1000);
 8002466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002468:	b29a      	uxth	r2, r3
 800246a:	f107 0108 	add.w	r1, r7, #8
 800246e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002472:	4807      	ldr	r0, [pc, #28]	@ (8002490 <NEXTION_SendString+0x44>)
 8002474:	f004 f860 	bl	8006538 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, Cmd_End, 3, 100);
 8002478:	2364      	movs	r3, #100	@ 0x64
 800247a:	2203      	movs	r2, #3
 800247c:	4905      	ldr	r1, [pc, #20]	@ (8002494 <NEXTION_SendString+0x48>)
 800247e:	4804      	ldr	r0, [pc, #16]	@ (8002490 <NEXTION_SendString+0x44>)
 8002480:	f004 f85a 	bl	8006538 <HAL_UART_Transmit>
}
 8002484:	bf00      	nop
 8002486:	3740      	adds	r7, #64	@ 0x40
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	0800c134 	.word	0x0800c134
 8002490:	200003c0 	.word	0x200003c0
 8002494:	20000000 	.word	0x20000000

08002498 <Booster_union_converter>:
}



void Booster_union_converter(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
			float2unit8 f2u8_booster;
					 for(uint8_t i=0;i<4;i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e013      	b.n	80024cc <Booster_union_converter+0x34>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+2];
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	1c9a      	adds	r2, r3, #2
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	4985      	ldr	r1, [pc, #532]	@ (80026c0 <Booster_union_converter+0x228>)
 80024ac:	5c8a      	ldrb	r2, [r1, r2]
 80024ae:	3310      	adds	r3, #16
 80024b0:	443b      	add	r3, r7
 80024b2:	f803 2c10 	strb.w	r2, [r3, #-16]
						 HYI_BUFFER[34+i]=Lora_Rx_Buffer[i+5]; // 34 35 36 37
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	1d5a      	adds	r2, r3, #5
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	3322      	adds	r3, #34	@ 0x22
 80024be:	4980      	ldr	r1, [pc, #512]	@ (80026c0 <Booster_union_converter+0x228>)
 80024c0:	5c89      	ldrb	r1, [r1, r2]
 80024c2:	4a80      	ldr	r2, [pc, #512]	@ (80026c4 <Booster_union_converter+0x22c>)
 80024c4:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	3301      	adds	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d9e8      	bls.n	80024a4 <Booster_union_converter+0xc>
					 }
					 Booster.gpsaltitude=f2u8_booster.fVal;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4a7c      	ldr	r2, [pc, #496]	@ (80026c8 <Booster_union_converter+0x230>)
 80024d6:	6053      	str	r3, [r2, #4]


					 for(uint8_t i=0;i<4;i++)
 80024d8:	2300      	movs	r3, #0
 80024da:	73bb      	strb	r3, [r7, #14]
 80024dc:	e014      	b.n	8002508 <Booster_union_converter+0x70>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+6];
 80024de:	7bbb      	ldrb	r3, [r7, #14]
 80024e0:	1d9a      	adds	r2, r3, #6
 80024e2:	7bbb      	ldrb	r3, [r7, #14]
 80024e4:	4976      	ldr	r1, [pc, #472]	@ (80026c0 <Booster_union_converter+0x228>)
 80024e6:	5c8a      	ldrb	r2, [r1, r2]
 80024e8:	3310      	adds	r3, #16
 80024ea:	443b      	add	r3, r7
 80024ec:	f803 2c10 	strb.w	r2, [r3, #-16]
						 HYI_BUFFER[38+i]=Lora_Rx_Buffer[i+9]; // 38 39 40 41
 80024f0:	7bbb      	ldrb	r3, [r7, #14]
 80024f2:	f103 0209 	add.w	r2, r3, #9
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
 80024f8:	3326      	adds	r3, #38	@ 0x26
 80024fa:	4971      	ldr	r1, [pc, #452]	@ (80026c0 <Booster_union_converter+0x228>)
 80024fc:	5c89      	ldrb	r1, [r1, r2]
 80024fe:	4a71      	ldr	r2, [pc, #452]	@ (80026c4 <Booster_union_converter+0x22c>)
 8002500:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	3301      	adds	r3, #1
 8002506:	73bb      	strb	r3, [r7, #14]
 8002508:	7bbb      	ldrb	r3, [r7, #14]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d9e7      	bls.n	80024de <Booster_union_converter+0x46>
					 }
					 Booster.gpslatitude=f2u8_booster.fVal;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4a6d      	ldr	r2, [pc, #436]	@ (80026c8 <Booster_union_converter+0x230>)
 8002512:	6093      	str	r3, [r2, #8]

					 for(uint8_t i=0;i<4;i++)
 8002514:	2300      	movs	r3, #0
 8002516:	737b      	strb	r3, [r7, #13]
 8002518:	e015      	b.n	8002546 <Booster_union_converter+0xae>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+10];
 800251a:	7b7b      	ldrb	r3, [r7, #13]
 800251c:	f103 020a 	add.w	r2, r3, #10
 8002520:	7b7b      	ldrb	r3, [r7, #13]
 8002522:	4967      	ldr	r1, [pc, #412]	@ (80026c0 <Booster_union_converter+0x228>)
 8002524:	5c8a      	ldrb	r2, [r1, r2]
 8002526:	3310      	adds	r3, #16
 8002528:	443b      	add	r3, r7
 800252a:	f803 2c10 	strb.w	r2, [r3, #-16]
						 HYI_BUFFER[42+i]=Lora_Rx_Buffer[i+13]; // 42 43 44 45
 800252e:	7b7b      	ldrb	r3, [r7, #13]
 8002530:	f103 020d 	add.w	r2, r3, #13
 8002534:	7b7b      	ldrb	r3, [r7, #13]
 8002536:	332a      	adds	r3, #42	@ 0x2a
 8002538:	4961      	ldr	r1, [pc, #388]	@ (80026c0 <Booster_union_converter+0x228>)
 800253a:	5c89      	ldrb	r1, [r1, r2]
 800253c:	4a61      	ldr	r2, [pc, #388]	@ (80026c4 <Booster_union_converter+0x22c>)
 800253e:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 8002540:	7b7b      	ldrb	r3, [r7, #13]
 8002542:	3301      	adds	r3, #1
 8002544:	737b      	strb	r3, [r7, #13]
 8002546:	7b7b      	ldrb	r3, [r7, #13]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d9e6      	bls.n	800251a <Booster_union_converter+0x82>
					 }
					 Booster.gpslongitude=f2u8_booster.fVal;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4a5e      	ldr	r2, [pc, #376]	@ (80026c8 <Booster_union_converter+0x230>)
 8002550:	60d3      	str	r3, [r2, #12]

					 for(uint8_t i=0;i<4;i++)
 8002552:	2300      	movs	r3, #0
 8002554:	733b      	strb	r3, [r7, #12]
 8002556:	e00c      	b.n	8002572 <Booster_union_converter+0xda>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+14];
 8002558:	7b3b      	ldrb	r3, [r7, #12]
 800255a:	f103 020e 	add.w	r2, r3, #14
 800255e:	7b3b      	ldrb	r3, [r7, #12]
 8002560:	4957      	ldr	r1, [pc, #348]	@ (80026c0 <Booster_union_converter+0x228>)
 8002562:	5c8a      	ldrb	r2, [r1, r2]
 8002564:	3310      	adds	r3, #16
 8002566:	443b      	add	r3, r7
 8002568:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 800256c:	7b3b      	ldrb	r3, [r7, #12]
 800256e:	3301      	adds	r3, #1
 8002570:	733b      	strb	r3, [r7, #12]
 8002572:	7b3b      	ldrb	r3, [r7, #12]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d9ef      	bls.n	8002558 <Booster_union_converter+0xc0>
					 }
					 Booster.altitude=f2u8_booster.fVal;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4a53      	ldr	r2, [pc, #332]	@ (80026c8 <Booster_union_converter+0x230>)
 800257c:	6153      	str	r3, [r2, #20]



					 for(uint8_t i=0;i<4;i++)
 800257e:	2300      	movs	r3, #0
 8002580:	72fb      	strb	r3, [r7, #11]
 8002582:	e00c      	b.n	800259e <Booster_union_converter+0x106>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+18];
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	f103 0212 	add.w	r2, r3, #18
 800258a:	7afb      	ldrb	r3, [r7, #11]
 800258c:	494c      	ldr	r1, [pc, #304]	@ (80026c0 <Booster_union_converter+0x228>)
 800258e:	5c8a      	ldrb	r2, [r1, r2]
 8002590:	3310      	adds	r3, #16
 8002592:	443b      	add	r3, r7
 8002594:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 8002598:	7afb      	ldrb	r3, [r7, #11]
 800259a:	3301      	adds	r3, #1
 800259c:	72fb      	strb	r3, [r7, #11]
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d9ef      	bls.n	8002584 <Booster_union_converter+0xec>
					 }
					 Booster.speed=f2u8_booster.fVal;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4a48      	ldr	r2, [pc, #288]	@ (80026c8 <Booster_union_converter+0x230>)
 80025a8:	6113      	str	r3, [r2, #16]


					 for(uint8_t i=0;i<4;i++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	72bb      	strb	r3, [r7, #10]
 80025ae:	e00c      	b.n	80025ca <Booster_union_converter+0x132>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+22];
 80025b0:	7abb      	ldrb	r3, [r7, #10]
 80025b2:	f103 0216 	add.w	r2, r3, #22
 80025b6:	7abb      	ldrb	r3, [r7, #10]
 80025b8:	4941      	ldr	r1, [pc, #260]	@ (80026c0 <Booster_union_converter+0x228>)
 80025ba:	5c8a      	ldrb	r2, [r1, r2]
 80025bc:	3310      	adds	r3, #16
 80025be:	443b      	add	r3, r7
 80025c0:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 80025c4:	7abb      	ldrb	r3, [r7, #10]
 80025c6:	3301      	adds	r3, #1
 80025c8:	72bb      	strb	r3, [r7, #10]
 80025ca:	7abb      	ldrb	r3, [r7, #10]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d9ef      	bls.n	80025b0 <Booster_union_converter+0x118>
					 }
					 Booster.temperature=f2u8_booster.fVal;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4a3d      	ldr	r2, [pc, #244]	@ (80026c8 <Booster_union_converter+0x230>)
 80025d4:	6193      	str	r3, [r2, #24]


					 for(uint8_t i=0;i<4;i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	727b      	strb	r3, [r7, #9]
 80025da:	e00c      	b.n	80025f6 <Booster_union_converter+0x15e>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+26];
 80025dc:	7a7b      	ldrb	r3, [r7, #9]
 80025de:	f103 021a 	add.w	r2, r3, #26
 80025e2:	7a7b      	ldrb	r3, [r7, #9]
 80025e4:	4936      	ldr	r1, [pc, #216]	@ (80026c0 <Booster_union_converter+0x228>)
 80025e6:	5c8a      	ldrb	r2, [r1, r2]
 80025e8:	3310      	adds	r3, #16
 80025ea:	443b      	add	r3, r7
 80025ec:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 80025f0:	7a7b      	ldrb	r3, [r7, #9]
 80025f2:	3301      	adds	r3, #1
 80025f4:	727b      	strb	r3, [r7, #9]
 80025f6:	7a7b      	ldrb	r3, [r7, #9]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d9ef      	bls.n	80025dc <Booster_union_converter+0x144>
					 }
					 Booster.accx=f2u8_booster.fVal;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4a32      	ldr	r2, [pc, #200]	@ (80026c8 <Booster_union_converter+0x230>)
 8002600:	61d3      	str	r3, [r2, #28]


					 for(uint8_t i=0;i<4;i++)
 8002602:	2300      	movs	r3, #0
 8002604:	723b      	strb	r3, [r7, #8]
 8002606:	e00c      	b.n	8002622 <Booster_union_converter+0x18a>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+30];
 8002608:	7a3b      	ldrb	r3, [r7, #8]
 800260a:	f103 021e 	add.w	r2, r3, #30
 800260e:	7a3b      	ldrb	r3, [r7, #8]
 8002610:	492b      	ldr	r1, [pc, #172]	@ (80026c0 <Booster_union_converter+0x228>)
 8002612:	5c8a      	ldrb	r2, [r1, r2]
 8002614:	3310      	adds	r3, #16
 8002616:	443b      	add	r3, r7
 8002618:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 800261c:	7a3b      	ldrb	r3, [r7, #8]
 800261e:	3301      	adds	r3, #1
 8002620:	723b      	strb	r3, [r7, #8]
 8002622:	7a3b      	ldrb	r3, [r7, #8]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d9ef      	bls.n	8002608 <Booster_union_converter+0x170>
					 }
					 Booster.accy=f2u8_booster.fVal;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4a27      	ldr	r2, [pc, #156]	@ (80026c8 <Booster_union_converter+0x230>)
 800262c:	6213      	str	r3, [r2, #32]


				      for(uint8_t i=0;i<4;i++)
 800262e:	2300      	movs	r3, #0
 8002630:	71fb      	strb	r3, [r7, #7]
 8002632:	e00c      	b.n	800264e <Booster_union_converter+0x1b6>
					 {
				    	  f2u8_booster.array[i]=Lora_Rx_Buffer[i+34];
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	4920      	ldr	r1, [pc, #128]	@ (80026c0 <Booster_union_converter+0x228>)
 800263e:	5c8a      	ldrb	r2, [r1, r2]
 8002640:	3310      	adds	r3, #16
 8002642:	443b      	add	r3, r7
 8002644:	f803 2c10 	strb.w	r2, [r3, #-16]
				      for(uint8_t i=0;i<4;i++)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	3301      	adds	r3, #1
 800264c:	71fb      	strb	r3, [r7, #7]
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d9ef      	bls.n	8002634 <Booster_union_converter+0x19c>
					 }
				      Booster.accz=f2u8_booster.fVal;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4a1c      	ldr	r2, [pc, #112]	@ (80026c8 <Booster_union_converter+0x230>)
 8002658:	6253      	str	r3, [r2, #36]	@ 0x24

					  for(uint8_t i=0;i<4;i++)
 800265a:	2300      	movs	r3, #0
 800265c:	71bb      	strb	r3, [r7, #6]
 800265e:	e00c      	b.n	800267a <Booster_union_converter+0x1e2>
					 {
						  f2u8_booster.array[i]=Lora_Rx_Buffer[i+38];
 8002660:	79bb      	ldrb	r3, [r7, #6]
 8002662:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8002666:	79bb      	ldrb	r3, [r7, #6]
 8002668:	4915      	ldr	r1, [pc, #84]	@ (80026c0 <Booster_union_converter+0x228>)
 800266a:	5c8a      	ldrb	r2, [r1, r2]
 800266c:	3310      	adds	r3, #16
 800266e:	443b      	add	r3, r7
 8002670:	f803 2c10 	strb.w	r2, [r3, #-16]
					  for(uint8_t i=0;i<4;i++)
 8002674:	79bb      	ldrb	r3, [r7, #6]
 8002676:	3301      	adds	r3, #1
 8002678:	71bb      	strb	r3, [r7, #6]
 800267a:	79bb      	ldrb	r3, [r7, #6]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d9ef      	bls.n	8002660 <Booster_union_converter+0x1c8>
					 }
					  Booster.normal=f2u8_booster.fVal;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4a11      	ldr	r2, [pc, #68]	@ (80026c8 <Booster_union_converter+0x230>)
 8002684:	6293      	str	r3, [r2, #40]	@ 0x28

					  for(uint8_t i=0;i<4;i++)
 8002686:	2300      	movs	r3, #0
 8002688:	717b      	strb	r3, [r7, #5]
 800268a:	e00c      	b.n	80026a6 <Booster_union_converter+0x20e>
					 {
						  f2u8_booster.array[i]=Lora_Rx_Buffer[i+42];
 800268c:	797b      	ldrb	r3, [r7, #5]
 800268e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8002692:	797b      	ldrb	r3, [r7, #5]
 8002694:	490a      	ldr	r1, [pc, #40]	@ (80026c0 <Booster_union_converter+0x228>)
 8002696:	5c8a      	ldrb	r2, [r1, r2]
 8002698:	3310      	adds	r3, #16
 800269a:	443b      	add	r3, r7
 800269c:	f803 2c10 	strb.w	r2, [r3, #-16]
					  for(uint8_t i=0;i<4;i++)
 80026a0:	797b      	ldrb	r3, [r7, #5]
 80026a2:	3301      	adds	r3, #1
 80026a4:	717b      	strb	r3, [r7, #5]
 80026a6:	797b      	ldrb	r3, [r7, #5]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d9ef      	bls.n	800268c <Booster_union_converter+0x1f4>
					 }
					  Booster.pitch=f2u8_booster.fVal;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4a06      	ldr	r2, [pc, #24]	@ (80026c8 <Booster_union_converter+0x230>)
 80026b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000540 	.word	0x20000540
 80026c4:	200005d0 	.word	0x200005d0
 80026c8:	2000077c 	.word	0x2000077c

080026cc <Sustainer_union_converter>:




void Sustainer_union_converter(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b08f      	sub	sp, #60	@ 0x3c
 80026d0:	af00      	add	r7, sp, #0
	 float2unit8 f2u8_gpsalt;
					 for(uint8_t i=0;i<4;i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80026d8:	e019      	b.n	800270e <Sustainer_union_converter+0x42>
					 {
						 f2u8_gpsalt.array[i]=Lora_Rx_Buffer[i+2];
 80026da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026de:	1c9a      	adds	r2, r3, #2
 80026e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026e4:	49ac      	ldr	r1, [pc, #688]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 80026e6:	5c8a      	ldrb	r2, [r1, r2]
 80026e8:	3338      	adds	r3, #56	@ 0x38
 80026ea:	443b      	add	r3, r7
 80026ec:	f803 2c10 	strb.w	r2, [r3, #-16]
						 HYI_BUFFER[10+i] =Lora_Rx_Buffer[i+5]; // 10 11 12 13
 80026f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026f4:	1d5a      	adds	r2, r3, #5
 80026f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80026fa:	330a      	adds	r3, #10
 80026fc:	49a6      	ldr	r1, [pc, #664]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 80026fe:	5c89      	ldrb	r1, [r1, r2]
 8002700:	4aa6      	ldr	r2, [pc, #664]	@ (800299c <Sustainer_union_converter+0x2d0>)
 8002702:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 8002704:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002708:	3301      	adds	r3, #1
 800270a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800270e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002712:	2b03      	cmp	r3, #3
 8002714:	d9e1      	bls.n	80026da <Sustainer_union_converter+0xe>
					 }
					 Sustainer.gpsaltitude=f2u8_gpsalt.fVal;
 8002716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002718:	4aa1      	ldr	r2, [pc, #644]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 800271a:	6053      	str	r3, [r2, #4]
				 float2unit8 f2u8_latitude;

					 for(uint8_t i=0;i<4;i++)
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002722:	e01a      	b.n	800275a <Sustainer_union_converter+0x8e>
					 {
						f2u8_latitude.array[i]=Lora_Rx_Buffer[i+6];
 8002724:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002728:	1d9a      	adds	r2, r3, #6
 800272a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800272e:	499a      	ldr	r1, [pc, #616]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 8002730:	5c8a      	ldrb	r2, [r1, r2]
 8002732:	3338      	adds	r3, #56	@ 0x38
 8002734:	443b      	add	r3, r7
 8002736:	f803 2c14 	strb.w	r2, [r3, #-20]
						HYI_BUFFER[14+i] =Lora_Rx_Buffer[i+9]; // 14 15 16 17
 800273a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800273e:	f103 0209 	add.w	r2, r3, #9
 8002742:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002746:	330e      	adds	r3, #14
 8002748:	4993      	ldr	r1, [pc, #588]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 800274a:	5c89      	ldrb	r1, [r1, r2]
 800274c:	4a93      	ldr	r2, [pc, #588]	@ (800299c <Sustainer_union_converter+0x2d0>)
 800274e:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 8002750:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002754:	3301      	adds	r3, #1
 8002756:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800275a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800275e:	2b03      	cmp	r3, #3
 8002760:	d9e0      	bls.n	8002724 <Sustainer_union_converter+0x58>
					 }
					 Sustainer.gpslatitude=f2u8_latitude.fVal;
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	4a8e      	ldr	r2, [pc, #568]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 8002766:	6093      	str	r3, [r2, #8]

				 float2unit8 f2u8_longitude;
					 for(uint8_t i=0;i<4;i++)
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800276e:	e01b      	b.n	80027a8 <Sustainer_union_converter+0xdc>
					 {
						f2u8_longitude.array[i]=Lora_Rx_Buffer[i+10];
 8002770:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002774:	f103 020a 	add.w	r2, r3, #10
 8002778:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800277c:	4986      	ldr	r1, [pc, #536]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 800277e:	5c8a      	ldrb	r2, [r1, r2]
 8002780:	3338      	adds	r3, #56	@ 0x38
 8002782:	443b      	add	r3, r7
 8002784:	f803 2c18 	strb.w	r2, [r3, #-24]
						HYI_BUFFER[18+i] =Lora_Rx_Buffer[i+13]; // 18 19 20 21
 8002788:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800278c:	f103 020d 	add.w	r2, r3, #13
 8002790:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002794:	3312      	adds	r3, #18
 8002796:	4980      	ldr	r1, [pc, #512]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 8002798:	5c89      	ldrb	r1, [r1, r2]
 800279a:	4a80      	ldr	r2, [pc, #512]	@ (800299c <Sustainer_union_converter+0x2d0>)
 800279c:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 800279e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80027a2:	3301      	adds	r3, #1
 80027a4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80027a8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d9df      	bls.n	8002770 <Sustainer_union_converter+0xa4>
					 }
					 Sustainer.gpslongitude=f2u8_longitude.fVal;
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	4a7b      	ldr	r2, [pc, #492]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 80027b4:	60d3      	str	r3, [r2, #12]

				 float2unit8 f2u8_altitude;
					 for(uint8_t i=0;i<4;i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80027bc:	e01b      	b.n	80027f6 <Sustainer_union_converter+0x12a>
					 {
						f2u8_altitude.array[i]=Lora_Rx_Buffer[i+14];
 80027be:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80027c2:	f103 020e 	add.w	r2, r3, #14
 80027c6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80027ca:	4973      	ldr	r1, [pc, #460]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 80027cc:	5c8a      	ldrb	r2, [r1, r2]
 80027ce:	3338      	adds	r3, #56	@ 0x38
 80027d0:	443b      	add	r3, r7
 80027d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
						HYI_BUFFER[6+i] =Lora_Rx_Buffer[i+17]; // 6 7 8 9
 80027d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80027da:	f103 0211 	add.w	r2, r3, #17
 80027de:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80027e2:	3306      	adds	r3, #6
 80027e4:	496c      	ldr	r1, [pc, #432]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 80027e6:	5c89      	ldrb	r1, [r1, r2]
 80027e8:	4a6c      	ldr	r2, [pc, #432]	@ (800299c <Sustainer_union_converter+0x2d0>)
 80027ea:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80027ec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80027f0:	3301      	adds	r3, #1
 80027f2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80027f6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d9df      	bls.n	80027be <Sustainer_union_converter+0xf2>
					 }
					 Sustainer.altitude=f2u8_altitude.fVal;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	4a67      	ldr	r2, [pc, #412]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 8002802:	6153      	str	r3, [r2, #20]

				 float2unit8 f2u8_speed;

					 for(uint8_t i=0;i<4;i++)
 8002804:	2300      	movs	r3, #0
 8002806:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800280a:	e010      	b.n	800282e <Sustainer_union_converter+0x162>
					 {
						 f2u8_speed.array[i]=Lora_Rx_Buffer[i+18];
 800280c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002810:	f103 0212 	add.w	r2, r3, #18
 8002814:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002818:	495f      	ldr	r1, [pc, #380]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 800281a:	5c8a      	ldrb	r2, [r1, r2]
 800281c:	3338      	adds	r3, #56	@ 0x38
 800281e:	443b      	add	r3, r7
 8002820:	f803 2c20 	strb.w	r2, [r3, #-32]
					 for(uint8_t i=0;i<4;i++)
 8002824:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002828:	3301      	adds	r3, #1
 800282a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800282e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002832:	2b03      	cmp	r3, #3
 8002834:	d9ea      	bls.n	800280c <Sustainer_union_converter+0x140>
					 }
					 Sustainer.speed=f2u8_speed.fVal;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4a59      	ldr	r2, [pc, #356]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 800283a:	6113      	str	r3, [r2, #16]

				 float2unit8 f2u8_temp;
					 for(uint8_t i=0;i<4;i++)
 800283c:	2300      	movs	r3, #0
 800283e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002842:	e010      	b.n	8002866 <Sustainer_union_converter+0x19a>
					 {
						 f2u8_temp.array[i]=Lora_Rx_Buffer[i+22];
 8002844:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002848:	f103 0216 	add.w	r2, r3, #22
 800284c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002850:	4951      	ldr	r1, [pc, #324]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 8002852:	5c8a      	ldrb	r2, [r1, r2]
 8002854:	3338      	adds	r3, #56	@ 0x38
 8002856:	443b      	add	r3, r7
 8002858:	f803 2c24 	strb.w	r2, [r3, #-36]
					 for(uint8_t i=0;i<4;i++)
 800285c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002860:	3301      	adds	r3, #1
 8002862:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002866:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800286a:	2b03      	cmp	r3, #3
 800286c:	d9ea      	bls.n	8002844 <Sustainer_union_converter+0x178>
					 }
					 Sustainer.temperature=f2u8_temp.fVal;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	4a4b      	ldr	r2, [pc, #300]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 8002872:	6193      	str	r3, [r2, #24]

				 float2unit8 f2u8_accx;
					 for(uint8_t i=0;i<4;i++)
 8002874:	2300      	movs	r3, #0
 8002876:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800287a:	e010      	b.n	800289e <Sustainer_union_converter+0x1d2>
					 {
						 f2u8_accx.array[i]=Lora_Rx_Buffer[i+26];
 800287c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002880:	f103 021a 	add.w	r2, r3, #26
 8002884:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002888:	4943      	ldr	r1, [pc, #268]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 800288a:	5c8a      	ldrb	r2, [r1, r2]
 800288c:	3338      	adds	r3, #56	@ 0x38
 800288e:	443b      	add	r3, r7
 8002890:	f803 2c28 	strb.w	r2, [r3, #-40]
					 for(uint8_t i=0;i<4;i++)
 8002894:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002898:	3301      	adds	r3, #1
 800289a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800289e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d9ea      	bls.n	800287c <Sustainer_union_converter+0x1b0>
						// HYI_BUFFER[58+i]=Lora_Rx_Buffer[i+29]; //
					 }
					 Sustainer.accx=f2u8_accx.fVal;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4a3d      	ldr	r2, [pc, #244]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 80028aa:	61d3      	str	r3, [r2, #28]

				float2unit8 f2u8_accy;
					 for(uint8_t i=0;i<4;i++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80028b2:	e010      	b.n	80028d6 <Sustainer_union_converter+0x20a>
					 {
						 f2u8_accy.array[i]=Lora_Rx_Buffer[i+30];
 80028b4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80028b8:	f103 021e 	add.w	r2, r3, #30
 80028bc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80028c0:	4935      	ldr	r1, [pc, #212]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 80028c2:	5c8a      	ldrb	r2, [r1, r2]
 80028c4:	3338      	adds	r3, #56	@ 0x38
 80028c6:	443b      	add	r3, r7
 80028c8:	f803 2c2c 	strb.w	r2, [r3, #-44]
					 for(uint8_t i=0;i<4;i++)
 80028cc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80028d0:	3301      	adds	r3, #1
 80028d2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80028d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d9ea      	bls.n	80028b4 <Sustainer_union_converter+0x1e8>
						 //HYI_BUFFER[62+i]=Lora_Rx_Buffer[i+33];
					 }
					 Sustainer.accy=f2u8_accy.fVal;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a2f      	ldr	r2, [pc, #188]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 80028e2:	6213      	str	r3, [r2, #32]

				float2unit8 f2u8_accz;
				      for(uint8_t i=0;i<4;i++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80028ea:	e010      	b.n	800290e <Sustainer_union_converter+0x242>
					 {
				    	  f2u8_accz.array[i]=Lora_Rx_Buffer[i+34];
 80028ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028f0:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80028f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80028f8:	4927      	ldr	r1, [pc, #156]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 80028fa:	5c8a      	ldrb	r2, [r1, r2]
 80028fc:	3338      	adds	r3, #56	@ 0x38
 80028fe:	443b      	add	r3, r7
 8002900:	f803 2c30 	strb.w	r2, [r3, #-48]
				      for(uint8_t i=0;i<4;i++)
 8002904:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002908:	3301      	adds	r3, #1
 800290a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800290e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002912:	2b03      	cmp	r3, #3
 8002914:	d9ea      	bls.n	80028ec <Sustainer_union_converter+0x220>
				    	//  HYI_BUFFER[66+i]=Lora_Rx_Buffer[i+37];
					 }
				      Sustainer.accz=f2u8_accz.fVal;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	4a21      	ldr	r2, [pc, #132]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 800291a:	6253      	str	r3, [r2, #36]	@ 0x24

				float2unit8 f2u8_roll;
					  for(uint8_t i=0;i<4;i++)
 800291c:	2300      	movs	r3, #0
 800291e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002922:	e010      	b.n	8002946 <Sustainer_union_converter+0x27a>
					 {
						  f2u8_roll.array[i]=Lora_Rx_Buffer[i+38];
 8002924:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002928:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800292c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002930:	4919      	ldr	r1, [pc, #100]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 8002932:	5c8a      	ldrb	r2, [r1, r2]
 8002934:	3338      	adds	r3, #56	@ 0x38
 8002936:	443b      	add	r3, r7
 8002938:	f803 2c34 	strb.w	r2, [r3, #-52]
					  for(uint8_t i=0;i<4;i++)
 800293c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002940:	3301      	adds	r3, #1
 8002942:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002946:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800294a:	2b03      	cmp	r3, #3
 800294c:	d9ea      	bls.n	8002924 <Sustainer_union_converter+0x258>
					 }
					  Sustainer.normal=f2u8_roll.fVal;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a13      	ldr	r2, [pc, #76]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 8002952:	6293      	str	r3, [r2, #40]	@ 0x28

				float2unit8 f2u8_pitch;
					  for(uint8_t i=0;i<4;i++)
 8002954:	2300      	movs	r3, #0
 8002956:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800295a:	e010      	b.n	800297e <Sustainer_union_converter+0x2b2>
					 {
						  f2u8_pitch.array[i]=Lora_Rx_Buffer[i+42];
 800295c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002960:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8002964:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002968:	490b      	ldr	r1, [pc, #44]	@ (8002998 <Sustainer_union_converter+0x2cc>)
 800296a:	5c8a      	ldrb	r2, [r1, r2]
 800296c:	3338      	adds	r3, #56	@ 0x38
 800296e:	443b      	add	r3, r7
 8002970:	f803 2c38 	strb.w	r2, [r3, #-56]
					  for(uint8_t i=0;i<4;i++)
 8002974:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002978:	3301      	adds	r3, #1
 800297a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800297e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002982:	2b03      	cmp	r3, #3
 8002984:	d9ea      	bls.n	800295c <Sustainer_union_converter+0x290>
					 }
					  Sustainer.pitch=f2u8_pitch.fVal;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <Sustainer_union_converter+0x2d4>)
 800298a:	62d3      	str	r3, [r2, #44]	@ 0x2c

}
 800298c:	bf00      	nop
 800298e:	373c      	adds	r7, #60	@ 0x3c
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	20000540 	.word	0x20000540
 800299c:	200005d0 	.word	0x200005d0
 80029a0:	200007b4 	.word	0x200007b4

080029a4 <Payload_union_converter>:
void Payload_union_converter(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
	 float2unit8 f2u8;
			 for(uint8_t i=0;i<4;i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e013      	b.n	80029d8 <Payload_union_converter+0x34>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+2];
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	1c9a      	adds	r2, r3, #2
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	4985      	ldr	r1, [pc, #532]	@ (8002bcc <Payload_union_converter+0x228>)
 80029b8:	5c8a      	ldrb	r2, [r1, r2]
 80029ba:	3310      	adds	r3, #16
 80029bc:	443b      	add	r3, r7
 80029be:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[22+i]=Lora_Rx_Buffer[i+5]; // 34 35 36 37
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	1d5a      	adds	r2, r3, #5
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	3316      	adds	r3, #22
 80029ca:	4980      	ldr	r1, [pc, #512]	@ (8002bcc <Payload_union_converter+0x228>)
 80029cc:	5c89      	ldrb	r1, [r1, r2]
 80029ce:	4a80      	ldr	r2, [pc, #512]	@ (8002bd0 <Payload_union_converter+0x22c>)
 80029d0:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	3301      	adds	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d9e8      	bls.n	80029b0 <Payload_union_converter+0xc>
			 }
			 Payload.gpsaltitude=f2u8.fVal;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	4a7c      	ldr	r2, [pc, #496]	@ (8002bd4 <Payload_union_converter+0x230>)
 80029e2:	6053      	str	r3, [r2, #4]


			 for(uint8_t i=0;i<4;i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	73bb      	strb	r3, [r7, #14]
 80029e8:	e014      	b.n	8002a14 <Payload_union_converter+0x70>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+6];
 80029ea:	7bbb      	ldrb	r3, [r7, #14]
 80029ec:	1d9a      	adds	r2, r3, #6
 80029ee:	7bbb      	ldrb	r3, [r7, #14]
 80029f0:	4976      	ldr	r1, [pc, #472]	@ (8002bcc <Payload_union_converter+0x228>)
 80029f2:	5c8a      	ldrb	r2, [r1, r2]
 80029f4:	3310      	adds	r3, #16
 80029f6:	443b      	add	r3, r7
 80029f8:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[26+i]=Lora_Rx_Buffer[i+9]; // 38 39 40 41
 80029fc:	7bbb      	ldrb	r3, [r7, #14]
 80029fe:	f103 0209 	add.w	r2, r3, #9
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	331a      	adds	r3, #26
 8002a06:	4971      	ldr	r1, [pc, #452]	@ (8002bcc <Payload_union_converter+0x228>)
 8002a08:	5c89      	ldrb	r1, [r1, r2]
 8002a0a:	4a71      	ldr	r2, [pc, #452]	@ (8002bd0 <Payload_union_converter+0x22c>)
 8002a0c:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002a0e:	7bbb      	ldrb	r3, [r7, #14]
 8002a10:	3301      	adds	r3, #1
 8002a12:	73bb      	strb	r3, [r7, #14]
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d9e7      	bls.n	80029ea <Payload_union_converter+0x46>
			 }
			 Payload.gpslatitude=f2u8.fVal;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	4a6d      	ldr	r2, [pc, #436]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002a1e:	6093      	str	r3, [r2, #8]

			 for(uint8_t i=0;i<4;i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	737b      	strb	r3, [r7, #13]
 8002a24:	e015      	b.n	8002a52 <Payload_union_converter+0xae>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+10];
 8002a26:	7b7b      	ldrb	r3, [r7, #13]
 8002a28:	f103 020a 	add.w	r2, r3, #10
 8002a2c:	7b7b      	ldrb	r3, [r7, #13]
 8002a2e:	4967      	ldr	r1, [pc, #412]	@ (8002bcc <Payload_union_converter+0x228>)
 8002a30:	5c8a      	ldrb	r2, [r1, r2]
 8002a32:	3310      	adds	r3, #16
 8002a34:	443b      	add	r3, r7
 8002a36:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[30+i]=Lora_Rx_Buffer[i+13]; // 42 43 44 45
 8002a3a:	7b7b      	ldrb	r3, [r7, #13]
 8002a3c:	f103 020d 	add.w	r2, r3, #13
 8002a40:	7b7b      	ldrb	r3, [r7, #13]
 8002a42:	331e      	adds	r3, #30
 8002a44:	4961      	ldr	r1, [pc, #388]	@ (8002bcc <Payload_union_converter+0x228>)
 8002a46:	5c89      	ldrb	r1, [r1, r2]
 8002a48:	4a61      	ldr	r2, [pc, #388]	@ (8002bd0 <Payload_union_converter+0x22c>)
 8002a4a:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002a4c:	7b7b      	ldrb	r3, [r7, #13]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	737b      	strb	r3, [r7, #13]
 8002a52:	7b7b      	ldrb	r3, [r7, #13]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d9e6      	bls.n	8002a26 <Payload_union_converter+0x82>
			 }
			 Payload.gpslongitude=f2u8.fVal;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002a5c:	60d3      	str	r3, [r2, #12]

			 for(uint8_t i=0;i<4;i++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	733b      	strb	r3, [r7, #12]
 8002a62:	e00c      	b.n	8002a7e <Payload_union_converter+0xda>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+14];
 8002a64:	7b3b      	ldrb	r3, [r7, #12]
 8002a66:	f103 020e 	add.w	r2, r3, #14
 8002a6a:	7b3b      	ldrb	r3, [r7, #12]
 8002a6c:	4957      	ldr	r1, [pc, #348]	@ (8002bcc <Payload_union_converter+0x228>)
 8002a6e:	5c8a      	ldrb	r2, [r1, r2]
 8002a70:	3310      	adds	r3, #16
 8002a72:	443b      	add	r3, r7
 8002a74:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002a78:	7b3b      	ldrb	r3, [r7, #12]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	733b      	strb	r3, [r7, #12]
 8002a7e:	7b3b      	ldrb	r3, [r7, #12]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d9ef      	bls.n	8002a64 <Payload_union_converter+0xc0>
			 }
			 Payload.altitude=f2u8.fVal;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4a53      	ldr	r2, [pc, #332]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002a88:	6153      	str	r3, [r2, #20]


			 for(uint8_t i=0;i<4;i++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	72fb      	strb	r3, [r7, #11]
 8002a8e:	e00c      	b.n	8002aaa <Payload_union_converter+0x106>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+18];
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	f103 0212 	add.w	r2, r3, #18
 8002a96:	7afb      	ldrb	r3, [r7, #11]
 8002a98:	494c      	ldr	r1, [pc, #304]	@ (8002bcc <Payload_union_converter+0x228>)
 8002a9a:	5c8a      	ldrb	r2, [r1, r2]
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	443b      	add	r3, r7
 8002aa0:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002aa4:	7afb      	ldrb	r3, [r7, #11]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	72fb      	strb	r3, [r7, #11]
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d9ef      	bls.n	8002a90 <Payload_union_converter+0xec>
			 }
			 Payload.speed=f2u8.fVal;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4a48      	ldr	r2, [pc, #288]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002ab4:	6113      	str	r3, [r2, #16]


			 for(uint8_t i=0;i<4;i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	72bb      	strb	r3, [r7, #10]
 8002aba:	e00c      	b.n	8002ad6 <Payload_union_converter+0x132>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+22];
 8002abc:	7abb      	ldrb	r3, [r7, #10]
 8002abe:	f103 0216 	add.w	r2, r3, #22
 8002ac2:	7abb      	ldrb	r3, [r7, #10]
 8002ac4:	4941      	ldr	r1, [pc, #260]	@ (8002bcc <Payload_union_converter+0x228>)
 8002ac6:	5c8a      	ldrb	r2, [r1, r2]
 8002ac8:	3310      	adds	r3, #16
 8002aca:	443b      	add	r3, r7
 8002acc:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002ad0:	7abb      	ldrb	r3, [r7, #10]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	72bb      	strb	r3, [r7, #10]
 8002ad6:	7abb      	ldrb	r3, [r7, #10]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d9ef      	bls.n	8002abc <Payload_union_converter+0x118>
			 }
			 Payload.temperature=f2u8.fVal;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002ae0:	6193      	str	r3, [r2, #24]


			 for(uint8_t i=0;i<4;i++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	727b      	strb	r3, [r7, #9]
 8002ae6:	e00c      	b.n	8002b02 <Payload_union_converter+0x15e>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+26];
 8002ae8:	7a7b      	ldrb	r3, [r7, #9]
 8002aea:	f103 021a 	add.w	r2, r3, #26
 8002aee:	7a7b      	ldrb	r3, [r7, #9]
 8002af0:	4936      	ldr	r1, [pc, #216]	@ (8002bcc <Payload_union_converter+0x228>)
 8002af2:	5c8a      	ldrb	r2, [r1, r2]
 8002af4:	3310      	adds	r3, #16
 8002af6:	443b      	add	r3, r7
 8002af8:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002afc:	7a7b      	ldrb	r3, [r7, #9]
 8002afe:	3301      	adds	r3, #1
 8002b00:	727b      	strb	r3, [r7, #9]
 8002b02:	7a7b      	ldrb	r3, [r7, #9]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d9ef      	bls.n	8002ae8 <Payload_union_converter+0x144>
			 }
			 Payload.accx=f2u8.fVal;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4a32      	ldr	r2, [pc, #200]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002b0c:	61d3      	str	r3, [r2, #28]


			 for(uint8_t i=0;i<4;i++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	723b      	strb	r3, [r7, #8]
 8002b12:	e00c      	b.n	8002b2e <Payload_union_converter+0x18a>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+30];
 8002b14:	7a3b      	ldrb	r3, [r7, #8]
 8002b16:	f103 021e 	add.w	r2, r3, #30
 8002b1a:	7a3b      	ldrb	r3, [r7, #8]
 8002b1c:	492b      	ldr	r1, [pc, #172]	@ (8002bcc <Payload_union_converter+0x228>)
 8002b1e:	5c8a      	ldrb	r2, [r1, r2]
 8002b20:	3310      	adds	r3, #16
 8002b22:	443b      	add	r3, r7
 8002b24:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002b28:	7a3b      	ldrb	r3, [r7, #8]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	723b      	strb	r3, [r7, #8]
 8002b2e:	7a3b      	ldrb	r3, [r7, #8]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d9ef      	bls.n	8002b14 <Payload_union_converter+0x170>
			 }
			 Payload.accy=f2u8.fVal;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4a27      	ldr	r2, [pc, #156]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002b38:	6213      	str	r3, [r2, #32]


		      for(uint8_t i=0;i<4;i++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	71fb      	strb	r3, [r7, #7]
 8002b3e:	e00c      	b.n	8002b5a <Payload_union_converter+0x1b6>
			 {
		    	  f2u8.array[i]=Lora_Rx_Buffer[i+34];
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	4920      	ldr	r1, [pc, #128]	@ (8002bcc <Payload_union_converter+0x228>)
 8002b4a:	5c8a      	ldrb	r2, [r1, r2]
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	443b      	add	r3, r7
 8002b50:	f803 2c10 	strb.w	r2, [r3, #-16]
		      for(uint8_t i=0;i<4;i++)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	3301      	adds	r3, #1
 8002b58:	71fb      	strb	r3, [r7, #7]
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d9ef      	bls.n	8002b40 <Payload_union_converter+0x19c>
			 }
		      Payload.accz=f2u8.fVal;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002b64:	6253      	str	r3, [r2, #36]	@ 0x24


			  for(uint8_t i=0;i<4;i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	71bb      	strb	r3, [r7, #6]
 8002b6a:	e00c      	b.n	8002b86 <Payload_union_converter+0x1e2>
			 {
				  f2u8.array[i]=Lora_Rx_Buffer[i+38];
 8002b6c:	79bb      	ldrb	r3, [r7, #6]
 8002b6e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8002b72:	79bb      	ldrb	r3, [r7, #6]
 8002b74:	4915      	ldr	r1, [pc, #84]	@ (8002bcc <Payload_union_converter+0x228>)
 8002b76:	5c8a      	ldrb	r2, [r1, r2]
 8002b78:	3310      	adds	r3, #16
 8002b7a:	443b      	add	r3, r7
 8002b7c:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 8002b80:	79bb      	ldrb	r3, [r7, #6]
 8002b82:	3301      	adds	r3, #1
 8002b84:	71bb      	strb	r3, [r7, #6]
 8002b86:	79bb      	ldrb	r3, [r7, #6]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d9ef      	bls.n	8002b6c <Payload_union_converter+0x1c8>
			 }
			  Payload.normal=f2u8.fVal;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4a11      	ldr	r2, [pc, #68]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002b90:	6293      	str	r3, [r2, #40]	@ 0x28


			  for(uint8_t i=0;i<4;i++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	717b      	strb	r3, [r7, #5]
 8002b96:	e00c      	b.n	8002bb2 <Payload_union_converter+0x20e>
			 {
				  f2u8.array[i]=Lora_Rx_Buffer[i+42];
 8002b98:	797b      	ldrb	r3, [r7, #5]
 8002b9a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8002b9e:	797b      	ldrb	r3, [r7, #5]
 8002ba0:	490a      	ldr	r1, [pc, #40]	@ (8002bcc <Payload_union_converter+0x228>)
 8002ba2:	5c8a      	ldrb	r2, [r1, r2]
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	443b      	add	r3, r7
 8002ba8:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 8002bac:	797b      	ldrb	r3, [r7, #5]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	717b      	strb	r3, [r7, #5]
 8002bb2:	797b      	ldrb	r3, [r7, #5]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d9ef      	bls.n	8002b98 <Payload_union_converter+0x1f4>
			 }
			  Payload.pitch=f2u8.fVal;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	4a06      	ldr	r2, [pc, #24]	@ (8002bd4 <Payload_union_converter+0x230>)
 8002bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000540 	.word	0x20000540
 8002bd0:	200005d0 	.word	0x200005d0
 8002bd4:	20000744 	.word	0x20000744

08002bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bdc:	b672      	cpsid	i
}
 8002bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <Error_Handler+0x8>

08002be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <HAL_MspInit+0x4c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8002c30 <HAL_MspInit+0x4c>)
 8002bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002c30 <HAL_MspInit+0x4c>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_MspInit+0x4c>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	4a08      	ldr	r2, [pc, #32]	@ (8002c30 <HAL_MspInit+0x4c>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_MspInit+0x4c>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	@ 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc0 <HAL_ADC_MspInit+0x8c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d12f      	bne.n	8002cb6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <HAL_ADC_MspInit+0x90>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5e:	4a19      	ldr	r2, [pc, #100]	@ (8002cc4 <HAL_ADC_MspInit+0x90>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c66:	4b17      	ldr	r3, [pc, #92]	@ (8002cc4 <HAL_ADC_MspInit+0x90>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <HAL_ADC_MspInit+0x90>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <HAL_ADC_MspInit+0x90>)
 8002c7c:	f043 0304 	orr.w	r3, r3, #4
 8002c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c82:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <HAL_ADC_MspInit+0x90>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c92:	2303      	movs	r3, #3
 8002c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9a:	f107 0314 	add.w	r3, r7, #20
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4809      	ldr	r0, [pc, #36]	@ (8002cc8 <HAL_ADC_MspInit+0x94>)
 8002ca2:	f001 fe21 	bl	80048e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	2012      	movs	r0, #18
 8002cac:	f001 f9e3 	bl	8004076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002cb0:	2012      	movs	r0, #18
 8002cb2:	f001 f9fc 	bl	80040ae <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	@ 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40012000 	.word	0x40012000
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020800 	.word	0x40020800

08002ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a19      	ldr	r2, [pc, #100]	@ (8002d50 <HAL_I2C_MspInit+0x84>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d12b      	bne.n	8002d46 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <HAL_I2C_MspInit+0x88>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf6:	4a17      	ldr	r2, [pc, #92]	@ (8002d54 <HAL_I2C_MspInit+0x88>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <HAL_I2C_MspInit+0x88>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d0a:	23c0      	movs	r3, #192	@ 0xc0
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d0e:	2312      	movs	r3, #18
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	480c      	ldr	r0, [pc, #48]	@ (8002d58 <HAL_I2C_MspInit+0x8c>)
 8002d26:	f001 fddf 	bl	80048e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_I2C_MspInit+0x88>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4a08      	ldr	r2, [pc, #32]	@ (8002d54 <HAL_I2C_MspInit+0x88>)
 8002d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_I2C_MspInit+0x88>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	@ 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40005400 	.word	0x40005400
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020400 	.word	0x40020400

08002d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	60da      	str	r2, [r3, #12]
 8002d72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a19      	ldr	r2, [pc, #100]	@ (8002de0 <HAL_SPI_MspInit+0x84>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d12b      	bne.n	8002dd6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	4b18      	ldr	r3, [pc, #96]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	4a17      	ldr	r2, [pc, #92]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002d88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d8e:	4b15      	ldr	r3, [pc, #84]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	4a10      	ldr	r2, [pc, #64]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <HAL_SPI_MspInit+0x88>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002db6:	23e0      	movs	r3, #224	@ 0xe0
 8002db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4805      	ldr	r0, [pc, #20]	@ (8002de8 <HAL_SPI_MspInit+0x8c>)
 8002dd2:	f001 fd89 	bl	80048e8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002dd6:	bf00      	nop
 8002dd8:	3728      	adds	r7, #40	@ 0x28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40013000 	.word	0x40013000
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020000 	.word	0x40020000

08002dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfc:	d116      	bne.n	8002e2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	4b28      	ldr	r3, [pc, #160]	@ (8002ea4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	4a27      	ldr	r2, [pc, #156]	@ (8002ea4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	201c      	movs	r0, #28
 8002e20:	f001 f929 	bl	8004076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e24:	201c      	movs	r0, #28
 8002e26:	f001 f942 	bl	80040ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e2a:	e036      	b.n	8002e9a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea8 <HAL_TIM_Base_MspInit+0xbc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d116      	bne.n	8002e64 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e46:	4b17      	ldr	r3, [pc, #92]	@ (8002ea4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	201d      	movs	r0, #29
 8002e58:	f001 f90d 	bl	8004076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e5c:	201d      	movs	r0, #29
 8002e5e:	f001 f926 	bl	80040ae <HAL_NVIC_EnableIRQ>
}
 8002e62:	e01a      	b.n	8002e9a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a10      	ldr	r2, [pc, #64]	@ (8002eac <HAL_TIM_Base_MspInit+0xc0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d115      	bne.n	8002e9a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <HAL_TIM_Base_MspInit+0xb8>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	201e      	movs	r0, #30
 8002e90:	f001 f8f1 	bl	8004076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e94:	201e      	movs	r0, #30
 8002e96:	f001 f90a 	bl	80040ae <HAL_NVIC_EnableIRQ>
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800

08002eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b090      	sub	sp, #64	@ 0x40
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a9b      	ldr	r2, [pc, #620]	@ (800313c <HAL_UART_MspInit+0x28c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d134      	bne.n	8002f3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ed6:	4b9a      	ldr	r3, [pc, #616]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	4a99      	ldr	r2, [pc, #612]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002edc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee2:	4b97      	ldr	r3, [pc, #604]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef2:	4b93      	ldr	r3, [pc, #588]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	4a92      	ldr	r2, [pc, #584]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efe:	4b90      	ldr	r3, [pc, #576]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	2303      	movs	r3, #3
 8002f18:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f22:	4619      	mov	r1, r3
 8002f24:	4887      	ldr	r0, [pc, #540]	@ (8003144 <HAL_UART_MspInit+0x294>)
 8002f26:	f001 fcdf 	bl	80048e8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	2034      	movs	r0, #52	@ 0x34
 8002f30:	f001 f8a1 	bl	8004076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002f34:	2034      	movs	r0, #52	@ 0x34
 8002f36:	f001 f8ba 	bl	80040ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f3a:	e0fa      	b.n	8003132 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a81      	ldr	r2, [pc, #516]	@ (8003148 <HAL_UART_MspInit+0x298>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d134      	bne.n	8002fb0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f56:	4b7a      	ldr	r3, [pc, #488]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	4b76      	ldr	r3, [pc, #472]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	4a75      	ldr	r2, [pc, #468]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f72:	4b73      	ldr	r3, [pc, #460]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f7e:	230c      	movs	r3, #12
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f8e:	2307      	movs	r3, #7
 8002f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f96:	4619      	mov	r1, r3
 8002f98:	486a      	ldr	r0, [pc, #424]	@ (8003144 <HAL_UART_MspInit+0x294>)
 8002f9a:	f001 fca5 	bl	80048e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	2026      	movs	r0, #38	@ 0x26
 8002fa4:	f001 f867 	bl	8004076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fa8:	2026      	movs	r0, #38	@ 0x26
 8002faa:	f001 f880 	bl	80040ae <HAL_NVIC_EnableIRQ>
}
 8002fae:	e0c0      	b.n	8003132 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART3)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a65      	ldr	r2, [pc, #404]	@ (800314c <HAL_UART_MspInit+0x29c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f040 8082 	bne.w	80030c0 <HAL_UART_MspInit+0x210>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	4b5f      	ldr	r3, [pc, #380]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002fc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fcc:	4b5c      	ldr	r3, [pc, #368]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	4b58      	ldr	r3, [pc, #352]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	4a57      	ldr	r2, [pc, #348]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe8:	4b55      	ldr	r3, [pc, #340]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	4b51      	ldr	r3, [pc, #324]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffc:	4a50      	ldr	r2, [pc, #320]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8002ffe:	f043 0302 	orr.w	r3, r3, #2
 8003002:	6313      	str	r3, [r2, #48]	@ 0x30
 8003004:	4b4e      	ldr	r3, [pc, #312]	@ (8003140 <HAL_UART_MspInit+0x290>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003010:	2320      	movs	r3, #32
 8003012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003020:	2307      	movs	r3, #7
 8003022:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003028:	4619      	mov	r1, r3
 800302a:	4849      	ldr	r0, [pc, #292]	@ (8003150 <HAL_UART_MspInit+0x2a0>)
 800302c:	f001 fc5c 	bl	80048e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003042:	2307      	movs	r3, #7
 8003044:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003046:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800304a:	4619      	mov	r1, r3
 800304c:	4841      	ldr	r0, [pc, #260]	@ (8003154 <HAL_UART_MspInit+0x2a4>)
 800304e:	f001 fc4b 	bl	80048e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003052:	4b41      	ldr	r3, [pc, #260]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 8003054:	4a41      	ldr	r2, [pc, #260]	@ (800315c <HAL_UART_MspInit+0x2ac>)
 8003056:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003058:	4b3f      	ldr	r3, [pc, #252]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 800305a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800305e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003060:	4b3d      	ldr	r3, [pc, #244]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003066:	4b3c      	ldr	r3, [pc, #240]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800306c:	4b3a      	ldr	r3, [pc, #232]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 800306e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003072:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003074:	4b38      	ldr	r3, [pc, #224]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800307a:	4b37      	ldr	r3, [pc, #220]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003080:	4b35      	ldr	r3, [pc, #212]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003086:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800308c:	4b32      	ldr	r3, [pc, #200]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 800308e:	2200      	movs	r2, #0
 8003090:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003092:	4831      	ldr	r0, [pc, #196]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 8003094:	f001 f826 	bl	80040e4 <HAL_DMA_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 800309e:	f7ff fd9b 	bl	8002bd8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 80030a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003158 <HAL_UART_MspInit+0x2a8>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	2027      	movs	r0, #39	@ 0x27
 80030b4:	f000 ffdf 	bl	8004076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030b8:	2027      	movs	r0, #39	@ 0x27
 80030ba:	f000 fff8 	bl	80040ae <HAL_NVIC_EnableIRQ>
}
 80030be:	e038      	b.n	8003132 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART6)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a26      	ldr	r2, [pc, #152]	@ (8003160 <HAL_UART_MspInit+0x2b0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d133      	bne.n	8003132 <HAL_UART_MspInit+0x282>
    __HAL_RCC_USART6_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003140 <HAL_UART_MspInit+0x290>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <HAL_UART_MspInit+0x290>)
 80030d4:	f043 0320 	orr.w	r3, r3, #32
 80030d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030da:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_UART_MspInit+0x290>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <HAL_UART_MspInit+0x290>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	4a14      	ldr	r2, [pc, #80]	@ (8003140 <HAL_UART_MspInit+0x290>)
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030f6:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <HAL_UART_MspInit+0x290>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS_Tx_Pin|RS_Rx_Pin;
 8003102:	23c0      	movs	r3, #192	@ 0xc0
 8003104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310e:	2303      	movs	r3, #3
 8003110:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003112:	2308      	movs	r3, #8
 8003114:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003116:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800311a:	4619      	mov	r1, r3
 800311c:	480c      	ldr	r0, [pc, #48]	@ (8003150 <HAL_UART_MspInit+0x2a0>)
 800311e:	f001 fbe3 	bl	80048e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	2047      	movs	r0, #71	@ 0x47
 8003128:	f000 ffa5 	bl	8004076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800312c:	2047      	movs	r0, #71	@ 0x47
 800312e:	f000 ffbe 	bl	80040ae <HAL_NVIC_EnableIRQ>
}
 8003132:	bf00      	nop
 8003134:	3740      	adds	r7, #64	@ 0x40
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40004c00 	.word	0x40004c00
 8003140:	40023800 	.word	0x40023800
 8003144:	40020000 	.word	0x40020000
 8003148:	40004400 	.word	0x40004400
 800314c:	40004800 	.word	0x40004800
 8003150:	40020800 	.word	0x40020800
 8003154:	40020400 	.word	0x40020400
 8003158:	200004e0 	.word	0x200004e0
 800315c:	40026028 	.word	0x40026028
 8003160:	40011400 	.word	0x40011400

08003164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003168:	bf00      	nop
 800316a:	e7fd      	b.n	8003168 <NMI_Handler+0x4>

0800316c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <HardFault_Handler+0x4>

08003174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <MemManage_Handler+0x4>

0800317c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <BusFault_Handler+0x4>

08003184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <UsageFault_Handler+0x4>

0800318c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ba:	f000 f9b1 	bl	8003520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80031c8:	4802      	ldr	r0, [pc, #8]	@ (80031d4 <DMA1_Stream1_IRQHandler+0x10>)
 80031ca:	f001 f923 	bl	8004414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200004e0 	.word	0x200004e0

080031d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80031dc:	4802      	ldr	r0, [pc, #8]	@ (80031e8 <ADC_IRQHandler+0x10>)
 80031de:	f000 fb05 	bl	80037ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200001f4 	.word	0x200001f4

080031ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031f0:	4802      	ldr	r0, [pc, #8]	@ (80031fc <TIM2_IRQHandler+0x10>)
 80031f2:	f002 fd9b 	bl	8005d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200002e8 	.word	0x200002e8

08003200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003204:	4802      	ldr	r0, [pc, #8]	@ (8003210 <TIM3_IRQHandler+0x10>)
 8003206:	f002 fd91 	bl	8005d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000330 	.word	0x20000330

08003214 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003218:	4802      	ldr	r0, [pc, #8]	@ (8003224 <TIM4_IRQHandler+0x10>)
 800321a:	f002 fd87 	bl	8005d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000378 	.word	0x20000378

08003228 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800322c:	4802      	ldr	r0, [pc, #8]	@ (8003238 <USART2_IRQHandler+0x10>)
 800322e:	f003 facb 	bl	80067c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000408 	.word	0x20000408

0800323c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003240:	4802      	ldr	r0, [pc, #8]	@ (800324c <USART3_IRQHandler+0x10>)
 8003242:	f003 fac1 	bl	80067c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000450 	.word	0x20000450

08003250 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003254:	4802      	ldr	r0, [pc, #8]	@ (8003260 <UART4_IRQHandler+0x10>)
 8003256:	f003 fab7 	bl	80067c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200003c0 	.word	0x200003c0

08003264 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003268:	4802      	ldr	r0, [pc, #8]	@ (8003274 <USART6_IRQHandler+0x10>)
 800326a:	f003 faad 	bl	80067c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000498 	.word	0x20000498

08003278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return 1;
 800327c:	2301      	movs	r3, #1
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <_kill>:

int _kill(int pid, int sig)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003292:	f006 fa45 	bl	8009720 <__errno>
 8003296:	4603      	mov	r3, r0
 8003298:	2216      	movs	r2, #22
 800329a:	601a      	str	r2, [r3, #0]
  return -1;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_exit>:

void _exit (int status)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032b0:	f04f 31ff 	mov.w	r1, #4294967295
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ffe7 	bl	8003288 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032ba:	bf00      	nop
 80032bc:	e7fd      	b.n	80032ba <_exit+0x12>

080032be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e00a      	b.n	80032e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032d0:	f3af 8000 	nop.w
 80032d4:	4601      	mov	r1, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	60ba      	str	r2, [r7, #8]
 80032dc:	b2ca      	uxtb	r2, r1
 80032de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3301      	adds	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	dbf0      	blt.n	80032d0 <_read+0x12>
  }

  return len;
 80032ee:	687b      	ldr	r3, [r7, #4]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	e009      	b.n	800331e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	60ba      	str	r2, [r7, #8]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3301      	adds	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	429a      	cmp	r2, r3
 8003324:	dbf1      	blt.n	800330a <_write+0x12>
  }
  return len;
 8003326:	687b      	ldr	r3, [r7, #4]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <_close>:

int _close(int file)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003358:	605a      	str	r2, [r3, #4]
  return 0;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <_isatty>:

int _isatty(int file)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003370:	2301      	movs	r3, #1
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a0:	4a14      	ldr	r2, [pc, #80]	@ (80033f4 <_sbrk+0x5c>)
 80033a2:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <_sbrk+0x60>)
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033ac:	4b13      	ldr	r3, [pc, #76]	@ (80033fc <_sbrk+0x64>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b4:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <_sbrk+0x64>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <_sbrk+0x68>)
 80033b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ba:	4b10      	ldr	r3, [pc, #64]	@ (80033fc <_sbrk+0x64>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d207      	bcs.n	80033d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033c8:	f006 f9aa 	bl	8009720 <__errno>
 80033cc:	4603      	mov	r3, r0
 80033ce:	220c      	movs	r2, #12
 80033d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	e009      	b.n	80033ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033d8:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <_sbrk+0x64>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <_sbrk+0x64>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	4a05      	ldr	r2, [pc, #20]	@ (80033fc <_sbrk+0x64>)
 80033e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20020000 	.word	0x20020000
 80033f8:	00000400 	.word	0x00000400
 80033fc:	200008a4 	.word	0x200008a4
 8003400:	200009f8 	.word	0x200009f8

08003404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003408:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <SystemInit+0x20>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <SystemInit+0x20>)
 8003410:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003414:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003428:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003460 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800342c:	f7ff ffea 	bl	8003404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003430:	480c      	ldr	r0, [pc, #48]	@ (8003464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003432:	490d      	ldr	r1, [pc, #52]	@ (8003468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003434:	4a0d      	ldr	r2, [pc, #52]	@ (800346c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003438:	e002      	b.n	8003440 <LoopCopyDataInit>

0800343a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800343a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800343c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343e:	3304      	adds	r3, #4

08003440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003444:	d3f9      	bcc.n	800343a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003446:	4a0a      	ldr	r2, [pc, #40]	@ (8003470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003448:	4c0a      	ldr	r4, [pc, #40]	@ (8003474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800344c:	e001      	b.n	8003452 <LoopFillZerobss>

0800344e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003450:	3204      	adds	r2, #4

08003452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003454:	d3fb      	bcc.n	800344e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003456:	f006 f969 	bl	800972c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800345a:	f7fd fdf1 	bl	8001040 <main>
  bx  lr    
 800345e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003468:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800346c:	0800c5c0 	.word	0x0800c5c0
  ldr r2, =_sbss
 8003470:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003474:	200009f8 	.word	0x200009f8

08003478 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003478:	e7fe      	b.n	8003478 <CAN1_RX0_IRQHandler>
	...

0800347c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003480:	4b0e      	ldr	r3, [pc, #56]	@ (80034bc <HAL_Init+0x40>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0d      	ldr	r2, [pc, #52]	@ (80034bc <HAL_Init+0x40>)
 8003486:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800348a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800348c:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <HAL_Init+0x40>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <HAL_Init+0x40>)
 8003492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003498:	4b08      	ldr	r3, [pc, #32]	@ (80034bc <HAL_Init+0x40>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a07      	ldr	r2, [pc, #28]	@ (80034bc <HAL_Init+0x40>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a4:	2003      	movs	r0, #3
 80034a6:	f000 fddb 	bl	8004060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034aa:	200f      	movs	r0, #15
 80034ac:	f000 f808 	bl	80034c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b0:	f7ff fb98 	bl	8002be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40023c00 	.word	0x40023c00

080034c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034c8:	4b12      	ldr	r3, [pc, #72]	@ (8003514 <HAL_InitTick+0x54>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <HAL_InitTick+0x58>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fdf3 	bl	80040ca <HAL_SYSTICK_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e00e      	b.n	800350c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d80a      	bhi.n	800350a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f4:	2200      	movs	r2, #0
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295
 80034fc:	f000 fdbb 	bl	8004076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003500:	4a06      	ldr	r2, [pc, #24]	@ (800351c <HAL_InitTick+0x5c>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000004 	.word	0x20000004
 8003518:	2000000c 	.word	0x2000000c
 800351c:	20000008 	.word	0x20000008

08003520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <HAL_IncTick+0x20>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_IncTick+0x24>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4413      	add	r3, r2
 8003530:	4a04      	ldr	r2, [pc, #16]	@ (8003544 <HAL_IncTick+0x24>)
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	2000000c 	.word	0x2000000c
 8003544:	200008a8 	.word	0x200008a8

08003548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return uwTick;
 800354c:	4b03      	ldr	r3, [pc, #12]	@ (800355c <HAL_GetTick+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	200008a8 	.word	0x200008a8

08003560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff ffee 	bl	8003548 <HAL_GetTick>
 800356c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d005      	beq.n	8003586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357a:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <HAL_Delay+0x44>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003586:	bf00      	nop
 8003588:	f7ff ffde 	bl	8003548 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	429a      	cmp	r2, r3
 8003596:	d8f7      	bhi.n	8003588 <HAL_Delay+0x28>
  {
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	2000000c 	.word	0x2000000c

080035a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e033      	b.n	8003626 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fb34 	bl	8002c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035ee:	f023 0302 	bic.w	r3, r3, #2
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fb5a 	bl	8003cb4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	f043 0201 	orr.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	@ 0x40
 8003616:	e001      	b.n	800361c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_ADC_Start_IT+0x1a>
 8003646:	2302      	movs	r3, #2
 8003648:	e0bd      	b.n	80037c6 <HAL_ADC_Start_IT+0x196>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d018      	beq.n	8003692 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003670:	4b58      	ldr	r3, [pc, #352]	@ (80037d4 <HAL_ADC_Start_IT+0x1a4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a58      	ldr	r2, [pc, #352]	@ (80037d8 <HAL_ADC_Start_IT+0x1a8>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0c9a      	lsrs	r2, r3, #18
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003684:	e002      	b.n	800368c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	3b01      	subs	r3, #1
 800368a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f9      	bne.n	8003686 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	f040 8085 	bne.w	80037ac <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d007      	beq.n	80036d4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e0:	d106      	bne.n	80036f0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	f023 0206 	bic.w	r2, r3, #6
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80036ee:	e002      	b.n	80036f6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036fe:	4b37      	ldr	r3, [pc, #220]	@ (80037dc <HAL_ADC_Start_IT+0x1ac>)
 8003700:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800370a:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800371a:	f043 0320 	orr.w	r3, r3, #32
 800371e:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2b00      	cmp	r3, #0
 800372a:	d12a      	bne.n	8003782 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2b      	ldr	r2, [pc, #172]	@ (80037e0 <HAL_ADC_Start_IT+0x1b0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d015      	beq.n	8003762 <HAL_ADC_Start_IT+0x132>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2a      	ldr	r2, [pc, #168]	@ (80037e4 <HAL_ADC_Start_IT+0x1b4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d105      	bne.n	800374c <HAL_ADC_Start_IT+0x11c>
 8003740:	4b26      	ldr	r3, [pc, #152]	@ (80037dc <HAL_ADC_Start_IT+0x1ac>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a25      	ldr	r2, [pc, #148]	@ (80037e8 <HAL_ADC_Start_IT+0x1b8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d136      	bne.n	80037c4 <HAL_ADC_Start_IT+0x194>
 8003756:	4b21      	ldr	r3, [pc, #132]	@ (80037dc <HAL_ADC_Start_IT+0x1ac>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d130      	bne.n	80037c4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d129      	bne.n	80037c4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	e020      	b.n	80037c4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a16      	ldr	r2, [pc, #88]	@ (80037e0 <HAL_ADC_Start_IT+0x1b0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d11b      	bne.n	80037c4 <HAL_ADC_Start_IT+0x194>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d114      	bne.n	80037c4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	e00b      	b.n	80037c4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	f043 0210 	orr.w	r2, r3, #16
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000004 	.word	0x20000004
 80037d8:	431bde83 	.word	0x431bde83
 80037dc:	40012300 	.word	0x40012300
 80037e0:	40012000 	.word	0x40012000
 80037e4:	40012100 	.word	0x40012100
 80037e8:	40012200 	.word	0x40012200

080037ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d049      	beq.n	80038b6 <HAL_ADC_IRQHandler+0xca>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d046      	beq.n	80038b6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d12b      	bne.n	80038a6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003852:	2b00      	cmp	r3, #0
 8003854:	d127      	bne.n	80038a6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	d119      	bne.n	80038a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0220 	bic.w	r2, r2, #32
 8003880:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	f043 0201 	orr.w	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe fc8c 	bl	80021c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0212 	mvn.w	r2, #18
 80038b4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d057      	beq.n	800397c <HAL_ADC_IRQHandler+0x190>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d054      	beq.n	800397c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d139      	bne.n	800396c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003902:	2b00      	cmp	r3, #0
 8003904:	d006      	beq.n	8003914 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003910:	2b00      	cmp	r3, #0
 8003912:	d12b      	bne.n	800396c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800391e:	2b00      	cmp	r3, #0
 8003920:	d124      	bne.n	800396c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11d      	bne.n	800396c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003934:	2b00      	cmp	r3, #0
 8003936:	d119      	bne.n	800396c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003946:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	f043 0201 	orr.w	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fa9d 	bl	8003eac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f06f 020c 	mvn.w	r2, #12
 800397a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d017      	beq.n	80039c2 <HAL_ADC_IRQHandler+0x1d6>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d014      	beq.n	80039c2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10d      	bne.n	80039c2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f837 	bl	8003a26 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0201 	mvn.w	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039d0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d015      	beq.n	8003a04 <HAL_ADC_IRQHandler+0x218>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d012      	beq.n	8003a04 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e2:	f043 0202 	orr.w	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f06f 0220 	mvn.w	r2, #32
 80039f2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f820 	bl	8003a3a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0220 	mvn.w	r2, #32
 8003a02:	601a      	str	r2, [r3, #0]
  }
}
 8003a04:	bf00      	nop
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x1c>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e113      	b.n	8003c94 <HAL_ADC_ConfigChannel+0x244>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b09      	cmp	r3, #9
 8003a7a:	d925      	bls.n	8003ac8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68d9      	ldr	r1, [r3, #12]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	3b1e      	subs	r3, #30
 8003a92:	2207      	movs	r2, #7
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68d9      	ldr	r1, [r3, #12]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4403      	add	r3, r0
 8003aba:	3b1e      	subs	r3, #30
 8003abc:	409a      	lsls	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	e022      	b.n	8003b0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6919      	ldr	r1, [r3, #16]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	2207      	movs	r2, #7
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	400a      	ands	r2, r1
 8003aea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6919      	ldr	r1, [r3, #16]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4403      	add	r3, r0
 8003b04:	409a      	lsls	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b06      	cmp	r3, #6
 8003b14:	d824      	bhi.n	8003b60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	3b05      	subs	r3, #5
 8003b28:	221f      	movs	r2, #31
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	400a      	ands	r2, r1
 8003b36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	4618      	mov	r0, r3
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	3b05      	subs	r3, #5
 8003b52:	fa00 f203 	lsl.w	r2, r0, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b5e:	e04c      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b0c      	cmp	r3, #12
 8003b66:	d824      	bhi.n	8003bb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	3b23      	subs	r3, #35	@ 0x23
 8003b7a:	221f      	movs	r2, #31
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43da      	mvns	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	400a      	ands	r2, r1
 8003b88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	4618      	mov	r0, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3b23      	subs	r3, #35	@ 0x23
 8003ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bb0:	e023      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3b41      	subs	r3, #65	@ 0x41
 8003bc4:	221f      	movs	r2, #31
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	4618      	mov	r0, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	3b41      	subs	r3, #65	@ 0x41
 8003bee:	fa00 f203 	lsl.w	r2, r0, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x250>)
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a28      	ldr	r2, [pc, #160]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x254>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10f      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x1d8>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b12      	cmp	r3, #18
 8003c0e:	d10b      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x254>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d12b      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x23a>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x258>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <HAL_ADC_ConfigChannel+0x1f4>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b11      	cmp	r3, #17
 8003c42:	d122      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a11      	ldr	r2, [pc, #68]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x258>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d111      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c66:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <HAL_ADC_ConfigChannel+0x25c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a11      	ldr	r2, [pc, #68]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x260>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	0c9a      	lsrs	r2, r3, #18
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c7c:	e002      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f9      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40012300 	.word	0x40012300
 8003ca4:	40012000 	.word	0x40012000
 8003ca8:	10000012 	.word	0x10000012
 8003cac:	20000004 	.word	0x20000004
 8003cb0:	431bde83 	.word	0x431bde83

08003cb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cbc:	4b79      	ldr	r3, [pc, #484]	@ (8003ea4 <ADC_Init+0x1f0>)
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ce8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6859      	ldr	r1, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	021a      	lsls	r2, r3, #8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003d0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d46:	4a58      	ldr	r2, [pc, #352]	@ (8003ea8 <ADC_Init+0x1f4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d022      	beq.n	8003d92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6899      	ldr	r1, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6899      	ldr	r1, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	e00f      	b.n	8003db2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003da0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003db0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0202 	bic.w	r2, r2, #2
 8003dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6899      	ldr	r1, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7e1b      	ldrb	r3, [r3, #24]
 8003dcc:	005a      	lsls	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01b      	beq.n	8003e18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003dfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	035a      	lsls	r2, r3, #13
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	e007      	b.n	8003e28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	051a      	lsls	r2, r3, #20
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e6a:	025a      	lsls	r2, r3, #9
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6899      	ldr	r1, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	029a      	lsls	r2, r3, #10
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	40012300 	.word	0x40012300
 8003ea8:	0f000001 	.word	0x0f000001

08003eac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003edc:	4013      	ands	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ef2:	4a04      	ldr	r2, [pc, #16]	@ (8003f04 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	60d3      	str	r3, [r2, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f0c:	4b04      	ldr	r3, [pc, #16]	@ (8003f20 <__NVIC_GetPriorityGrouping+0x18>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	f003 0307 	and.w	r3, r3, #7
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	e000ed00 	.word	0xe000ed00

08003f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	db0b      	blt.n	8003f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	f003 021f 	and.w	r2, r3, #31
 8003f3c:	4907      	ldr	r1, [pc, #28]	@ (8003f5c <__NVIC_EnableIRQ+0x38>)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	2001      	movs	r0, #1
 8003f46:	fa00 f202 	lsl.w	r2, r0, r2
 8003f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	e000e100 	.word	0xe000e100

08003f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	6039      	str	r1, [r7, #0]
 8003f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	db0a      	blt.n	8003f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	490c      	ldr	r1, [pc, #48]	@ (8003fac <__NVIC_SetPriority+0x4c>)
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	0112      	lsls	r2, r2, #4
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	440b      	add	r3, r1
 8003f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f88:	e00a      	b.n	8003fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4908      	ldr	r1, [pc, #32]	@ (8003fb0 <__NVIC_SetPriority+0x50>)
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	3b04      	subs	r3, #4
 8003f98:	0112      	lsls	r2, r2, #4
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	761a      	strb	r2, [r3, #24]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000e100 	.word	0xe000e100
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	@ 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f1c3 0307 	rsb	r3, r3, #7
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	bf28      	it	cs
 8003fd2:	2304      	movcs	r3, #4
 8003fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	2b06      	cmp	r3, #6
 8003fdc:	d902      	bls.n	8003fe4 <NVIC_EncodePriority+0x30>
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	3b03      	subs	r3, #3
 8003fe2:	e000      	b.n	8003fe6 <NVIC_EncodePriority+0x32>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	43d9      	mvns	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800400c:	4313      	orrs	r3, r2
         );
}
 800400e:	4618      	mov	r0, r3
 8004010:	3724      	adds	r7, #36	@ 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3b01      	subs	r3, #1
 8004028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800402c:	d301      	bcc.n	8004032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800402e:	2301      	movs	r3, #1
 8004030:	e00f      	b.n	8004052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004032:	4a0a      	ldr	r2, [pc, #40]	@ (800405c <SysTick_Config+0x40>)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3b01      	subs	r3, #1
 8004038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800403a:	210f      	movs	r1, #15
 800403c:	f04f 30ff 	mov.w	r0, #4294967295
 8004040:	f7ff ff8e 	bl	8003f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004044:	4b05      	ldr	r3, [pc, #20]	@ (800405c <SysTick_Config+0x40>)
 8004046:	2200      	movs	r2, #0
 8004048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800404a:	4b04      	ldr	r3, [pc, #16]	@ (800405c <SysTick_Config+0x40>)
 800404c:	2207      	movs	r2, #7
 800404e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	e000e010 	.word	0xe000e010

08004060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff29 	bl	8003ec0 <__NVIC_SetPriorityGrouping>
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004076:	b580      	push	{r7, lr}
 8004078:	b086      	sub	sp, #24
 800407a:	af00      	add	r7, sp, #0
 800407c:	4603      	mov	r3, r0
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004088:	f7ff ff3e 	bl	8003f08 <__NVIC_GetPriorityGrouping>
 800408c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	6978      	ldr	r0, [r7, #20]
 8004094:	f7ff ff8e 	bl	8003fb4 <NVIC_EncodePriority>
 8004098:	4602      	mov	r2, r0
 800409a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ff5d 	bl	8003f60 <__NVIC_SetPriority>
}
 80040a6:	bf00      	nop
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	4603      	mov	r3, r0
 80040b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff ff31 	bl	8003f24 <__NVIC_EnableIRQ>
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff ffa2 	bl	800401c <SysTick_Config>
 80040d8:	4603      	mov	r3, r0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040f0:	f7ff fa2a 	bl	8003548 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e099      	b.n	8004234 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004120:	e00f      	b.n	8004142 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004122:	f7ff fa11 	bl	8003548 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b05      	cmp	r3, #5
 800412e:	d908      	bls.n	8004142 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2203      	movs	r2, #3
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e078      	b.n	8004234 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e8      	bne.n	8004122 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4b38      	ldr	r3, [pc, #224]	@ (800423c <HAL_DMA_Init+0x158>)
 800415c:	4013      	ands	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800416e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	2b04      	cmp	r3, #4
 800419a:	d107      	bne.n	80041ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	4313      	orrs	r3, r2
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d117      	bne.n	8004206 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fb01 	bl	80047f0 <DMA_CheckFifoParam>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2240      	movs	r2, #64	@ 0x40
 80041f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004202:	2301      	movs	r3, #1
 8004204:	e016      	b.n	8004234 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fab8 	bl	8004784 <DMA_CalcBaseAndBitshift>
 8004214:	4603      	mov	r3, r0
 8004216:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	223f      	movs	r2, #63	@ 0x3f
 800421e:	409a      	lsls	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	f010803f 	.word	0xf010803f

08004240 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_DMA_Start_IT+0x26>
 8004262:	2302      	movs	r3, #2
 8004264:	e040      	b.n	80042e8 <HAL_DMA_Start_IT+0xa8>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d12f      	bne.n	80042da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fa4a 	bl	8004728 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004298:	223f      	movs	r2, #63	@ 0x3f
 800429a:	409a      	lsls	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0216 	orr.w	r2, r2, #22
 80042ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0208 	orr.w	r2, r2, #8
 80042c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	e005      	b.n	80042e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
 80042e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042fe:	f7ff f923 	bl	8003548 <HAL_GetTick>
 8004302:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d008      	beq.n	8004322 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2280      	movs	r2, #128	@ 0x80
 8004314:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e052      	b.n	80043c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0216 	bic.w	r2, r2, #22
 8004330:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004340:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <HAL_DMA_Abort+0x62>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0208 	bic.w	r2, r2, #8
 8004360:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004372:	e013      	b.n	800439c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004374:	f7ff f8e8 	bl	8003548 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b05      	cmp	r3, #5
 8004380:	d90c      	bls.n	800439c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2203      	movs	r2, #3
 800438c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e015      	b.n	80043c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e4      	bne.n	8004374 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	223f      	movs	r2, #63	@ 0x3f
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d004      	beq.n	80043ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2280      	movs	r2, #128	@ 0x80
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e00c      	b.n	8004408 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2205      	movs	r2, #5
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0201 	bic.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004420:	4b8e      	ldr	r3, [pc, #568]	@ (800465c <HAL_DMA_IRQHandler+0x248>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a8e      	ldr	r2, [pc, #568]	@ (8004660 <HAL_DMA_IRQHandler+0x24c>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	0a9b      	lsrs	r3, r3, #10
 800442c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004432:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443e:	2208      	movs	r2, #8
 8004440:	409a      	lsls	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01a      	beq.n	8004480 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0204 	bic.w	r2, r2, #4
 8004466:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446c:	2208      	movs	r2, #8
 800446e:	409a      	lsls	r2, r3
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004478:	f043 0201 	orr.w	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004484:	2201      	movs	r2, #1
 8004486:	409a      	lsls	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d012      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a2:	2201      	movs	r2, #1
 80044a4:	409a      	lsls	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ae:	f043 0202 	orr.w	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ba:	2204      	movs	r2, #4
 80044bc:	409a      	lsls	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d012      	beq.n	80044ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00b      	beq.n	80044ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d8:	2204      	movs	r2, #4
 80044da:	409a      	lsls	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e4:	f043 0204 	orr.w	r2, r3, #4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f0:	2210      	movs	r2, #16
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d043      	beq.n	8004584 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03c      	beq.n	8004584 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450e:	2210      	movs	r2, #16
 8004510:	409a      	lsls	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d018      	beq.n	8004556 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d024      	beq.n	8004584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
 8004542:	e01f      	b.n	8004584 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	4798      	blx	r3
 8004554:	e016      	b.n	8004584 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0208 	bic.w	r2, r2, #8
 8004572:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004588:	2220      	movs	r2, #32
 800458a:	409a      	lsls	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 808f 	beq.w	80046b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8087 	beq.w	80046b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045aa:	2220      	movs	r2, #32
 80045ac:	409a      	lsls	r2, r3
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b05      	cmp	r3, #5
 80045bc:	d136      	bne.n	800462c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0216 	bic.w	r2, r2, #22
 80045cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d103      	bne.n	80045ee <HAL_DMA_IRQHandler+0x1da>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0208 	bic.w	r2, r2, #8
 80045fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004602:	223f      	movs	r2, #63	@ 0x3f
 8004604:	409a      	lsls	r2, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461e:	2b00      	cmp	r3, #0
 8004620:	d07e      	beq.n	8004720 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
        }
        return;
 800462a:	e079      	b.n	8004720 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01d      	beq.n	8004676 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10d      	bne.n	8004664 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464c:	2b00      	cmp	r3, #0
 800464e:	d031      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	4798      	blx	r3
 8004658:	e02c      	b.n	80046b4 <HAL_DMA_IRQHandler+0x2a0>
 800465a:	bf00      	nop
 800465c:	20000004 	.word	0x20000004
 8004660:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d023      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	4798      	blx	r3
 8004674:	e01e      	b.n	80046b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10f      	bne.n	80046a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0210 	bic.w	r2, r2, #16
 8004692:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d032      	beq.n	8004722 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d022      	beq.n	800470e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2205      	movs	r2, #5
 80046cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	3301      	adds	r3, #1
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d307      	bcc.n	80046fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f2      	bne.n	80046e0 <HAL_DMA_IRQHandler+0x2cc>
 80046fa:	e000      	b.n	80046fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80046fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
 800471e:	e000      	b.n	8004722 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004720:	bf00      	nop
    }
  }
}
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004744:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b40      	cmp	r3, #64	@ 0x40
 8004754:	d108      	bne.n	8004768 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004766:	e007      	b.n	8004778 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	3b10      	subs	r3, #16
 8004794:	4a14      	ldr	r2, [pc, #80]	@ (80047e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800479e:	4a13      	ldr	r2, [pc, #76]	@ (80047ec <DMA_CalcBaseAndBitshift+0x68>)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d909      	bls.n	80047c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	1d1a      	adds	r2, r3, #4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80047c4:	e007      	b.n	80047d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047ce:	f023 0303 	bic.w	r3, r3, #3
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	aaaaaaab 	.word	0xaaaaaaab
 80047ec:	0800c17c 	.word	0x0800c17c

080047f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d11f      	bne.n	800484a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d856      	bhi.n	80048be <DMA_CheckFifoParam+0xce>
 8004810:	a201      	add	r2, pc, #4	@ (adr r2, 8004818 <DMA_CheckFifoParam+0x28>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	08004829 	.word	0x08004829
 800481c:	0800483b 	.word	0x0800483b
 8004820:	08004829 	.word	0x08004829
 8004824:	080048bf 	.word	0x080048bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d046      	beq.n	80048c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004838:	e043      	b.n	80048c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004842:	d140      	bne.n	80048c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004848:	e03d      	b.n	80048c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004852:	d121      	bne.n	8004898 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b03      	cmp	r3, #3
 8004858:	d837      	bhi.n	80048ca <DMA_CheckFifoParam+0xda>
 800485a:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <DMA_CheckFifoParam+0x70>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004871 	.word	0x08004871
 8004864:	08004877 	.word	0x08004877
 8004868:	08004871 	.word	0x08004871
 800486c:	08004889 	.word	0x08004889
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
      break;
 8004874:	e030      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d025      	beq.n	80048ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004886:	e022      	b.n	80048ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004890:	d11f      	bne.n	80048d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004896:	e01c      	b.n	80048d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d903      	bls.n	80048a6 <DMA_CheckFifoParam+0xb6>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d003      	beq.n	80048ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048a4:	e018      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
      break;
 80048aa:	e015      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00e      	beq.n	80048d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      break;
 80048bc:	e00b      	b.n	80048d6 <DMA_CheckFifoParam+0xe6>
      break;
 80048be:	bf00      	nop
 80048c0:	e00a      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
      break;
 80048c2:	bf00      	nop
 80048c4:	e008      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
      break;
 80048c6:	bf00      	nop
 80048c8:	e006      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
      break;
 80048ca:	bf00      	nop
 80048cc:	e004      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
      break;
 80048ce:	bf00      	nop
 80048d0:	e002      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <DMA_CheckFifoParam+0xe8>
      break;
 80048d6:	bf00      	nop
    }
  } 
  
  return status; 
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop

080048e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	@ 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
 8004902:	e165      	b.n	8004bd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004904:	2201      	movs	r2, #1
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4013      	ands	r3, r2
 8004916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	429a      	cmp	r2, r3
 800491e:	f040 8154 	bne.w	8004bca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d005      	beq.n	800493a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004936:	2b02      	cmp	r3, #2
 8004938:	d130      	bne.n	800499c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004970:	2201      	movs	r2, #1
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 0201 	and.w	r2, r3, #1
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d017      	beq.n	80049d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	2203      	movs	r2, #3
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d123      	bne.n	8004a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	08da      	lsrs	r2, r3, #3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3208      	adds	r2, #8
 80049ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	220f      	movs	r2, #15
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	08da      	lsrs	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3208      	adds	r2, #8
 8004a26:	69b9      	ldr	r1, [r7, #24]
 8004a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	2203      	movs	r2, #3
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0203 	and.w	r2, r3, #3
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80ae 	beq.w	8004bca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	4b5d      	ldr	r3, [pc, #372]	@ (8004be8 <HAL_GPIO_Init+0x300>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	4a5c      	ldr	r2, [pc, #368]	@ (8004be8 <HAL_GPIO_Init+0x300>)
 8004a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8004be8 <HAL_GPIO_Init+0x300>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a8a:	4a58      	ldr	r2, [pc, #352]	@ (8004bec <HAL_GPIO_Init+0x304>)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	089b      	lsrs	r3, r3, #2
 8004a90:	3302      	adds	r3, #2
 8004a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	220f      	movs	r2, #15
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a4f      	ldr	r2, [pc, #316]	@ (8004bf0 <HAL_GPIO_Init+0x308>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d025      	beq.n	8004b02 <HAL_GPIO_Init+0x21a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a4e      	ldr	r2, [pc, #312]	@ (8004bf4 <HAL_GPIO_Init+0x30c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01f      	beq.n	8004afe <HAL_GPIO_Init+0x216>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a4d      	ldr	r2, [pc, #308]	@ (8004bf8 <HAL_GPIO_Init+0x310>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d019      	beq.n	8004afa <HAL_GPIO_Init+0x212>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a4c      	ldr	r2, [pc, #304]	@ (8004bfc <HAL_GPIO_Init+0x314>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_GPIO_Init+0x20e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8004c00 <HAL_GPIO_Init+0x318>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00d      	beq.n	8004af2 <HAL_GPIO_Init+0x20a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8004c04 <HAL_GPIO_Init+0x31c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d007      	beq.n	8004aee <HAL_GPIO_Init+0x206>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a49      	ldr	r2, [pc, #292]	@ (8004c08 <HAL_GPIO_Init+0x320>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d101      	bne.n	8004aea <HAL_GPIO_Init+0x202>
 8004ae6:	2306      	movs	r3, #6
 8004ae8:	e00c      	b.n	8004b04 <HAL_GPIO_Init+0x21c>
 8004aea:	2307      	movs	r3, #7
 8004aec:	e00a      	b.n	8004b04 <HAL_GPIO_Init+0x21c>
 8004aee:	2305      	movs	r3, #5
 8004af0:	e008      	b.n	8004b04 <HAL_GPIO_Init+0x21c>
 8004af2:	2304      	movs	r3, #4
 8004af4:	e006      	b.n	8004b04 <HAL_GPIO_Init+0x21c>
 8004af6:	2303      	movs	r3, #3
 8004af8:	e004      	b.n	8004b04 <HAL_GPIO_Init+0x21c>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e002      	b.n	8004b04 <HAL_GPIO_Init+0x21c>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_GPIO_Init+0x21c>
 8004b02:	2300      	movs	r3, #0
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	f002 0203 	and.w	r2, r2, #3
 8004b0a:	0092      	lsls	r2, r2, #2
 8004b0c:	4093      	lsls	r3, r2
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b14:	4935      	ldr	r1, [pc, #212]	@ (8004bec <HAL_GPIO_Init+0x304>)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b22:	4b3a      	ldr	r3, [pc, #232]	@ (8004c0c <HAL_GPIO_Init+0x324>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b46:	4a31      	ldr	r2, [pc, #196]	@ (8004c0c <HAL_GPIO_Init+0x324>)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c0c <HAL_GPIO_Init+0x324>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b70:	4a26      	ldr	r2, [pc, #152]	@ (8004c0c <HAL_GPIO_Init+0x324>)
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b76:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <HAL_GPIO_Init+0x324>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c0c <HAL_GPIO_Init+0x324>)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c0c <HAL_GPIO_Init+0x324>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bc4:	4a11      	ldr	r2, [pc, #68]	@ (8004c0c <HAL_GPIO_Init+0x324>)
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b0f      	cmp	r3, #15
 8004bd4:	f67f ae96 	bls.w	8004904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	3724      	adds	r7, #36	@ 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	40020000 	.word	0x40020000
 8004bf4:	40020400 	.word	0x40020400
 8004bf8:	40020800 	.word	0x40020800
 8004bfc:	40020c00 	.word	0x40020c00
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40021400 	.word	0x40021400
 8004c08:	40021800 	.word	0x40021800
 8004c0c:	40013c00 	.word	0x40013c00

08004c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	807b      	strh	r3, [r7, #2]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c20:	787b      	ldrb	r3, [r7, #1]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c26:	887a      	ldrh	r2, [r7, #2]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c2c:	e003      	b.n	8004c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c2e:	887b      	ldrh	r3, [r7, #2]
 8004c30:	041a      	lsls	r2, r3, #16
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	619a      	str	r2, [r3, #24]
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e12b      	b.n	8004eae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fe f82e 	bl	8002ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2224      	movs	r2, #36	@ 0x24
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f000 fa02 	bl	80050b0 <HAL_RCC_GetPCLK1Freq>
 8004cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4a81      	ldr	r2, [pc, #516]	@ (8004eb8 <HAL_I2C_Init+0x274>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d807      	bhi.n	8004cc8 <HAL_I2C_Init+0x84>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a80      	ldr	r2, [pc, #512]	@ (8004ebc <HAL_I2C_Init+0x278>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	bf94      	ite	ls
 8004cc0:	2301      	movls	r3, #1
 8004cc2:	2300      	movhi	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e006      	b.n	8004cd6 <HAL_I2C_Init+0x92>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a7d      	ldr	r2, [pc, #500]	@ (8004ec0 <HAL_I2C_Init+0x27c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	bf94      	ite	ls
 8004cd0:	2301      	movls	r3, #1
 8004cd2:	2300      	movhi	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0e7      	b.n	8004eae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4a78      	ldr	r2, [pc, #480]	@ (8004ec4 <HAL_I2C_Init+0x280>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	0c9b      	lsrs	r3, r3, #18
 8004ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8004eb8 <HAL_I2C_Init+0x274>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d802      	bhi.n	8004d18 <HAL_I2C_Init+0xd4>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3301      	adds	r3, #1
 8004d16:	e009      	b.n	8004d2c <HAL_I2C_Init+0xe8>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	4a69      	ldr	r2, [pc, #420]	@ (8004ec8 <HAL_I2C_Init+0x284>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	099b      	lsrs	r3, r3, #6
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6812      	ldr	r2, [r2, #0]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	495c      	ldr	r1, [pc, #368]	@ (8004eb8 <HAL_I2C_Init+0x274>)
 8004d48:	428b      	cmp	r3, r1
 8004d4a:	d819      	bhi.n	8004d80 <HAL_I2C_Init+0x13c>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	1e59      	subs	r1, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d60:	400b      	ands	r3, r1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_I2C_Init+0x138>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1e59      	subs	r1, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d74:	3301      	adds	r3, #1
 8004d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7a:	e051      	b.n	8004e20 <HAL_I2C_Init+0x1dc>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	e04f      	b.n	8004e20 <HAL_I2C_Init+0x1dc>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d111      	bne.n	8004dac <HAL_I2C_Init+0x168>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1e58      	subs	r0, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6859      	ldr	r1, [r3, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	440b      	add	r3, r1
 8004d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e012      	b.n	8004dd2 <HAL_I2C_Init+0x18e>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1e58      	subs	r0, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	0099      	lsls	r1, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_I2C_Init+0x196>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e022      	b.n	8004e20 <HAL_I2C_Init+0x1dc>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10e      	bne.n	8004e00 <HAL_I2C_Init+0x1bc>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1e58      	subs	r0, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	460b      	mov	r3, r1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	440b      	add	r3, r1
 8004df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df4:	3301      	adds	r3, #1
 8004df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dfe:	e00f      	b.n	8004e20 <HAL_I2C_Init+0x1dc>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1e58      	subs	r0, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6859      	ldr	r1, [r3, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	0099      	lsls	r1, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e16:	3301      	adds	r3, #1
 8004e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	6809      	ldr	r1, [r1, #0]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6911      	ldr	r1, [r2, #16]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68d2      	ldr	r2, [r2, #12]
 8004e5a:	4311      	orrs	r1, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	430b      	orrs	r3, r1
 8004e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	000186a0 	.word	0x000186a0
 8004ebc:	001e847f 	.word	0x001e847f
 8004ec0:	003d08ff 	.word	0x003d08ff
 8004ec4:	431bde83 	.word	0x431bde83
 8004ec8:	10624dd3 	.word	0x10624dd3

08004ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0cc      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b68      	ldr	r3, [pc, #416]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d90c      	bls.n	8004f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b65      	ldr	r3, [pc, #404]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef6:	4b63      	ldr	r3, [pc, #396]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0b8      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d020      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f20:	4b59      	ldr	r3, [pc, #356]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a58      	ldr	r2, [pc, #352]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f38:	4b53      	ldr	r3, [pc, #332]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4a52      	ldr	r2, [pc, #328]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f44:	4b50      	ldr	r3, [pc, #320]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	494d      	ldr	r1, [pc, #308]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d044      	beq.n	8004fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d107      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b47      	ldr	r3, [pc, #284]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d119      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e07f      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d003      	beq.n	8004f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e06f      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e067      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004faa:	4b37      	ldr	r3, [pc, #220]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f023 0203 	bic.w	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4934      	ldr	r1, [pc, #208]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fbc:	f7fe fac4 	bl	8003548 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc4:	f7fe fac0 	bl	8003548 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e04f      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fda:	4b2b      	ldr	r3, [pc, #172]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 020c 	and.w	r2, r3, #12
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1eb      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fec:	4b25      	ldr	r3, [pc, #148]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d20c      	bcs.n	8005014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b22      	ldr	r3, [pc, #136]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b20      	ldr	r3, [pc, #128]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d001      	beq.n	8005014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e032      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005020:	4b19      	ldr	r3, [pc, #100]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4916      	ldr	r1, [pc, #88]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	4313      	orrs	r3, r2
 8005030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800503e:	4b12      	ldr	r3, [pc, #72]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	490e      	ldr	r1, [pc, #56]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	4313      	orrs	r3, r2
 8005050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005052:	f000 f855 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8005056:	4602      	mov	r2, r0
 8005058:	4b0b      	ldr	r3, [pc, #44]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	490a      	ldr	r1, [pc, #40]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8005064:	5ccb      	ldrb	r3, [r1, r3]
 8005066:	fa22 f303 	lsr.w	r3, r2, r3
 800506a:	4a09      	ldr	r2, [pc, #36]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800506e:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fa24 	bl	80034c0 <HAL_InitTick>

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40023c00 	.word	0x40023c00
 8005088:	40023800 	.word	0x40023800
 800508c:	0800c164 	.word	0x0800c164
 8005090:	20000004 	.word	0x20000004
 8005094:	20000008 	.word	0x20000008

08005098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800509c:	4b03      	ldr	r3, [pc, #12]	@ (80050ac <HAL_RCC_GetHCLKFreq+0x14>)
 800509e:	681b      	ldr	r3, [r3, #0]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000004 	.word	0x20000004

080050b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050b4:	f7ff fff0 	bl	8005098 <HAL_RCC_GetHCLKFreq>
 80050b8:	4602      	mov	r2, r0
 80050ba:	4b05      	ldr	r3, [pc, #20]	@ (80050d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	0a9b      	lsrs	r3, r3, #10
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	4903      	ldr	r1, [pc, #12]	@ (80050d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c6:	5ccb      	ldrb	r3, [r1, r3]
 80050c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40023800 	.word	0x40023800
 80050d4:	0800c174 	.word	0x0800c174

080050d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050dc:	f7ff ffdc 	bl	8005098 <HAL_RCC_GetHCLKFreq>
 80050e0:	4602      	mov	r2, r0
 80050e2:	4b05      	ldr	r3, [pc, #20]	@ (80050f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	0b5b      	lsrs	r3, r3, #13
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	4903      	ldr	r1, [pc, #12]	@ (80050fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ee:	5ccb      	ldrb	r3, [r1, r3]
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40023800 	.word	0x40023800
 80050fc:	0800c174 	.word	0x0800c174

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005104:	b0ae      	sub	sp, #184	@ 0xb8
 8005106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005126:	4bcb      	ldr	r3, [pc, #812]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x354>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b0c      	cmp	r3, #12
 8005130:	f200 8206 	bhi.w	8005540 <HAL_RCC_GetSysClockFreq+0x440>
 8005134:	a201      	add	r2, pc, #4	@ (adr r2, 800513c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	08005171 	.word	0x08005171
 8005140:	08005541 	.word	0x08005541
 8005144:	08005541 	.word	0x08005541
 8005148:	08005541 	.word	0x08005541
 800514c:	08005179 	.word	0x08005179
 8005150:	08005541 	.word	0x08005541
 8005154:	08005541 	.word	0x08005541
 8005158:	08005541 	.word	0x08005541
 800515c:	08005181 	.word	0x08005181
 8005160:	08005541 	.word	0x08005541
 8005164:	08005541 	.word	0x08005541
 8005168:	08005541 	.word	0x08005541
 800516c:	08005371 	.word	0x08005371
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005170:	4bb9      	ldr	r3, [pc, #740]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x358>)
 8005172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8005176:	e1e7      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005178:	4bb8      	ldr	r3, [pc, #736]	@ (800545c <HAL_RCC_GetSysClockFreq+0x35c>)
 800517a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800517e:	e1e3      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005180:	4bb4      	ldr	r3, [pc, #720]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x354>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005188:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800518c:	4bb1      	ldr	r3, [pc, #708]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x354>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d071      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005198:	4bae      	ldr	r3, [pc, #696]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x354>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	099b      	lsrs	r3, r3, #6
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80051a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051b4:	2300      	movs	r3, #0
 80051b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051be:	4622      	mov	r2, r4
 80051c0:	462b      	mov	r3, r5
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f04f 0100 	mov.w	r1, #0
 80051ca:	0159      	lsls	r1, r3, #5
 80051cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051d0:	0150      	lsls	r0, r2, #5
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4621      	mov	r1, r4
 80051d8:	1a51      	subs	r1, r2, r1
 80051da:	6439      	str	r1, [r7, #64]	@ 0x40
 80051dc:	4629      	mov	r1, r5
 80051de:	eb63 0301 	sbc.w	r3, r3, r1
 80051e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80051f0:	4649      	mov	r1, r9
 80051f2:	018b      	lsls	r3, r1, #6
 80051f4:	4641      	mov	r1, r8
 80051f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051fa:	4641      	mov	r1, r8
 80051fc:	018a      	lsls	r2, r1, #6
 80051fe:	4641      	mov	r1, r8
 8005200:	1a51      	subs	r1, r2, r1
 8005202:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005204:	4649      	mov	r1, r9
 8005206:	eb63 0301 	sbc.w	r3, r3, r1
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005218:	4649      	mov	r1, r9
 800521a:	00cb      	lsls	r3, r1, #3
 800521c:	4641      	mov	r1, r8
 800521e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005222:	4641      	mov	r1, r8
 8005224:	00ca      	lsls	r2, r1, #3
 8005226:	4610      	mov	r0, r2
 8005228:	4619      	mov	r1, r3
 800522a:	4603      	mov	r3, r0
 800522c:	4622      	mov	r2, r4
 800522e:	189b      	adds	r3, r3, r2
 8005230:	633b      	str	r3, [r7, #48]	@ 0x30
 8005232:	462b      	mov	r3, r5
 8005234:	460a      	mov	r2, r1
 8005236:	eb42 0303 	adc.w	r3, r2, r3
 800523a:	637b      	str	r3, [r7, #52]	@ 0x34
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005248:	4629      	mov	r1, r5
 800524a:	024b      	lsls	r3, r1, #9
 800524c:	4621      	mov	r1, r4
 800524e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005252:	4621      	mov	r1, r4
 8005254:	024a      	lsls	r2, r1, #9
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800525e:	2200      	movs	r2, #0
 8005260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005264:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005268:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800526c:	f7fb fd2c 	bl	8000cc8 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4613      	mov	r3, r2
 8005276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800527a:	e067      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527c:	4b75      	ldr	r3, [pc, #468]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x354>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	099b      	lsrs	r3, r3, #6
 8005282:	2200      	movs	r2, #0
 8005284:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005288:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800528c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005294:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005296:	2300      	movs	r3, #0
 8005298:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800529a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800529e:	4622      	mov	r2, r4
 80052a0:	462b      	mov	r3, r5
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f04f 0100 	mov.w	r1, #0
 80052aa:	0159      	lsls	r1, r3, #5
 80052ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052b0:	0150      	lsls	r0, r2, #5
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4621      	mov	r1, r4
 80052b8:	1a51      	subs	r1, r2, r1
 80052ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052bc:	4629      	mov	r1, r5
 80052be:	eb63 0301 	sbc.w	r3, r3, r1
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80052d0:	4649      	mov	r1, r9
 80052d2:	018b      	lsls	r3, r1, #6
 80052d4:	4641      	mov	r1, r8
 80052d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052da:	4641      	mov	r1, r8
 80052dc:	018a      	lsls	r2, r1, #6
 80052de:	4641      	mov	r1, r8
 80052e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80052e4:	4649      	mov	r1, r9
 80052e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052fe:	4692      	mov	sl, r2
 8005300:	469b      	mov	fp, r3
 8005302:	4623      	mov	r3, r4
 8005304:	eb1a 0303 	adds.w	r3, sl, r3
 8005308:	623b      	str	r3, [r7, #32]
 800530a:	462b      	mov	r3, r5
 800530c:	eb4b 0303 	adc.w	r3, fp, r3
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800531e:	4629      	mov	r1, r5
 8005320:	028b      	lsls	r3, r1, #10
 8005322:	4621      	mov	r1, r4
 8005324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005328:	4621      	mov	r1, r4
 800532a:	028a      	lsls	r2, r1, #10
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005334:	2200      	movs	r2, #0
 8005336:	673b      	str	r3, [r7, #112]	@ 0x70
 8005338:	677a      	str	r2, [r7, #116]	@ 0x74
 800533a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800533e:	f7fb fcc3 	bl	8000cc8 <__aeabi_uldivmod>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4613      	mov	r3, r2
 8005348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800534c:	4b41      	ldr	r3, [pc, #260]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x354>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	0c1b      	lsrs	r3, r3, #16
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	3301      	adds	r3, #1
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800535e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800536e:	e0eb      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005370:	4b38      	ldr	r3, [pc, #224]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x354>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005378:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800537c:	4b35      	ldr	r3, [pc, #212]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x354>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d06b      	beq.n	8005460 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005388:	4b32      	ldr	r3, [pc, #200]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x354>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	099b      	lsrs	r3, r3, #6
 800538e:	2200      	movs	r2, #0
 8005390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005392:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005394:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	663b      	str	r3, [r7, #96]	@ 0x60
 800539c:	2300      	movs	r3, #0
 800539e:	667b      	str	r3, [r7, #100]	@ 0x64
 80053a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80053a4:	4622      	mov	r2, r4
 80053a6:	462b      	mov	r3, r5
 80053a8:	f04f 0000 	mov.w	r0, #0
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	0159      	lsls	r1, r3, #5
 80053b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b6:	0150      	lsls	r0, r2, #5
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4621      	mov	r1, r4
 80053be:	1a51      	subs	r1, r2, r1
 80053c0:	61b9      	str	r1, [r7, #24]
 80053c2:	4629      	mov	r1, r5
 80053c4:	eb63 0301 	sbc.w	r3, r3, r1
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80053d6:	4659      	mov	r1, fp
 80053d8:	018b      	lsls	r3, r1, #6
 80053da:	4651      	mov	r1, sl
 80053dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053e0:	4651      	mov	r1, sl
 80053e2:	018a      	lsls	r2, r1, #6
 80053e4:	4651      	mov	r1, sl
 80053e6:	ebb2 0801 	subs.w	r8, r2, r1
 80053ea:	4659      	mov	r1, fp
 80053ec:	eb63 0901 	sbc.w	r9, r3, r1
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005400:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005404:	4690      	mov	r8, r2
 8005406:	4699      	mov	r9, r3
 8005408:	4623      	mov	r3, r4
 800540a:	eb18 0303 	adds.w	r3, r8, r3
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	462b      	mov	r3, r5
 8005412:	eb49 0303 	adc.w	r3, r9, r3
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005424:	4629      	mov	r1, r5
 8005426:	024b      	lsls	r3, r1, #9
 8005428:	4621      	mov	r1, r4
 800542a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800542e:	4621      	mov	r1, r4
 8005430:	024a      	lsls	r2, r1, #9
 8005432:	4610      	mov	r0, r2
 8005434:	4619      	mov	r1, r3
 8005436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800543a:	2200      	movs	r2, #0
 800543c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800543e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005440:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005444:	f7fb fc40 	bl	8000cc8 <__aeabi_uldivmod>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4613      	mov	r3, r2
 800544e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005452:	e065      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x420>
 8005454:	40023800 	.word	0x40023800
 8005458:	00f42400 	.word	0x00f42400
 800545c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005460:	4b3d      	ldr	r3, [pc, #244]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x458>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	099b      	lsrs	r3, r3, #6
 8005466:	2200      	movs	r2, #0
 8005468:	4618      	mov	r0, r3
 800546a:	4611      	mov	r1, r2
 800546c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005470:	653b      	str	r3, [r7, #80]	@ 0x50
 8005472:	2300      	movs	r3, #0
 8005474:	657b      	str	r3, [r7, #84]	@ 0x54
 8005476:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800547a:	4642      	mov	r2, r8
 800547c:	464b      	mov	r3, r9
 800547e:	f04f 0000 	mov.w	r0, #0
 8005482:	f04f 0100 	mov.w	r1, #0
 8005486:	0159      	lsls	r1, r3, #5
 8005488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800548c:	0150      	lsls	r0, r2, #5
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4641      	mov	r1, r8
 8005494:	1a51      	subs	r1, r2, r1
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	4649      	mov	r1, r9
 800549a:	eb63 0301 	sbc.w	r3, r3, r1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80054ac:	4659      	mov	r1, fp
 80054ae:	018b      	lsls	r3, r1, #6
 80054b0:	4651      	mov	r1, sl
 80054b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054b6:	4651      	mov	r1, sl
 80054b8:	018a      	lsls	r2, r1, #6
 80054ba:	4651      	mov	r1, sl
 80054bc:	1a54      	subs	r4, r2, r1
 80054be:	4659      	mov	r1, fp
 80054c0:	eb63 0501 	sbc.w	r5, r3, r1
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	00eb      	lsls	r3, r5, #3
 80054ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d2:	00e2      	lsls	r2, r4, #3
 80054d4:	4614      	mov	r4, r2
 80054d6:	461d      	mov	r5, r3
 80054d8:	4643      	mov	r3, r8
 80054da:	18e3      	adds	r3, r4, r3
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	464b      	mov	r3, r9
 80054e0:	eb45 0303 	adc.w	r3, r5, r3
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054f2:	4629      	mov	r1, r5
 80054f4:	028b      	lsls	r3, r1, #10
 80054f6:	4621      	mov	r1, r4
 80054f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054fc:	4621      	mov	r1, r4
 80054fe:	028a      	lsls	r2, r1, #10
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005508:	2200      	movs	r2, #0
 800550a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800550c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800550e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005512:	f7fb fbd9 	bl	8000cc8 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4613      	mov	r3, r2
 800551c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005520:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x458>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	0f1b      	lsrs	r3, r3, #28
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800552e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005536:	fbb2 f3f3 	udiv	r3, r2, r3
 800553a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800553e:	e003      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005540:	4b06      	ldr	r3, [pc, #24]	@ (800555c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005546:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005548:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800554c:	4618      	mov	r0, r3
 800554e:	37b8      	adds	r7, #184	@ 0xb8
 8005550:	46bd      	mov	sp, r7
 8005552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005556:	bf00      	nop
 8005558:	40023800 	.word	0x40023800
 800555c:	00f42400 	.word	0x00f42400

08005560 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e28d      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8083 	beq.w	8005686 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005580:	4b94      	ldr	r3, [pc, #592]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 030c 	and.w	r3, r3, #12
 8005588:	2b04      	cmp	r3, #4
 800558a:	d019      	beq.n	80055c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800558c:	4b91      	ldr	r3, [pc, #580]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005594:	2b08      	cmp	r3, #8
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005598:	4b8e      	ldr	r3, [pc, #568]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055a4:	d00c      	beq.n	80055c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055a6:	4b8b      	ldr	r3, [pc, #556]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055ae:	2b0c      	cmp	r3, #12
 80055b0:	d112      	bne.n	80055d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055b2:	4b88      	ldr	r3, [pc, #544]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055be:	d10b      	bne.n	80055d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c0:	4b84      	ldr	r3, [pc, #528]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d05b      	beq.n	8005684 <HAL_RCC_OscConfig+0x124>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d157      	bne.n	8005684 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e25a      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d106      	bne.n	80055f0 <HAL_RCC_OscConfig+0x90>
 80055e2:	4b7c      	ldr	r3, [pc, #496]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a7b      	ldr	r2, [pc, #492]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80055e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e01d      	b.n	800562c <HAL_RCC_OscConfig+0xcc>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055f8:	d10c      	bne.n	8005614 <HAL_RCC_OscConfig+0xb4>
 80055fa:	4b76      	ldr	r3, [pc, #472]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a75      	ldr	r2, [pc, #468]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b73      	ldr	r3, [pc, #460]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a72      	ldr	r2, [pc, #456]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 800560c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e00b      	b.n	800562c <HAL_RCC_OscConfig+0xcc>
 8005614:	4b6f      	ldr	r3, [pc, #444]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a6e      	ldr	r2, [pc, #440]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 800561a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	4b6c      	ldr	r3, [pc, #432]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a6b      	ldr	r2, [pc, #428]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800562a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d013      	beq.n	800565c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fd ff88 	bl	8003548 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800563c:	f7fd ff84 	bl	8003548 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	@ 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e21f      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564e:	4b61      	ldr	r3, [pc, #388]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0xdc>
 800565a:	e014      	b.n	8005686 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fd ff74 	bl	8003548 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005664:	f7fd ff70 	bl	8003548 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	@ 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e20b      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005676:	4b57      	ldr	r3, [pc, #348]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x104>
 8005682:	e000      	b.n	8005686 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d06f      	beq.n	8005772 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005692:	4b50      	ldr	r3, [pc, #320]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 030c 	and.w	r3, r3, #12
 800569a:	2b00      	cmp	r3, #0
 800569c:	d017      	beq.n	80056ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800569e:	4b4d      	ldr	r3, [pc, #308]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d105      	bne.n	80056b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056aa:	4b4a      	ldr	r3, [pc, #296]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00b      	beq.n	80056ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056b6:	4b47      	ldr	r3, [pc, #284]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056be:	2b0c      	cmp	r3, #12
 80056c0:	d11c      	bne.n	80056fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056c2:	4b44      	ldr	r3, [pc, #272]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d116      	bne.n	80056fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ce:	4b41      	ldr	r3, [pc, #260]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_RCC_OscConfig+0x186>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d001      	beq.n	80056e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e1d3      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e6:	4b3b      	ldr	r3, [pc, #236]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4937      	ldr	r1, [pc, #220]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056fa:	e03a      	b.n	8005772 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d020      	beq.n	8005746 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005704:	4b34      	ldr	r3, [pc, #208]	@ (80057d8 <HAL_RCC_OscConfig+0x278>)
 8005706:	2201      	movs	r2, #1
 8005708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570a:	f7fd ff1d 	bl	8003548 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005712:	f7fd ff19 	bl	8003548 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e1b4      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005724:	4b2b      	ldr	r3, [pc, #172]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005730:	4b28      	ldr	r3, [pc, #160]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4925      	ldr	r1, [pc, #148]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005740:	4313      	orrs	r3, r2
 8005742:	600b      	str	r3, [r1, #0]
 8005744:	e015      	b.n	8005772 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005746:	4b24      	ldr	r3, [pc, #144]	@ (80057d8 <HAL_RCC_OscConfig+0x278>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fd fefc 	bl	8003548 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005754:	f7fd fef8 	bl	8003548 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e193      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005766:	4b1b      	ldr	r3, [pc, #108]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d036      	beq.n	80057ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d016      	beq.n	80057b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005786:	4b15      	ldr	r3, [pc, #84]	@ (80057dc <HAL_RCC_OscConfig+0x27c>)
 8005788:	2201      	movs	r2, #1
 800578a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fd fedc 	bl	8003548 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005794:	f7fd fed8 	bl	8003548 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e173      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a6:	4b0b      	ldr	r3, [pc, #44]	@ (80057d4 <HAL_RCC_OscConfig+0x274>)
 80057a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_RCC_OscConfig+0x234>
 80057b2:	e01b      	b.n	80057ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057b4:	4b09      	ldr	r3, [pc, #36]	@ (80057dc <HAL_RCC_OscConfig+0x27c>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ba:	f7fd fec5 	bl	8003548 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c0:	e00e      	b.n	80057e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057c2:	f7fd fec1 	bl	8003548 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d907      	bls.n	80057e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e15c      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
 80057d4:	40023800 	.word	0x40023800
 80057d8:	42470000 	.word	0x42470000
 80057dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e0:	4b8a      	ldr	r3, [pc, #552]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 80057e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1ea      	bne.n	80057c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8097 	beq.w	8005928 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057fe:	4b83      	ldr	r3, [pc, #524]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10f      	bne.n	800582a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800580a:	2300      	movs	r3, #0
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	4b7f      	ldr	r3, [pc, #508]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	4a7e      	ldr	r2, [pc, #504]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005818:	6413      	str	r3, [r2, #64]	@ 0x40
 800581a:	4b7c      	ldr	r3, [pc, #496]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582a:	4b79      	ldr	r3, [pc, #484]	@ (8005a10 <HAL_RCC_OscConfig+0x4b0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005832:	2b00      	cmp	r3, #0
 8005834:	d118      	bne.n	8005868 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005836:	4b76      	ldr	r3, [pc, #472]	@ (8005a10 <HAL_RCC_OscConfig+0x4b0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a75      	ldr	r2, [pc, #468]	@ (8005a10 <HAL_RCC_OscConfig+0x4b0>)
 800583c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005842:	f7fd fe81 	bl	8003548 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584a:	f7fd fe7d 	bl	8003548 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e118      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800585c:	4b6c      	ldr	r3, [pc, #432]	@ (8005a10 <HAL_RCC_OscConfig+0x4b0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0f0      	beq.n	800584a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d106      	bne.n	800587e <HAL_RCC_OscConfig+0x31e>
 8005870:	4b66      	ldr	r3, [pc, #408]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005874:	4a65      	ldr	r2, [pc, #404]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	6713      	str	r3, [r2, #112]	@ 0x70
 800587c:	e01c      	b.n	80058b8 <HAL_RCC_OscConfig+0x358>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b05      	cmp	r3, #5
 8005884:	d10c      	bne.n	80058a0 <HAL_RCC_OscConfig+0x340>
 8005886:	4b61      	ldr	r3, [pc, #388]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588a:	4a60      	ldr	r2, [pc, #384]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 800588c:	f043 0304 	orr.w	r3, r3, #4
 8005890:	6713      	str	r3, [r2, #112]	@ 0x70
 8005892:	4b5e      	ldr	r3, [pc, #376]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005896:	4a5d      	ldr	r2, [pc, #372]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	6713      	str	r3, [r2, #112]	@ 0x70
 800589e:	e00b      	b.n	80058b8 <HAL_RCC_OscConfig+0x358>
 80058a0:	4b5a      	ldr	r3, [pc, #360]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 80058a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a4:	4a59      	ldr	r2, [pc, #356]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80058ac:	4b57      	ldr	r3, [pc, #348]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b0:	4a56      	ldr	r2, [pc, #344]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 80058b2:	f023 0304 	bic.w	r3, r3, #4
 80058b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d015      	beq.n	80058ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fd fe42 	bl	8003548 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c6:	e00a      	b.n	80058de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058c8:	f7fd fe3e 	bl	8003548 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e0d7      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058de:	4b4b      	ldr	r3, [pc, #300]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0ee      	beq.n	80058c8 <HAL_RCC_OscConfig+0x368>
 80058ea:	e014      	b.n	8005916 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ec:	f7fd fe2c 	bl	8003548 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f2:	e00a      	b.n	800590a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f4:	f7fd fe28 	bl	8003548 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005902:	4293      	cmp	r3, r2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e0c1      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800590a:	4b40      	ldr	r3, [pc, #256]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 800590c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1ee      	bne.n	80058f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d105      	bne.n	8005928 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800591c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 800591e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005920:	4a3a      	ldr	r2, [pc, #232]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005926:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 80ad 	beq.w	8005a8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005932:	4b36      	ldr	r3, [pc, #216]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b08      	cmp	r3, #8
 800593c:	d060      	beq.n	8005a00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d145      	bne.n	80059d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005946:	4b33      	ldr	r3, [pc, #204]	@ (8005a14 <HAL_RCC_OscConfig+0x4b4>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fd fdfc 	bl	8003548 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005954:	f7fd fdf8 	bl	8003548 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e093      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005966:	4b29      	ldr	r3, [pc, #164]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69da      	ldr	r2, [r3, #28]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005980:	019b      	lsls	r3, r3, #6
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	3b01      	subs	r3, #1
 800598c:	041b      	lsls	r3, r3, #16
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005994:	061b      	lsls	r3, r3, #24
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	071b      	lsls	r3, r3, #28
 800599e:	491b      	ldr	r1, [pc, #108]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a14 <HAL_RCC_OscConfig+0x4b4>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059aa:	f7fd fdcd 	bl	8003548 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b2:	f7fd fdc9 	bl	8003548 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e064      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c4:	4b11      	ldr	r3, [pc, #68]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCC_OscConfig+0x452>
 80059d0:	e05c      	b.n	8005a8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d2:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <HAL_RCC_OscConfig+0x4b4>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fd fdb6 	bl	8003548 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fd fdb2 	bl	8003548 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e04d      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <HAL_RCC_OscConfig+0x4ac>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x480>
 80059fe:	e045      	b.n	8005a8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e040      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40007000 	.word	0x40007000
 8005a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a18:	4b1f      	ldr	r3, [pc, #124]	@ (8005a98 <HAL_RCC_OscConfig+0x538>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d030      	beq.n	8005a88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d129      	bne.n	8005a88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d122      	bne.n	8005a88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a48:	4013      	ands	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d119      	bne.n	8005a88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	3b01      	subs	r3, #1
 8005a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d10f      	bne.n	8005a88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d107      	bne.n	8005a88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d001      	beq.n	8005a8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800

08005a9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e07b      	b.n	8005ba6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d108      	bne.n	8005ac8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005abe:	d009      	beq.n	8005ad4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	61da      	str	r2, [r3, #28]
 8005ac6:	e005      	b.n	8005ad4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fd f934 	bl	8002d5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b58:	ea42 0103 	orr.w	r1, r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	0c1b      	lsrs	r3, r3, #16
 8005b72:	f003 0104 	and.w	r1, r3, #4
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7a:	f003 0210 	and.w	r2, r3, #16
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e041      	b.n	8005c44 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d106      	bne.n	8005bda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fd f909 	bl	8002dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f000 fa7d 	bl	80060ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d001      	beq.n	8005c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e04e      	b.n	8005d02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a23      	ldr	r2, [pc, #140]	@ (8005d10 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d022      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x80>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c8e:	d01d      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x80>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1f      	ldr	r2, [pc, #124]	@ (8005d14 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d018      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x80>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d18 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d013      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x80>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00e      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x80>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d009      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x80>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	@ (8005d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_TIM_Base_Start_IT+0x80>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a18      	ldr	r2, [pc, #96]	@ (8005d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d111      	bne.n	8005cf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b06      	cmp	r3, #6
 8005cdc:	d010      	beq.n	8005d00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cee:	e007      	b.n	8005d00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40010400 	.word	0x40010400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40001800 	.word	0x40001800

08005d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d020      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01b      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0202 	mvn.w	r2, #2
 8005d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f999 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f98b 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f99c 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d020      	beq.n	8005ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01b      	beq.n	8005ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0204 	mvn.w	r2, #4
 8005dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2202      	movs	r2, #2
 8005db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f973 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005dc8:	e005      	b.n	8005dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f965 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f976 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d020      	beq.n	8005e28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01b      	beq.n	8005e28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0208 	mvn.w	r2, #8
 8005df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f94d 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005e14:	e005      	b.n	8005e22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f93f 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f950 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d020      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0210 	mvn.w	r2, #16
 8005e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f927 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f919 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f92a 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0201 	mvn.w	r2, #1
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fc f90a 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00c      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fae4 	bl	8006484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f8fb 	bl	80060d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0220 	mvn.w	r2, #32
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fab6 	bl	8006470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIM_ConfigClockSource+0x1c>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e0b4      	b.n	8006092 <HAL_TIM_ConfigClockSource+0x186>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f60:	d03e      	beq.n	8005fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f66:	f200 8087 	bhi.w	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f6e:	f000 8086 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x172>
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f76:	d87f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b70      	cmp	r3, #112	@ 0x70
 8005f7a:	d01a      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8005f7c:	2b70      	cmp	r3, #112	@ 0x70
 8005f7e:	d87b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b60      	cmp	r3, #96	@ 0x60
 8005f82:	d050      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x11a>
 8005f84:	2b60      	cmp	r3, #96	@ 0x60
 8005f86:	d877      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b50      	cmp	r3, #80	@ 0x50
 8005f8a:	d03c      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0xfa>
 8005f8c:	2b50      	cmp	r3, #80	@ 0x50
 8005f8e:	d873      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	d058      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x13a>
 8005f94:	2b40      	cmp	r3, #64	@ 0x40
 8005f96:	d86f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b30      	cmp	r3, #48	@ 0x30
 8005f9a:	d064      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005f9c:	2b30      	cmp	r3, #48	@ 0x30
 8005f9e:	d86b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d060      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d867      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05c      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d05a      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fb0:	e062      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc2:	f000 f9b9 	bl	8006338 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	609a      	str	r2, [r3, #8]
      break;
 8005fde:	e04f      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ff0:	f000 f9a2 	bl	8006338 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006002:	609a      	str	r2, [r3, #8]
      break;
 8006004:	e03c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	461a      	mov	r2, r3
 8006014:	f000 f916 	bl	8006244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2150      	movs	r1, #80	@ 0x50
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f96f 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8006024:	e02c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006032:	461a      	mov	r2, r3
 8006034:	f000 f935 	bl	80062a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2160      	movs	r1, #96	@ 0x60
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f95f 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8006044:	e01c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006052:	461a      	mov	r2, r3
 8006054:	f000 f8f6 	bl	8006244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2140      	movs	r1, #64	@ 0x40
 800605e:	4618      	mov	r0, r3
 8006060:	f000 f94f 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8006064:	e00c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f000 f946 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8006076:	e003      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
      break;
 800607c:	e000      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800607e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a46      	ldr	r2, [pc, #280]	@ (8006218 <TIM_Base_SetConfig+0x12c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800610a:	d00f      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a43      	ldr	r2, [pc, #268]	@ (800621c <TIM_Base_SetConfig+0x130>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a42      	ldr	r2, [pc, #264]	@ (8006220 <TIM_Base_SetConfig+0x134>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a41      	ldr	r2, [pc, #260]	@ (8006224 <TIM_Base_SetConfig+0x138>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a40      	ldr	r2, [pc, #256]	@ (8006228 <TIM_Base_SetConfig+0x13c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a35      	ldr	r2, [pc, #212]	@ (8006218 <TIM_Base_SetConfig+0x12c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d02b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800614c:	d027      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a32      	ldr	r2, [pc, #200]	@ (800621c <TIM_Base_SetConfig+0x130>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d023      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a31      	ldr	r2, [pc, #196]	@ (8006220 <TIM_Base_SetConfig+0x134>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01f      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a30      	ldr	r2, [pc, #192]	@ (8006224 <TIM_Base_SetConfig+0x138>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a2f      	ldr	r2, [pc, #188]	@ (8006228 <TIM_Base_SetConfig+0x13c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d017      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2e      	ldr	r2, [pc, #184]	@ (800622c <TIM_Base_SetConfig+0x140>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2d      	ldr	r2, [pc, #180]	@ (8006230 <TIM_Base_SetConfig+0x144>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00f      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2c      	ldr	r2, [pc, #176]	@ (8006234 <TIM_Base_SetConfig+0x148>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a2b      	ldr	r2, [pc, #172]	@ (8006238 <TIM_Base_SetConfig+0x14c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d007      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a2a      	ldr	r2, [pc, #168]	@ (800623c <TIM_Base_SetConfig+0x150>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a29      	ldr	r2, [pc, #164]	@ (8006240 <TIM_Base_SetConfig+0x154>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d108      	bne.n	80061b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a10      	ldr	r2, [pc, #64]	@ (8006218 <TIM_Base_SetConfig+0x12c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_Base_SetConfig+0xf8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a12      	ldr	r2, [pc, #72]	@ (8006228 <TIM_Base_SetConfig+0x13c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d103      	bne.n	80061ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d105      	bne.n	800620a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	611a      	str	r2, [r3, #16]
  }
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40010000 	.word	0x40010000
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40010400 	.word	0x40010400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800
 8006238:	40001800 	.word	0x40001800
 800623c:	40001c00 	.word	0x40001c00
 8006240:	40002000 	.word	0x40002000

08006244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f023 0201 	bic.w	r2, r3, #1
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800626e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f023 030a 	bic.w	r3, r3, #10
 8006280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b087      	sub	sp, #28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f023 0210 	bic.w	r2, r3, #16
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	f043 0307 	orr.w	r3, r3, #7
 8006324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	609a      	str	r2, [r3, #8]
}
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	021a      	lsls	r2, r3, #8
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	431a      	orrs	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4313      	orrs	r3, r2
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	609a      	str	r2, [r3, #8]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800638c:	2302      	movs	r3, #2
 800638e:	e05a      	b.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a21      	ldr	r2, [pc, #132]	@ (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d022      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063dc:	d01d      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d018      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1b      	ldr	r2, [pc, #108]	@ (800645c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00e      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a18      	ldr	r2, [pc, #96]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a17      	ldr	r2, [pc, #92]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d004      	beq.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a15      	ldr	r2, [pc, #84]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d10c      	bne.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	4313      	orrs	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	40010000 	.word	0x40010000
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800
 8006460:	40000c00 	.word	0x40000c00
 8006464:	40010400 	.word	0x40010400
 8006468:	40014000 	.word	0x40014000
 800646c:	40001800 	.word	0x40001800

08006470 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e042      	b.n	8006530 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fc fcf6 	bl	8002eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2224      	movs	r2, #36	@ 0x24
 80064c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 ffe7 	bl	80074b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695a      	ldr	r2, [r3, #20]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	@ 0x28
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b20      	cmp	r3, #32
 8006556:	d175      	bne.n	8006644 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <HAL_UART_Transmit+0x2c>
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e06e      	b.n	8006646 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2221      	movs	r2, #33	@ 0x21
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006576:	f7fc ffe7 	bl	8003548 <HAL_GetTick>
 800657a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	88fa      	ldrh	r2, [r7, #6]
 8006586:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006590:	d108      	bne.n	80065a4 <HAL_UART_Transmit+0x6c>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	e003      	b.n	80065ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065ac:	e02e      	b.n	800660c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2200      	movs	r2, #0
 80065b6:	2180      	movs	r1, #128	@ 0x80
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fcbf 	bl	8006f3c <UART_WaitOnFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e03a      	b.n	8006646 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	3302      	adds	r3, #2
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	e007      	b.n	80065fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	3301      	adds	r3, #1
 80065fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1cb      	bne.n	80065ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2200      	movs	r2, #0
 800661e:	2140      	movs	r1, #64	@ 0x40
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fc8b 	bl	8006f3c <UART_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e006      	b.n	8006646 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b08a      	sub	sp, #40	@ 0x28
 8006652:	af02      	add	r7, sp, #8
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	4613      	mov	r3, r2
 800665c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b20      	cmp	r3, #32
 800666c:	f040 8081 	bne.w	8006772 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_UART_Receive+0x2e>
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e079      	b.n	8006774 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2222      	movs	r2, #34	@ 0x22
 800668a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006694:	f7fc ff58 	bl	8003548 <HAL_GetTick>
 8006698:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	88fa      	ldrh	r2, [r7, #6]
 800669e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ae:	d108      	bne.n	80066c2 <HAL_UART_Receive+0x74>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	61bb      	str	r3, [r7, #24]
 80066c0:	e003      	b.n	80066ca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80066ca:	e047      	b.n	800675c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2200      	movs	r2, #0
 80066d4:	2120      	movs	r1, #32
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 fc30 	bl	8006f3c <UART_WaitOnFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e042      	b.n	8006774 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10c      	bne.n	800670e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006700:	b29a      	uxth	r2, r3
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	3302      	adds	r3, #2
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	e01f      	b.n	800674e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006716:	d007      	beq.n	8006728 <HAL_UART_Receive+0xda>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <HAL_UART_Receive+0xe8>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e008      	b.n	8006748 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006742:	b2da      	uxtb	r2, r3
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	3301      	adds	r3, #1
 800674c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1b2      	bne.n	80066cc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e000      	b.n	8006774 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006772:	2302      	movs	r3, #2
  }
}
 8006774:	4618      	mov	r0, r3
 8006776:	3720      	adds	r7, #32
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b20      	cmp	r3, #32
 8006794:	d112      	bne.n	80067bc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_UART_Receive_DMA+0x26>
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e00b      	b.n	80067be <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	461a      	mov	r2, r3
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 fc1c 	bl	8006ff0 <UART_Start_Receive_DMA>
 80067b8:	4603      	mov	r3, r0
 80067ba:	e000      	b.n	80067be <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80067bc:	2302      	movs	r3, #2
  }
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b0ba      	sub	sp, #232	@ 0xe8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10f      	bne.n	800682e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <HAL_UART_IRQHandler+0x66>
 800681a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fd83 	bl	8007332 <UART_Receive_IT>
      return;
 800682c:	e25b      	b.n	8006ce6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800682e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 80de 	beq.w	80069f4 <HAL_UART_IRQHandler+0x22c>
 8006838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006848:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80d1 	beq.w	80069f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00b      	beq.n	8006876 <HAL_UART_IRQHandler+0xae>
 800685e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686e:	f043 0201 	orr.w	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <HAL_UART_IRQHandler+0xd2>
 8006882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d005      	beq.n	800689a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f043 0202 	orr.w	r2, r3, #2
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <HAL_UART_IRQHandler+0xf6>
 80068a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b6:	f043 0204 	orr.w	r2, r3, #4
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d011      	beq.n	80068ee <HAL_UART_IRQHandler+0x126>
 80068ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d005      	beq.n	80068ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e6:	f043 0208 	orr.w	r2, r3, #8
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 81f2 	beq.w	8006cdc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <HAL_UART_IRQHandler+0x14e>
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fd0e 	bl	8007332 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006920:	2b40      	cmp	r3, #64	@ 0x40
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
 8006926:	2300      	movne	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <HAL_UART_IRQHandler+0x17a>
 800693a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800693e:	2b00      	cmp	r3, #0
 8006940:	d04f      	beq.n	80069e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fc16 	bl	8007174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006952:	2b40      	cmp	r3, #64	@ 0x40
 8006954:	d141      	bne.n	80069da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3314      	adds	r3, #20
 800695c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800696c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3314      	adds	r3, #20
 800697e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006982:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006986:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800698e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800699a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1d9      	bne.n	8006956 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d013      	beq.n	80069d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ae:	4a7e      	ldr	r2, [pc, #504]	@ (8006ba8 <HAL_UART_IRQHandler+0x3e0>)
 80069b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fd fd0a 	bl	80043d0 <HAL_DMA_Abort_IT>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d016      	beq.n	80069f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069cc:	4610      	mov	r0, r2
 80069ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d0:	e00e      	b.n	80069f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f99e 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	e00a      	b.n	80069f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f99a 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e0:	e006      	b.n	80069f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f996 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80069ee:	e175      	b.n	8006cdc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	bf00      	nop
    return;
 80069f2:	e173      	b.n	8006cdc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	f040 814f 	bne.w	8006c9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8148 	beq.w	8006c9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8141 	beq.w	8006c9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60bb      	str	r3, [r7, #8]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3a:	2b40      	cmp	r3, #64	@ 0x40
 8006a3c:	f040 80b6 	bne.w	8006bac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8145 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	f080 813e 	bcs.w	8006ce0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a76:	f000 8088 	beq.w	8006b8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	330c      	adds	r3, #12
 8006a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006aa6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006aaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1d9      	bne.n	8006a7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3314      	adds	r3, #20
 8006acc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3314      	adds	r3, #20
 8006ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006aea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006afc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e1      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3314      	adds	r3, #20
 8006b08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3314      	adds	r3, #20
 8006b22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e3      	bne.n	8006b02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b5a:	f023 0310 	bic.w	r3, r3, #16
 8006b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	330c      	adds	r3, #12
 8006b68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e3      	bne.n	8006b48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fd fbb3 	bl	80042f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f8c1 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ba6:	e09b      	b.n	8006ce0 <HAL_UART_IRQHandler+0x518>
 8006ba8:	0800723b 	.word	0x0800723b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 808e 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 8089 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006be8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006bf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006bf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e3      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	623b      	str	r3, [r7, #32]
   return(result);
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3314      	adds	r3, #20
 8006c2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e3      	bne.n	8006c0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330c      	adds	r3, #12
 8006c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0310 	bic.w	r3, r3, #16
 8006c66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	330c      	adds	r3, #12
 8006c70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c74:	61fa      	str	r2, [r7, #28]
 8006c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	69b9      	ldr	r1, [r7, #24]
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	617b      	str	r3, [r7, #20]
   return(result);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e3      	bne.n	8006c50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f847 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c9a:	e023      	b.n	8006ce4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d009      	beq.n	8006cbc <HAL_UART_IRQHandler+0x4f4>
 8006ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fad4 	bl	8007262 <UART_Transmit_IT>
    return;
 8006cba:	e014      	b.n	8006ce6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x51e>
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fb14 	bl	8007302 <UART_EndTransmit_IT>
    return;
 8006cda:	e004      	b.n	8006ce6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006cdc:	bf00      	nop
 8006cde:	e002      	b.n	8006ce6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ce0:	bf00      	nop
 8006ce2:	e000      	b.n	8006ce6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ce4:	bf00      	nop
  }
}
 8006ce6:	37e8      	adds	r7, #232	@ 0xe8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b09c      	sub	sp, #112	@ 0x70
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d172      	bne.n	8006e42 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d5e:	2200      	movs	r2, #0
 8006d60:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	330c      	adds	r3, #12
 8006d80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006d82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d84:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e5      	bne.n	8006d62 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3314      	adds	r3, #20
 8006d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3314      	adds	r3, #20
 8006db4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006db6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006db8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e5      	bne.n	8006d96 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3314      	adds	r3, #20
 8006dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006dea:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d119      	bne.n	8006e42 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	330c      	adds	r3, #12
 8006e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f023 0310 	bic.w	r3, r3, #16
 8006e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006e2e:	61fa      	str	r2, [r7, #28]
 8006e30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	69b9      	ldr	r1, [r7, #24]
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e5      	bne.n	8006e0e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e44:	2200      	movs	r2, #0
 8006e46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d106      	bne.n	8006e5e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e54:	4619      	mov	r1, r3
 8006e56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e58:	f7ff ff66 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e5c:	e002      	b.n	8006e64 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006e5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e60:	f7fb f972 	bl	8002148 <HAL_UART_RxCpltCallback>
}
 8006e64:	bf00      	nop
 8006e66:	3770      	adds	r7, #112	@ 0x70
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d108      	bne.n	8006e9a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	4619      	mov	r1, r3
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f7ff ff48 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e98:	e002      	b.n	8006ea0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f7ff ff30 	bl	8006d00 <HAL_UART_RxHalfCpltCallback>
}
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec4:	2b80      	cmp	r3, #128	@ 0x80
 8006ec6:	bf0c      	ite	eq
 8006ec8:	2301      	moveq	r3, #1
 8006eca:	2300      	movne	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b21      	cmp	r3, #33	@ 0x21
 8006eda:	d108      	bne.n	8006eee <UART_DMAError+0x46>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006ee8:	68b8      	ldr	r0, [r7, #8]
 8006eea:	f000 f91b 	bl	8007124 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	2b40      	cmp	r3, #64	@ 0x40
 8006efa:	bf0c      	ite	eq
 8006efc:	2301      	moveq	r3, #1
 8006efe:	2300      	movne	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b22      	cmp	r3, #34	@ 0x22
 8006f0e:	d108      	bne.n	8006f22 <UART_DMAError+0x7a>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006f1c:	68b8      	ldr	r0, [r7, #8]
 8006f1e:	f000 f929 	bl	8007174 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f26:	f043 0210 	orr.w	r2, r3, #16
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f2e:	68b8      	ldr	r0, [r7, #8]
 8006f30:	f7ff fef0 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4c:	e03b      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d037      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f56:	f7fc faf7 	bl	8003548 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	6a3a      	ldr	r2, [r7, #32]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d302      	bcc.n	8006f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e03a      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d023      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b80      	cmp	r3, #128	@ 0x80
 8006f82:	d020      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b40      	cmp	r3, #64	@ 0x40
 8006f88:	d01d      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	d116      	bne.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f8e0 	bl	8007174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e00f      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d0b4      	beq.n	8006f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b098      	sub	sp, #96	@ 0x60
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2222      	movs	r2, #34	@ 0x22
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701c:	4a3e      	ldr	r2, [pc, #248]	@ (8007118 <UART_Start_Receive_DMA+0x128>)
 800701e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007024:	4a3d      	ldr	r2, [pc, #244]	@ (800711c <UART_Start_Receive_DMA+0x12c>)
 8007026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702c:	4a3c      	ldr	r2, [pc, #240]	@ (8007120 <UART_Start_Receive_DMA+0x130>)
 800702e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007034:	2200      	movs	r2, #0
 8007036:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007038:	f107 0308 	add.w	r3, r7, #8
 800703c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	f7fd f8f6 	bl	8004240 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d019      	beq.n	80070a6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007088:	65bb      	str	r3, [r7, #88]	@ 0x58
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007092:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007094:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007098:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e5      	bne.n	8007072 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3314      	adds	r3, #20
 80070ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	f043 0301 	orr.w	r3, r3, #1
 80070bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3314      	adds	r3, #20
 80070c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80070cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e5      	bne.n	80070a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3314      	adds	r3, #20
 80070e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	617b      	str	r3, [r7, #20]
   return(result);
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3314      	adds	r3, #20
 80070f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80070fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80070fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6a39      	ldr	r1, [r7, #32]
 8007100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	61fb      	str	r3, [r7, #28]
   return(result);
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e5      	bne.n	80070da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3760      	adds	r7, #96	@ 0x60
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	08006d41 	.word	0x08006d41
 800711c:	08006e6d 	.word	0x08006e6d
 8007120:	08006ea9 	.word	0x08006ea9

08007124 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	@ 0x24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	60bb      	str	r3, [r7, #8]
   return(result);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	330c      	adds	r3, #12
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	61ba      	str	r2, [r7, #24]
 800714e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6979      	ldr	r1, [r7, #20]
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	613b      	str	r3, [r7, #16]
   return(result);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e5      	bne.n	800712c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007168:	bf00      	nop
 800716a:	3724      	adds	r7, #36	@ 0x24
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b095      	sub	sp, #84	@ 0x54
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800719c:	643a      	str	r2, [r7, #64]	@ 0x40
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3314      	adds	r3, #20
 80071b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	61fb      	str	r3, [r7, #28]
   return(result);
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3314      	adds	r3, #20
 80071ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e5      	bne.n	80071b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d119      	bne.n	8007220 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	330c      	adds	r3, #12
 80071f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f023 0310 	bic.w	r3, r3, #16
 8007202:	647b      	str	r3, [r7, #68]	@ 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	330c      	adds	r3, #12
 800720a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800720c:	61ba      	str	r2, [r7, #24]
 800720e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6979      	ldr	r1, [r7, #20]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	613b      	str	r3, [r7, #16]
   return(result);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e5      	bne.n	80071ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800722e:	bf00      	nop
 8007230:	3754      	adds	r7, #84	@ 0x54
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff fd5d 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b21      	cmp	r3, #33	@ 0x21
 8007274:	d13e      	bne.n	80072f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727e:	d114      	bne.n	80072aa <UART_Transmit_IT+0x48>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d110      	bne.n	80072aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800729c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	1c9a      	adds	r2, r3, #2
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	621a      	str	r2, [r3, #32]
 80072a8:	e008      	b.n	80072bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	1c59      	adds	r1, r3, #1
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6211      	str	r1, [r2, #32]
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	4619      	mov	r1, r3
 80072ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10f      	bne.n	80072f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e000      	b.n	80072f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
  }
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007318:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff fce2 	bl	8006cec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b08c      	sub	sp, #48	@ 0x30
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b22      	cmp	r3, #34	@ 0x22
 8007344:	f040 80ae 	bne.w	80074a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007350:	d117      	bne.n	8007382 <UART_Receive_IT+0x50>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d113      	bne.n	8007382 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007362:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007370:	b29a      	uxth	r2, r3
 8007372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007374:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737a:	1c9a      	adds	r2, r3, #2
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007380:	e026      	b.n	80073d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007386:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007388:	2300      	movs	r3, #0
 800738a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007394:	d007      	beq.n	80073a6 <UART_Receive_IT+0x74>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <UART_Receive_IT+0x82>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	e008      	b.n	80073c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29b      	uxth	r3, r3
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4619      	mov	r1, r3
 80073de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d15d      	bne.n	80074a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0220 	bic.w	r2, r2, #32
 80073f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007402:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0201 	bic.w	r2, r2, #1
 8007412:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007426:	2b01      	cmp	r3, #1
 8007428:	d135      	bne.n	8007496 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	613b      	str	r3, [r7, #16]
   return(result);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f023 0310 	bic.w	r3, r3, #16
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007450:	623a      	str	r2, [r7, #32]
 8007452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	69f9      	ldr	r1, [r7, #28]
 8007456:	6a3a      	ldr	r2, [r7, #32]
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	61bb      	str	r3, [r7, #24]
   return(result);
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e5      	bne.n	8007430 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0310 	and.w	r3, r3, #16
 800746e:	2b10      	cmp	r3, #16
 8007470:	d10a      	bne.n	8007488 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff fc4a 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
 8007494:	e002      	b.n	800749c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fa fe56 	bl	8002148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	e002      	b.n	80074a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	e000      	b.n	80074a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80074a4:	2302      	movs	r3, #2
  }
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3730      	adds	r7, #48	@ 0x30
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074b4:	b0c0      	sub	sp, #256	@ 0x100
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80074c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074cc:	68d9      	ldr	r1, [r3, #12]
 80074ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	ea40 0301 	orr.w	r3, r0, r1
 80074d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007508:	f021 010c 	bic.w	r1, r1, #12
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007516:	430b      	orrs	r3, r1
 8007518:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800751a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800752a:	6999      	ldr	r1, [r3, #24]
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	ea40 0301 	orr.w	r3, r0, r1
 8007536:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b8f      	ldr	r3, [pc, #572]	@ (800777c <UART_SetConfig+0x2cc>)
 8007540:	429a      	cmp	r2, r3
 8007542:	d005      	beq.n	8007550 <UART_SetConfig+0xa0>
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	4b8d      	ldr	r3, [pc, #564]	@ (8007780 <UART_SetConfig+0x2d0>)
 800754c:	429a      	cmp	r2, r3
 800754e:	d104      	bne.n	800755a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007550:	f7fd fdc2 	bl	80050d8 <HAL_RCC_GetPCLK2Freq>
 8007554:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007558:	e003      	b.n	8007562 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800755a:	f7fd fda9 	bl	80050b0 <HAL_RCC_GetPCLK1Freq>
 800755e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800756c:	f040 810c 	bne.w	8007788 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007574:	2200      	movs	r2, #0
 8007576:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800757a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800757e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007582:	4622      	mov	r2, r4
 8007584:	462b      	mov	r3, r5
 8007586:	1891      	adds	r1, r2, r2
 8007588:	65b9      	str	r1, [r7, #88]	@ 0x58
 800758a:	415b      	adcs	r3, r3
 800758c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800758e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007592:	4621      	mov	r1, r4
 8007594:	eb12 0801 	adds.w	r8, r2, r1
 8007598:	4629      	mov	r1, r5
 800759a:	eb43 0901 	adc.w	r9, r3, r1
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075b2:	4690      	mov	r8, r2
 80075b4:	4699      	mov	r9, r3
 80075b6:	4623      	mov	r3, r4
 80075b8:	eb18 0303 	adds.w	r3, r8, r3
 80075bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075c0:	462b      	mov	r3, r5
 80075c2:	eb49 0303 	adc.w	r3, r9, r3
 80075c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80075da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075de:	460b      	mov	r3, r1
 80075e0:	18db      	adds	r3, r3, r3
 80075e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80075e4:	4613      	mov	r3, r2
 80075e6:	eb42 0303 	adc.w	r3, r2, r3
 80075ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80075ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075f4:	f7f9 fb68 	bl	8000cc8 <__aeabi_uldivmod>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4b61      	ldr	r3, [pc, #388]	@ (8007784 <UART_SetConfig+0x2d4>)
 80075fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	011c      	lsls	r4, r3, #4
 8007606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800760a:	2200      	movs	r2, #0
 800760c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007610:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007614:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007618:	4642      	mov	r2, r8
 800761a:	464b      	mov	r3, r9
 800761c:	1891      	adds	r1, r2, r2
 800761e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007620:	415b      	adcs	r3, r3
 8007622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007624:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007628:	4641      	mov	r1, r8
 800762a:	eb12 0a01 	adds.w	sl, r2, r1
 800762e:	4649      	mov	r1, r9
 8007630:	eb43 0b01 	adc.w	fp, r3, r1
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007640:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007644:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007648:	4692      	mov	sl, r2
 800764a:	469b      	mov	fp, r3
 800764c:	4643      	mov	r3, r8
 800764e:	eb1a 0303 	adds.w	r3, sl, r3
 8007652:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007656:	464b      	mov	r3, r9
 8007658:	eb4b 0303 	adc.w	r3, fp, r3
 800765c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800766c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007670:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007674:	460b      	mov	r3, r1
 8007676:	18db      	adds	r3, r3, r3
 8007678:	643b      	str	r3, [r7, #64]	@ 0x40
 800767a:	4613      	mov	r3, r2
 800767c:	eb42 0303 	adc.w	r3, r2, r3
 8007680:	647b      	str	r3, [r7, #68]	@ 0x44
 8007682:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007686:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800768a:	f7f9 fb1d 	bl	8000cc8 <__aeabi_uldivmod>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4611      	mov	r1, r2
 8007694:	4b3b      	ldr	r3, [pc, #236]	@ (8007784 <UART_SetConfig+0x2d4>)
 8007696:	fba3 2301 	umull	r2, r3, r3, r1
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	2264      	movs	r2, #100	@ 0x64
 800769e:	fb02 f303 	mul.w	r3, r2, r3
 80076a2:	1acb      	subs	r3, r1, r3
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80076aa:	4b36      	ldr	r3, [pc, #216]	@ (8007784 <UART_SetConfig+0x2d4>)
 80076ac:	fba3 2302 	umull	r2, r3, r3, r2
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80076b8:	441c      	add	r4, r3
 80076ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80076c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80076cc:	4642      	mov	r2, r8
 80076ce:	464b      	mov	r3, r9
 80076d0:	1891      	adds	r1, r2, r2
 80076d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076d4:	415b      	adcs	r3, r3
 80076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076dc:	4641      	mov	r1, r8
 80076de:	1851      	adds	r1, r2, r1
 80076e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80076e2:	4649      	mov	r1, r9
 80076e4:	414b      	adcs	r3, r1
 80076e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076f4:	4659      	mov	r1, fp
 80076f6:	00cb      	lsls	r3, r1, #3
 80076f8:	4651      	mov	r1, sl
 80076fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076fe:	4651      	mov	r1, sl
 8007700:	00ca      	lsls	r2, r1, #3
 8007702:	4610      	mov	r0, r2
 8007704:	4619      	mov	r1, r3
 8007706:	4603      	mov	r3, r0
 8007708:	4642      	mov	r2, r8
 800770a:	189b      	adds	r3, r3, r2
 800770c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007710:	464b      	mov	r3, r9
 8007712:	460a      	mov	r2, r1
 8007714:	eb42 0303 	adc.w	r3, r2, r3
 8007718:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007728:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800772c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007730:	460b      	mov	r3, r1
 8007732:	18db      	adds	r3, r3, r3
 8007734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007736:	4613      	mov	r3, r2
 8007738:	eb42 0303 	adc.w	r3, r2, r3
 800773c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800773e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007742:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007746:	f7f9 fabf 	bl	8000cc8 <__aeabi_uldivmod>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <UART_SetConfig+0x2d4>)
 8007750:	fba3 1302 	umull	r1, r3, r3, r2
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	2164      	movs	r1, #100	@ 0x64
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	3332      	adds	r3, #50	@ 0x32
 8007762:	4a08      	ldr	r2, [pc, #32]	@ (8007784 <UART_SetConfig+0x2d4>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	f003 0207 	and.w	r2, r3, #7
 800776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4422      	add	r2, r4
 8007776:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007778:	e106      	b.n	8007988 <UART_SetConfig+0x4d8>
 800777a:	bf00      	nop
 800777c:	40011000 	.word	0x40011000
 8007780:	40011400 	.word	0x40011400
 8007784:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800778c:	2200      	movs	r2, #0
 800778e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007792:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007796:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800779a:	4642      	mov	r2, r8
 800779c:	464b      	mov	r3, r9
 800779e:	1891      	adds	r1, r2, r2
 80077a0:	6239      	str	r1, [r7, #32]
 80077a2:	415b      	adcs	r3, r3
 80077a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077aa:	4641      	mov	r1, r8
 80077ac:	1854      	adds	r4, r2, r1
 80077ae:	4649      	mov	r1, r9
 80077b0:	eb43 0501 	adc.w	r5, r3, r1
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	f04f 0300 	mov.w	r3, #0
 80077bc:	00eb      	lsls	r3, r5, #3
 80077be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077c2:	00e2      	lsls	r2, r4, #3
 80077c4:	4614      	mov	r4, r2
 80077c6:	461d      	mov	r5, r3
 80077c8:	4643      	mov	r3, r8
 80077ca:	18e3      	adds	r3, r4, r3
 80077cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077d0:	464b      	mov	r3, r9
 80077d2:	eb45 0303 	adc.w	r3, r5, r3
 80077d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077ea:	f04f 0200 	mov.w	r2, #0
 80077ee:	f04f 0300 	mov.w	r3, #0
 80077f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077f6:	4629      	mov	r1, r5
 80077f8:	008b      	lsls	r3, r1, #2
 80077fa:	4621      	mov	r1, r4
 80077fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007800:	4621      	mov	r1, r4
 8007802:	008a      	lsls	r2, r1, #2
 8007804:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007808:	f7f9 fa5e 	bl	8000cc8 <__aeabi_uldivmod>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4b60      	ldr	r3, [pc, #384]	@ (8007994 <UART_SetConfig+0x4e4>)
 8007812:	fba3 2302 	umull	r2, r3, r3, r2
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	011c      	lsls	r4, r3, #4
 800781a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800781e:	2200      	movs	r2, #0
 8007820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007824:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007828:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800782c:	4642      	mov	r2, r8
 800782e:	464b      	mov	r3, r9
 8007830:	1891      	adds	r1, r2, r2
 8007832:	61b9      	str	r1, [r7, #24]
 8007834:	415b      	adcs	r3, r3
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800783c:	4641      	mov	r1, r8
 800783e:	1851      	adds	r1, r2, r1
 8007840:	6139      	str	r1, [r7, #16]
 8007842:	4649      	mov	r1, r9
 8007844:	414b      	adcs	r3, r1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007854:	4659      	mov	r1, fp
 8007856:	00cb      	lsls	r3, r1, #3
 8007858:	4651      	mov	r1, sl
 800785a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800785e:	4651      	mov	r1, sl
 8007860:	00ca      	lsls	r2, r1, #3
 8007862:	4610      	mov	r0, r2
 8007864:	4619      	mov	r1, r3
 8007866:	4603      	mov	r3, r0
 8007868:	4642      	mov	r2, r8
 800786a:	189b      	adds	r3, r3, r2
 800786c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007870:	464b      	mov	r3, r9
 8007872:	460a      	mov	r2, r1
 8007874:	eb42 0303 	adc.w	r3, r2, r3
 8007878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800787c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007886:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007894:	4649      	mov	r1, r9
 8007896:	008b      	lsls	r3, r1, #2
 8007898:	4641      	mov	r1, r8
 800789a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800789e:	4641      	mov	r1, r8
 80078a0:	008a      	lsls	r2, r1, #2
 80078a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80078a6:	f7f9 fa0f 	bl	8000cc8 <__aeabi_uldivmod>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	4b38      	ldr	r3, [pc, #224]	@ (8007994 <UART_SetConfig+0x4e4>)
 80078b2:	fba3 2301 	umull	r2, r3, r3, r1
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	2264      	movs	r2, #100	@ 0x64
 80078ba:	fb02 f303 	mul.w	r3, r2, r3
 80078be:	1acb      	subs	r3, r1, r3
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	3332      	adds	r3, #50	@ 0x32
 80078c4:	4a33      	ldr	r2, [pc, #204]	@ (8007994 <UART_SetConfig+0x4e4>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078d0:	441c      	add	r4, r3
 80078d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078d6:	2200      	movs	r2, #0
 80078d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80078da:	677a      	str	r2, [r7, #116]	@ 0x74
 80078dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80078e0:	4642      	mov	r2, r8
 80078e2:	464b      	mov	r3, r9
 80078e4:	1891      	adds	r1, r2, r2
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	415b      	adcs	r3, r3
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078f0:	4641      	mov	r1, r8
 80078f2:	1851      	adds	r1, r2, r1
 80078f4:	6039      	str	r1, [r7, #0]
 80078f6:	4649      	mov	r1, r9
 80078f8:	414b      	adcs	r3, r1
 80078fa:	607b      	str	r3, [r7, #4]
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007908:	4659      	mov	r1, fp
 800790a:	00cb      	lsls	r3, r1, #3
 800790c:	4651      	mov	r1, sl
 800790e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007912:	4651      	mov	r1, sl
 8007914:	00ca      	lsls	r2, r1, #3
 8007916:	4610      	mov	r0, r2
 8007918:	4619      	mov	r1, r3
 800791a:	4603      	mov	r3, r0
 800791c:	4642      	mov	r2, r8
 800791e:	189b      	adds	r3, r3, r2
 8007920:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007922:	464b      	mov	r3, r9
 8007924:	460a      	mov	r2, r1
 8007926:	eb42 0303 	adc.w	r3, r2, r3
 800792a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	663b      	str	r3, [r7, #96]	@ 0x60
 8007936:	667a      	str	r2, [r7, #100]	@ 0x64
 8007938:	f04f 0200 	mov.w	r2, #0
 800793c:	f04f 0300 	mov.w	r3, #0
 8007940:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007944:	4649      	mov	r1, r9
 8007946:	008b      	lsls	r3, r1, #2
 8007948:	4641      	mov	r1, r8
 800794a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800794e:	4641      	mov	r1, r8
 8007950:	008a      	lsls	r2, r1, #2
 8007952:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007956:	f7f9 f9b7 	bl	8000cc8 <__aeabi_uldivmod>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <UART_SetConfig+0x4e4>)
 8007960:	fba3 1302 	umull	r1, r3, r3, r2
 8007964:	095b      	lsrs	r3, r3, #5
 8007966:	2164      	movs	r1, #100	@ 0x64
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	3332      	adds	r3, #50	@ 0x32
 8007972:	4a08      	ldr	r2, [pc, #32]	@ (8007994 <UART_SetConfig+0x4e4>)
 8007974:	fba2 2303 	umull	r2, r3, r2, r3
 8007978:	095b      	lsrs	r3, r3, #5
 800797a:	f003 020f 	and.w	r2, r3, #15
 800797e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4422      	add	r2, r4
 8007986:	609a      	str	r2, [r3, #8]
}
 8007988:	bf00      	nop
 800798a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800798e:	46bd      	mov	sp, r7
 8007990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007994:	51eb851f 	.word	0x51eb851f

08007998 <malloc>:
 8007998:	4b02      	ldr	r3, [pc, #8]	@ (80079a4 <malloc+0xc>)
 800799a:	4601      	mov	r1, r0
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	f000 b825 	b.w	80079ec <_malloc_r>
 80079a2:	bf00      	nop
 80079a4:	20000188 	.word	0x20000188

080079a8 <sbrk_aligned>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	4e0f      	ldr	r6, [pc, #60]	@ (80079e8 <sbrk_aligned+0x40>)
 80079ac:	460c      	mov	r4, r1
 80079ae:	6831      	ldr	r1, [r6, #0]
 80079b0:	4605      	mov	r5, r0
 80079b2:	b911      	cbnz	r1, 80079ba <sbrk_aligned+0x12>
 80079b4:	f001 fe92 	bl	80096dc <_sbrk_r>
 80079b8:	6030      	str	r0, [r6, #0]
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f001 fe8d 	bl	80096dc <_sbrk_r>
 80079c2:	1c43      	adds	r3, r0, #1
 80079c4:	d103      	bne.n	80079ce <sbrk_aligned+0x26>
 80079c6:	f04f 34ff 	mov.w	r4, #4294967295
 80079ca:	4620      	mov	r0, r4
 80079cc:	bd70      	pop	{r4, r5, r6, pc}
 80079ce:	1cc4      	adds	r4, r0, #3
 80079d0:	f024 0403 	bic.w	r4, r4, #3
 80079d4:	42a0      	cmp	r0, r4
 80079d6:	d0f8      	beq.n	80079ca <sbrk_aligned+0x22>
 80079d8:	1a21      	subs	r1, r4, r0
 80079da:	4628      	mov	r0, r5
 80079dc:	f001 fe7e 	bl	80096dc <_sbrk_r>
 80079e0:	3001      	adds	r0, #1
 80079e2:	d1f2      	bne.n	80079ca <sbrk_aligned+0x22>
 80079e4:	e7ef      	b.n	80079c6 <sbrk_aligned+0x1e>
 80079e6:	bf00      	nop
 80079e8:	200008ac 	.word	0x200008ac

080079ec <_malloc_r>:
 80079ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f0:	1ccd      	adds	r5, r1, #3
 80079f2:	f025 0503 	bic.w	r5, r5, #3
 80079f6:	3508      	adds	r5, #8
 80079f8:	2d0c      	cmp	r5, #12
 80079fa:	bf38      	it	cc
 80079fc:	250c      	movcc	r5, #12
 80079fe:	2d00      	cmp	r5, #0
 8007a00:	4606      	mov	r6, r0
 8007a02:	db01      	blt.n	8007a08 <_malloc_r+0x1c>
 8007a04:	42a9      	cmp	r1, r5
 8007a06:	d904      	bls.n	8007a12 <_malloc_r+0x26>
 8007a08:	230c      	movs	r3, #12
 8007a0a:	6033      	str	r3, [r6, #0]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ae8 <_malloc_r+0xfc>
 8007a16:	f000 f869 	bl	8007aec <__malloc_lock>
 8007a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a1e:	461c      	mov	r4, r3
 8007a20:	bb44      	cbnz	r4, 8007a74 <_malloc_r+0x88>
 8007a22:	4629      	mov	r1, r5
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7ff ffbf 	bl	80079a8 <sbrk_aligned>
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	d158      	bne.n	8007ae2 <_malloc_r+0xf6>
 8007a30:	f8d8 4000 	ldr.w	r4, [r8]
 8007a34:	4627      	mov	r7, r4
 8007a36:	2f00      	cmp	r7, #0
 8007a38:	d143      	bne.n	8007ac2 <_malloc_r+0xd6>
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	d04b      	beq.n	8007ad6 <_malloc_r+0xea>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	4639      	mov	r1, r7
 8007a42:	4630      	mov	r0, r6
 8007a44:	eb04 0903 	add.w	r9, r4, r3
 8007a48:	f001 fe48 	bl	80096dc <_sbrk_r>
 8007a4c:	4581      	cmp	r9, r0
 8007a4e:	d142      	bne.n	8007ad6 <_malloc_r+0xea>
 8007a50:	6821      	ldr	r1, [r4, #0]
 8007a52:	1a6d      	subs	r5, r5, r1
 8007a54:	4629      	mov	r1, r5
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7ff ffa6 	bl	80079a8 <sbrk_aligned>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d03a      	beq.n	8007ad6 <_malloc_r+0xea>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	442b      	add	r3, r5
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	f8d8 3000 	ldr.w	r3, [r8]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	bb62      	cbnz	r2, 8007ac8 <_malloc_r+0xdc>
 8007a6e:	f8c8 7000 	str.w	r7, [r8]
 8007a72:	e00f      	b.n	8007a94 <_malloc_r+0xa8>
 8007a74:	6822      	ldr	r2, [r4, #0]
 8007a76:	1b52      	subs	r2, r2, r5
 8007a78:	d420      	bmi.n	8007abc <_malloc_r+0xd0>
 8007a7a:	2a0b      	cmp	r2, #11
 8007a7c:	d917      	bls.n	8007aae <_malloc_r+0xc2>
 8007a7e:	1961      	adds	r1, r4, r5
 8007a80:	42a3      	cmp	r3, r4
 8007a82:	6025      	str	r5, [r4, #0]
 8007a84:	bf18      	it	ne
 8007a86:	6059      	strne	r1, [r3, #4]
 8007a88:	6863      	ldr	r3, [r4, #4]
 8007a8a:	bf08      	it	eq
 8007a8c:	f8c8 1000 	streq.w	r1, [r8]
 8007a90:	5162      	str	r2, [r4, r5]
 8007a92:	604b      	str	r3, [r1, #4]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f000 f82f 	bl	8007af8 <__malloc_unlock>
 8007a9a:	f104 000b 	add.w	r0, r4, #11
 8007a9e:	1d23      	adds	r3, r4, #4
 8007aa0:	f020 0007 	bic.w	r0, r0, #7
 8007aa4:	1ac2      	subs	r2, r0, r3
 8007aa6:	bf1c      	itt	ne
 8007aa8:	1a1b      	subne	r3, r3, r0
 8007aaa:	50a3      	strne	r3, [r4, r2]
 8007aac:	e7af      	b.n	8007a0e <_malloc_r+0x22>
 8007aae:	6862      	ldr	r2, [r4, #4]
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	bf0c      	ite	eq
 8007ab4:	f8c8 2000 	streq.w	r2, [r8]
 8007ab8:	605a      	strne	r2, [r3, #4]
 8007aba:	e7eb      	b.n	8007a94 <_malloc_r+0xa8>
 8007abc:	4623      	mov	r3, r4
 8007abe:	6864      	ldr	r4, [r4, #4]
 8007ac0:	e7ae      	b.n	8007a20 <_malloc_r+0x34>
 8007ac2:	463c      	mov	r4, r7
 8007ac4:	687f      	ldr	r7, [r7, #4]
 8007ac6:	e7b6      	b.n	8007a36 <_malloc_r+0x4a>
 8007ac8:	461a      	mov	r2, r3
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d1fb      	bne.n	8007ac8 <_malloc_r+0xdc>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6053      	str	r3, [r2, #4]
 8007ad4:	e7de      	b.n	8007a94 <_malloc_r+0xa8>
 8007ad6:	230c      	movs	r3, #12
 8007ad8:	6033      	str	r3, [r6, #0]
 8007ada:	4630      	mov	r0, r6
 8007adc:	f000 f80c 	bl	8007af8 <__malloc_unlock>
 8007ae0:	e794      	b.n	8007a0c <_malloc_r+0x20>
 8007ae2:	6005      	str	r5, [r0, #0]
 8007ae4:	e7d6      	b.n	8007a94 <_malloc_r+0xa8>
 8007ae6:	bf00      	nop
 8007ae8:	200008b0 	.word	0x200008b0

08007aec <__malloc_lock>:
 8007aec:	4801      	ldr	r0, [pc, #4]	@ (8007af4 <__malloc_lock+0x8>)
 8007aee:	f001 be42 	b.w	8009776 <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	200009f4 	.word	0x200009f4

08007af8 <__malloc_unlock>:
 8007af8:	4801      	ldr	r0, [pc, #4]	@ (8007b00 <__malloc_unlock+0x8>)
 8007afa:	f001 be3d 	b.w	8009778 <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	200009f4 	.word	0x200009f4

08007b04 <sulp>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	4604      	mov	r4, r0
 8007b08:	460d      	mov	r5, r1
 8007b0a:	ec45 4b10 	vmov	d0, r4, r5
 8007b0e:	4616      	mov	r6, r2
 8007b10:	f003 fba8 	bl	800b264 <__ulp>
 8007b14:	ec51 0b10 	vmov	r0, r1, d0
 8007b18:	b17e      	cbz	r6, 8007b3a <sulp+0x36>
 8007b1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	dd09      	ble.n	8007b3a <sulp+0x36>
 8007b26:	051b      	lsls	r3, r3, #20
 8007b28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007b2c:	2400      	movs	r4, #0
 8007b2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007b32:	4622      	mov	r2, r4
 8007b34:	462b      	mov	r3, r5
 8007b36:	f7f8 fd7f 	bl	8000638 <__aeabi_dmul>
 8007b3a:	ec41 0b10 	vmov	d0, r0, r1
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}

08007b40 <_strtod_l>:
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	b09f      	sub	sp, #124	@ 0x7c
 8007b46:	460c      	mov	r4, r1
 8007b48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007b4e:	9005      	str	r0, [sp, #20]
 8007b50:	f04f 0a00 	mov.w	sl, #0
 8007b54:	f04f 0b00 	mov.w	fp, #0
 8007b58:	460a      	mov	r2, r1
 8007b5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b5c:	7811      	ldrb	r1, [r2, #0]
 8007b5e:	292b      	cmp	r1, #43	@ 0x2b
 8007b60:	d04a      	beq.n	8007bf8 <_strtod_l+0xb8>
 8007b62:	d838      	bhi.n	8007bd6 <_strtod_l+0x96>
 8007b64:	290d      	cmp	r1, #13
 8007b66:	d832      	bhi.n	8007bce <_strtod_l+0x8e>
 8007b68:	2908      	cmp	r1, #8
 8007b6a:	d832      	bhi.n	8007bd2 <_strtod_l+0x92>
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d03b      	beq.n	8007be8 <_strtod_l+0xa8>
 8007b70:	2200      	movs	r2, #0
 8007b72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007b74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007b76:	782a      	ldrb	r2, [r5, #0]
 8007b78:	2a30      	cmp	r2, #48	@ 0x30
 8007b7a:	f040 80b3 	bne.w	8007ce4 <_strtod_l+0x1a4>
 8007b7e:	786a      	ldrb	r2, [r5, #1]
 8007b80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b84:	2a58      	cmp	r2, #88	@ 0x58
 8007b86:	d16e      	bne.n	8007c66 <_strtod_l+0x126>
 8007b88:	9302      	str	r3, [sp, #8]
 8007b8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	4a8e      	ldr	r2, [pc, #568]	@ (8007dcc <_strtod_l+0x28c>)
 8007b94:	9805      	ldr	r0, [sp, #20]
 8007b96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007b98:	a919      	add	r1, sp, #100	@ 0x64
 8007b9a:	f002 fd0b 	bl	800a5b4 <__gethex>
 8007b9e:	f010 060f 	ands.w	r6, r0, #15
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	d005      	beq.n	8007bb2 <_strtod_l+0x72>
 8007ba6:	2e06      	cmp	r6, #6
 8007ba8:	d128      	bne.n	8007bfc <_strtod_l+0xbc>
 8007baa:	3501      	adds	r5, #1
 8007bac:	2300      	movs	r3, #0
 8007bae:	9519      	str	r5, [sp, #100]	@ 0x64
 8007bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f040 858e 	bne.w	80086d6 <_strtod_l+0xb96>
 8007bba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bbc:	b1cb      	cbz	r3, 8007bf2 <_strtod_l+0xb2>
 8007bbe:	4652      	mov	r2, sl
 8007bc0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007bc4:	ec43 2b10 	vmov	d0, r2, r3
 8007bc8:	b01f      	add	sp, #124	@ 0x7c
 8007bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bce:	2920      	cmp	r1, #32
 8007bd0:	d1ce      	bne.n	8007b70 <_strtod_l+0x30>
 8007bd2:	3201      	adds	r2, #1
 8007bd4:	e7c1      	b.n	8007b5a <_strtod_l+0x1a>
 8007bd6:	292d      	cmp	r1, #45	@ 0x2d
 8007bd8:	d1ca      	bne.n	8007b70 <_strtod_l+0x30>
 8007bda:	2101      	movs	r1, #1
 8007bdc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007bde:	1c51      	adds	r1, r2, #1
 8007be0:	9119      	str	r1, [sp, #100]	@ 0x64
 8007be2:	7852      	ldrb	r2, [r2, #1]
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	d1c5      	bne.n	8007b74 <_strtod_l+0x34>
 8007be8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bea:	9419      	str	r4, [sp, #100]	@ 0x64
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f040 8570 	bne.w	80086d2 <_strtod_l+0xb92>
 8007bf2:	4652      	mov	r2, sl
 8007bf4:	465b      	mov	r3, fp
 8007bf6:	e7e5      	b.n	8007bc4 <_strtod_l+0x84>
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	e7ef      	b.n	8007bdc <_strtod_l+0x9c>
 8007bfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007bfe:	b13a      	cbz	r2, 8007c10 <_strtod_l+0xd0>
 8007c00:	2135      	movs	r1, #53	@ 0x35
 8007c02:	a81c      	add	r0, sp, #112	@ 0x70
 8007c04:	f003 fc28 	bl	800b458 <__copybits>
 8007c08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c0a:	9805      	ldr	r0, [sp, #20]
 8007c0c:	f002 fff6 	bl	800abfc <_Bfree>
 8007c10:	3e01      	subs	r6, #1
 8007c12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007c14:	2e04      	cmp	r6, #4
 8007c16:	d806      	bhi.n	8007c26 <_strtod_l+0xe6>
 8007c18:	e8df f006 	tbb	[pc, r6]
 8007c1c:	201d0314 	.word	0x201d0314
 8007c20:	14          	.byte	0x14
 8007c21:	00          	.byte	0x00
 8007c22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007c26:	05e1      	lsls	r1, r4, #23
 8007c28:	bf48      	it	mi
 8007c2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007c2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c32:	0d1b      	lsrs	r3, r3, #20
 8007c34:	051b      	lsls	r3, r3, #20
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1bb      	bne.n	8007bb2 <_strtod_l+0x72>
 8007c3a:	f001 fd71 	bl	8009720 <__errno>
 8007c3e:	2322      	movs	r3, #34	@ 0x22
 8007c40:	6003      	str	r3, [r0, #0]
 8007c42:	e7b6      	b.n	8007bb2 <_strtod_l+0x72>
 8007c44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007c48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007c4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007c50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c54:	e7e7      	b.n	8007c26 <_strtod_l+0xe6>
 8007c56:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007dd4 <_strtod_l+0x294>
 8007c5a:	e7e4      	b.n	8007c26 <_strtod_l+0xe6>
 8007c5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007c60:	f04f 3aff 	mov.w	sl, #4294967295
 8007c64:	e7df      	b.n	8007c26 <_strtod_l+0xe6>
 8007c66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b30      	cmp	r3, #48	@ 0x30
 8007c70:	d0f9      	beq.n	8007c66 <_strtod_l+0x126>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d09d      	beq.n	8007bb2 <_strtod_l+0x72>
 8007c76:	2301      	movs	r3, #1
 8007c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9308      	str	r3, [sp, #32]
 8007c82:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c84:	461f      	mov	r7, r3
 8007c86:	220a      	movs	r2, #10
 8007c88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007c8a:	7805      	ldrb	r5, [r0, #0]
 8007c8c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007c90:	b2d9      	uxtb	r1, r3
 8007c92:	2909      	cmp	r1, #9
 8007c94:	d928      	bls.n	8007ce8 <_strtod_l+0x1a8>
 8007c96:	494e      	ldr	r1, [pc, #312]	@ (8007dd0 <_strtod_l+0x290>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f001 fcd4 	bl	8009646 <strncmp>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d032      	beq.n	8007d08 <_strtod_l+0x1c8>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4681      	mov	r9, r0
 8007ca8:	463d      	mov	r5, r7
 8007caa:	4603      	mov	r3, r0
 8007cac:	2a65      	cmp	r2, #101	@ 0x65
 8007cae:	d001      	beq.n	8007cb4 <_strtod_l+0x174>
 8007cb0:	2a45      	cmp	r2, #69	@ 0x45
 8007cb2:	d114      	bne.n	8007cde <_strtod_l+0x19e>
 8007cb4:	b91d      	cbnz	r5, 8007cbe <_strtod_l+0x17e>
 8007cb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cb8:	4302      	orrs	r2, r0
 8007cba:	d095      	beq.n	8007be8 <_strtod_l+0xa8>
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007cc0:	1c62      	adds	r2, r4, #1
 8007cc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cc4:	7862      	ldrb	r2, [r4, #1]
 8007cc6:	2a2b      	cmp	r2, #43	@ 0x2b
 8007cc8:	d077      	beq.n	8007dba <_strtod_l+0x27a>
 8007cca:	2a2d      	cmp	r2, #45	@ 0x2d
 8007ccc:	d07b      	beq.n	8007dc6 <_strtod_l+0x286>
 8007cce:	f04f 0c00 	mov.w	ip, #0
 8007cd2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007cd6:	2909      	cmp	r1, #9
 8007cd8:	f240 8082 	bls.w	8007de0 <_strtod_l+0x2a0>
 8007cdc:	9419      	str	r4, [sp, #100]	@ 0x64
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	e0a2      	b.n	8007e2a <_strtod_l+0x2ea>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e7c7      	b.n	8007c78 <_strtod_l+0x138>
 8007ce8:	2f08      	cmp	r7, #8
 8007cea:	bfd5      	itete	le
 8007cec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007cee:	9908      	ldrgt	r1, [sp, #32]
 8007cf0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007cf4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007cf8:	f100 0001 	add.w	r0, r0, #1
 8007cfc:	bfd4      	ite	le
 8007cfe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007d00:	9308      	strgt	r3, [sp, #32]
 8007d02:	3701      	adds	r7, #1
 8007d04:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d06:	e7bf      	b.n	8007c88 <_strtod_l+0x148>
 8007d08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d0e:	785a      	ldrb	r2, [r3, #1]
 8007d10:	b37f      	cbz	r7, 8007d72 <_strtod_l+0x232>
 8007d12:	4681      	mov	r9, r0
 8007d14:	463d      	mov	r5, r7
 8007d16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007d1a:	2b09      	cmp	r3, #9
 8007d1c:	d912      	bls.n	8007d44 <_strtod_l+0x204>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e7c4      	b.n	8007cac <_strtod_l+0x16c>
 8007d22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d28:	785a      	ldrb	r2, [r3, #1]
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	2a30      	cmp	r2, #48	@ 0x30
 8007d2e:	d0f8      	beq.n	8007d22 <_strtod_l+0x1e2>
 8007d30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	f200 84d3 	bhi.w	80086e0 <_strtod_l+0xba0>
 8007d3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d3e:	4681      	mov	r9, r0
 8007d40:	2000      	movs	r0, #0
 8007d42:	4605      	mov	r5, r0
 8007d44:	3a30      	subs	r2, #48	@ 0x30
 8007d46:	f100 0301 	add.w	r3, r0, #1
 8007d4a:	d02a      	beq.n	8007da2 <_strtod_l+0x262>
 8007d4c:	4499      	add	r9, r3
 8007d4e:	eb00 0c05 	add.w	ip, r0, r5
 8007d52:	462b      	mov	r3, r5
 8007d54:	210a      	movs	r1, #10
 8007d56:	4563      	cmp	r3, ip
 8007d58:	d10d      	bne.n	8007d76 <_strtod_l+0x236>
 8007d5a:	1c69      	adds	r1, r5, #1
 8007d5c:	4401      	add	r1, r0
 8007d5e:	4428      	add	r0, r5
 8007d60:	2808      	cmp	r0, #8
 8007d62:	dc16      	bgt.n	8007d92 <_strtod_l+0x252>
 8007d64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d66:	230a      	movs	r3, #10
 8007d68:	fb03 2300 	mla	r3, r3, r0, r2
 8007d6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e018      	b.n	8007da4 <_strtod_l+0x264>
 8007d72:	4638      	mov	r0, r7
 8007d74:	e7da      	b.n	8007d2c <_strtod_l+0x1ec>
 8007d76:	2b08      	cmp	r3, #8
 8007d78:	f103 0301 	add.w	r3, r3, #1
 8007d7c:	dc03      	bgt.n	8007d86 <_strtod_l+0x246>
 8007d7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007d80:	434e      	muls	r6, r1
 8007d82:	960a      	str	r6, [sp, #40]	@ 0x28
 8007d84:	e7e7      	b.n	8007d56 <_strtod_l+0x216>
 8007d86:	2b10      	cmp	r3, #16
 8007d88:	bfde      	ittt	le
 8007d8a:	9e08      	ldrle	r6, [sp, #32]
 8007d8c:	434e      	mulle	r6, r1
 8007d8e:	9608      	strle	r6, [sp, #32]
 8007d90:	e7e1      	b.n	8007d56 <_strtod_l+0x216>
 8007d92:	280f      	cmp	r0, #15
 8007d94:	dceb      	bgt.n	8007d6e <_strtod_l+0x22e>
 8007d96:	9808      	ldr	r0, [sp, #32]
 8007d98:	230a      	movs	r3, #10
 8007d9a:	fb03 2300 	mla	r3, r3, r0, r2
 8007d9e:	9308      	str	r3, [sp, #32]
 8007da0:	e7e5      	b.n	8007d6e <_strtod_l+0x22e>
 8007da2:	4629      	mov	r1, r5
 8007da4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007da6:	1c50      	adds	r0, r2, #1
 8007da8:	9019      	str	r0, [sp, #100]	@ 0x64
 8007daa:	7852      	ldrb	r2, [r2, #1]
 8007dac:	4618      	mov	r0, r3
 8007dae:	460d      	mov	r5, r1
 8007db0:	e7b1      	b.n	8007d16 <_strtod_l+0x1d6>
 8007db2:	f04f 0900 	mov.w	r9, #0
 8007db6:	2301      	movs	r3, #1
 8007db8:	e77d      	b.n	8007cb6 <_strtod_l+0x176>
 8007dba:	f04f 0c00 	mov.w	ip, #0
 8007dbe:	1ca2      	adds	r2, r4, #2
 8007dc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8007dc2:	78a2      	ldrb	r2, [r4, #2]
 8007dc4:	e785      	b.n	8007cd2 <_strtod_l+0x192>
 8007dc6:	f04f 0c01 	mov.w	ip, #1
 8007dca:	e7f8      	b.n	8007dbe <_strtod_l+0x27e>
 8007dcc:	0800c19c 	.word	0x0800c19c
 8007dd0:	0800c184 	.word	0x0800c184
 8007dd4:	7ff00000 	.word	0x7ff00000
 8007dd8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007dda:	1c51      	adds	r1, r2, #1
 8007ddc:	9119      	str	r1, [sp, #100]	@ 0x64
 8007dde:	7852      	ldrb	r2, [r2, #1]
 8007de0:	2a30      	cmp	r2, #48	@ 0x30
 8007de2:	d0f9      	beq.n	8007dd8 <_strtod_l+0x298>
 8007de4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007de8:	2908      	cmp	r1, #8
 8007dea:	f63f af78 	bhi.w	8007cde <_strtod_l+0x19e>
 8007dee:	3a30      	subs	r2, #48	@ 0x30
 8007df0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007df2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007df4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007df6:	f04f 080a 	mov.w	r8, #10
 8007dfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007dfc:	1c56      	adds	r6, r2, #1
 8007dfe:	9619      	str	r6, [sp, #100]	@ 0x64
 8007e00:	7852      	ldrb	r2, [r2, #1]
 8007e02:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007e06:	f1be 0f09 	cmp.w	lr, #9
 8007e0a:	d939      	bls.n	8007e80 <_strtod_l+0x340>
 8007e0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007e0e:	1a76      	subs	r6, r6, r1
 8007e10:	2e08      	cmp	r6, #8
 8007e12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007e16:	dc03      	bgt.n	8007e20 <_strtod_l+0x2e0>
 8007e18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e1a:	4588      	cmp	r8, r1
 8007e1c:	bfa8      	it	ge
 8007e1e:	4688      	movge	r8, r1
 8007e20:	f1bc 0f00 	cmp.w	ip, #0
 8007e24:	d001      	beq.n	8007e2a <_strtod_l+0x2ea>
 8007e26:	f1c8 0800 	rsb	r8, r8, #0
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	d14e      	bne.n	8007ecc <_strtod_l+0x38c>
 8007e2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e30:	4308      	orrs	r0, r1
 8007e32:	f47f aebe 	bne.w	8007bb2 <_strtod_l+0x72>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f47f aed6 	bne.w	8007be8 <_strtod_l+0xa8>
 8007e3c:	2a69      	cmp	r2, #105	@ 0x69
 8007e3e:	d028      	beq.n	8007e92 <_strtod_l+0x352>
 8007e40:	dc25      	bgt.n	8007e8e <_strtod_l+0x34e>
 8007e42:	2a49      	cmp	r2, #73	@ 0x49
 8007e44:	d025      	beq.n	8007e92 <_strtod_l+0x352>
 8007e46:	2a4e      	cmp	r2, #78	@ 0x4e
 8007e48:	f47f aece 	bne.w	8007be8 <_strtod_l+0xa8>
 8007e4c:	499b      	ldr	r1, [pc, #620]	@ (80080bc <_strtod_l+0x57c>)
 8007e4e:	a819      	add	r0, sp, #100	@ 0x64
 8007e50:	f002 fdd2 	bl	800a9f8 <__match>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f43f aec7 	beq.w	8007be8 <_strtod_l+0xa8>
 8007e5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	2b28      	cmp	r3, #40	@ 0x28
 8007e60:	d12e      	bne.n	8007ec0 <_strtod_l+0x380>
 8007e62:	4997      	ldr	r1, [pc, #604]	@ (80080c0 <_strtod_l+0x580>)
 8007e64:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e66:	a819      	add	r0, sp, #100	@ 0x64
 8007e68:	f002 fdda 	bl	800aa20 <__hexnan>
 8007e6c:	2805      	cmp	r0, #5
 8007e6e:	d127      	bne.n	8007ec0 <_strtod_l+0x380>
 8007e70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e72:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007e76:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007e7a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007e7e:	e698      	b.n	8007bb2 <_strtod_l+0x72>
 8007e80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e82:	fb08 2101 	mla	r1, r8, r1, r2
 8007e86:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007e8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e8c:	e7b5      	b.n	8007dfa <_strtod_l+0x2ba>
 8007e8e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007e90:	e7da      	b.n	8007e48 <_strtod_l+0x308>
 8007e92:	498c      	ldr	r1, [pc, #560]	@ (80080c4 <_strtod_l+0x584>)
 8007e94:	a819      	add	r0, sp, #100	@ 0x64
 8007e96:	f002 fdaf 	bl	800a9f8 <__match>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	f43f aea4 	beq.w	8007be8 <_strtod_l+0xa8>
 8007ea0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ea2:	4989      	ldr	r1, [pc, #548]	@ (80080c8 <_strtod_l+0x588>)
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	a819      	add	r0, sp, #100	@ 0x64
 8007ea8:	9319      	str	r3, [sp, #100]	@ 0x64
 8007eaa:	f002 fda5 	bl	800a9f8 <__match>
 8007eae:	b910      	cbnz	r0, 8007eb6 <_strtod_l+0x376>
 8007eb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	9319      	str	r3, [sp, #100]	@ 0x64
 8007eb6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80080d8 <_strtod_l+0x598>
 8007eba:	f04f 0a00 	mov.w	sl, #0
 8007ebe:	e678      	b.n	8007bb2 <_strtod_l+0x72>
 8007ec0:	4882      	ldr	r0, [pc, #520]	@ (80080cc <_strtod_l+0x58c>)
 8007ec2:	f001 fc69 	bl	8009798 <nan>
 8007ec6:	ec5b ab10 	vmov	sl, fp, d0
 8007eca:	e672      	b.n	8007bb2 <_strtod_l+0x72>
 8007ecc:	eba8 0309 	sub.w	r3, r8, r9
 8007ed0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ed4:	2f00      	cmp	r7, #0
 8007ed6:	bf08      	it	eq
 8007ed8:	462f      	moveq	r7, r5
 8007eda:	2d10      	cmp	r5, #16
 8007edc:	462c      	mov	r4, r5
 8007ede:	bfa8      	it	ge
 8007ee0:	2410      	movge	r4, #16
 8007ee2:	f7f8 fb2f 	bl	8000544 <__aeabi_ui2d>
 8007ee6:	2d09      	cmp	r5, #9
 8007ee8:	4682      	mov	sl, r0
 8007eea:	468b      	mov	fp, r1
 8007eec:	dc13      	bgt.n	8007f16 <_strtod_l+0x3d6>
 8007eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f43f ae5e 	beq.w	8007bb2 <_strtod_l+0x72>
 8007ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef8:	dd78      	ble.n	8007fec <_strtod_l+0x4ac>
 8007efa:	2b16      	cmp	r3, #22
 8007efc:	dc5f      	bgt.n	8007fbe <_strtod_l+0x47e>
 8007efe:	4974      	ldr	r1, [pc, #464]	@ (80080d0 <_strtod_l+0x590>)
 8007f00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f08:	4652      	mov	r2, sl
 8007f0a:	465b      	mov	r3, fp
 8007f0c:	f7f8 fb94 	bl	8000638 <__aeabi_dmul>
 8007f10:	4682      	mov	sl, r0
 8007f12:	468b      	mov	fp, r1
 8007f14:	e64d      	b.n	8007bb2 <_strtod_l+0x72>
 8007f16:	4b6e      	ldr	r3, [pc, #440]	@ (80080d0 <_strtod_l+0x590>)
 8007f18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007f20:	f7f8 fb8a 	bl	8000638 <__aeabi_dmul>
 8007f24:	4682      	mov	sl, r0
 8007f26:	9808      	ldr	r0, [sp, #32]
 8007f28:	468b      	mov	fp, r1
 8007f2a:	f7f8 fb0b 	bl	8000544 <__aeabi_ui2d>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4650      	mov	r0, sl
 8007f34:	4659      	mov	r1, fp
 8007f36:	f7f8 f9c9 	bl	80002cc <__adddf3>
 8007f3a:	2d0f      	cmp	r5, #15
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	468b      	mov	fp, r1
 8007f40:	ddd5      	ble.n	8007eee <_strtod_l+0x3ae>
 8007f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f44:	1b2c      	subs	r4, r5, r4
 8007f46:	441c      	add	r4, r3
 8007f48:	2c00      	cmp	r4, #0
 8007f4a:	f340 8096 	ble.w	800807a <_strtod_l+0x53a>
 8007f4e:	f014 030f 	ands.w	r3, r4, #15
 8007f52:	d00a      	beq.n	8007f6a <_strtod_l+0x42a>
 8007f54:	495e      	ldr	r1, [pc, #376]	@ (80080d0 <_strtod_l+0x590>)
 8007f56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f62:	f7f8 fb69 	bl	8000638 <__aeabi_dmul>
 8007f66:	4682      	mov	sl, r0
 8007f68:	468b      	mov	fp, r1
 8007f6a:	f034 040f 	bics.w	r4, r4, #15
 8007f6e:	d073      	beq.n	8008058 <_strtod_l+0x518>
 8007f70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007f74:	dd48      	ble.n	8008008 <_strtod_l+0x4c8>
 8007f76:	2400      	movs	r4, #0
 8007f78:	46a0      	mov	r8, r4
 8007f7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007f7c:	46a1      	mov	r9, r4
 8007f7e:	9a05      	ldr	r2, [sp, #20]
 8007f80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80080d8 <_strtod_l+0x598>
 8007f84:	2322      	movs	r3, #34	@ 0x22
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	f04f 0a00 	mov.w	sl, #0
 8007f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f43f ae0f 	beq.w	8007bb2 <_strtod_l+0x72>
 8007f94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f96:	9805      	ldr	r0, [sp, #20]
 8007f98:	f002 fe30 	bl	800abfc <_Bfree>
 8007f9c:	9805      	ldr	r0, [sp, #20]
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	f002 fe2c 	bl	800abfc <_Bfree>
 8007fa4:	9805      	ldr	r0, [sp, #20]
 8007fa6:	4641      	mov	r1, r8
 8007fa8:	f002 fe28 	bl	800abfc <_Bfree>
 8007fac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007fae:	9805      	ldr	r0, [sp, #20]
 8007fb0:	f002 fe24 	bl	800abfc <_Bfree>
 8007fb4:	9805      	ldr	r0, [sp, #20]
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	f002 fe20 	bl	800abfc <_Bfree>
 8007fbc:	e5f9      	b.n	8007bb2 <_strtod_l+0x72>
 8007fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fc0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	dbbc      	blt.n	8007f42 <_strtod_l+0x402>
 8007fc8:	4c41      	ldr	r4, [pc, #260]	@ (80080d0 <_strtod_l+0x590>)
 8007fca:	f1c5 050f 	rsb	r5, r5, #15
 8007fce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007fd2:	4652      	mov	r2, sl
 8007fd4:	465b      	mov	r3, fp
 8007fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fda:	f7f8 fb2d 	bl	8000638 <__aeabi_dmul>
 8007fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe0:	1b5d      	subs	r5, r3, r5
 8007fe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007fe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007fea:	e78f      	b.n	8007f0c <_strtod_l+0x3cc>
 8007fec:	3316      	adds	r3, #22
 8007fee:	dba8      	blt.n	8007f42 <_strtod_l+0x402>
 8007ff0:	4b37      	ldr	r3, [pc, #220]	@ (80080d0 <_strtod_l+0x590>)
 8007ff2:	eba9 0808 	sub.w	r8, r9, r8
 8007ff6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007ffa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007ffe:	4650      	mov	r0, sl
 8008000:	4659      	mov	r1, fp
 8008002:	f7f8 fc43 	bl	800088c <__aeabi_ddiv>
 8008006:	e783      	b.n	8007f10 <_strtod_l+0x3d0>
 8008008:	4b32      	ldr	r3, [pc, #200]	@ (80080d4 <_strtod_l+0x594>)
 800800a:	9308      	str	r3, [sp, #32]
 800800c:	2300      	movs	r3, #0
 800800e:	1124      	asrs	r4, r4, #4
 8008010:	4650      	mov	r0, sl
 8008012:	4659      	mov	r1, fp
 8008014:	461e      	mov	r6, r3
 8008016:	2c01      	cmp	r4, #1
 8008018:	dc21      	bgt.n	800805e <_strtod_l+0x51e>
 800801a:	b10b      	cbz	r3, 8008020 <_strtod_l+0x4e0>
 800801c:	4682      	mov	sl, r0
 800801e:	468b      	mov	fp, r1
 8008020:	492c      	ldr	r1, [pc, #176]	@ (80080d4 <_strtod_l+0x594>)
 8008022:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008026:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800802a:	4652      	mov	r2, sl
 800802c:	465b      	mov	r3, fp
 800802e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008032:	f7f8 fb01 	bl	8000638 <__aeabi_dmul>
 8008036:	4b28      	ldr	r3, [pc, #160]	@ (80080d8 <_strtod_l+0x598>)
 8008038:	460a      	mov	r2, r1
 800803a:	400b      	ands	r3, r1
 800803c:	4927      	ldr	r1, [pc, #156]	@ (80080dc <_strtod_l+0x59c>)
 800803e:	428b      	cmp	r3, r1
 8008040:	4682      	mov	sl, r0
 8008042:	d898      	bhi.n	8007f76 <_strtod_l+0x436>
 8008044:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008048:	428b      	cmp	r3, r1
 800804a:	bf86      	itte	hi
 800804c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80080e0 <_strtod_l+0x5a0>
 8008050:	f04f 3aff 	movhi.w	sl, #4294967295
 8008054:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008058:	2300      	movs	r3, #0
 800805a:	9308      	str	r3, [sp, #32]
 800805c:	e07a      	b.n	8008154 <_strtod_l+0x614>
 800805e:	07e2      	lsls	r2, r4, #31
 8008060:	d505      	bpl.n	800806e <_strtod_l+0x52e>
 8008062:	9b08      	ldr	r3, [sp, #32]
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 fae6 	bl	8000638 <__aeabi_dmul>
 800806c:	2301      	movs	r3, #1
 800806e:	9a08      	ldr	r2, [sp, #32]
 8008070:	3208      	adds	r2, #8
 8008072:	3601      	adds	r6, #1
 8008074:	1064      	asrs	r4, r4, #1
 8008076:	9208      	str	r2, [sp, #32]
 8008078:	e7cd      	b.n	8008016 <_strtod_l+0x4d6>
 800807a:	d0ed      	beq.n	8008058 <_strtod_l+0x518>
 800807c:	4264      	negs	r4, r4
 800807e:	f014 020f 	ands.w	r2, r4, #15
 8008082:	d00a      	beq.n	800809a <_strtod_l+0x55a>
 8008084:	4b12      	ldr	r3, [pc, #72]	@ (80080d0 <_strtod_l+0x590>)
 8008086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800808a:	4650      	mov	r0, sl
 800808c:	4659      	mov	r1, fp
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f7f8 fbfb 	bl	800088c <__aeabi_ddiv>
 8008096:	4682      	mov	sl, r0
 8008098:	468b      	mov	fp, r1
 800809a:	1124      	asrs	r4, r4, #4
 800809c:	d0dc      	beq.n	8008058 <_strtod_l+0x518>
 800809e:	2c1f      	cmp	r4, #31
 80080a0:	dd20      	ble.n	80080e4 <_strtod_l+0x5a4>
 80080a2:	2400      	movs	r4, #0
 80080a4:	46a0      	mov	r8, r4
 80080a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80080a8:	46a1      	mov	r9, r4
 80080aa:	9a05      	ldr	r2, [sp, #20]
 80080ac:	2322      	movs	r3, #34	@ 0x22
 80080ae:	f04f 0a00 	mov.w	sl, #0
 80080b2:	f04f 0b00 	mov.w	fp, #0
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	e768      	b.n	8007f8c <_strtod_l+0x44c>
 80080ba:	bf00      	nop
 80080bc:	0800c1e5 	.word	0x0800c1e5
 80080c0:	0800c188 	.word	0x0800c188
 80080c4:	0800c1dd 	.word	0x0800c1dd
 80080c8:	0800c21c 	.word	0x0800c21c
 80080cc:	0800c5ad 	.word	0x0800c5ad
 80080d0:	0800c398 	.word	0x0800c398
 80080d4:	0800c370 	.word	0x0800c370
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	7ca00000 	.word	0x7ca00000
 80080e0:	7fefffff 	.word	0x7fefffff
 80080e4:	f014 0310 	ands.w	r3, r4, #16
 80080e8:	bf18      	it	ne
 80080ea:	236a      	movne	r3, #106	@ 0x6a
 80080ec:	4ea9      	ldr	r6, [pc, #676]	@ (8008394 <_strtod_l+0x854>)
 80080ee:	9308      	str	r3, [sp, #32]
 80080f0:	4650      	mov	r0, sl
 80080f2:	4659      	mov	r1, fp
 80080f4:	2300      	movs	r3, #0
 80080f6:	07e2      	lsls	r2, r4, #31
 80080f8:	d504      	bpl.n	8008104 <_strtod_l+0x5c4>
 80080fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080fe:	f7f8 fa9b 	bl	8000638 <__aeabi_dmul>
 8008102:	2301      	movs	r3, #1
 8008104:	1064      	asrs	r4, r4, #1
 8008106:	f106 0608 	add.w	r6, r6, #8
 800810a:	d1f4      	bne.n	80080f6 <_strtod_l+0x5b6>
 800810c:	b10b      	cbz	r3, 8008112 <_strtod_l+0x5d2>
 800810e:	4682      	mov	sl, r0
 8008110:	468b      	mov	fp, r1
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	b1b3      	cbz	r3, 8008144 <_strtod_l+0x604>
 8008116:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800811a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800811e:	2b00      	cmp	r3, #0
 8008120:	4659      	mov	r1, fp
 8008122:	dd0f      	ble.n	8008144 <_strtod_l+0x604>
 8008124:	2b1f      	cmp	r3, #31
 8008126:	dd55      	ble.n	80081d4 <_strtod_l+0x694>
 8008128:	2b34      	cmp	r3, #52	@ 0x34
 800812a:	bfde      	ittt	le
 800812c:	f04f 33ff 	movle.w	r3, #4294967295
 8008130:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008134:	4093      	lslle	r3, r2
 8008136:	f04f 0a00 	mov.w	sl, #0
 800813a:	bfcc      	ite	gt
 800813c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008140:	ea03 0b01 	andle.w	fp, r3, r1
 8008144:	2200      	movs	r2, #0
 8008146:	2300      	movs	r3, #0
 8008148:	4650      	mov	r0, sl
 800814a:	4659      	mov	r1, fp
 800814c:	f7f8 fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 8008150:	2800      	cmp	r0, #0
 8008152:	d1a6      	bne.n	80080a2 <_strtod_l+0x562>
 8008154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800815a:	9805      	ldr	r0, [sp, #20]
 800815c:	462b      	mov	r3, r5
 800815e:	463a      	mov	r2, r7
 8008160:	f002 fdb4 	bl	800accc <__s2b>
 8008164:	900a      	str	r0, [sp, #40]	@ 0x28
 8008166:	2800      	cmp	r0, #0
 8008168:	f43f af05 	beq.w	8007f76 <_strtod_l+0x436>
 800816c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800816e:	2a00      	cmp	r2, #0
 8008170:	eba9 0308 	sub.w	r3, r9, r8
 8008174:	bfa8      	it	ge
 8008176:	2300      	movge	r3, #0
 8008178:	9312      	str	r3, [sp, #72]	@ 0x48
 800817a:	2400      	movs	r4, #0
 800817c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008180:	9316      	str	r3, [sp, #88]	@ 0x58
 8008182:	46a0      	mov	r8, r4
 8008184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008186:	9805      	ldr	r0, [sp, #20]
 8008188:	6859      	ldr	r1, [r3, #4]
 800818a:	f002 fcf7 	bl	800ab7c <_Balloc>
 800818e:	4681      	mov	r9, r0
 8008190:	2800      	cmp	r0, #0
 8008192:	f43f aef4 	beq.w	8007f7e <_strtod_l+0x43e>
 8008196:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008198:	691a      	ldr	r2, [r3, #16]
 800819a:	3202      	adds	r2, #2
 800819c:	f103 010c 	add.w	r1, r3, #12
 80081a0:	0092      	lsls	r2, r2, #2
 80081a2:	300c      	adds	r0, #12
 80081a4:	f001 fae9 	bl	800977a <memcpy>
 80081a8:	ec4b ab10 	vmov	d0, sl, fp
 80081ac:	9805      	ldr	r0, [sp, #20]
 80081ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80081b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80081b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80081b6:	f003 f8c5 	bl	800b344 <__d2b>
 80081ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80081bc:	2800      	cmp	r0, #0
 80081be:	f43f aede 	beq.w	8007f7e <_strtod_l+0x43e>
 80081c2:	9805      	ldr	r0, [sp, #20]
 80081c4:	2101      	movs	r1, #1
 80081c6:	f002 fe17 	bl	800adf8 <__i2b>
 80081ca:	4680      	mov	r8, r0
 80081cc:	b948      	cbnz	r0, 80081e2 <_strtod_l+0x6a2>
 80081ce:	f04f 0800 	mov.w	r8, #0
 80081d2:	e6d4      	b.n	8007f7e <_strtod_l+0x43e>
 80081d4:	f04f 32ff 	mov.w	r2, #4294967295
 80081d8:	fa02 f303 	lsl.w	r3, r2, r3
 80081dc:	ea03 0a0a 	and.w	sl, r3, sl
 80081e0:	e7b0      	b.n	8008144 <_strtod_l+0x604>
 80081e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80081e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80081e6:	2d00      	cmp	r5, #0
 80081e8:	bfab      	itete	ge
 80081ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80081ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80081ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80081f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80081f2:	bfac      	ite	ge
 80081f4:	18ef      	addge	r7, r5, r3
 80081f6:	1b5e      	sublt	r6, r3, r5
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	1aed      	subs	r5, r5, r3
 80081fc:	4415      	add	r5, r2
 80081fe:	4b66      	ldr	r3, [pc, #408]	@ (8008398 <_strtod_l+0x858>)
 8008200:	3d01      	subs	r5, #1
 8008202:	429d      	cmp	r5, r3
 8008204:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008208:	da50      	bge.n	80082ac <_strtod_l+0x76c>
 800820a:	1b5b      	subs	r3, r3, r5
 800820c:	2b1f      	cmp	r3, #31
 800820e:	eba2 0203 	sub.w	r2, r2, r3
 8008212:	f04f 0101 	mov.w	r1, #1
 8008216:	dc3d      	bgt.n	8008294 <_strtod_l+0x754>
 8008218:	fa01 f303 	lsl.w	r3, r1, r3
 800821c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800821e:	2300      	movs	r3, #0
 8008220:	9310      	str	r3, [sp, #64]	@ 0x40
 8008222:	18bd      	adds	r5, r7, r2
 8008224:	9b08      	ldr	r3, [sp, #32]
 8008226:	42af      	cmp	r7, r5
 8008228:	4416      	add	r6, r2
 800822a:	441e      	add	r6, r3
 800822c:	463b      	mov	r3, r7
 800822e:	bfa8      	it	ge
 8008230:	462b      	movge	r3, r5
 8008232:	42b3      	cmp	r3, r6
 8008234:	bfa8      	it	ge
 8008236:	4633      	movge	r3, r6
 8008238:	2b00      	cmp	r3, #0
 800823a:	bfc2      	ittt	gt
 800823c:	1aed      	subgt	r5, r5, r3
 800823e:	1af6      	subgt	r6, r6, r3
 8008240:	1aff      	subgt	r7, r7, r3
 8008242:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008244:	2b00      	cmp	r3, #0
 8008246:	dd16      	ble.n	8008276 <_strtod_l+0x736>
 8008248:	4641      	mov	r1, r8
 800824a:	9805      	ldr	r0, [sp, #20]
 800824c:	461a      	mov	r2, r3
 800824e:	f002 fe93 	bl	800af78 <__pow5mult>
 8008252:	4680      	mov	r8, r0
 8008254:	2800      	cmp	r0, #0
 8008256:	d0ba      	beq.n	80081ce <_strtod_l+0x68e>
 8008258:	4601      	mov	r1, r0
 800825a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800825c:	9805      	ldr	r0, [sp, #20]
 800825e:	f002 fde1 	bl	800ae24 <__multiply>
 8008262:	900e      	str	r0, [sp, #56]	@ 0x38
 8008264:	2800      	cmp	r0, #0
 8008266:	f43f ae8a 	beq.w	8007f7e <_strtod_l+0x43e>
 800826a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800826c:	9805      	ldr	r0, [sp, #20]
 800826e:	f002 fcc5 	bl	800abfc <_Bfree>
 8008272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008274:	931a      	str	r3, [sp, #104]	@ 0x68
 8008276:	2d00      	cmp	r5, #0
 8008278:	dc1d      	bgt.n	80082b6 <_strtod_l+0x776>
 800827a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd23      	ble.n	80082c8 <_strtod_l+0x788>
 8008280:	4649      	mov	r1, r9
 8008282:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008284:	9805      	ldr	r0, [sp, #20]
 8008286:	f002 fe77 	bl	800af78 <__pow5mult>
 800828a:	4681      	mov	r9, r0
 800828c:	b9e0      	cbnz	r0, 80082c8 <_strtod_l+0x788>
 800828e:	f04f 0900 	mov.w	r9, #0
 8008292:	e674      	b.n	8007f7e <_strtod_l+0x43e>
 8008294:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008298:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800829c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80082a0:	35e2      	adds	r5, #226	@ 0xe2
 80082a2:	fa01 f305 	lsl.w	r3, r1, r5
 80082a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80082a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80082aa:	e7ba      	b.n	8008222 <_strtod_l+0x6e2>
 80082ac:	2300      	movs	r3, #0
 80082ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80082b0:	2301      	movs	r3, #1
 80082b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082b4:	e7b5      	b.n	8008222 <_strtod_l+0x6e2>
 80082b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082b8:	9805      	ldr	r0, [sp, #20]
 80082ba:	462a      	mov	r2, r5
 80082bc:	f002 feb6 	bl	800b02c <__lshift>
 80082c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d1d9      	bne.n	800827a <_strtod_l+0x73a>
 80082c6:	e65a      	b.n	8007f7e <_strtod_l+0x43e>
 80082c8:	2e00      	cmp	r6, #0
 80082ca:	dd07      	ble.n	80082dc <_strtod_l+0x79c>
 80082cc:	4649      	mov	r1, r9
 80082ce:	9805      	ldr	r0, [sp, #20]
 80082d0:	4632      	mov	r2, r6
 80082d2:	f002 feab 	bl	800b02c <__lshift>
 80082d6:	4681      	mov	r9, r0
 80082d8:	2800      	cmp	r0, #0
 80082da:	d0d8      	beq.n	800828e <_strtod_l+0x74e>
 80082dc:	2f00      	cmp	r7, #0
 80082de:	dd08      	ble.n	80082f2 <_strtod_l+0x7b2>
 80082e0:	4641      	mov	r1, r8
 80082e2:	9805      	ldr	r0, [sp, #20]
 80082e4:	463a      	mov	r2, r7
 80082e6:	f002 fea1 	bl	800b02c <__lshift>
 80082ea:	4680      	mov	r8, r0
 80082ec:	2800      	cmp	r0, #0
 80082ee:	f43f ae46 	beq.w	8007f7e <_strtod_l+0x43e>
 80082f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082f4:	9805      	ldr	r0, [sp, #20]
 80082f6:	464a      	mov	r2, r9
 80082f8:	f002 ff20 	bl	800b13c <__mdiff>
 80082fc:	4604      	mov	r4, r0
 80082fe:	2800      	cmp	r0, #0
 8008300:	f43f ae3d 	beq.w	8007f7e <_strtod_l+0x43e>
 8008304:	68c3      	ldr	r3, [r0, #12]
 8008306:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008308:	2300      	movs	r3, #0
 800830a:	60c3      	str	r3, [r0, #12]
 800830c:	4641      	mov	r1, r8
 800830e:	f002 fef9 	bl	800b104 <__mcmp>
 8008312:	2800      	cmp	r0, #0
 8008314:	da46      	bge.n	80083a4 <_strtod_l+0x864>
 8008316:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008318:	ea53 030a 	orrs.w	r3, r3, sl
 800831c:	d16c      	bne.n	80083f8 <_strtod_l+0x8b8>
 800831e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008322:	2b00      	cmp	r3, #0
 8008324:	d168      	bne.n	80083f8 <_strtod_l+0x8b8>
 8008326:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800832a:	0d1b      	lsrs	r3, r3, #20
 800832c:	051b      	lsls	r3, r3, #20
 800832e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008332:	d961      	bls.n	80083f8 <_strtod_l+0x8b8>
 8008334:	6963      	ldr	r3, [r4, #20]
 8008336:	b913      	cbnz	r3, 800833e <_strtod_l+0x7fe>
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	2b01      	cmp	r3, #1
 800833c:	dd5c      	ble.n	80083f8 <_strtod_l+0x8b8>
 800833e:	4621      	mov	r1, r4
 8008340:	2201      	movs	r2, #1
 8008342:	9805      	ldr	r0, [sp, #20]
 8008344:	f002 fe72 	bl	800b02c <__lshift>
 8008348:	4641      	mov	r1, r8
 800834a:	4604      	mov	r4, r0
 800834c:	f002 feda 	bl	800b104 <__mcmp>
 8008350:	2800      	cmp	r0, #0
 8008352:	dd51      	ble.n	80083f8 <_strtod_l+0x8b8>
 8008354:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008358:	9a08      	ldr	r2, [sp, #32]
 800835a:	0d1b      	lsrs	r3, r3, #20
 800835c:	051b      	lsls	r3, r3, #20
 800835e:	2a00      	cmp	r2, #0
 8008360:	d06b      	beq.n	800843a <_strtod_l+0x8fa>
 8008362:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008366:	d868      	bhi.n	800843a <_strtod_l+0x8fa>
 8008368:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800836c:	f67f ae9d 	bls.w	80080aa <_strtod_l+0x56a>
 8008370:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <_strtod_l+0x85c>)
 8008372:	4650      	mov	r0, sl
 8008374:	4659      	mov	r1, fp
 8008376:	2200      	movs	r2, #0
 8008378:	f7f8 f95e 	bl	8000638 <__aeabi_dmul>
 800837c:	4b08      	ldr	r3, [pc, #32]	@ (80083a0 <_strtod_l+0x860>)
 800837e:	400b      	ands	r3, r1
 8008380:	4682      	mov	sl, r0
 8008382:	468b      	mov	fp, r1
 8008384:	2b00      	cmp	r3, #0
 8008386:	f47f ae05 	bne.w	8007f94 <_strtod_l+0x454>
 800838a:	9a05      	ldr	r2, [sp, #20]
 800838c:	2322      	movs	r3, #34	@ 0x22
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	e600      	b.n	8007f94 <_strtod_l+0x454>
 8008392:	bf00      	nop
 8008394:	0800c1b0 	.word	0x0800c1b0
 8008398:	fffffc02 	.word	0xfffffc02
 800839c:	39500000 	.word	0x39500000
 80083a0:	7ff00000 	.word	0x7ff00000
 80083a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80083a8:	d165      	bne.n	8008476 <_strtod_l+0x936>
 80083aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80083ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083b0:	b35a      	cbz	r2, 800840a <_strtod_l+0x8ca>
 80083b2:	4a9f      	ldr	r2, [pc, #636]	@ (8008630 <_strtod_l+0xaf0>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d12b      	bne.n	8008410 <_strtod_l+0x8d0>
 80083b8:	9b08      	ldr	r3, [sp, #32]
 80083ba:	4651      	mov	r1, sl
 80083bc:	b303      	cbz	r3, 8008400 <_strtod_l+0x8c0>
 80083be:	4b9d      	ldr	r3, [pc, #628]	@ (8008634 <_strtod_l+0xaf4>)
 80083c0:	465a      	mov	r2, fp
 80083c2:	4013      	ands	r3, r2
 80083c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80083c8:	f04f 32ff 	mov.w	r2, #4294967295
 80083cc:	d81b      	bhi.n	8008406 <_strtod_l+0x8c6>
 80083ce:	0d1b      	lsrs	r3, r3, #20
 80083d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80083d4:	fa02 f303 	lsl.w	r3, r2, r3
 80083d8:	4299      	cmp	r1, r3
 80083da:	d119      	bne.n	8008410 <_strtod_l+0x8d0>
 80083dc:	4b96      	ldr	r3, [pc, #600]	@ (8008638 <_strtod_l+0xaf8>)
 80083de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d102      	bne.n	80083ea <_strtod_l+0x8aa>
 80083e4:	3101      	adds	r1, #1
 80083e6:	f43f adca 	beq.w	8007f7e <_strtod_l+0x43e>
 80083ea:	4b92      	ldr	r3, [pc, #584]	@ (8008634 <_strtod_l+0xaf4>)
 80083ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ee:	401a      	ands	r2, r3
 80083f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80083f4:	f04f 0a00 	mov.w	sl, #0
 80083f8:	9b08      	ldr	r3, [sp, #32]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1b8      	bne.n	8008370 <_strtod_l+0x830>
 80083fe:	e5c9      	b.n	8007f94 <_strtod_l+0x454>
 8008400:	f04f 33ff 	mov.w	r3, #4294967295
 8008404:	e7e8      	b.n	80083d8 <_strtod_l+0x898>
 8008406:	4613      	mov	r3, r2
 8008408:	e7e6      	b.n	80083d8 <_strtod_l+0x898>
 800840a:	ea53 030a 	orrs.w	r3, r3, sl
 800840e:	d0a1      	beq.n	8008354 <_strtod_l+0x814>
 8008410:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008412:	b1db      	cbz	r3, 800844c <_strtod_l+0x90c>
 8008414:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008416:	4213      	tst	r3, r2
 8008418:	d0ee      	beq.n	80083f8 <_strtod_l+0x8b8>
 800841a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800841c:	9a08      	ldr	r2, [sp, #32]
 800841e:	4650      	mov	r0, sl
 8008420:	4659      	mov	r1, fp
 8008422:	b1bb      	cbz	r3, 8008454 <_strtod_l+0x914>
 8008424:	f7ff fb6e 	bl	8007b04 <sulp>
 8008428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800842c:	ec53 2b10 	vmov	r2, r3, d0
 8008430:	f7f7 ff4c 	bl	80002cc <__adddf3>
 8008434:	4682      	mov	sl, r0
 8008436:	468b      	mov	fp, r1
 8008438:	e7de      	b.n	80083f8 <_strtod_l+0x8b8>
 800843a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800843e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008442:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008446:	f04f 3aff 	mov.w	sl, #4294967295
 800844a:	e7d5      	b.n	80083f8 <_strtod_l+0x8b8>
 800844c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800844e:	ea13 0f0a 	tst.w	r3, sl
 8008452:	e7e1      	b.n	8008418 <_strtod_l+0x8d8>
 8008454:	f7ff fb56 	bl	8007b04 <sulp>
 8008458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800845c:	ec53 2b10 	vmov	r2, r3, d0
 8008460:	f7f7 ff32 	bl	80002c8 <__aeabi_dsub>
 8008464:	2200      	movs	r2, #0
 8008466:	2300      	movs	r3, #0
 8008468:	4682      	mov	sl, r0
 800846a:	468b      	mov	fp, r1
 800846c:	f7f8 fb4c 	bl	8000b08 <__aeabi_dcmpeq>
 8008470:	2800      	cmp	r0, #0
 8008472:	d0c1      	beq.n	80083f8 <_strtod_l+0x8b8>
 8008474:	e619      	b.n	80080aa <_strtod_l+0x56a>
 8008476:	4641      	mov	r1, r8
 8008478:	4620      	mov	r0, r4
 800847a:	f002 ffbb 	bl	800b3f4 <__ratio>
 800847e:	ec57 6b10 	vmov	r6, r7, d0
 8008482:	2200      	movs	r2, #0
 8008484:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008488:	4630      	mov	r0, r6
 800848a:	4639      	mov	r1, r7
 800848c:	f7f8 fb50 	bl	8000b30 <__aeabi_dcmple>
 8008490:	2800      	cmp	r0, #0
 8008492:	d06f      	beq.n	8008574 <_strtod_l+0xa34>
 8008494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d17a      	bne.n	8008590 <_strtod_l+0xa50>
 800849a:	f1ba 0f00 	cmp.w	sl, #0
 800849e:	d158      	bne.n	8008552 <_strtod_l+0xa12>
 80084a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d15a      	bne.n	8008560 <_strtod_l+0xa20>
 80084aa:	4b64      	ldr	r3, [pc, #400]	@ (800863c <_strtod_l+0xafc>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f8 fb33 	bl	8000b1c <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d159      	bne.n	800856e <_strtod_l+0xa2e>
 80084ba:	4630      	mov	r0, r6
 80084bc:	4639      	mov	r1, r7
 80084be:	4b60      	ldr	r3, [pc, #384]	@ (8008640 <_strtod_l+0xb00>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	f7f8 f8b9 	bl	8000638 <__aeabi_dmul>
 80084c6:	4606      	mov	r6, r0
 80084c8:	460f      	mov	r7, r1
 80084ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80084ce:	9606      	str	r6, [sp, #24]
 80084d0:	9307      	str	r3, [sp, #28]
 80084d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084d6:	4d57      	ldr	r5, [pc, #348]	@ (8008634 <_strtod_l+0xaf4>)
 80084d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80084dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084de:	401d      	ands	r5, r3
 80084e0:	4b58      	ldr	r3, [pc, #352]	@ (8008644 <_strtod_l+0xb04>)
 80084e2:	429d      	cmp	r5, r3
 80084e4:	f040 80b2 	bne.w	800864c <_strtod_l+0xb0c>
 80084e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80084ee:	ec4b ab10 	vmov	d0, sl, fp
 80084f2:	f002 feb7 	bl	800b264 <__ulp>
 80084f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084fa:	ec51 0b10 	vmov	r0, r1, d0
 80084fe:	f7f8 f89b 	bl	8000638 <__aeabi_dmul>
 8008502:	4652      	mov	r2, sl
 8008504:	465b      	mov	r3, fp
 8008506:	f7f7 fee1 	bl	80002cc <__adddf3>
 800850a:	460b      	mov	r3, r1
 800850c:	4949      	ldr	r1, [pc, #292]	@ (8008634 <_strtod_l+0xaf4>)
 800850e:	4a4e      	ldr	r2, [pc, #312]	@ (8008648 <_strtod_l+0xb08>)
 8008510:	4019      	ands	r1, r3
 8008512:	4291      	cmp	r1, r2
 8008514:	4682      	mov	sl, r0
 8008516:	d942      	bls.n	800859e <_strtod_l+0xa5e>
 8008518:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800851a:	4b47      	ldr	r3, [pc, #284]	@ (8008638 <_strtod_l+0xaf8>)
 800851c:	429a      	cmp	r2, r3
 800851e:	d103      	bne.n	8008528 <_strtod_l+0x9e8>
 8008520:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008522:	3301      	adds	r3, #1
 8008524:	f43f ad2b 	beq.w	8007f7e <_strtod_l+0x43e>
 8008528:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008638 <_strtod_l+0xaf8>
 800852c:	f04f 3aff 	mov.w	sl, #4294967295
 8008530:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008532:	9805      	ldr	r0, [sp, #20]
 8008534:	f002 fb62 	bl	800abfc <_Bfree>
 8008538:	9805      	ldr	r0, [sp, #20]
 800853a:	4649      	mov	r1, r9
 800853c:	f002 fb5e 	bl	800abfc <_Bfree>
 8008540:	9805      	ldr	r0, [sp, #20]
 8008542:	4641      	mov	r1, r8
 8008544:	f002 fb5a 	bl	800abfc <_Bfree>
 8008548:	9805      	ldr	r0, [sp, #20]
 800854a:	4621      	mov	r1, r4
 800854c:	f002 fb56 	bl	800abfc <_Bfree>
 8008550:	e618      	b.n	8008184 <_strtod_l+0x644>
 8008552:	f1ba 0f01 	cmp.w	sl, #1
 8008556:	d103      	bne.n	8008560 <_strtod_l+0xa20>
 8008558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800855a:	2b00      	cmp	r3, #0
 800855c:	f43f ada5 	beq.w	80080aa <_strtod_l+0x56a>
 8008560:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008610 <_strtod_l+0xad0>
 8008564:	4f35      	ldr	r7, [pc, #212]	@ (800863c <_strtod_l+0xafc>)
 8008566:	ed8d 7b06 	vstr	d7, [sp, #24]
 800856a:	2600      	movs	r6, #0
 800856c:	e7b1      	b.n	80084d2 <_strtod_l+0x992>
 800856e:	4f34      	ldr	r7, [pc, #208]	@ (8008640 <_strtod_l+0xb00>)
 8008570:	2600      	movs	r6, #0
 8008572:	e7aa      	b.n	80084ca <_strtod_l+0x98a>
 8008574:	4b32      	ldr	r3, [pc, #200]	@ (8008640 <_strtod_l+0xb00>)
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	2200      	movs	r2, #0
 800857c:	f7f8 f85c 	bl	8000638 <__aeabi_dmul>
 8008580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008582:	4606      	mov	r6, r0
 8008584:	460f      	mov	r7, r1
 8008586:	2b00      	cmp	r3, #0
 8008588:	d09f      	beq.n	80084ca <_strtod_l+0x98a>
 800858a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800858e:	e7a0      	b.n	80084d2 <_strtod_l+0x992>
 8008590:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008618 <_strtod_l+0xad8>
 8008594:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008598:	ec57 6b17 	vmov	r6, r7, d7
 800859c:	e799      	b.n	80084d2 <_strtod_l+0x992>
 800859e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80085a2:	9b08      	ldr	r3, [sp, #32]
 80085a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1c1      	bne.n	8008530 <_strtod_l+0x9f0>
 80085ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80085b0:	0d1b      	lsrs	r3, r3, #20
 80085b2:	051b      	lsls	r3, r3, #20
 80085b4:	429d      	cmp	r5, r3
 80085b6:	d1bb      	bne.n	8008530 <_strtod_l+0x9f0>
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f8 fb9c 	bl	8000cf8 <__aeabi_d2lz>
 80085c0:	f7f8 f80c 	bl	80005dc <__aeabi_l2d>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4630      	mov	r0, r6
 80085ca:	4639      	mov	r1, r7
 80085cc:	f7f7 fe7c 	bl	80002c8 <__aeabi_dsub>
 80085d0:	460b      	mov	r3, r1
 80085d2:	4602      	mov	r2, r0
 80085d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80085d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80085dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085de:	ea46 060a 	orr.w	r6, r6, sl
 80085e2:	431e      	orrs	r6, r3
 80085e4:	d06f      	beq.n	80086c6 <_strtod_l+0xb86>
 80085e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008620 <_strtod_l+0xae0>)
 80085e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ec:	f7f8 fa96 	bl	8000b1c <__aeabi_dcmplt>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f47f accf 	bne.w	8007f94 <_strtod_l+0x454>
 80085f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008628 <_strtod_l+0xae8>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008600:	f7f8 faaa 	bl	8000b58 <__aeabi_dcmpgt>
 8008604:	2800      	cmp	r0, #0
 8008606:	d093      	beq.n	8008530 <_strtod_l+0x9f0>
 8008608:	e4c4      	b.n	8007f94 <_strtod_l+0x454>
 800860a:	bf00      	nop
 800860c:	f3af 8000 	nop.w
 8008610:	00000000 	.word	0x00000000
 8008614:	bff00000 	.word	0xbff00000
 8008618:	00000000 	.word	0x00000000
 800861c:	3ff00000 	.word	0x3ff00000
 8008620:	94a03595 	.word	0x94a03595
 8008624:	3fdfffff 	.word	0x3fdfffff
 8008628:	35afe535 	.word	0x35afe535
 800862c:	3fe00000 	.word	0x3fe00000
 8008630:	000fffff 	.word	0x000fffff
 8008634:	7ff00000 	.word	0x7ff00000
 8008638:	7fefffff 	.word	0x7fefffff
 800863c:	3ff00000 	.word	0x3ff00000
 8008640:	3fe00000 	.word	0x3fe00000
 8008644:	7fe00000 	.word	0x7fe00000
 8008648:	7c9fffff 	.word	0x7c9fffff
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	b323      	cbz	r3, 800869a <_strtod_l+0xb5a>
 8008650:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008654:	d821      	bhi.n	800869a <_strtod_l+0xb5a>
 8008656:	a328      	add	r3, pc, #160	@ (adr r3, 80086f8 <_strtod_l+0xbb8>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	4630      	mov	r0, r6
 800865e:	4639      	mov	r1, r7
 8008660:	f7f8 fa66 	bl	8000b30 <__aeabi_dcmple>
 8008664:	b1a0      	cbz	r0, 8008690 <_strtod_l+0xb50>
 8008666:	4639      	mov	r1, r7
 8008668:	4630      	mov	r0, r6
 800866a:	f7f8 fabd 	bl	8000be8 <__aeabi_d2uiz>
 800866e:	2801      	cmp	r0, #1
 8008670:	bf38      	it	cc
 8008672:	2001      	movcc	r0, #1
 8008674:	f7f7 ff66 	bl	8000544 <__aeabi_ui2d>
 8008678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800867a:	4606      	mov	r6, r0
 800867c:	460f      	mov	r7, r1
 800867e:	b9fb      	cbnz	r3, 80086c0 <_strtod_l+0xb80>
 8008680:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008684:	9014      	str	r0, [sp, #80]	@ 0x50
 8008686:	9315      	str	r3, [sp, #84]	@ 0x54
 8008688:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800868c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008690:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008692:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008696:	1b5b      	subs	r3, r3, r5
 8008698:	9311      	str	r3, [sp, #68]	@ 0x44
 800869a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800869e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80086a2:	f002 fddf 	bl	800b264 <__ulp>
 80086a6:	4650      	mov	r0, sl
 80086a8:	ec53 2b10 	vmov	r2, r3, d0
 80086ac:	4659      	mov	r1, fp
 80086ae:	f7f7 ffc3 	bl	8000638 <__aeabi_dmul>
 80086b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80086b6:	f7f7 fe09 	bl	80002cc <__adddf3>
 80086ba:	4682      	mov	sl, r0
 80086bc:	468b      	mov	fp, r1
 80086be:	e770      	b.n	80085a2 <_strtod_l+0xa62>
 80086c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80086c4:	e7e0      	b.n	8008688 <_strtod_l+0xb48>
 80086c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008700 <_strtod_l+0xbc0>)
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f7f8 fa26 	bl	8000b1c <__aeabi_dcmplt>
 80086d0:	e798      	b.n	8008604 <_strtod_l+0xac4>
 80086d2:	2300      	movs	r3, #0
 80086d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80086d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	f7ff ba6d 	b.w	8007bba <_strtod_l+0x7a>
 80086e0:	2a65      	cmp	r2, #101	@ 0x65
 80086e2:	f43f ab66 	beq.w	8007db2 <_strtod_l+0x272>
 80086e6:	2a45      	cmp	r2, #69	@ 0x45
 80086e8:	f43f ab63 	beq.w	8007db2 <_strtod_l+0x272>
 80086ec:	2301      	movs	r3, #1
 80086ee:	f7ff bb9e 	b.w	8007e2e <_strtod_l+0x2ee>
 80086f2:	bf00      	nop
 80086f4:	f3af 8000 	nop.w
 80086f8:	ffc00000 	.word	0xffc00000
 80086fc:	41dfffff 	.word	0x41dfffff
 8008700:	94a03595 	.word	0x94a03595
 8008704:	3fcfffff 	.word	0x3fcfffff

08008708 <_strtod_r>:
 8008708:	4b01      	ldr	r3, [pc, #4]	@ (8008710 <_strtod_r+0x8>)
 800870a:	f7ff ba19 	b.w	8007b40 <_strtod_l>
 800870e:	bf00      	nop
 8008710:	2000001c 	.word	0x2000001c

08008714 <__cvt>:
 8008714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008718:	ec57 6b10 	vmov	r6, r7, d0
 800871c:	2f00      	cmp	r7, #0
 800871e:	460c      	mov	r4, r1
 8008720:	4619      	mov	r1, r3
 8008722:	463b      	mov	r3, r7
 8008724:	bfbb      	ittet	lt
 8008726:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800872a:	461f      	movlt	r7, r3
 800872c:	2300      	movge	r3, #0
 800872e:	232d      	movlt	r3, #45	@ 0x2d
 8008730:	700b      	strb	r3, [r1, #0]
 8008732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008734:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008738:	4691      	mov	r9, r2
 800873a:	f023 0820 	bic.w	r8, r3, #32
 800873e:	bfbc      	itt	lt
 8008740:	4632      	movlt	r2, r6
 8008742:	4616      	movlt	r6, r2
 8008744:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008748:	d005      	beq.n	8008756 <__cvt+0x42>
 800874a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800874e:	d100      	bne.n	8008752 <__cvt+0x3e>
 8008750:	3401      	adds	r4, #1
 8008752:	2102      	movs	r1, #2
 8008754:	e000      	b.n	8008758 <__cvt+0x44>
 8008756:	2103      	movs	r1, #3
 8008758:	ab03      	add	r3, sp, #12
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	ab02      	add	r3, sp, #8
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	ec47 6b10 	vmov	d0, r6, r7
 8008764:	4653      	mov	r3, sl
 8008766:	4622      	mov	r2, r4
 8008768:	f001 f8ae 	bl	80098c8 <_dtoa_r>
 800876c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008770:	4605      	mov	r5, r0
 8008772:	d119      	bne.n	80087a8 <__cvt+0x94>
 8008774:	f019 0f01 	tst.w	r9, #1
 8008778:	d00e      	beq.n	8008798 <__cvt+0x84>
 800877a:	eb00 0904 	add.w	r9, r0, r4
 800877e:	2200      	movs	r2, #0
 8008780:	2300      	movs	r3, #0
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7f8 f9bf 	bl	8000b08 <__aeabi_dcmpeq>
 800878a:	b108      	cbz	r0, 8008790 <__cvt+0x7c>
 800878c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008790:	2230      	movs	r2, #48	@ 0x30
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	454b      	cmp	r3, r9
 8008796:	d31e      	bcc.n	80087d6 <__cvt+0xc2>
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800879c:	1b5b      	subs	r3, r3, r5
 800879e:	4628      	mov	r0, r5
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	b004      	add	sp, #16
 80087a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087ac:	eb00 0904 	add.w	r9, r0, r4
 80087b0:	d1e5      	bne.n	800877e <__cvt+0x6a>
 80087b2:	7803      	ldrb	r3, [r0, #0]
 80087b4:	2b30      	cmp	r3, #48	@ 0x30
 80087b6:	d10a      	bne.n	80087ce <__cvt+0xba>
 80087b8:	2200      	movs	r2, #0
 80087ba:	2300      	movs	r3, #0
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f8 f9a2 	bl	8000b08 <__aeabi_dcmpeq>
 80087c4:	b918      	cbnz	r0, 80087ce <__cvt+0xba>
 80087c6:	f1c4 0401 	rsb	r4, r4, #1
 80087ca:	f8ca 4000 	str.w	r4, [sl]
 80087ce:	f8da 3000 	ldr.w	r3, [sl]
 80087d2:	4499      	add	r9, r3
 80087d4:	e7d3      	b.n	800877e <__cvt+0x6a>
 80087d6:	1c59      	adds	r1, r3, #1
 80087d8:	9103      	str	r1, [sp, #12]
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e7d9      	b.n	8008792 <__cvt+0x7e>

080087de <__exponent>:
 80087de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087e0:	2900      	cmp	r1, #0
 80087e2:	bfba      	itte	lt
 80087e4:	4249      	neglt	r1, r1
 80087e6:	232d      	movlt	r3, #45	@ 0x2d
 80087e8:	232b      	movge	r3, #43	@ 0x2b
 80087ea:	2909      	cmp	r1, #9
 80087ec:	7002      	strb	r2, [r0, #0]
 80087ee:	7043      	strb	r3, [r0, #1]
 80087f0:	dd29      	ble.n	8008846 <__exponent+0x68>
 80087f2:	f10d 0307 	add.w	r3, sp, #7
 80087f6:	461d      	mov	r5, r3
 80087f8:	270a      	movs	r7, #10
 80087fa:	461a      	mov	r2, r3
 80087fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008800:	fb07 1416 	mls	r4, r7, r6, r1
 8008804:	3430      	adds	r4, #48	@ 0x30
 8008806:	f802 4c01 	strb.w	r4, [r2, #-1]
 800880a:	460c      	mov	r4, r1
 800880c:	2c63      	cmp	r4, #99	@ 0x63
 800880e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008812:	4631      	mov	r1, r6
 8008814:	dcf1      	bgt.n	80087fa <__exponent+0x1c>
 8008816:	3130      	adds	r1, #48	@ 0x30
 8008818:	1e94      	subs	r4, r2, #2
 800881a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800881e:	1c41      	adds	r1, r0, #1
 8008820:	4623      	mov	r3, r4
 8008822:	42ab      	cmp	r3, r5
 8008824:	d30a      	bcc.n	800883c <__exponent+0x5e>
 8008826:	f10d 0309 	add.w	r3, sp, #9
 800882a:	1a9b      	subs	r3, r3, r2
 800882c:	42ac      	cmp	r4, r5
 800882e:	bf88      	it	hi
 8008830:	2300      	movhi	r3, #0
 8008832:	3302      	adds	r3, #2
 8008834:	4403      	add	r3, r0
 8008836:	1a18      	subs	r0, r3, r0
 8008838:	b003      	add	sp, #12
 800883a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800883c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008840:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008844:	e7ed      	b.n	8008822 <__exponent+0x44>
 8008846:	2330      	movs	r3, #48	@ 0x30
 8008848:	3130      	adds	r1, #48	@ 0x30
 800884a:	7083      	strb	r3, [r0, #2]
 800884c:	70c1      	strb	r1, [r0, #3]
 800884e:	1d03      	adds	r3, r0, #4
 8008850:	e7f1      	b.n	8008836 <__exponent+0x58>
	...

08008854 <_printf_float>:
 8008854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	b08d      	sub	sp, #52	@ 0x34
 800885a:	460c      	mov	r4, r1
 800885c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008860:	4616      	mov	r6, r2
 8008862:	461f      	mov	r7, r3
 8008864:	4605      	mov	r5, r0
 8008866:	f000 ff01 	bl	800966c <_localeconv_r>
 800886a:	6803      	ldr	r3, [r0, #0]
 800886c:	9304      	str	r3, [sp, #16]
 800886e:	4618      	mov	r0, r3
 8008870:	f7f7 fd1e 	bl	80002b0 <strlen>
 8008874:	2300      	movs	r3, #0
 8008876:	930a      	str	r3, [sp, #40]	@ 0x28
 8008878:	f8d8 3000 	ldr.w	r3, [r8]
 800887c:	9005      	str	r0, [sp, #20]
 800887e:	3307      	adds	r3, #7
 8008880:	f023 0307 	bic.w	r3, r3, #7
 8008884:	f103 0208 	add.w	r2, r3, #8
 8008888:	f894 a018 	ldrb.w	sl, [r4, #24]
 800888c:	f8d4 b000 	ldr.w	fp, [r4]
 8008890:	f8c8 2000 	str.w	r2, [r8]
 8008894:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008898:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800889c:	9307      	str	r3, [sp, #28]
 800889e:	f8cd 8018 	str.w	r8, [sp, #24]
 80088a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80088a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088aa:	4b9c      	ldr	r3, [pc, #624]	@ (8008b1c <_printf_float+0x2c8>)
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	f7f8 f95c 	bl	8000b6c <__aeabi_dcmpun>
 80088b4:	bb70      	cbnz	r0, 8008914 <_printf_float+0xc0>
 80088b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088ba:	4b98      	ldr	r3, [pc, #608]	@ (8008b1c <_printf_float+0x2c8>)
 80088bc:	f04f 32ff 	mov.w	r2, #4294967295
 80088c0:	f7f8 f936 	bl	8000b30 <__aeabi_dcmple>
 80088c4:	bb30      	cbnz	r0, 8008914 <_printf_float+0xc0>
 80088c6:	2200      	movs	r2, #0
 80088c8:	2300      	movs	r3, #0
 80088ca:	4640      	mov	r0, r8
 80088cc:	4649      	mov	r1, r9
 80088ce:	f7f8 f925 	bl	8000b1c <__aeabi_dcmplt>
 80088d2:	b110      	cbz	r0, 80088da <_printf_float+0x86>
 80088d4:	232d      	movs	r3, #45	@ 0x2d
 80088d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088da:	4a91      	ldr	r2, [pc, #580]	@ (8008b20 <_printf_float+0x2cc>)
 80088dc:	4b91      	ldr	r3, [pc, #580]	@ (8008b24 <_printf_float+0x2d0>)
 80088de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80088e2:	bf94      	ite	ls
 80088e4:	4690      	movls	r8, r2
 80088e6:	4698      	movhi	r8, r3
 80088e8:	2303      	movs	r3, #3
 80088ea:	6123      	str	r3, [r4, #16]
 80088ec:	f02b 0304 	bic.w	r3, fp, #4
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	f04f 0900 	mov.w	r9, #0
 80088f6:	9700      	str	r7, [sp, #0]
 80088f8:	4633      	mov	r3, r6
 80088fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80088fc:	4621      	mov	r1, r4
 80088fe:	4628      	mov	r0, r5
 8008900:	f000 f9d2 	bl	8008ca8 <_printf_common>
 8008904:	3001      	adds	r0, #1
 8008906:	f040 808d 	bne.w	8008a24 <_printf_float+0x1d0>
 800890a:	f04f 30ff 	mov.w	r0, #4294967295
 800890e:	b00d      	add	sp, #52	@ 0x34
 8008910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008914:	4642      	mov	r2, r8
 8008916:	464b      	mov	r3, r9
 8008918:	4640      	mov	r0, r8
 800891a:	4649      	mov	r1, r9
 800891c:	f7f8 f926 	bl	8000b6c <__aeabi_dcmpun>
 8008920:	b140      	cbz	r0, 8008934 <_printf_float+0xe0>
 8008922:	464b      	mov	r3, r9
 8008924:	2b00      	cmp	r3, #0
 8008926:	bfbc      	itt	lt
 8008928:	232d      	movlt	r3, #45	@ 0x2d
 800892a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800892e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b28 <_printf_float+0x2d4>)
 8008930:	4b7e      	ldr	r3, [pc, #504]	@ (8008b2c <_printf_float+0x2d8>)
 8008932:	e7d4      	b.n	80088de <_printf_float+0x8a>
 8008934:	6863      	ldr	r3, [r4, #4]
 8008936:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800893a:	9206      	str	r2, [sp, #24]
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	d13b      	bne.n	80089b8 <_printf_float+0x164>
 8008940:	2306      	movs	r3, #6
 8008942:	6063      	str	r3, [r4, #4]
 8008944:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008948:	2300      	movs	r3, #0
 800894a:	6022      	str	r2, [r4, #0]
 800894c:	9303      	str	r3, [sp, #12]
 800894e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008950:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008954:	ab09      	add	r3, sp, #36	@ 0x24
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	6861      	ldr	r1, [r4, #4]
 800895a:	ec49 8b10 	vmov	d0, r8, r9
 800895e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008962:	4628      	mov	r0, r5
 8008964:	f7ff fed6 	bl	8008714 <__cvt>
 8008968:	9b06      	ldr	r3, [sp, #24]
 800896a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800896c:	2b47      	cmp	r3, #71	@ 0x47
 800896e:	4680      	mov	r8, r0
 8008970:	d129      	bne.n	80089c6 <_printf_float+0x172>
 8008972:	1cc8      	adds	r0, r1, #3
 8008974:	db02      	blt.n	800897c <_printf_float+0x128>
 8008976:	6863      	ldr	r3, [r4, #4]
 8008978:	4299      	cmp	r1, r3
 800897a:	dd41      	ble.n	8008a00 <_printf_float+0x1ac>
 800897c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008980:	fa5f fa8a 	uxtb.w	sl, sl
 8008984:	3901      	subs	r1, #1
 8008986:	4652      	mov	r2, sl
 8008988:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800898c:	9109      	str	r1, [sp, #36]	@ 0x24
 800898e:	f7ff ff26 	bl	80087de <__exponent>
 8008992:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008994:	1813      	adds	r3, r2, r0
 8008996:	2a01      	cmp	r2, #1
 8008998:	4681      	mov	r9, r0
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	dc02      	bgt.n	80089a4 <_printf_float+0x150>
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	07d2      	lsls	r2, r2, #31
 80089a2:	d501      	bpl.n	80089a8 <_printf_float+0x154>
 80089a4:	3301      	adds	r3, #1
 80089a6:	6123      	str	r3, [r4, #16]
 80089a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0a2      	beq.n	80088f6 <_printf_float+0xa2>
 80089b0:	232d      	movs	r3, #45	@ 0x2d
 80089b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089b6:	e79e      	b.n	80088f6 <_printf_float+0xa2>
 80089b8:	9a06      	ldr	r2, [sp, #24]
 80089ba:	2a47      	cmp	r2, #71	@ 0x47
 80089bc:	d1c2      	bne.n	8008944 <_printf_float+0xf0>
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1c0      	bne.n	8008944 <_printf_float+0xf0>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e7bd      	b.n	8008942 <_printf_float+0xee>
 80089c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089ca:	d9db      	bls.n	8008984 <_printf_float+0x130>
 80089cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80089d0:	d118      	bne.n	8008a04 <_printf_float+0x1b0>
 80089d2:	2900      	cmp	r1, #0
 80089d4:	6863      	ldr	r3, [r4, #4]
 80089d6:	dd0b      	ble.n	80089f0 <_printf_float+0x19c>
 80089d8:	6121      	str	r1, [r4, #16]
 80089da:	b913      	cbnz	r3, 80089e2 <_printf_float+0x18e>
 80089dc:	6822      	ldr	r2, [r4, #0]
 80089de:	07d0      	lsls	r0, r2, #31
 80089e0:	d502      	bpl.n	80089e8 <_printf_float+0x194>
 80089e2:	3301      	adds	r3, #1
 80089e4:	440b      	add	r3, r1
 80089e6:	6123      	str	r3, [r4, #16]
 80089e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	e7db      	b.n	80089a8 <_printf_float+0x154>
 80089f0:	b913      	cbnz	r3, 80089f8 <_printf_float+0x1a4>
 80089f2:	6822      	ldr	r2, [r4, #0]
 80089f4:	07d2      	lsls	r2, r2, #31
 80089f6:	d501      	bpl.n	80089fc <_printf_float+0x1a8>
 80089f8:	3302      	adds	r3, #2
 80089fa:	e7f4      	b.n	80089e6 <_printf_float+0x192>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e7f2      	b.n	80089e6 <_printf_float+0x192>
 8008a00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a06:	4299      	cmp	r1, r3
 8008a08:	db05      	blt.n	8008a16 <_printf_float+0x1c2>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	6121      	str	r1, [r4, #16]
 8008a0e:	07d8      	lsls	r0, r3, #31
 8008a10:	d5ea      	bpl.n	80089e8 <_printf_float+0x194>
 8008a12:	1c4b      	adds	r3, r1, #1
 8008a14:	e7e7      	b.n	80089e6 <_printf_float+0x192>
 8008a16:	2900      	cmp	r1, #0
 8008a18:	bfd4      	ite	le
 8008a1a:	f1c1 0202 	rsble	r2, r1, #2
 8008a1e:	2201      	movgt	r2, #1
 8008a20:	4413      	add	r3, r2
 8008a22:	e7e0      	b.n	80089e6 <_printf_float+0x192>
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	055a      	lsls	r2, r3, #21
 8008a28:	d407      	bmi.n	8008a3a <_printf_float+0x1e6>
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	47b8      	blx	r7
 8008a34:	3001      	adds	r0, #1
 8008a36:	d12b      	bne.n	8008a90 <_printf_float+0x23c>
 8008a38:	e767      	b.n	800890a <_printf_float+0xb6>
 8008a3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a3e:	f240 80dd 	bls.w	8008bfc <_printf_float+0x3a8>
 8008a42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a46:	2200      	movs	r2, #0
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f7f8 f85d 	bl	8000b08 <__aeabi_dcmpeq>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d033      	beq.n	8008aba <_printf_float+0x266>
 8008a52:	4a37      	ldr	r2, [pc, #220]	@ (8008b30 <_printf_float+0x2dc>)
 8008a54:	2301      	movs	r3, #1
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f af54 	beq.w	800890a <_printf_float+0xb6>
 8008a62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a66:	4543      	cmp	r3, r8
 8008a68:	db02      	blt.n	8008a70 <_printf_float+0x21c>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	07d8      	lsls	r0, r3, #31
 8008a6e:	d50f      	bpl.n	8008a90 <_printf_float+0x23c>
 8008a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f43f af45 	beq.w	800890a <_printf_float+0xb6>
 8008a80:	f04f 0900 	mov.w	r9, #0
 8008a84:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a88:	f104 0a1a 	add.w	sl, r4, #26
 8008a8c:	45c8      	cmp	r8, r9
 8008a8e:	dc09      	bgt.n	8008aa4 <_printf_float+0x250>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	079b      	lsls	r3, r3, #30
 8008a94:	f100 8103 	bmi.w	8008c9e <_printf_float+0x44a>
 8008a98:	68e0      	ldr	r0, [r4, #12]
 8008a9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a9c:	4298      	cmp	r0, r3
 8008a9e:	bfb8      	it	lt
 8008aa0:	4618      	movlt	r0, r3
 8008aa2:	e734      	b.n	800890e <_printf_float+0xba>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4652      	mov	r2, sl
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	f43f af2b 	beq.w	800890a <_printf_float+0xb6>
 8008ab4:	f109 0901 	add.w	r9, r9, #1
 8008ab8:	e7e8      	b.n	8008a8c <_printf_float+0x238>
 8008aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dc39      	bgt.n	8008b34 <_printf_float+0x2e0>
 8008ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8008b30 <_printf_float+0x2dc>)
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f af1d 	beq.w	800890a <_printf_float+0xb6>
 8008ad0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ad4:	ea59 0303 	orrs.w	r3, r9, r3
 8008ad8:	d102      	bne.n	8008ae0 <_printf_float+0x28c>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	07d9      	lsls	r1, r3, #31
 8008ade:	d5d7      	bpl.n	8008a90 <_printf_float+0x23c>
 8008ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	f43f af0d 	beq.w	800890a <_printf_float+0xb6>
 8008af0:	f04f 0a00 	mov.w	sl, #0
 8008af4:	f104 0b1a 	add.w	fp, r4, #26
 8008af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008afa:	425b      	negs	r3, r3
 8008afc:	4553      	cmp	r3, sl
 8008afe:	dc01      	bgt.n	8008b04 <_printf_float+0x2b0>
 8008b00:	464b      	mov	r3, r9
 8008b02:	e793      	b.n	8008a2c <_printf_float+0x1d8>
 8008b04:	2301      	movs	r3, #1
 8008b06:	465a      	mov	r2, fp
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f aefb 	beq.w	800890a <_printf_float+0xb6>
 8008b14:	f10a 0a01 	add.w	sl, sl, #1
 8008b18:	e7ee      	b.n	8008af8 <_printf_float+0x2a4>
 8008b1a:	bf00      	nop
 8008b1c:	7fefffff 	.word	0x7fefffff
 8008b20:	0800c1d8 	.word	0x0800c1d8
 8008b24:	0800c1dc 	.word	0x0800c1dc
 8008b28:	0800c1e0 	.word	0x0800c1e0
 8008b2c:	0800c1e4 	.word	0x0800c1e4
 8008b30:	0800c1e8 	.word	0x0800c1e8
 8008b34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b3a:	4553      	cmp	r3, sl
 8008b3c:	bfa8      	it	ge
 8008b3e:	4653      	movge	r3, sl
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	4699      	mov	r9, r3
 8008b44:	dc36      	bgt.n	8008bb4 <_printf_float+0x360>
 8008b46:	f04f 0b00 	mov.w	fp, #0
 8008b4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b4e:	f104 021a 	add.w	r2, r4, #26
 8008b52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b54:	9306      	str	r3, [sp, #24]
 8008b56:	eba3 0309 	sub.w	r3, r3, r9
 8008b5a:	455b      	cmp	r3, fp
 8008b5c:	dc31      	bgt.n	8008bc2 <_printf_float+0x36e>
 8008b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b60:	459a      	cmp	sl, r3
 8008b62:	dc3a      	bgt.n	8008bda <_printf_float+0x386>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07da      	lsls	r2, r3, #31
 8008b68:	d437      	bmi.n	8008bda <_printf_float+0x386>
 8008b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b6c:	ebaa 0903 	sub.w	r9, sl, r3
 8008b70:	9b06      	ldr	r3, [sp, #24]
 8008b72:	ebaa 0303 	sub.w	r3, sl, r3
 8008b76:	4599      	cmp	r9, r3
 8008b78:	bfa8      	it	ge
 8008b7a:	4699      	movge	r9, r3
 8008b7c:	f1b9 0f00 	cmp.w	r9, #0
 8008b80:	dc33      	bgt.n	8008bea <_printf_float+0x396>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b8a:	f104 0b1a 	add.w	fp, r4, #26
 8008b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b90:	ebaa 0303 	sub.w	r3, sl, r3
 8008b94:	eba3 0309 	sub.w	r3, r3, r9
 8008b98:	4543      	cmp	r3, r8
 8008b9a:	f77f af79 	ble.w	8008a90 <_printf_float+0x23c>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	465a      	mov	r2, fp
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	47b8      	blx	r7
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f43f aeae 	beq.w	800890a <_printf_float+0xb6>
 8008bae:	f108 0801 	add.w	r8, r8, #1
 8008bb2:	e7ec      	b.n	8008b8e <_printf_float+0x33a>
 8008bb4:	4642      	mov	r2, r8
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d1c2      	bne.n	8008b46 <_printf_float+0x2f2>
 8008bc0:	e6a3      	b.n	800890a <_printf_float+0xb6>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	9206      	str	r2, [sp, #24]
 8008bca:	47b8      	blx	r7
 8008bcc:	3001      	adds	r0, #1
 8008bce:	f43f ae9c 	beq.w	800890a <_printf_float+0xb6>
 8008bd2:	9a06      	ldr	r2, [sp, #24]
 8008bd4:	f10b 0b01 	add.w	fp, fp, #1
 8008bd8:	e7bb      	b.n	8008b52 <_printf_float+0x2fe>
 8008bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bde:	4631      	mov	r1, r6
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b8      	blx	r7
 8008be4:	3001      	adds	r0, #1
 8008be6:	d1c0      	bne.n	8008b6a <_printf_float+0x316>
 8008be8:	e68f      	b.n	800890a <_printf_float+0xb6>
 8008bea:	9a06      	ldr	r2, [sp, #24]
 8008bec:	464b      	mov	r3, r9
 8008bee:	4442      	add	r2, r8
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	47b8      	blx	r7
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	d1c3      	bne.n	8008b82 <_printf_float+0x32e>
 8008bfa:	e686      	b.n	800890a <_printf_float+0xb6>
 8008bfc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c00:	f1ba 0f01 	cmp.w	sl, #1
 8008c04:	dc01      	bgt.n	8008c0a <_printf_float+0x3b6>
 8008c06:	07db      	lsls	r3, r3, #31
 8008c08:	d536      	bpl.n	8008c78 <_printf_float+0x424>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b8      	blx	r7
 8008c14:	3001      	adds	r0, #1
 8008c16:	f43f ae78 	beq.w	800890a <_printf_float+0xb6>
 8008c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	f43f ae70 	beq.w	800890a <_printf_float+0xb6>
 8008c2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2300      	movs	r3, #0
 8008c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c36:	f7f7 ff67 	bl	8000b08 <__aeabi_dcmpeq>
 8008c3a:	b9c0      	cbnz	r0, 8008c6e <_printf_float+0x41a>
 8008c3c:	4653      	mov	r3, sl
 8008c3e:	f108 0201 	add.w	r2, r8, #1
 8008c42:	4631      	mov	r1, r6
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d10c      	bne.n	8008c66 <_printf_float+0x412>
 8008c4c:	e65d      	b.n	800890a <_printf_float+0xb6>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	465a      	mov	r2, fp
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f ae56 	beq.w	800890a <_printf_float+0xb6>
 8008c5e:	f108 0801 	add.w	r8, r8, #1
 8008c62:	45d0      	cmp	r8, sl
 8008c64:	dbf3      	blt.n	8008c4e <_printf_float+0x3fa>
 8008c66:	464b      	mov	r3, r9
 8008c68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c6c:	e6df      	b.n	8008a2e <_printf_float+0x1da>
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	f104 0b1a 	add.w	fp, r4, #26
 8008c76:	e7f4      	b.n	8008c62 <_printf_float+0x40e>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4642      	mov	r2, r8
 8008c7c:	e7e1      	b.n	8008c42 <_printf_float+0x3ee>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	464a      	mov	r2, r9
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	f43f ae3e 	beq.w	800890a <_printf_float+0xb6>
 8008c8e:	f108 0801 	add.w	r8, r8, #1
 8008c92:	68e3      	ldr	r3, [r4, #12]
 8008c94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c96:	1a5b      	subs	r3, r3, r1
 8008c98:	4543      	cmp	r3, r8
 8008c9a:	dcf0      	bgt.n	8008c7e <_printf_float+0x42a>
 8008c9c:	e6fc      	b.n	8008a98 <_printf_float+0x244>
 8008c9e:	f04f 0800 	mov.w	r8, #0
 8008ca2:	f104 0919 	add.w	r9, r4, #25
 8008ca6:	e7f4      	b.n	8008c92 <_printf_float+0x43e>

08008ca8 <_printf_common>:
 8008ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cac:	4616      	mov	r6, r2
 8008cae:	4698      	mov	r8, r3
 8008cb0:	688a      	ldr	r2, [r1, #8]
 8008cb2:	690b      	ldr	r3, [r1, #16]
 8008cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	bfb8      	it	lt
 8008cbc:	4613      	movlt	r3, r2
 8008cbe:	6033      	str	r3, [r6, #0]
 8008cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	b10a      	cbz	r2, 8008cce <_printf_common+0x26>
 8008cca:	3301      	adds	r3, #1
 8008ccc:	6033      	str	r3, [r6, #0]
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	0699      	lsls	r1, r3, #26
 8008cd2:	bf42      	ittt	mi
 8008cd4:	6833      	ldrmi	r3, [r6, #0]
 8008cd6:	3302      	addmi	r3, #2
 8008cd8:	6033      	strmi	r3, [r6, #0]
 8008cda:	6825      	ldr	r5, [r4, #0]
 8008cdc:	f015 0506 	ands.w	r5, r5, #6
 8008ce0:	d106      	bne.n	8008cf0 <_printf_common+0x48>
 8008ce2:	f104 0a19 	add.w	sl, r4, #25
 8008ce6:	68e3      	ldr	r3, [r4, #12]
 8008ce8:	6832      	ldr	r2, [r6, #0]
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	42ab      	cmp	r3, r5
 8008cee:	dc26      	bgt.n	8008d3e <_printf_common+0x96>
 8008cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cf4:	6822      	ldr	r2, [r4, #0]
 8008cf6:	3b00      	subs	r3, #0
 8008cf8:	bf18      	it	ne
 8008cfa:	2301      	movne	r3, #1
 8008cfc:	0692      	lsls	r2, r2, #26
 8008cfe:	d42b      	bmi.n	8008d58 <_printf_common+0xb0>
 8008d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d04:	4641      	mov	r1, r8
 8008d06:	4638      	mov	r0, r7
 8008d08:	47c8      	blx	r9
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d01e      	beq.n	8008d4c <_printf_common+0xa4>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	6922      	ldr	r2, [r4, #16]
 8008d12:	f003 0306 	and.w	r3, r3, #6
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	bf02      	ittt	eq
 8008d1a:	68e5      	ldreq	r5, [r4, #12]
 8008d1c:	6833      	ldreq	r3, [r6, #0]
 8008d1e:	1aed      	subeq	r5, r5, r3
 8008d20:	68a3      	ldr	r3, [r4, #8]
 8008d22:	bf0c      	ite	eq
 8008d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d28:	2500      	movne	r5, #0
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	bfc4      	itt	gt
 8008d2e:	1a9b      	subgt	r3, r3, r2
 8008d30:	18ed      	addgt	r5, r5, r3
 8008d32:	2600      	movs	r6, #0
 8008d34:	341a      	adds	r4, #26
 8008d36:	42b5      	cmp	r5, r6
 8008d38:	d11a      	bne.n	8008d70 <_printf_common+0xc8>
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	e008      	b.n	8008d50 <_printf_common+0xa8>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4652      	mov	r2, sl
 8008d42:	4641      	mov	r1, r8
 8008d44:	4638      	mov	r0, r7
 8008d46:	47c8      	blx	r9
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d103      	bne.n	8008d54 <_printf_common+0xac>
 8008d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d54:	3501      	adds	r5, #1
 8008d56:	e7c6      	b.n	8008ce6 <_printf_common+0x3e>
 8008d58:	18e1      	adds	r1, r4, r3
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	2030      	movs	r0, #48	@ 0x30
 8008d5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d62:	4422      	add	r2, r4
 8008d64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	e7c7      	b.n	8008d00 <_printf_common+0x58>
 8008d70:	2301      	movs	r3, #1
 8008d72:	4622      	mov	r2, r4
 8008d74:	4641      	mov	r1, r8
 8008d76:	4638      	mov	r0, r7
 8008d78:	47c8      	blx	r9
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d0e6      	beq.n	8008d4c <_printf_common+0xa4>
 8008d7e:	3601      	adds	r6, #1
 8008d80:	e7d9      	b.n	8008d36 <_printf_common+0x8e>
	...

08008d84 <_printf_i>:
 8008d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d88:	7e0f      	ldrb	r7, [r1, #24]
 8008d8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d8c:	2f78      	cmp	r7, #120	@ 0x78
 8008d8e:	4691      	mov	r9, r2
 8008d90:	4680      	mov	r8, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	469a      	mov	sl, r3
 8008d96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d9a:	d807      	bhi.n	8008dac <_printf_i+0x28>
 8008d9c:	2f62      	cmp	r7, #98	@ 0x62
 8008d9e:	d80a      	bhi.n	8008db6 <_printf_i+0x32>
 8008da0:	2f00      	cmp	r7, #0
 8008da2:	f000 80d2 	beq.w	8008f4a <_printf_i+0x1c6>
 8008da6:	2f58      	cmp	r7, #88	@ 0x58
 8008da8:	f000 80b9 	beq.w	8008f1e <_printf_i+0x19a>
 8008dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008db0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008db4:	e03a      	b.n	8008e2c <_printf_i+0xa8>
 8008db6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dba:	2b15      	cmp	r3, #21
 8008dbc:	d8f6      	bhi.n	8008dac <_printf_i+0x28>
 8008dbe:	a101      	add	r1, pc, #4	@ (adr r1, 8008dc4 <_printf_i+0x40>)
 8008dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dc4:	08008e1d 	.word	0x08008e1d
 8008dc8:	08008e31 	.word	0x08008e31
 8008dcc:	08008dad 	.word	0x08008dad
 8008dd0:	08008dad 	.word	0x08008dad
 8008dd4:	08008dad 	.word	0x08008dad
 8008dd8:	08008dad 	.word	0x08008dad
 8008ddc:	08008e31 	.word	0x08008e31
 8008de0:	08008dad 	.word	0x08008dad
 8008de4:	08008dad 	.word	0x08008dad
 8008de8:	08008dad 	.word	0x08008dad
 8008dec:	08008dad 	.word	0x08008dad
 8008df0:	08008f31 	.word	0x08008f31
 8008df4:	08008e5b 	.word	0x08008e5b
 8008df8:	08008eeb 	.word	0x08008eeb
 8008dfc:	08008dad 	.word	0x08008dad
 8008e00:	08008dad 	.word	0x08008dad
 8008e04:	08008f53 	.word	0x08008f53
 8008e08:	08008dad 	.word	0x08008dad
 8008e0c:	08008e5b 	.word	0x08008e5b
 8008e10:	08008dad 	.word	0x08008dad
 8008e14:	08008dad 	.word	0x08008dad
 8008e18:	08008ef3 	.word	0x08008ef3
 8008e1c:	6833      	ldr	r3, [r6, #0]
 8008e1e:	1d1a      	adds	r2, r3, #4
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6032      	str	r2, [r6, #0]
 8008e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e09d      	b.n	8008f6c <_printf_i+0x1e8>
 8008e30:	6833      	ldr	r3, [r6, #0]
 8008e32:	6820      	ldr	r0, [r4, #0]
 8008e34:	1d19      	adds	r1, r3, #4
 8008e36:	6031      	str	r1, [r6, #0]
 8008e38:	0606      	lsls	r6, r0, #24
 8008e3a:	d501      	bpl.n	8008e40 <_printf_i+0xbc>
 8008e3c:	681d      	ldr	r5, [r3, #0]
 8008e3e:	e003      	b.n	8008e48 <_printf_i+0xc4>
 8008e40:	0645      	lsls	r5, r0, #25
 8008e42:	d5fb      	bpl.n	8008e3c <_printf_i+0xb8>
 8008e44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	da03      	bge.n	8008e54 <_printf_i+0xd0>
 8008e4c:	232d      	movs	r3, #45	@ 0x2d
 8008e4e:	426d      	negs	r5, r5
 8008e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e54:	4859      	ldr	r0, [pc, #356]	@ (8008fbc <_printf_i+0x238>)
 8008e56:	230a      	movs	r3, #10
 8008e58:	e011      	b.n	8008e7e <_printf_i+0xfa>
 8008e5a:	6821      	ldr	r1, [r4, #0]
 8008e5c:	6833      	ldr	r3, [r6, #0]
 8008e5e:	0608      	lsls	r0, r1, #24
 8008e60:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e64:	d402      	bmi.n	8008e6c <_printf_i+0xe8>
 8008e66:	0649      	lsls	r1, r1, #25
 8008e68:	bf48      	it	mi
 8008e6a:	b2ad      	uxthmi	r5, r5
 8008e6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e6e:	4853      	ldr	r0, [pc, #332]	@ (8008fbc <_printf_i+0x238>)
 8008e70:	6033      	str	r3, [r6, #0]
 8008e72:	bf14      	ite	ne
 8008e74:	230a      	movne	r3, #10
 8008e76:	2308      	moveq	r3, #8
 8008e78:	2100      	movs	r1, #0
 8008e7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e7e:	6866      	ldr	r6, [r4, #4]
 8008e80:	60a6      	str	r6, [r4, #8]
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	bfa2      	ittt	ge
 8008e86:	6821      	ldrge	r1, [r4, #0]
 8008e88:	f021 0104 	bicge.w	r1, r1, #4
 8008e8c:	6021      	strge	r1, [r4, #0]
 8008e8e:	b90d      	cbnz	r5, 8008e94 <_printf_i+0x110>
 8008e90:	2e00      	cmp	r6, #0
 8008e92:	d04b      	beq.n	8008f2c <_printf_i+0x1a8>
 8008e94:	4616      	mov	r6, r2
 8008e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8008e9e:	5dc7      	ldrb	r7, [r0, r7]
 8008ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ea4:	462f      	mov	r7, r5
 8008ea6:	42bb      	cmp	r3, r7
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	d9f4      	bls.n	8008e96 <_printf_i+0x112>
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d10b      	bne.n	8008ec8 <_printf_i+0x144>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07df      	lsls	r7, r3, #31
 8008eb4:	d508      	bpl.n	8008ec8 <_printf_i+0x144>
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	6861      	ldr	r1, [r4, #4]
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	bfde      	ittt	le
 8008ebe:	2330      	movle	r3, #48	@ 0x30
 8008ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ec8:	1b92      	subs	r2, r2, r6
 8008eca:	6122      	str	r2, [r4, #16]
 8008ecc:	f8cd a000 	str.w	sl, [sp]
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	aa03      	add	r2, sp, #12
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	f7ff fee6 	bl	8008ca8 <_printf_common>
 8008edc:	3001      	adds	r0, #1
 8008ede:	d14a      	bne.n	8008f76 <_printf_i+0x1f2>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	b004      	add	sp, #16
 8008ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	f043 0320 	orr.w	r3, r3, #32
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	4833      	ldr	r0, [pc, #204]	@ (8008fc0 <_printf_i+0x23c>)
 8008ef4:	2778      	movs	r7, #120	@ 0x78
 8008ef6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	6831      	ldr	r1, [r6, #0]
 8008efe:	061f      	lsls	r7, r3, #24
 8008f00:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f04:	d402      	bmi.n	8008f0c <_printf_i+0x188>
 8008f06:	065f      	lsls	r7, r3, #25
 8008f08:	bf48      	it	mi
 8008f0a:	b2ad      	uxthmi	r5, r5
 8008f0c:	6031      	str	r1, [r6, #0]
 8008f0e:	07d9      	lsls	r1, r3, #31
 8008f10:	bf44      	itt	mi
 8008f12:	f043 0320 	orrmi.w	r3, r3, #32
 8008f16:	6023      	strmi	r3, [r4, #0]
 8008f18:	b11d      	cbz	r5, 8008f22 <_printf_i+0x19e>
 8008f1a:	2310      	movs	r3, #16
 8008f1c:	e7ac      	b.n	8008e78 <_printf_i+0xf4>
 8008f1e:	4827      	ldr	r0, [pc, #156]	@ (8008fbc <_printf_i+0x238>)
 8008f20:	e7e9      	b.n	8008ef6 <_printf_i+0x172>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	f023 0320 	bic.w	r3, r3, #32
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	e7f6      	b.n	8008f1a <_printf_i+0x196>
 8008f2c:	4616      	mov	r6, r2
 8008f2e:	e7bd      	b.n	8008eac <_printf_i+0x128>
 8008f30:	6833      	ldr	r3, [r6, #0]
 8008f32:	6825      	ldr	r5, [r4, #0]
 8008f34:	6961      	ldr	r1, [r4, #20]
 8008f36:	1d18      	adds	r0, r3, #4
 8008f38:	6030      	str	r0, [r6, #0]
 8008f3a:	062e      	lsls	r6, r5, #24
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	d501      	bpl.n	8008f44 <_printf_i+0x1c0>
 8008f40:	6019      	str	r1, [r3, #0]
 8008f42:	e002      	b.n	8008f4a <_printf_i+0x1c6>
 8008f44:	0668      	lsls	r0, r5, #25
 8008f46:	d5fb      	bpl.n	8008f40 <_printf_i+0x1bc>
 8008f48:	8019      	strh	r1, [r3, #0]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	6123      	str	r3, [r4, #16]
 8008f4e:	4616      	mov	r6, r2
 8008f50:	e7bc      	b.n	8008ecc <_printf_i+0x148>
 8008f52:	6833      	ldr	r3, [r6, #0]
 8008f54:	1d1a      	adds	r2, r3, #4
 8008f56:	6032      	str	r2, [r6, #0]
 8008f58:	681e      	ldr	r6, [r3, #0]
 8008f5a:	6862      	ldr	r2, [r4, #4]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7f7 f956 	bl	8000210 <memchr>
 8008f64:	b108      	cbz	r0, 8008f6a <_printf_i+0x1e6>
 8008f66:	1b80      	subs	r0, r0, r6
 8008f68:	6060      	str	r0, [r4, #4]
 8008f6a:	6863      	ldr	r3, [r4, #4]
 8008f6c:	6123      	str	r3, [r4, #16]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f74:	e7aa      	b.n	8008ecc <_printf_i+0x148>
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	4632      	mov	r2, r6
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	47d0      	blx	sl
 8008f80:	3001      	adds	r0, #1
 8008f82:	d0ad      	beq.n	8008ee0 <_printf_i+0x15c>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	079b      	lsls	r3, r3, #30
 8008f88:	d413      	bmi.n	8008fb2 <_printf_i+0x22e>
 8008f8a:	68e0      	ldr	r0, [r4, #12]
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	4298      	cmp	r0, r3
 8008f90:	bfb8      	it	lt
 8008f92:	4618      	movlt	r0, r3
 8008f94:	e7a6      	b.n	8008ee4 <_printf_i+0x160>
 8008f96:	2301      	movs	r3, #1
 8008f98:	4632      	mov	r2, r6
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	47d0      	blx	sl
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d09d      	beq.n	8008ee0 <_printf_i+0x15c>
 8008fa4:	3501      	adds	r5, #1
 8008fa6:	68e3      	ldr	r3, [r4, #12]
 8008fa8:	9903      	ldr	r1, [sp, #12]
 8008faa:	1a5b      	subs	r3, r3, r1
 8008fac:	42ab      	cmp	r3, r5
 8008fae:	dcf2      	bgt.n	8008f96 <_printf_i+0x212>
 8008fb0:	e7eb      	b.n	8008f8a <_printf_i+0x206>
 8008fb2:	2500      	movs	r5, #0
 8008fb4:	f104 0619 	add.w	r6, r4, #25
 8008fb8:	e7f5      	b.n	8008fa6 <_printf_i+0x222>
 8008fba:	bf00      	nop
 8008fbc:	0800c1ea 	.word	0x0800c1ea
 8008fc0:	0800c1fb 	.word	0x0800c1fb

08008fc4 <_scanf_float>:
 8008fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc8:	b087      	sub	sp, #28
 8008fca:	4617      	mov	r7, r2
 8008fcc:	9303      	str	r3, [sp, #12]
 8008fce:	688b      	ldr	r3, [r1, #8]
 8008fd0:	1e5a      	subs	r2, r3, #1
 8008fd2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008fd6:	bf81      	itttt	hi
 8008fd8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008fdc:	eb03 0b05 	addhi.w	fp, r3, r5
 8008fe0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008fe4:	608b      	strhi	r3, [r1, #8]
 8008fe6:	680b      	ldr	r3, [r1, #0]
 8008fe8:	460a      	mov	r2, r1
 8008fea:	f04f 0500 	mov.w	r5, #0
 8008fee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008ff2:	f842 3b1c 	str.w	r3, [r2], #28
 8008ff6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	bf98      	it	ls
 8009000:	f04f 0b00 	movls.w	fp, #0
 8009004:	9201      	str	r2, [sp, #4]
 8009006:	4616      	mov	r6, r2
 8009008:	46aa      	mov	sl, r5
 800900a:	46a9      	mov	r9, r5
 800900c:	9502      	str	r5, [sp, #8]
 800900e:	68a2      	ldr	r2, [r4, #8]
 8009010:	b152      	cbz	r2, 8009028 <_scanf_float+0x64>
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b4e      	cmp	r3, #78	@ 0x4e
 8009018:	d864      	bhi.n	80090e4 <_scanf_float+0x120>
 800901a:	2b40      	cmp	r3, #64	@ 0x40
 800901c:	d83c      	bhi.n	8009098 <_scanf_float+0xd4>
 800901e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009022:	b2c8      	uxtb	r0, r1
 8009024:	280e      	cmp	r0, #14
 8009026:	d93a      	bls.n	800909e <_scanf_float+0xda>
 8009028:	f1b9 0f00 	cmp.w	r9, #0
 800902c:	d003      	beq.n	8009036 <_scanf_float+0x72>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800903a:	f1ba 0f01 	cmp.w	sl, #1
 800903e:	f200 8117 	bhi.w	8009270 <_scanf_float+0x2ac>
 8009042:	9b01      	ldr	r3, [sp, #4]
 8009044:	429e      	cmp	r6, r3
 8009046:	f200 8108 	bhi.w	800925a <_scanf_float+0x296>
 800904a:	2001      	movs	r0, #1
 800904c:	b007      	add	sp, #28
 800904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009052:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009056:	2a0d      	cmp	r2, #13
 8009058:	d8e6      	bhi.n	8009028 <_scanf_float+0x64>
 800905a:	a101      	add	r1, pc, #4	@ (adr r1, 8009060 <_scanf_float+0x9c>)
 800905c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009060:	080091a7 	.word	0x080091a7
 8009064:	08009029 	.word	0x08009029
 8009068:	08009029 	.word	0x08009029
 800906c:	08009029 	.word	0x08009029
 8009070:	08009207 	.word	0x08009207
 8009074:	080091df 	.word	0x080091df
 8009078:	08009029 	.word	0x08009029
 800907c:	08009029 	.word	0x08009029
 8009080:	080091b5 	.word	0x080091b5
 8009084:	08009029 	.word	0x08009029
 8009088:	08009029 	.word	0x08009029
 800908c:	08009029 	.word	0x08009029
 8009090:	08009029 	.word	0x08009029
 8009094:	0800916d 	.word	0x0800916d
 8009098:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800909c:	e7db      	b.n	8009056 <_scanf_float+0x92>
 800909e:	290e      	cmp	r1, #14
 80090a0:	d8c2      	bhi.n	8009028 <_scanf_float+0x64>
 80090a2:	a001      	add	r0, pc, #4	@ (adr r0, 80090a8 <_scanf_float+0xe4>)
 80090a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80090a8:	0800915d 	.word	0x0800915d
 80090ac:	08009029 	.word	0x08009029
 80090b0:	0800915d 	.word	0x0800915d
 80090b4:	080091f3 	.word	0x080091f3
 80090b8:	08009029 	.word	0x08009029
 80090bc:	08009105 	.word	0x08009105
 80090c0:	08009143 	.word	0x08009143
 80090c4:	08009143 	.word	0x08009143
 80090c8:	08009143 	.word	0x08009143
 80090cc:	08009143 	.word	0x08009143
 80090d0:	08009143 	.word	0x08009143
 80090d4:	08009143 	.word	0x08009143
 80090d8:	08009143 	.word	0x08009143
 80090dc:	08009143 	.word	0x08009143
 80090e0:	08009143 	.word	0x08009143
 80090e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80090e6:	d809      	bhi.n	80090fc <_scanf_float+0x138>
 80090e8:	2b60      	cmp	r3, #96	@ 0x60
 80090ea:	d8b2      	bhi.n	8009052 <_scanf_float+0x8e>
 80090ec:	2b54      	cmp	r3, #84	@ 0x54
 80090ee:	d07b      	beq.n	80091e8 <_scanf_float+0x224>
 80090f0:	2b59      	cmp	r3, #89	@ 0x59
 80090f2:	d199      	bne.n	8009028 <_scanf_float+0x64>
 80090f4:	2d07      	cmp	r5, #7
 80090f6:	d197      	bne.n	8009028 <_scanf_float+0x64>
 80090f8:	2508      	movs	r5, #8
 80090fa:	e02c      	b.n	8009156 <_scanf_float+0x192>
 80090fc:	2b74      	cmp	r3, #116	@ 0x74
 80090fe:	d073      	beq.n	80091e8 <_scanf_float+0x224>
 8009100:	2b79      	cmp	r3, #121	@ 0x79
 8009102:	e7f6      	b.n	80090f2 <_scanf_float+0x12e>
 8009104:	6821      	ldr	r1, [r4, #0]
 8009106:	05c8      	lsls	r0, r1, #23
 8009108:	d51b      	bpl.n	8009142 <_scanf_float+0x17e>
 800910a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800910e:	6021      	str	r1, [r4, #0]
 8009110:	f109 0901 	add.w	r9, r9, #1
 8009114:	f1bb 0f00 	cmp.w	fp, #0
 8009118:	d003      	beq.n	8009122 <_scanf_float+0x15e>
 800911a:	3201      	adds	r2, #1
 800911c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009120:	60a2      	str	r2, [r4, #8]
 8009122:	68a3      	ldr	r3, [r4, #8]
 8009124:	3b01      	subs	r3, #1
 8009126:	60a3      	str	r3, [r4, #8]
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	3301      	adds	r3, #1
 800912c:	6123      	str	r3, [r4, #16]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3b01      	subs	r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	607b      	str	r3, [r7, #4]
 8009136:	f340 8087 	ble.w	8009248 <_scanf_float+0x284>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	3301      	adds	r3, #1
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	e765      	b.n	800900e <_scanf_float+0x4a>
 8009142:	eb1a 0105 	adds.w	r1, sl, r5
 8009146:	f47f af6f 	bne.w	8009028 <_scanf_float+0x64>
 800914a:	6822      	ldr	r2, [r4, #0]
 800914c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009150:	6022      	str	r2, [r4, #0]
 8009152:	460d      	mov	r5, r1
 8009154:	468a      	mov	sl, r1
 8009156:	f806 3b01 	strb.w	r3, [r6], #1
 800915a:	e7e2      	b.n	8009122 <_scanf_float+0x15e>
 800915c:	6822      	ldr	r2, [r4, #0]
 800915e:	0610      	lsls	r0, r2, #24
 8009160:	f57f af62 	bpl.w	8009028 <_scanf_float+0x64>
 8009164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	e7f4      	b.n	8009156 <_scanf_float+0x192>
 800916c:	f1ba 0f00 	cmp.w	sl, #0
 8009170:	d10e      	bne.n	8009190 <_scanf_float+0x1cc>
 8009172:	f1b9 0f00 	cmp.w	r9, #0
 8009176:	d10e      	bne.n	8009196 <_scanf_float+0x1d2>
 8009178:	6822      	ldr	r2, [r4, #0]
 800917a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800917e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009182:	d108      	bne.n	8009196 <_scanf_float+0x1d2>
 8009184:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009188:	6022      	str	r2, [r4, #0]
 800918a:	f04f 0a01 	mov.w	sl, #1
 800918e:	e7e2      	b.n	8009156 <_scanf_float+0x192>
 8009190:	f1ba 0f02 	cmp.w	sl, #2
 8009194:	d055      	beq.n	8009242 <_scanf_float+0x27e>
 8009196:	2d01      	cmp	r5, #1
 8009198:	d002      	beq.n	80091a0 <_scanf_float+0x1dc>
 800919a:	2d04      	cmp	r5, #4
 800919c:	f47f af44 	bne.w	8009028 <_scanf_float+0x64>
 80091a0:	3501      	adds	r5, #1
 80091a2:	b2ed      	uxtb	r5, r5
 80091a4:	e7d7      	b.n	8009156 <_scanf_float+0x192>
 80091a6:	f1ba 0f01 	cmp.w	sl, #1
 80091aa:	f47f af3d 	bne.w	8009028 <_scanf_float+0x64>
 80091ae:	f04f 0a02 	mov.w	sl, #2
 80091b2:	e7d0      	b.n	8009156 <_scanf_float+0x192>
 80091b4:	b97d      	cbnz	r5, 80091d6 <_scanf_float+0x212>
 80091b6:	f1b9 0f00 	cmp.w	r9, #0
 80091ba:	f47f af38 	bne.w	800902e <_scanf_float+0x6a>
 80091be:	6822      	ldr	r2, [r4, #0]
 80091c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80091c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80091c8:	f040 8108 	bne.w	80093dc <_scanf_float+0x418>
 80091cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80091d0:	6022      	str	r2, [r4, #0]
 80091d2:	2501      	movs	r5, #1
 80091d4:	e7bf      	b.n	8009156 <_scanf_float+0x192>
 80091d6:	2d03      	cmp	r5, #3
 80091d8:	d0e2      	beq.n	80091a0 <_scanf_float+0x1dc>
 80091da:	2d05      	cmp	r5, #5
 80091dc:	e7de      	b.n	800919c <_scanf_float+0x1d8>
 80091de:	2d02      	cmp	r5, #2
 80091e0:	f47f af22 	bne.w	8009028 <_scanf_float+0x64>
 80091e4:	2503      	movs	r5, #3
 80091e6:	e7b6      	b.n	8009156 <_scanf_float+0x192>
 80091e8:	2d06      	cmp	r5, #6
 80091ea:	f47f af1d 	bne.w	8009028 <_scanf_float+0x64>
 80091ee:	2507      	movs	r5, #7
 80091f0:	e7b1      	b.n	8009156 <_scanf_float+0x192>
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	0591      	lsls	r1, r2, #22
 80091f6:	f57f af17 	bpl.w	8009028 <_scanf_float+0x64>
 80091fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80091fe:	6022      	str	r2, [r4, #0]
 8009200:	f8cd 9008 	str.w	r9, [sp, #8]
 8009204:	e7a7      	b.n	8009156 <_scanf_float+0x192>
 8009206:	6822      	ldr	r2, [r4, #0]
 8009208:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800920c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009210:	d006      	beq.n	8009220 <_scanf_float+0x25c>
 8009212:	0550      	lsls	r0, r2, #21
 8009214:	f57f af08 	bpl.w	8009028 <_scanf_float+0x64>
 8009218:	f1b9 0f00 	cmp.w	r9, #0
 800921c:	f000 80de 	beq.w	80093dc <_scanf_float+0x418>
 8009220:	0591      	lsls	r1, r2, #22
 8009222:	bf58      	it	pl
 8009224:	9902      	ldrpl	r1, [sp, #8]
 8009226:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800922a:	bf58      	it	pl
 800922c:	eba9 0101 	subpl.w	r1, r9, r1
 8009230:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009234:	bf58      	it	pl
 8009236:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800923a:	6022      	str	r2, [r4, #0]
 800923c:	f04f 0900 	mov.w	r9, #0
 8009240:	e789      	b.n	8009156 <_scanf_float+0x192>
 8009242:	f04f 0a03 	mov.w	sl, #3
 8009246:	e786      	b.n	8009156 <_scanf_float+0x192>
 8009248:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800924c:	4639      	mov	r1, r7
 800924e:	4640      	mov	r0, r8
 8009250:	4798      	blx	r3
 8009252:	2800      	cmp	r0, #0
 8009254:	f43f aedb 	beq.w	800900e <_scanf_float+0x4a>
 8009258:	e6e6      	b.n	8009028 <_scanf_float+0x64>
 800925a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800925e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009262:	463a      	mov	r2, r7
 8009264:	4640      	mov	r0, r8
 8009266:	4798      	blx	r3
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	3b01      	subs	r3, #1
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	e6e8      	b.n	8009042 <_scanf_float+0x7e>
 8009270:	1e6b      	subs	r3, r5, #1
 8009272:	2b06      	cmp	r3, #6
 8009274:	d824      	bhi.n	80092c0 <_scanf_float+0x2fc>
 8009276:	2d02      	cmp	r5, #2
 8009278:	d836      	bhi.n	80092e8 <_scanf_float+0x324>
 800927a:	9b01      	ldr	r3, [sp, #4]
 800927c:	429e      	cmp	r6, r3
 800927e:	f67f aee4 	bls.w	800904a <_scanf_float+0x86>
 8009282:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009286:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800928a:	463a      	mov	r2, r7
 800928c:	4640      	mov	r0, r8
 800928e:	4798      	blx	r3
 8009290:	6923      	ldr	r3, [r4, #16]
 8009292:	3b01      	subs	r3, #1
 8009294:	6123      	str	r3, [r4, #16]
 8009296:	e7f0      	b.n	800927a <_scanf_float+0x2b6>
 8009298:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800929c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80092a0:	463a      	mov	r2, r7
 80092a2:	4640      	mov	r0, r8
 80092a4:	4798      	blx	r3
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	3b01      	subs	r3, #1
 80092aa:	6123      	str	r3, [r4, #16]
 80092ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092b0:	fa5f fa8a 	uxtb.w	sl, sl
 80092b4:	f1ba 0f02 	cmp.w	sl, #2
 80092b8:	d1ee      	bne.n	8009298 <_scanf_float+0x2d4>
 80092ba:	3d03      	subs	r5, #3
 80092bc:	b2ed      	uxtb	r5, r5
 80092be:	1b76      	subs	r6, r6, r5
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	05da      	lsls	r2, r3, #23
 80092c4:	d530      	bpl.n	8009328 <_scanf_float+0x364>
 80092c6:	055b      	lsls	r3, r3, #21
 80092c8:	d511      	bpl.n	80092ee <_scanf_float+0x32a>
 80092ca:	9b01      	ldr	r3, [sp, #4]
 80092cc:	429e      	cmp	r6, r3
 80092ce:	f67f aebc 	bls.w	800904a <_scanf_float+0x86>
 80092d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80092d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092da:	463a      	mov	r2, r7
 80092dc:	4640      	mov	r0, r8
 80092de:	4798      	blx	r3
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	3b01      	subs	r3, #1
 80092e4:	6123      	str	r3, [r4, #16]
 80092e6:	e7f0      	b.n	80092ca <_scanf_float+0x306>
 80092e8:	46aa      	mov	sl, r5
 80092ea:	46b3      	mov	fp, r6
 80092ec:	e7de      	b.n	80092ac <_scanf_float+0x2e8>
 80092ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80092f2:	6923      	ldr	r3, [r4, #16]
 80092f4:	2965      	cmp	r1, #101	@ 0x65
 80092f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80092fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80092fe:	6123      	str	r3, [r4, #16]
 8009300:	d00c      	beq.n	800931c <_scanf_float+0x358>
 8009302:	2945      	cmp	r1, #69	@ 0x45
 8009304:	d00a      	beq.n	800931c <_scanf_float+0x358>
 8009306:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800930a:	463a      	mov	r2, r7
 800930c:	4640      	mov	r0, r8
 800930e:	4798      	blx	r3
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009316:	3b01      	subs	r3, #1
 8009318:	1eb5      	subs	r5, r6, #2
 800931a:	6123      	str	r3, [r4, #16]
 800931c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009320:	463a      	mov	r2, r7
 8009322:	4640      	mov	r0, r8
 8009324:	4798      	blx	r3
 8009326:	462e      	mov	r6, r5
 8009328:	6822      	ldr	r2, [r4, #0]
 800932a:	f012 0210 	ands.w	r2, r2, #16
 800932e:	d001      	beq.n	8009334 <_scanf_float+0x370>
 8009330:	2000      	movs	r0, #0
 8009332:	e68b      	b.n	800904c <_scanf_float+0x88>
 8009334:	7032      	strb	r2, [r6, #0]
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800933c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009340:	d11c      	bne.n	800937c <_scanf_float+0x3b8>
 8009342:	9b02      	ldr	r3, [sp, #8]
 8009344:	454b      	cmp	r3, r9
 8009346:	eba3 0209 	sub.w	r2, r3, r9
 800934a:	d123      	bne.n	8009394 <_scanf_float+0x3d0>
 800934c:	9901      	ldr	r1, [sp, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	4640      	mov	r0, r8
 8009352:	f7ff f9d9 	bl	8008708 <_strtod_r>
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	6821      	ldr	r1, [r4, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f011 0f02 	tst.w	r1, #2
 8009360:	ec57 6b10 	vmov	r6, r7, d0
 8009364:	f103 0204 	add.w	r2, r3, #4
 8009368:	d01f      	beq.n	80093aa <_scanf_float+0x3e6>
 800936a:	9903      	ldr	r1, [sp, #12]
 800936c:	600a      	str	r2, [r1, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	e9c3 6700 	strd	r6, r7, [r3]
 8009374:	68e3      	ldr	r3, [r4, #12]
 8009376:	3301      	adds	r3, #1
 8009378:	60e3      	str	r3, [r4, #12]
 800937a:	e7d9      	b.n	8009330 <_scanf_float+0x36c>
 800937c:	9b04      	ldr	r3, [sp, #16]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0e4      	beq.n	800934c <_scanf_float+0x388>
 8009382:	9905      	ldr	r1, [sp, #20]
 8009384:	230a      	movs	r3, #10
 8009386:	3101      	adds	r1, #1
 8009388:	4640      	mov	r0, r8
 800938a:	f002 f923 	bl	800b5d4 <_strtol_r>
 800938e:	9b04      	ldr	r3, [sp, #16]
 8009390:	9e05      	ldr	r6, [sp, #20]
 8009392:	1ac2      	subs	r2, r0, r3
 8009394:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009398:	429e      	cmp	r6, r3
 800939a:	bf28      	it	cs
 800939c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80093a0:	4910      	ldr	r1, [pc, #64]	@ (80093e4 <_scanf_float+0x420>)
 80093a2:	4630      	mov	r0, r6
 80093a4:	f000 f8e4 	bl	8009570 <siprintf>
 80093a8:	e7d0      	b.n	800934c <_scanf_float+0x388>
 80093aa:	f011 0f04 	tst.w	r1, #4
 80093ae:	9903      	ldr	r1, [sp, #12]
 80093b0:	600a      	str	r2, [r1, #0]
 80093b2:	d1dc      	bne.n	800936e <_scanf_float+0x3aa>
 80093b4:	681d      	ldr	r5, [r3, #0]
 80093b6:	4632      	mov	r2, r6
 80093b8:	463b      	mov	r3, r7
 80093ba:	4630      	mov	r0, r6
 80093bc:	4639      	mov	r1, r7
 80093be:	f7f7 fbd5 	bl	8000b6c <__aeabi_dcmpun>
 80093c2:	b128      	cbz	r0, 80093d0 <_scanf_float+0x40c>
 80093c4:	4808      	ldr	r0, [pc, #32]	@ (80093e8 <_scanf_float+0x424>)
 80093c6:	f000 f9ef 	bl	80097a8 <nanf>
 80093ca:	ed85 0a00 	vstr	s0, [r5]
 80093ce:	e7d1      	b.n	8009374 <_scanf_float+0x3b0>
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	f7f7 fc28 	bl	8000c28 <__aeabi_d2f>
 80093d8:	6028      	str	r0, [r5, #0]
 80093da:	e7cb      	b.n	8009374 <_scanf_float+0x3b0>
 80093dc:	f04f 0900 	mov.w	r9, #0
 80093e0:	e629      	b.n	8009036 <_scanf_float+0x72>
 80093e2:	bf00      	nop
 80093e4:	0800c20c 	.word	0x0800c20c
 80093e8:	0800c5ad 	.word	0x0800c5ad

080093ec <std>:
 80093ec:	2300      	movs	r3, #0
 80093ee:	b510      	push	{r4, lr}
 80093f0:	4604      	mov	r4, r0
 80093f2:	e9c0 3300 	strd	r3, r3, [r0]
 80093f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093fa:	6083      	str	r3, [r0, #8]
 80093fc:	8181      	strh	r1, [r0, #12]
 80093fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009400:	81c2      	strh	r2, [r0, #14]
 8009402:	6183      	str	r3, [r0, #24]
 8009404:	4619      	mov	r1, r3
 8009406:	2208      	movs	r2, #8
 8009408:	305c      	adds	r0, #92	@ 0x5c
 800940a:	f000 f914 	bl	8009636 <memset>
 800940e:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <std+0x58>)
 8009410:	6263      	str	r3, [r4, #36]	@ 0x24
 8009412:	4b0d      	ldr	r3, [pc, #52]	@ (8009448 <std+0x5c>)
 8009414:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009416:	4b0d      	ldr	r3, [pc, #52]	@ (800944c <std+0x60>)
 8009418:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800941a:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <std+0x64>)
 800941c:	6323      	str	r3, [r4, #48]	@ 0x30
 800941e:	4b0d      	ldr	r3, [pc, #52]	@ (8009454 <std+0x68>)
 8009420:	6224      	str	r4, [r4, #32]
 8009422:	429c      	cmp	r4, r3
 8009424:	d006      	beq.n	8009434 <std+0x48>
 8009426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800942a:	4294      	cmp	r4, r2
 800942c:	d002      	beq.n	8009434 <std+0x48>
 800942e:	33d0      	adds	r3, #208	@ 0xd0
 8009430:	429c      	cmp	r4, r3
 8009432:	d105      	bne.n	8009440 <std+0x54>
 8009434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800943c:	f000 b99a 	b.w	8009774 <__retarget_lock_init_recursive>
 8009440:	bd10      	pop	{r4, pc}
 8009442:	bf00      	nop
 8009444:	080095b1 	.word	0x080095b1
 8009448:	080095d3 	.word	0x080095d3
 800944c:	0800960b 	.word	0x0800960b
 8009450:	0800962f 	.word	0x0800962f
 8009454:	200008b4 	.word	0x200008b4

08009458 <stdio_exit_handler>:
 8009458:	4a02      	ldr	r2, [pc, #8]	@ (8009464 <stdio_exit_handler+0xc>)
 800945a:	4903      	ldr	r1, [pc, #12]	@ (8009468 <stdio_exit_handler+0x10>)
 800945c:	4803      	ldr	r0, [pc, #12]	@ (800946c <stdio_exit_handler+0x14>)
 800945e:	f000 b869 	b.w	8009534 <_fwalk_sglue>
 8009462:	bf00      	nop
 8009464:	20000010 	.word	0x20000010
 8009468:	0800b9a9 	.word	0x0800b9a9
 800946c:	2000018c 	.word	0x2000018c

08009470 <cleanup_stdio>:
 8009470:	6841      	ldr	r1, [r0, #4]
 8009472:	4b0c      	ldr	r3, [pc, #48]	@ (80094a4 <cleanup_stdio+0x34>)
 8009474:	4299      	cmp	r1, r3
 8009476:	b510      	push	{r4, lr}
 8009478:	4604      	mov	r4, r0
 800947a:	d001      	beq.n	8009480 <cleanup_stdio+0x10>
 800947c:	f002 fa94 	bl	800b9a8 <_fflush_r>
 8009480:	68a1      	ldr	r1, [r4, #8]
 8009482:	4b09      	ldr	r3, [pc, #36]	@ (80094a8 <cleanup_stdio+0x38>)
 8009484:	4299      	cmp	r1, r3
 8009486:	d002      	beq.n	800948e <cleanup_stdio+0x1e>
 8009488:	4620      	mov	r0, r4
 800948a:	f002 fa8d 	bl	800b9a8 <_fflush_r>
 800948e:	68e1      	ldr	r1, [r4, #12]
 8009490:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <cleanup_stdio+0x3c>)
 8009492:	4299      	cmp	r1, r3
 8009494:	d004      	beq.n	80094a0 <cleanup_stdio+0x30>
 8009496:	4620      	mov	r0, r4
 8009498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800949c:	f002 ba84 	b.w	800b9a8 <_fflush_r>
 80094a0:	bd10      	pop	{r4, pc}
 80094a2:	bf00      	nop
 80094a4:	200008b4 	.word	0x200008b4
 80094a8:	2000091c 	.word	0x2000091c
 80094ac:	20000984 	.word	0x20000984

080094b0 <global_stdio_init.part.0>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	4b0b      	ldr	r3, [pc, #44]	@ (80094e0 <global_stdio_init.part.0+0x30>)
 80094b4:	4c0b      	ldr	r4, [pc, #44]	@ (80094e4 <global_stdio_init.part.0+0x34>)
 80094b6:	4a0c      	ldr	r2, [pc, #48]	@ (80094e8 <global_stdio_init.part.0+0x38>)
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	4620      	mov	r0, r4
 80094bc:	2200      	movs	r2, #0
 80094be:	2104      	movs	r1, #4
 80094c0:	f7ff ff94 	bl	80093ec <std>
 80094c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094c8:	2201      	movs	r2, #1
 80094ca:	2109      	movs	r1, #9
 80094cc:	f7ff ff8e 	bl	80093ec <std>
 80094d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094d4:	2202      	movs	r2, #2
 80094d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094da:	2112      	movs	r1, #18
 80094dc:	f7ff bf86 	b.w	80093ec <std>
 80094e0:	200009ec 	.word	0x200009ec
 80094e4:	200008b4 	.word	0x200008b4
 80094e8:	08009459 	.word	0x08009459

080094ec <__sfp_lock_acquire>:
 80094ec:	4801      	ldr	r0, [pc, #4]	@ (80094f4 <__sfp_lock_acquire+0x8>)
 80094ee:	f000 b942 	b.w	8009776 <__retarget_lock_acquire_recursive>
 80094f2:	bf00      	nop
 80094f4:	200009f5 	.word	0x200009f5

080094f8 <__sfp_lock_release>:
 80094f8:	4801      	ldr	r0, [pc, #4]	@ (8009500 <__sfp_lock_release+0x8>)
 80094fa:	f000 b93d 	b.w	8009778 <__retarget_lock_release_recursive>
 80094fe:	bf00      	nop
 8009500:	200009f5 	.word	0x200009f5

08009504 <__sinit>:
 8009504:	b510      	push	{r4, lr}
 8009506:	4604      	mov	r4, r0
 8009508:	f7ff fff0 	bl	80094ec <__sfp_lock_acquire>
 800950c:	6a23      	ldr	r3, [r4, #32]
 800950e:	b11b      	cbz	r3, 8009518 <__sinit+0x14>
 8009510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009514:	f7ff bff0 	b.w	80094f8 <__sfp_lock_release>
 8009518:	4b04      	ldr	r3, [pc, #16]	@ (800952c <__sinit+0x28>)
 800951a:	6223      	str	r3, [r4, #32]
 800951c:	4b04      	ldr	r3, [pc, #16]	@ (8009530 <__sinit+0x2c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1f5      	bne.n	8009510 <__sinit+0xc>
 8009524:	f7ff ffc4 	bl	80094b0 <global_stdio_init.part.0>
 8009528:	e7f2      	b.n	8009510 <__sinit+0xc>
 800952a:	bf00      	nop
 800952c:	08009471 	.word	0x08009471
 8009530:	200009ec 	.word	0x200009ec

08009534 <_fwalk_sglue>:
 8009534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009538:	4607      	mov	r7, r0
 800953a:	4688      	mov	r8, r1
 800953c:	4614      	mov	r4, r2
 800953e:	2600      	movs	r6, #0
 8009540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009544:	f1b9 0901 	subs.w	r9, r9, #1
 8009548:	d505      	bpl.n	8009556 <_fwalk_sglue+0x22>
 800954a:	6824      	ldr	r4, [r4, #0]
 800954c:	2c00      	cmp	r4, #0
 800954e:	d1f7      	bne.n	8009540 <_fwalk_sglue+0xc>
 8009550:	4630      	mov	r0, r6
 8009552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009556:	89ab      	ldrh	r3, [r5, #12]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d907      	bls.n	800956c <_fwalk_sglue+0x38>
 800955c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009560:	3301      	adds	r3, #1
 8009562:	d003      	beq.n	800956c <_fwalk_sglue+0x38>
 8009564:	4629      	mov	r1, r5
 8009566:	4638      	mov	r0, r7
 8009568:	47c0      	blx	r8
 800956a:	4306      	orrs	r6, r0
 800956c:	3568      	adds	r5, #104	@ 0x68
 800956e:	e7e9      	b.n	8009544 <_fwalk_sglue+0x10>

08009570 <siprintf>:
 8009570:	b40e      	push	{r1, r2, r3}
 8009572:	b500      	push	{lr}
 8009574:	b09c      	sub	sp, #112	@ 0x70
 8009576:	ab1d      	add	r3, sp, #116	@ 0x74
 8009578:	9002      	str	r0, [sp, #8]
 800957a:	9006      	str	r0, [sp, #24]
 800957c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009580:	4809      	ldr	r0, [pc, #36]	@ (80095a8 <siprintf+0x38>)
 8009582:	9107      	str	r1, [sp, #28]
 8009584:	9104      	str	r1, [sp, #16]
 8009586:	4909      	ldr	r1, [pc, #36]	@ (80095ac <siprintf+0x3c>)
 8009588:	f853 2b04 	ldr.w	r2, [r3], #4
 800958c:	9105      	str	r1, [sp, #20]
 800958e:	6800      	ldr	r0, [r0, #0]
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	a902      	add	r1, sp, #8
 8009594:	f002 f888 	bl	800b6a8 <_svfiprintf_r>
 8009598:	9b02      	ldr	r3, [sp, #8]
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	b01c      	add	sp, #112	@ 0x70
 80095a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a4:	b003      	add	sp, #12
 80095a6:	4770      	bx	lr
 80095a8:	20000188 	.word	0x20000188
 80095ac:	ffff0208 	.word	0xffff0208

080095b0 <__sread>:
 80095b0:	b510      	push	{r4, lr}
 80095b2:	460c      	mov	r4, r1
 80095b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b8:	f000 f87e 	bl	80096b8 <_read_r>
 80095bc:	2800      	cmp	r0, #0
 80095be:	bfab      	itete	ge
 80095c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80095c2:	89a3      	ldrhlt	r3, [r4, #12]
 80095c4:	181b      	addge	r3, r3, r0
 80095c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80095ca:	bfac      	ite	ge
 80095cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80095ce:	81a3      	strhlt	r3, [r4, #12]
 80095d0:	bd10      	pop	{r4, pc}

080095d2 <__swrite>:
 80095d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	461f      	mov	r7, r3
 80095d8:	898b      	ldrh	r3, [r1, #12]
 80095da:	05db      	lsls	r3, r3, #23
 80095dc:	4605      	mov	r5, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	4616      	mov	r6, r2
 80095e2:	d505      	bpl.n	80095f0 <__swrite+0x1e>
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	2302      	movs	r3, #2
 80095ea:	2200      	movs	r2, #0
 80095ec:	f000 f852 	bl	8009694 <_lseek_r>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	4632      	mov	r2, r6
 80095fe:	463b      	mov	r3, r7
 8009600:	4628      	mov	r0, r5
 8009602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	f000 b879 	b.w	80096fc <_write_r>

0800960a <__sseek>:
 800960a:	b510      	push	{r4, lr}
 800960c:	460c      	mov	r4, r1
 800960e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009612:	f000 f83f 	bl	8009694 <_lseek_r>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	bf15      	itete	ne
 800961c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800961e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009626:	81a3      	strheq	r3, [r4, #12]
 8009628:	bf18      	it	ne
 800962a:	81a3      	strhne	r3, [r4, #12]
 800962c:	bd10      	pop	{r4, pc}

0800962e <__sclose>:
 800962e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009632:	f000 b81f 	b.w	8009674 <_close_r>

08009636 <memset>:
 8009636:	4402      	add	r2, r0
 8009638:	4603      	mov	r3, r0
 800963a:	4293      	cmp	r3, r2
 800963c:	d100      	bne.n	8009640 <memset+0xa>
 800963e:	4770      	bx	lr
 8009640:	f803 1b01 	strb.w	r1, [r3], #1
 8009644:	e7f9      	b.n	800963a <memset+0x4>

08009646 <strncmp>:
 8009646:	b510      	push	{r4, lr}
 8009648:	b16a      	cbz	r2, 8009666 <strncmp+0x20>
 800964a:	3901      	subs	r1, #1
 800964c:	1884      	adds	r4, r0, r2
 800964e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009652:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009656:	429a      	cmp	r2, r3
 8009658:	d103      	bne.n	8009662 <strncmp+0x1c>
 800965a:	42a0      	cmp	r0, r4
 800965c:	d001      	beq.n	8009662 <strncmp+0x1c>
 800965e:	2a00      	cmp	r2, #0
 8009660:	d1f5      	bne.n	800964e <strncmp+0x8>
 8009662:	1ad0      	subs	r0, r2, r3
 8009664:	bd10      	pop	{r4, pc}
 8009666:	4610      	mov	r0, r2
 8009668:	e7fc      	b.n	8009664 <strncmp+0x1e>
	...

0800966c <_localeconv_r>:
 800966c:	4800      	ldr	r0, [pc, #0]	@ (8009670 <_localeconv_r+0x4>)
 800966e:	4770      	bx	lr
 8009670:	2000010c 	.word	0x2000010c

08009674 <_close_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d06      	ldr	r5, [pc, #24]	@ (8009690 <_close_r+0x1c>)
 8009678:	2300      	movs	r3, #0
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	f7f9 fe56 	bl	8003330 <_close>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_close_r+0x1a>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_close_r+0x1a>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	200009f0 	.word	0x200009f0

08009694 <_lseek_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d07      	ldr	r5, [pc, #28]	@ (80096b4 <_lseek_r+0x20>)
 8009698:	4604      	mov	r4, r0
 800969a:	4608      	mov	r0, r1
 800969c:	4611      	mov	r1, r2
 800969e:	2200      	movs	r2, #0
 80096a0:	602a      	str	r2, [r5, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	f7f9 fe6b 	bl	800337e <_lseek>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_lseek_r+0x1e>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_lseek_r+0x1e>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	200009f0 	.word	0x200009f0

080096b8 <_read_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4d07      	ldr	r5, [pc, #28]	@ (80096d8 <_read_r+0x20>)
 80096bc:	4604      	mov	r4, r0
 80096be:	4608      	mov	r0, r1
 80096c0:	4611      	mov	r1, r2
 80096c2:	2200      	movs	r2, #0
 80096c4:	602a      	str	r2, [r5, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	f7f9 fdf9 	bl	80032be <_read>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d102      	bne.n	80096d6 <_read_r+0x1e>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	b103      	cbz	r3, 80096d6 <_read_r+0x1e>
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	200009f0 	.word	0x200009f0

080096dc <_sbrk_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d06      	ldr	r5, [pc, #24]	@ (80096f8 <_sbrk_r+0x1c>)
 80096e0:	2300      	movs	r3, #0
 80096e2:	4604      	mov	r4, r0
 80096e4:	4608      	mov	r0, r1
 80096e6:	602b      	str	r3, [r5, #0]
 80096e8:	f7f9 fe56 	bl	8003398 <_sbrk>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d102      	bne.n	80096f6 <_sbrk_r+0x1a>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	b103      	cbz	r3, 80096f6 <_sbrk_r+0x1a>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	200009f0 	.word	0x200009f0

080096fc <_write_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4d07      	ldr	r5, [pc, #28]	@ (800971c <_write_r+0x20>)
 8009700:	4604      	mov	r4, r0
 8009702:	4608      	mov	r0, r1
 8009704:	4611      	mov	r1, r2
 8009706:	2200      	movs	r2, #0
 8009708:	602a      	str	r2, [r5, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	f7f9 fdf4 	bl	80032f8 <_write>
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d102      	bne.n	800971a <_write_r+0x1e>
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	b103      	cbz	r3, 800971a <_write_r+0x1e>
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	200009f0 	.word	0x200009f0

08009720 <__errno>:
 8009720:	4b01      	ldr	r3, [pc, #4]	@ (8009728 <__errno+0x8>)
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20000188 	.word	0x20000188

0800972c <__libc_init_array>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	4d0d      	ldr	r5, [pc, #52]	@ (8009764 <__libc_init_array+0x38>)
 8009730:	4c0d      	ldr	r4, [pc, #52]	@ (8009768 <__libc_init_array+0x3c>)
 8009732:	1b64      	subs	r4, r4, r5
 8009734:	10a4      	asrs	r4, r4, #2
 8009736:	2600      	movs	r6, #0
 8009738:	42a6      	cmp	r6, r4
 800973a:	d109      	bne.n	8009750 <__libc_init_array+0x24>
 800973c:	4d0b      	ldr	r5, [pc, #44]	@ (800976c <__libc_init_array+0x40>)
 800973e:	4c0c      	ldr	r4, [pc, #48]	@ (8009770 <__libc_init_array+0x44>)
 8009740:	f002 fc92 	bl	800c068 <_init>
 8009744:	1b64      	subs	r4, r4, r5
 8009746:	10a4      	asrs	r4, r4, #2
 8009748:	2600      	movs	r6, #0
 800974a:	42a6      	cmp	r6, r4
 800974c:	d105      	bne.n	800975a <__libc_init_array+0x2e>
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	f855 3b04 	ldr.w	r3, [r5], #4
 8009754:	4798      	blx	r3
 8009756:	3601      	adds	r6, #1
 8009758:	e7ee      	b.n	8009738 <__libc_init_array+0xc>
 800975a:	f855 3b04 	ldr.w	r3, [r5], #4
 800975e:	4798      	blx	r3
 8009760:	3601      	adds	r6, #1
 8009762:	e7f2      	b.n	800974a <__libc_init_array+0x1e>
 8009764:	0800c5b8 	.word	0x0800c5b8
 8009768:	0800c5b8 	.word	0x0800c5b8
 800976c:	0800c5b8 	.word	0x0800c5b8
 8009770:	0800c5bc 	.word	0x0800c5bc

08009774 <__retarget_lock_init_recursive>:
 8009774:	4770      	bx	lr

08009776 <__retarget_lock_acquire_recursive>:
 8009776:	4770      	bx	lr

08009778 <__retarget_lock_release_recursive>:
 8009778:	4770      	bx	lr

0800977a <memcpy>:
 800977a:	440a      	add	r2, r1
 800977c:	4291      	cmp	r1, r2
 800977e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009782:	d100      	bne.n	8009786 <memcpy+0xc>
 8009784:	4770      	bx	lr
 8009786:	b510      	push	{r4, lr}
 8009788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800978c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009790:	4291      	cmp	r1, r2
 8009792:	d1f9      	bne.n	8009788 <memcpy+0xe>
 8009794:	bd10      	pop	{r4, pc}
	...

08009798 <nan>:
 8009798:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80097a0 <nan+0x8>
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	00000000 	.word	0x00000000
 80097a4:	7ff80000 	.word	0x7ff80000

080097a8 <nanf>:
 80097a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80097b0 <nanf+0x8>
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	7fc00000 	.word	0x7fc00000

080097b4 <quorem>:
 80097b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	6903      	ldr	r3, [r0, #16]
 80097ba:	690c      	ldr	r4, [r1, #16]
 80097bc:	42a3      	cmp	r3, r4
 80097be:	4607      	mov	r7, r0
 80097c0:	db7e      	blt.n	80098c0 <quorem+0x10c>
 80097c2:	3c01      	subs	r4, #1
 80097c4:	f101 0814 	add.w	r8, r1, #20
 80097c8:	00a3      	lsls	r3, r4, #2
 80097ca:	f100 0514 	add.w	r5, r0, #20
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097de:	3301      	adds	r3, #1
 80097e0:	429a      	cmp	r2, r3
 80097e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80097ea:	d32e      	bcc.n	800984a <quorem+0x96>
 80097ec:	f04f 0a00 	mov.w	sl, #0
 80097f0:	46c4      	mov	ip, r8
 80097f2:	46ae      	mov	lr, r5
 80097f4:	46d3      	mov	fp, sl
 80097f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097fa:	b298      	uxth	r0, r3
 80097fc:	fb06 a000 	mla	r0, r6, r0, sl
 8009800:	0c02      	lsrs	r2, r0, #16
 8009802:	0c1b      	lsrs	r3, r3, #16
 8009804:	fb06 2303 	mla	r3, r6, r3, r2
 8009808:	f8de 2000 	ldr.w	r2, [lr]
 800980c:	b280      	uxth	r0, r0
 800980e:	b292      	uxth	r2, r2
 8009810:	1a12      	subs	r2, r2, r0
 8009812:	445a      	add	r2, fp
 8009814:	f8de 0000 	ldr.w	r0, [lr]
 8009818:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800981c:	b29b      	uxth	r3, r3
 800981e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009822:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009826:	b292      	uxth	r2, r2
 8009828:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800982c:	45e1      	cmp	r9, ip
 800982e:	f84e 2b04 	str.w	r2, [lr], #4
 8009832:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009836:	d2de      	bcs.n	80097f6 <quorem+0x42>
 8009838:	9b00      	ldr	r3, [sp, #0]
 800983a:	58eb      	ldr	r3, [r5, r3]
 800983c:	b92b      	cbnz	r3, 800984a <quorem+0x96>
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	3b04      	subs	r3, #4
 8009842:	429d      	cmp	r5, r3
 8009844:	461a      	mov	r2, r3
 8009846:	d32f      	bcc.n	80098a8 <quorem+0xf4>
 8009848:	613c      	str	r4, [r7, #16]
 800984a:	4638      	mov	r0, r7
 800984c:	f001 fc5a 	bl	800b104 <__mcmp>
 8009850:	2800      	cmp	r0, #0
 8009852:	db25      	blt.n	80098a0 <quorem+0xec>
 8009854:	4629      	mov	r1, r5
 8009856:	2000      	movs	r0, #0
 8009858:	f858 2b04 	ldr.w	r2, [r8], #4
 800985c:	f8d1 c000 	ldr.w	ip, [r1]
 8009860:	fa1f fe82 	uxth.w	lr, r2
 8009864:	fa1f f38c 	uxth.w	r3, ip
 8009868:	eba3 030e 	sub.w	r3, r3, lr
 800986c:	4403      	add	r3, r0
 800986e:	0c12      	lsrs	r2, r2, #16
 8009870:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009874:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009878:	b29b      	uxth	r3, r3
 800987a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800987e:	45c1      	cmp	r9, r8
 8009880:	f841 3b04 	str.w	r3, [r1], #4
 8009884:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009888:	d2e6      	bcs.n	8009858 <quorem+0xa4>
 800988a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800988e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009892:	b922      	cbnz	r2, 800989e <quorem+0xea>
 8009894:	3b04      	subs	r3, #4
 8009896:	429d      	cmp	r5, r3
 8009898:	461a      	mov	r2, r3
 800989a:	d30b      	bcc.n	80098b4 <quorem+0x100>
 800989c:	613c      	str	r4, [r7, #16]
 800989e:	3601      	adds	r6, #1
 80098a0:	4630      	mov	r0, r6
 80098a2:	b003      	add	sp, #12
 80098a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a8:	6812      	ldr	r2, [r2, #0]
 80098aa:	3b04      	subs	r3, #4
 80098ac:	2a00      	cmp	r2, #0
 80098ae:	d1cb      	bne.n	8009848 <quorem+0x94>
 80098b0:	3c01      	subs	r4, #1
 80098b2:	e7c6      	b.n	8009842 <quorem+0x8e>
 80098b4:	6812      	ldr	r2, [r2, #0]
 80098b6:	3b04      	subs	r3, #4
 80098b8:	2a00      	cmp	r2, #0
 80098ba:	d1ef      	bne.n	800989c <quorem+0xe8>
 80098bc:	3c01      	subs	r4, #1
 80098be:	e7ea      	b.n	8009896 <quorem+0xe2>
 80098c0:	2000      	movs	r0, #0
 80098c2:	e7ee      	b.n	80098a2 <quorem+0xee>
 80098c4:	0000      	movs	r0, r0
	...

080098c8 <_dtoa_r>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	69c7      	ldr	r7, [r0, #28]
 80098ce:	b099      	sub	sp, #100	@ 0x64
 80098d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80098d4:	ec55 4b10 	vmov	r4, r5, d0
 80098d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80098da:	9109      	str	r1, [sp, #36]	@ 0x24
 80098dc:	4683      	mov	fp, r0
 80098de:	920e      	str	r2, [sp, #56]	@ 0x38
 80098e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098e2:	b97f      	cbnz	r7, 8009904 <_dtoa_r+0x3c>
 80098e4:	2010      	movs	r0, #16
 80098e6:	f7fe f857 	bl	8007998 <malloc>
 80098ea:	4602      	mov	r2, r0
 80098ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80098f0:	b920      	cbnz	r0, 80098fc <_dtoa_r+0x34>
 80098f2:	4ba7      	ldr	r3, [pc, #668]	@ (8009b90 <_dtoa_r+0x2c8>)
 80098f4:	21ef      	movs	r1, #239	@ 0xef
 80098f6:	48a7      	ldr	r0, [pc, #668]	@ (8009b94 <_dtoa_r+0x2cc>)
 80098f8:	f002 f898 	bl	800ba2c <__assert_func>
 80098fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009900:	6007      	str	r7, [r0, #0]
 8009902:	60c7      	str	r7, [r0, #12]
 8009904:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009908:	6819      	ldr	r1, [r3, #0]
 800990a:	b159      	cbz	r1, 8009924 <_dtoa_r+0x5c>
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	604a      	str	r2, [r1, #4]
 8009910:	2301      	movs	r3, #1
 8009912:	4093      	lsls	r3, r2
 8009914:	608b      	str	r3, [r1, #8]
 8009916:	4658      	mov	r0, fp
 8009918:	f001 f970 	bl	800abfc <_Bfree>
 800991c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009920:	2200      	movs	r2, #0
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	1e2b      	subs	r3, r5, #0
 8009926:	bfb9      	ittee	lt
 8009928:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800992c:	9303      	strlt	r3, [sp, #12]
 800992e:	2300      	movge	r3, #0
 8009930:	6033      	strge	r3, [r6, #0]
 8009932:	9f03      	ldr	r7, [sp, #12]
 8009934:	4b98      	ldr	r3, [pc, #608]	@ (8009b98 <_dtoa_r+0x2d0>)
 8009936:	bfbc      	itt	lt
 8009938:	2201      	movlt	r2, #1
 800993a:	6032      	strlt	r2, [r6, #0]
 800993c:	43bb      	bics	r3, r7
 800993e:	d112      	bne.n	8009966 <_dtoa_r+0x9e>
 8009940:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009942:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800994c:	4323      	orrs	r3, r4
 800994e:	f000 854d 	beq.w	800a3ec <_dtoa_r+0xb24>
 8009952:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009954:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009bac <_dtoa_r+0x2e4>
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 854f 	beq.w	800a3fc <_dtoa_r+0xb34>
 800995e:	f10a 0303 	add.w	r3, sl, #3
 8009962:	f000 bd49 	b.w	800a3f8 <_dtoa_r+0xb30>
 8009966:	ed9d 7b02 	vldr	d7, [sp, #8]
 800996a:	2200      	movs	r2, #0
 800996c:	ec51 0b17 	vmov	r0, r1, d7
 8009970:	2300      	movs	r3, #0
 8009972:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009976:	f7f7 f8c7 	bl	8000b08 <__aeabi_dcmpeq>
 800997a:	4680      	mov	r8, r0
 800997c:	b158      	cbz	r0, 8009996 <_dtoa_r+0xce>
 800997e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009980:	2301      	movs	r3, #1
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009986:	b113      	cbz	r3, 800998e <_dtoa_r+0xc6>
 8009988:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800998a:	4b84      	ldr	r3, [pc, #528]	@ (8009b9c <_dtoa_r+0x2d4>)
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009bb0 <_dtoa_r+0x2e8>
 8009992:	f000 bd33 	b.w	800a3fc <_dtoa_r+0xb34>
 8009996:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800999a:	aa16      	add	r2, sp, #88	@ 0x58
 800999c:	a917      	add	r1, sp, #92	@ 0x5c
 800999e:	4658      	mov	r0, fp
 80099a0:	f001 fcd0 	bl	800b344 <__d2b>
 80099a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80099a8:	4681      	mov	r9, r0
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	d077      	beq.n	8009a9e <_dtoa_r+0x1d6>
 80099ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80099b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80099c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80099c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80099c8:	4619      	mov	r1, r3
 80099ca:	2200      	movs	r2, #0
 80099cc:	4b74      	ldr	r3, [pc, #464]	@ (8009ba0 <_dtoa_r+0x2d8>)
 80099ce:	f7f6 fc7b 	bl	80002c8 <__aeabi_dsub>
 80099d2:	a369      	add	r3, pc, #420	@ (adr r3, 8009b78 <_dtoa_r+0x2b0>)
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f7f6 fe2e 	bl	8000638 <__aeabi_dmul>
 80099dc:	a368      	add	r3, pc, #416	@ (adr r3, 8009b80 <_dtoa_r+0x2b8>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	f7f6 fc73 	bl	80002cc <__adddf3>
 80099e6:	4604      	mov	r4, r0
 80099e8:	4630      	mov	r0, r6
 80099ea:	460d      	mov	r5, r1
 80099ec:	f7f6 fdba 	bl	8000564 <__aeabi_i2d>
 80099f0:	a365      	add	r3, pc, #404	@ (adr r3, 8009b88 <_dtoa_r+0x2c0>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	f7f6 fe1f 	bl	8000638 <__aeabi_dmul>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4620      	mov	r0, r4
 8009a00:	4629      	mov	r1, r5
 8009a02:	f7f6 fc63 	bl	80002cc <__adddf3>
 8009a06:	4604      	mov	r4, r0
 8009a08:	460d      	mov	r5, r1
 8009a0a:	f7f7 f8c5 	bl	8000b98 <__aeabi_d2iz>
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4607      	mov	r7, r0
 8009a12:	2300      	movs	r3, #0
 8009a14:	4620      	mov	r0, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7f7 f880 	bl	8000b1c <__aeabi_dcmplt>
 8009a1c:	b140      	cbz	r0, 8009a30 <_dtoa_r+0x168>
 8009a1e:	4638      	mov	r0, r7
 8009a20:	f7f6 fda0 	bl	8000564 <__aeabi_i2d>
 8009a24:	4622      	mov	r2, r4
 8009a26:	462b      	mov	r3, r5
 8009a28:	f7f7 f86e 	bl	8000b08 <__aeabi_dcmpeq>
 8009a2c:	b900      	cbnz	r0, 8009a30 <_dtoa_r+0x168>
 8009a2e:	3f01      	subs	r7, #1
 8009a30:	2f16      	cmp	r7, #22
 8009a32:	d851      	bhi.n	8009ad8 <_dtoa_r+0x210>
 8009a34:	4b5b      	ldr	r3, [pc, #364]	@ (8009ba4 <_dtoa_r+0x2dc>)
 8009a36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a42:	f7f7 f86b 	bl	8000b1c <__aeabi_dcmplt>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d048      	beq.n	8009adc <_dtoa_r+0x214>
 8009a4a:	3f01      	subs	r7, #1
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a52:	1b9b      	subs	r3, r3, r6
 8009a54:	1e5a      	subs	r2, r3, #1
 8009a56:	bf44      	itt	mi
 8009a58:	f1c3 0801 	rsbmi	r8, r3, #1
 8009a5c:	2300      	movmi	r3, #0
 8009a5e:	9208      	str	r2, [sp, #32]
 8009a60:	bf54      	ite	pl
 8009a62:	f04f 0800 	movpl.w	r8, #0
 8009a66:	9308      	strmi	r3, [sp, #32]
 8009a68:	2f00      	cmp	r7, #0
 8009a6a:	db39      	blt.n	8009ae0 <_dtoa_r+0x218>
 8009a6c:	9b08      	ldr	r3, [sp, #32]
 8009a6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009a70:	443b      	add	r3, r7
 8009a72:	9308      	str	r3, [sp, #32]
 8009a74:	2300      	movs	r3, #0
 8009a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a7a:	2b09      	cmp	r3, #9
 8009a7c:	d864      	bhi.n	8009b48 <_dtoa_r+0x280>
 8009a7e:	2b05      	cmp	r3, #5
 8009a80:	bfc4      	itt	gt
 8009a82:	3b04      	subgt	r3, #4
 8009a84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a88:	f1a3 0302 	sub.w	r3, r3, #2
 8009a8c:	bfcc      	ite	gt
 8009a8e:	2400      	movgt	r4, #0
 8009a90:	2401      	movle	r4, #1
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d863      	bhi.n	8009b5e <_dtoa_r+0x296>
 8009a96:	e8df f003 	tbb	[pc, r3]
 8009a9a:	372a      	.short	0x372a
 8009a9c:	5535      	.short	0x5535
 8009a9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009aa2:	441e      	add	r6, r3
 8009aa4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009aa8:	2b20      	cmp	r3, #32
 8009aaa:	bfc1      	itttt	gt
 8009aac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ab0:	409f      	lslgt	r7, r3
 8009ab2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009ab6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009aba:	bfd6      	itet	le
 8009abc:	f1c3 0320 	rsble	r3, r3, #32
 8009ac0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009ac4:	fa04 f003 	lslle.w	r0, r4, r3
 8009ac8:	f7f6 fd3c 	bl	8000544 <__aeabi_ui2d>
 8009acc:	2201      	movs	r2, #1
 8009ace:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ad2:	3e01      	subs	r6, #1
 8009ad4:	9214      	str	r2, [sp, #80]	@ 0x50
 8009ad6:	e777      	b.n	80099c8 <_dtoa_r+0x100>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e7b8      	b.n	8009a4e <_dtoa_r+0x186>
 8009adc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ade:	e7b7      	b.n	8009a50 <_dtoa_r+0x188>
 8009ae0:	427b      	negs	r3, r7
 8009ae2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	eba8 0807 	sub.w	r8, r8, r7
 8009aea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aec:	e7c4      	b.n	8009a78 <_dtoa_r+0x1b0>
 8009aee:	2300      	movs	r3, #0
 8009af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dc35      	bgt.n	8009b64 <_dtoa_r+0x29c>
 8009af8:	2301      	movs	r3, #1
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	9307      	str	r3, [sp, #28]
 8009afe:	461a      	mov	r2, r3
 8009b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b02:	e00b      	b.n	8009b1c <_dtoa_r+0x254>
 8009b04:	2301      	movs	r3, #1
 8009b06:	e7f3      	b.n	8009af0 <_dtoa_r+0x228>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b0e:	18fb      	adds	r3, r7, r3
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	9307      	str	r3, [sp, #28]
 8009b18:	bfb8      	it	lt
 8009b1a:	2301      	movlt	r3, #1
 8009b1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009b20:	2100      	movs	r1, #0
 8009b22:	2204      	movs	r2, #4
 8009b24:	f102 0514 	add.w	r5, r2, #20
 8009b28:	429d      	cmp	r5, r3
 8009b2a:	d91f      	bls.n	8009b6c <_dtoa_r+0x2a4>
 8009b2c:	6041      	str	r1, [r0, #4]
 8009b2e:	4658      	mov	r0, fp
 8009b30:	f001 f824 	bl	800ab7c <_Balloc>
 8009b34:	4682      	mov	sl, r0
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d13c      	bne.n	8009bb4 <_dtoa_r+0x2ec>
 8009b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ba8 <_dtoa_r+0x2e0>)
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b42:	e6d8      	b.n	80098f6 <_dtoa_r+0x2e>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e7e0      	b.n	8009b0a <_dtoa_r+0x242>
 8009b48:	2401      	movs	r4, #1
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009b50:	f04f 33ff 	mov.w	r3, #4294967295
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	9307      	str	r3, [sp, #28]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2312      	movs	r3, #18
 8009b5c:	e7d0      	b.n	8009b00 <_dtoa_r+0x238>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b62:	e7f5      	b.n	8009b50 <_dtoa_r+0x288>
 8009b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	9307      	str	r3, [sp, #28]
 8009b6a:	e7d7      	b.n	8009b1c <_dtoa_r+0x254>
 8009b6c:	3101      	adds	r1, #1
 8009b6e:	0052      	lsls	r2, r2, #1
 8009b70:	e7d8      	b.n	8009b24 <_dtoa_r+0x25c>
 8009b72:	bf00      	nop
 8009b74:	f3af 8000 	nop.w
 8009b78:	636f4361 	.word	0x636f4361
 8009b7c:	3fd287a7 	.word	0x3fd287a7
 8009b80:	8b60c8b3 	.word	0x8b60c8b3
 8009b84:	3fc68a28 	.word	0x3fc68a28
 8009b88:	509f79fb 	.word	0x509f79fb
 8009b8c:	3fd34413 	.word	0x3fd34413
 8009b90:	0800c226 	.word	0x0800c226
 8009b94:	0800c23d 	.word	0x0800c23d
 8009b98:	7ff00000 	.word	0x7ff00000
 8009b9c:	0800c1e9 	.word	0x0800c1e9
 8009ba0:	3ff80000 	.word	0x3ff80000
 8009ba4:	0800c398 	.word	0x0800c398
 8009ba8:	0800c295 	.word	0x0800c295
 8009bac:	0800c222 	.word	0x0800c222
 8009bb0:	0800c1e8 	.word	0x0800c1e8
 8009bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bb8:	6018      	str	r0, [r3, #0]
 8009bba:	9b07      	ldr	r3, [sp, #28]
 8009bbc:	2b0e      	cmp	r3, #14
 8009bbe:	f200 80a4 	bhi.w	8009d0a <_dtoa_r+0x442>
 8009bc2:	2c00      	cmp	r4, #0
 8009bc4:	f000 80a1 	beq.w	8009d0a <_dtoa_r+0x442>
 8009bc8:	2f00      	cmp	r7, #0
 8009bca:	dd33      	ble.n	8009c34 <_dtoa_r+0x36c>
 8009bcc:	4bad      	ldr	r3, [pc, #692]	@ (8009e84 <_dtoa_r+0x5bc>)
 8009bce:	f007 020f 	and.w	r2, r7, #15
 8009bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bd6:	ed93 7b00 	vldr	d7, [r3]
 8009bda:	05f8      	lsls	r0, r7, #23
 8009bdc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009be0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009be4:	d516      	bpl.n	8009c14 <_dtoa_r+0x34c>
 8009be6:	4ba8      	ldr	r3, [pc, #672]	@ (8009e88 <_dtoa_r+0x5c0>)
 8009be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bf0:	f7f6 fe4c 	bl	800088c <__aeabi_ddiv>
 8009bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf8:	f004 040f 	and.w	r4, r4, #15
 8009bfc:	2603      	movs	r6, #3
 8009bfe:	4da2      	ldr	r5, [pc, #648]	@ (8009e88 <_dtoa_r+0x5c0>)
 8009c00:	b954      	cbnz	r4, 8009c18 <_dtoa_r+0x350>
 8009c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c0a:	f7f6 fe3f 	bl	800088c <__aeabi_ddiv>
 8009c0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c12:	e028      	b.n	8009c66 <_dtoa_r+0x39e>
 8009c14:	2602      	movs	r6, #2
 8009c16:	e7f2      	b.n	8009bfe <_dtoa_r+0x336>
 8009c18:	07e1      	lsls	r1, r4, #31
 8009c1a:	d508      	bpl.n	8009c2e <_dtoa_r+0x366>
 8009c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c24:	f7f6 fd08 	bl	8000638 <__aeabi_dmul>
 8009c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c2c:	3601      	adds	r6, #1
 8009c2e:	1064      	asrs	r4, r4, #1
 8009c30:	3508      	adds	r5, #8
 8009c32:	e7e5      	b.n	8009c00 <_dtoa_r+0x338>
 8009c34:	f000 80d2 	beq.w	8009ddc <_dtoa_r+0x514>
 8009c38:	427c      	negs	r4, r7
 8009c3a:	4b92      	ldr	r3, [pc, #584]	@ (8009e84 <_dtoa_r+0x5bc>)
 8009c3c:	4d92      	ldr	r5, [pc, #584]	@ (8009e88 <_dtoa_r+0x5c0>)
 8009c3e:	f004 020f 	and.w	r2, r4, #15
 8009c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c4e:	f7f6 fcf3 	bl	8000638 <__aeabi_dmul>
 8009c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c56:	1124      	asrs	r4, r4, #4
 8009c58:	2300      	movs	r3, #0
 8009c5a:	2602      	movs	r6, #2
 8009c5c:	2c00      	cmp	r4, #0
 8009c5e:	f040 80b2 	bne.w	8009dc6 <_dtoa_r+0x4fe>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1d3      	bne.n	8009c0e <_dtoa_r+0x346>
 8009c66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 80b7 	beq.w	8009de0 <_dtoa_r+0x518>
 8009c72:	4b86      	ldr	r3, [pc, #536]	@ (8009e8c <_dtoa_r+0x5c4>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	4620      	mov	r0, r4
 8009c78:	4629      	mov	r1, r5
 8009c7a:	f7f6 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f000 80ae 	beq.w	8009de0 <_dtoa_r+0x518>
 8009c84:	9b07      	ldr	r3, [sp, #28]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 80aa 	beq.w	8009de0 <_dtoa_r+0x518>
 8009c8c:	9b00      	ldr	r3, [sp, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	dd37      	ble.n	8009d02 <_dtoa_r+0x43a>
 8009c92:	1e7b      	subs	r3, r7, #1
 8009c94:	9304      	str	r3, [sp, #16]
 8009c96:	4620      	mov	r0, r4
 8009c98:	4b7d      	ldr	r3, [pc, #500]	@ (8009e90 <_dtoa_r+0x5c8>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	f7f6 fccb 	bl	8000638 <__aeabi_dmul>
 8009ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca6:	9c00      	ldr	r4, [sp, #0]
 8009ca8:	3601      	adds	r6, #1
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7f6 fc5a 	bl	8000564 <__aeabi_i2d>
 8009cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cb4:	f7f6 fcc0 	bl	8000638 <__aeabi_dmul>
 8009cb8:	4b76      	ldr	r3, [pc, #472]	@ (8009e94 <_dtoa_r+0x5cc>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f7f6 fb06 	bl	80002cc <__adddf3>
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	f040 808d 	bne.w	8009de6 <_dtoa_r+0x51e>
 8009ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cd0:	4b71      	ldr	r3, [pc, #452]	@ (8009e98 <_dtoa_r+0x5d0>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f7f6 faf8 	bl	80002c8 <__aeabi_dsub>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ce0:	462a      	mov	r2, r5
 8009ce2:	4633      	mov	r3, r6
 8009ce4:	f7f6 ff38 	bl	8000b58 <__aeabi_dcmpgt>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f040 828b 	bne.w	800a204 <_dtoa_r+0x93c>
 8009cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009cf8:	f7f6 ff10 	bl	8000b1c <__aeabi_dcmplt>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f040 8128 	bne.w	8009f52 <_dtoa_r+0x68a>
 8009d02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009d06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f2c0 815a 	blt.w	8009fc6 <_dtoa_r+0x6fe>
 8009d12:	2f0e      	cmp	r7, #14
 8009d14:	f300 8157 	bgt.w	8009fc6 <_dtoa_r+0x6fe>
 8009d18:	4b5a      	ldr	r3, [pc, #360]	@ (8009e84 <_dtoa_r+0x5bc>)
 8009d1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d1e:	ed93 7b00 	vldr	d7, [r3]
 8009d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	ed8d 7b00 	vstr	d7, [sp]
 8009d2a:	da03      	bge.n	8009d34 <_dtoa_r+0x46c>
 8009d2c:	9b07      	ldr	r3, [sp, #28]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f340 8101 	ble.w	8009f36 <_dtoa_r+0x66e>
 8009d34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d38:	4656      	mov	r6, sl
 8009d3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4629      	mov	r1, r5
 8009d42:	f7f6 fda3 	bl	800088c <__aeabi_ddiv>
 8009d46:	f7f6 ff27 	bl	8000b98 <__aeabi_d2iz>
 8009d4a:	4680      	mov	r8, r0
 8009d4c:	f7f6 fc0a 	bl	8000564 <__aeabi_i2d>
 8009d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d54:	f7f6 fc70 	bl	8000638 <__aeabi_dmul>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009d64:	f7f6 fab0 	bl	80002c8 <__aeabi_dsub>
 8009d68:	f806 4b01 	strb.w	r4, [r6], #1
 8009d6c:	9d07      	ldr	r5, [sp, #28]
 8009d6e:	eba6 040a 	sub.w	r4, r6, sl
 8009d72:	42a5      	cmp	r5, r4
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	f040 8117 	bne.w	8009faa <_dtoa_r+0x6e2>
 8009d7c:	f7f6 faa6 	bl	80002cc <__adddf3>
 8009d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d84:	4604      	mov	r4, r0
 8009d86:	460d      	mov	r5, r1
 8009d88:	f7f6 fee6 	bl	8000b58 <__aeabi_dcmpgt>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	f040 80f9 	bne.w	8009f84 <_dtoa_r+0x6bc>
 8009d92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	f7f6 feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8009d9e:	b118      	cbz	r0, 8009da8 <_dtoa_r+0x4e0>
 8009da0:	f018 0f01 	tst.w	r8, #1
 8009da4:	f040 80ee 	bne.w	8009f84 <_dtoa_r+0x6bc>
 8009da8:	4649      	mov	r1, r9
 8009daa:	4658      	mov	r0, fp
 8009dac:	f000 ff26 	bl	800abfc <_Bfree>
 8009db0:	2300      	movs	r3, #0
 8009db2:	7033      	strb	r3, [r6, #0]
 8009db4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009db6:	3701      	adds	r7, #1
 8009db8:	601f      	str	r7, [r3, #0]
 8009dba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 831d 	beq.w	800a3fc <_dtoa_r+0xb34>
 8009dc2:	601e      	str	r6, [r3, #0]
 8009dc4:	e31a      	b.n	800a3fc <_dtoa_r+0xb34>
 8009dc6:	07e2      	lsls	r2, r4, #31
 8009dc8:	d505      	bpl.n	8009dd6 <_dtoa_r+0x50e>
 8009dca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009dce:	f7f6 fc33 	bl	8000638 <__aeabi_dmul>
 8009dd2:	3601      	adds	r6, #1
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	1064      	asrs	r4, r4, #1
 8009dd8:	3508      	adds	r5, #8
 8009dda:	e73f      	b.n	8009c5c <_dtoa_r+0x394>
 8009ddc:	2602      	movs	r6, #2
 8009dde:	e742      	b.n	8009c66 <_dtoa_r+0x39e>
 8009de0:	9c07      	ldr	r4, [sp, #28]
 8009de2:	9704      	str	r7, [sp, #16]
 8009de4:	e761      	b.n	8009caa <_dtoa_r+0x3e2>
 8009de6:	4b27      	ldr	r3, [pc, #156]	@ (8009e84 <_dtoa_r+0x5bc>)
 8009de8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009dea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009df2:	4454      	add	r4, sl
 8009df4:	2900      	cmp	r1, #0
 8009df6:	d053      	beq.n	8009ea0 <_dtoa_r+0x5d8>
 8009df8:	4928      	ldr	r1, [pc, #160]	@ (8009e9c <_dtoa_r+0x5d4>)
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	f7f6 fd46 	bl	800088c <__aeabi_ddiv>
 8009e00:	4633      	mov	r3, r6
 8009e02:	462a      	mov	r2, r5
 8009e04:	f7f6 fa60 	bl	80002c8 <__aeabi_dsub>
 8009e08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e0c:	4656      	mov	r6, sl
 8009e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e12:	f7f6 fec1 	bl	8000b98 <__aeabi_d2iz>
 8009e16:	4605      	mov	r5, r0
 8009e18:	f7f6 fba4 	bl	8000564 <__aeabi_i2d>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e24:	f7f6 fa50 	bl	80002c8 <__aeabi_dsub>
 8009e28:	3530      	adds	r5, #48	@ 0x30
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e32:	f806 5b01 	strb.w	r5, [r6], #1
 8009e36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e3a:	f7f6 fe6f 	bl	8000b1c <__aeabi_dcmplt>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d171      	bne.n	8009f26 <_dtoa_r+0x65e>
 8009e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e46:	4911      	ldr	r1, [pc, #68]	@ (8009e8c <_dtoa_r+0x5c4>)
 8009e48:	2000      	movs	r0, #0
 8009e4a:	f7f6 fa3d 	bl	80002c8 <__aeabi_dsub>
 8009e4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e52:	f7f6 fe63 	bl	8000b1c <__aeabi_dcmplt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f040 8095 	bne.w	8009f86 <_dtoa_r+0x6be>
 8009e5c:	42a6      	cmp	r6, r4
 8009e5e:	f43f af50 	beq.w	8009d02 <_dtoa_r+0x43a>
 8009e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009e66:	4b0a      	ldr	r3, [pc, #40]	@ (8009e90 <_dtoa_r+0x5c8>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f7f6 fbe5 	bl	8000638 <__aeabi_dmul>
 8009e6e:	4b08      	ldr	r3, [pc, #32]	@ (8009e90 <_dtoa_r+0x5c8>)
 8009e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e74:	2200      	movs	r2, #0
 8009e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e7a:	f7f6 fbdd 	bl	8000638 <__aeabi_dmul>
 8009e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e82:	e7c4      	b.n	8009e0e <_dtoa_r+0x546>
 8009e84:	0800c398 	.word	0x0800c398
 8009e88:	0800c370 	.word	0x0800c370
 8009e8c:	3ff00000 	.word	0x3ff00000
 8009e90:	40240000 	.word	0x40240000
 8009e94:	401c0000 	.word	0x401c0000
 8009e98:	40140000 	.word	0x40140000
 8009e9c:	3fe00000 	.word	0x3fe00000
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f7f6 fbc8 	bl	8000638 <__aeabi_dmul>
 8009ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009eac:	9415      	str	r4, [sp, #84]	@ 0x54
 8009eae:	4656      	mov	r6, sl
 8009eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eb4:	f7f6 fe70 	bl	8000b98 <__aeabi_d2iz>
 8009eb8:	4605      	mov	r5, r0
 8009eba:	f7f6 fb53 	bl	8000564 <__aeabi_i2d>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ec6:	f7f6 f9ff 	bl	80002c8 <__aeabi_dsub>
 8009eca:	3530      	adds	r5, #48	@ 0x30
 8009ecc:	f806 5b01 	strb.w	r5, [r6], #1
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	42a6      	cmp	r6, r4
 8009ed6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009eda:	f04f 0200 	mov.w	r2, #0
 8009ede:	d124      	bne.n	8009f2a <_dtoa_r+0x662>
 8009ee0:	4bac      	ldr	r3, [pc, #688]	@ (800a194 <_dtoa_r+0x8cc>)
 8009ee2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ee6:	f7f6 f9f1 	bl	80002cc <__adddf3>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ef2:	f7f6 fe31 	bl	8000b58 <__aeabi_dcmpgt>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d145      	bne.n	8009f86 <_dtoa_r+0x6be>
 8009efa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009efe:	49a5      	ldr	r1, [pc, #660]	@ (800a194 <_dtoa_r+0x8cc>)
 8009f00:	2000      	movs	r0, #0
 8009f02:	f7f6 f9e1 	bl	80002c8 <__aeabi_dsub>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f0e:	f7f6 fe05 	bl	8000b1c <__aeabi_dcmplt>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	f43f aef5 	beq.w	8009d02 <_dtoa_r+0x43a>
 8009f18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009f1a:	1e73      	subs	r3, r6, #1
 8009f1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f22:	2b30      	cmp	r3, #48	@ 0x30
 8009f24:	d0f8      	beq.n	8009f18 <_dtoa_r+0x650>
 8009f26:	9f04      	ldr	r7, [sp, #16]
 8009f28:	e73e      	b.n	8009da8 <_dtoa_r+0x4e0>
 8009f2a:	4b9b      	ldr	r3, [pc, #620]	@ (800a198 <_dtoa_r+0x8d0>)
 8009f2c:	f7f6 fb84 	bl	8000638 <__aeabi_dmul>
 8009f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f34:	e7bc      	b.n	8009eb0 <_dtoa_r+0x5e8>
 8009f36:	d10c      	bne.n	8009f52 <_dtoa_r+0x68a>
 8009f38:	4b98      	ldr	r3, [pc, #608]	@ (800a19c <_dtoa_r+0x8d4>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f40:	f7f6 fb7a 	bl	8000638 <__aeabi_dmul>
 8009f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f48:	f7f6 fdfc 	bl	8000b44 <__aeabi_dcmpge>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	f000 8157 	beq.w	800a200 <_dtoa_r+0x938>
 8009f52:	2400      	movs	r4, #0
 8009f54:	4625      	mov	r5, r4
 8009f56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	4656      	mov	r6, sl
 8009f5e:	2700      	movs	r7, #0
 8009f60:	4621      	mov	r1, r4
 8009f62:	4658      	mov	r0, fp
 8009f64:	f000 fe4a 	bl	800abfc <_Bfree>
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	d0dc      	beq.n	8009f26 <_dtoa_r+0x65e>
 8009f6c:	b12f      	cbz	r7, 8009f7a <_dtoa_r+0x6b2>
 8009f6e:	42af      	cmp	r7, r5
 8009f70:	d003      	beq.n	8009f7a <_dtoa_r+0x6b2>
 8009f72:	4639      	mov	r1, r7
 8009f74:	4658      	mov	r0, fp
 8009f76:	f000 fe41 	bl	800abfc <_Bfree>
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	4658      	mov	r0, fp
 8009f7e:	f000 fe3d 	bl	800abfc <_Bfree>
 8009f82:	e7d0      	b.n	8009f26 <_dtoa_r+0x65e>
 8009f84:	9704      	str	r7, [sp, #16]
 8009f86:	4633      	mov	r3, r6
 8009f88:	461e      	mov	r6, r3
 8009f8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f8e:	2a39      	cmp	r2, #57	@ 0x39
 8009f90:	d107      	bne.n	8009fa2 <_dtoa_r+0x6da>
 8009f92:	459a      	cmp	sl, r3
 8009f94:	d1f8      	bne.n	8009f88 <_dtoa_r+0x6c0>
 8009f96:	9a04      	ldr	r2, [sp, #16]
 8009f98:	3201      	adds	r2, #1
 8009f9a:	9204      	str	r2, [sp, #16]
 8009f9c:	2230      	movs	r2, #48	@ 0x30
 8009f9e:	f88a 2000 	strb.w	r2, [sl]
 8009fa2:	781a      	ldrb	r2, [r3, #0]
 8009fa4:	3201      	adds	r2, #1
 8009fa6:	701a      	strb	r2, [r3, #0]
 8009fa8:	e7bd      	b.n	8009f26 <_dtoa_r+0x65e>
 8009faa:	4b7b      	ldr	r3, [pc, #492]	@ (800a198 <_dtoa_r+0x8d0>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	f7f6 fb43 	bl	8000638 <__aeabi_dmul>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	460d      	mov	r5, r1
 8009fba:	f7f6 fda5 	bl	8000b08 <__aeabi_dcmpeq>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	f43f aebb 	beq.w	8009d3a <_dtoa_r+0x472>
 8009fc4:	e6f0      	b.n	8009da8 <_dtoa_r+0x4e0>
 8009fc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009fc8:	2a00      	cmp	r2, #0
 8009fca:	f000 80db 	beq.w	800a184 <_dtoa_r+0x8bc>
 8009fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fd0:	2a01      	cmp	r2, #1
 8009fd2:	f300 80bf 	bgt.w	800a154 <_dtoa_r+0x88c>
 8009fd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009fd8:	2a00      	cmp	r2, #0
 8009fda:	f000 80b7 	beq.w	800a14c <_dtoa_r+0x884>
 8009fde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009fe2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fe4:	4646      	mov	r6, r8
 8009fe6:	9a08      	ldr	r2, [sp, #32]
 8009fe8:	2101      	movs	r1, #1
 8009fea:	441a      	add	r2, r3
 8009fec:	4658      	mov	r0, fp
 8009fee:	4498      	add	r8, r3
 8009ff0:	9208      	str	r2, [sp, #32]
 8009ff2:	f000 ff01 	bl	800adf8 <__i2b>
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	b15e      	cbz	r6, 800a012 <_dtoa_r+0x74a>
 8009ffa:	9b08      	ldr	r3, [sp, #32]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	dd08      	ble.n	800a012 <_dtoa_r+0x74a>
 800a000:	42b3      	cmp	r3, r6
 800a002:	9a08      	ldr	r2, [sp, #32]
 800a004:	bfa8      	it	ge
 800a006:	4633      	movge	r3, r6
 800a008:	eba8 0803 	sub.w	r8, r8, r3
 800a00c:	1af6      	subs	r6, r6, r3
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	9308      	str	r3, [sp, #32]
 800a012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a014:	b1f3      	cbz	r3, 800a054 <_dtoa_r+0x78c>
 800a016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 80b7 	beq.w	800a18c <_dtoa_r+0x8c4>
 800a01e:	b18c      	cbz	r4, 800a044 <_dtoa_r+0x77c>
 800a020:	4629      	mov	r1, r5
 800a022:	4622      	mov	r2, r4
 800a024:	4658      	mov	r0, fp
 800a026:	f000 ffa7 	bl	800af78 <__pow5mult>
 800a02a:	464a      	mov	r2, r9
 800a02c:	4601      	mov	r1, r0
 800a02e:	4605      	mov	r5, r0
 800a030:	4658      	mov	r0, fp
 800a032:	f000 fef7 	bl	800ae24 <__multiply>
 800a036:	4649      	mov	r1, r9
 800a038:	9004      	str	r0, [sp, #16]
 800a03a:	4658      	mov	r0, fp
 800a03c:	f000 fdde 	bl	800abfc <_Bfree>
 800a040:	9b04      	ldr	r3, [sp, #16]
 800a042:	4699      	mov	r9, r3
 800a044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a046:	1b1a      	subs	r2, r3, r4
 800a048:	d004      	beq.n	800a054 <_dtoa_r+0x78c>
 800a04a:	4649      	mov	r1, r9
 800a04c:	4658      	mov	r0, fp
 800a04e:	f000 ff93 	bl	800af78 <__pow5mult>
 800a052:	4681      	mov	r9, r0
 800a054:	2101      	movs	r1, #1
 800a056:	4658      	mov	r0, fp
 800a058:	f000 fece 	bl	800adf8 <__i2b>
 800a05c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a05e:	4604      	mov	r4, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 81cf 	beq.w	800a404 <_dtoa_r+0xb3c>
 800a066:	461a      	mov	r2, r3
 800a068:	4601      	mov	r1, r0
 800a06a:	4658      	mov	r0, fp
 800a06c:	f000 ff84 	bl	800af78 <__pow5mult>
 800a070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a072:	2b01      	cmp	r3, #1
 800a074:	4604      	mov	r4, r0
 800a076:	f300 8095 	bgt.w	800a1a4 <_dtoa_r+0x8dc>
 800a07a:	9b02      	ldr	r3, [sp, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f040 8087 	bne.w	800a190 <_dtoa_r+0x8c8>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f040 8089 	bne.w	800a1a0 <_dtoa_r+0x8d8>
 800a08e:	9b03      	ldr	r3, [sp, #12]
 800a090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a094:	0d1b      	lsrs	r3, r3, #20
 800a096:	051b      	lsls	r3, r3, #20
 800a098:	b12b      	cbz	r3, 800a0a6 <_dtoa_r+0x7de>
 800a09a:	9b08      	ldr	r3, [sp, #32]
 800a09c:	3301      	adds	r3, #1
 800a09e:	9308      	str	r3, [sp, #32]
 800a0a0:	f108 0801 	add.w	r8, r8, #1
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 81b0 	beq.w	800a410 <_dtoa_r+0xb48>
 800a0b0:	6923      	ldr	r3, [r4, #16]
 800a0b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0b6:	6918      	ldr	r0, [r3, #16]
 800a0b8:	f000 fe52 	bl	800ad60 <__hi0bits>
 800a0bc:	f1c0 0020 	rsb	r0, r0, #32
 800a0c0:	9b08      	ldr	r3, [sp, #32]
 800a0c2:	4418      	add	r0, r3
 800a0c4:	f010 001f 	ands.w	r0, r0, #31
 800a0c8:	d077      	beq.n	800a1ba <_dtoa_r+0x8f2>
 800a0ca:	f1c0 0320 	rsb	r3, r0, #32
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	dd6b      	ble.n	800a1aa <_dtoa_r+0x8e2>
 800a0d2:	9b08      	ldr	r3, [sp, #32]
 800a0d4:	f1c0 001c 	rsb	r0, r0, #28
 800a0d8:	4403      	add	r3, r0
 800a0da:	4480      	add	r8, r0
 800a0dc:	4406      	add	r6, r0
 800a0de:	9308      	str	r3, [sp, #32]
 800a0e0:	f1b8 0f00 	cmp.w	r8, #0
 800a0e4:	dd05      	ble.n	800a0f2 <_dtoa_r+0x82a>
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	4658      	mov	r0, fp
 800a0ec:	f000 ff9e 	bl	800b02c <__lshift>
 800a0f0:	4681      	mov	r9, r0
 800a0f2:	9b08      	ldr	r3, [sp, #32]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd05      	ble.n	800a104 <_dtoa_r+0x83c>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4658      	mov	r0, fp
 800a0fe:	f000 ff95 	bl	800b02c <__lshift>
 800a102:	4604      	mov	r4, r0
 800a104:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a106:	2b00      	cmp	r3, #0
 800a108:	d059      	beq.n	800a1be <_dtoa_r+0x8f6>
 800a10a:	4621      	mov	r1, r4
 800a10c:	4648      	mov	r0, r9
 800a10e:	f000 fff9 	bl	800b104 <__mcmp>
 800a112:	2800      	cmp	r0, #0
 800a114:	da53      	bge.n	800a1be <_dtoa_r+0x8f6>
 800a116:	1e7b      	subs	r3, r7, #1
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	4649      	mov	r1, r9
 800a11c:	2300      	movs	r3, #0
 800a11e:	220a      	movs	r2, #10
 800a120:	4658      	mov	r0, fp
 800a122:	f000 fd8d 	bl	800ac40 <__multadd>
 800a126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a128:	4681      	mov	r9, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f000 8172 	beq.w	800a414 <_dtoa_r+0xb4c>
 800a130:	2300      	movs	r3, #0
 800a132:	4629      	mov	r1, r5
 800a134:	220a      	movs	r2, #10
 800a136:	4658      	mov	r0, fp
 800a138:	f000 fd82 	bl	800ac40 <__multadd>
 800a13c:	9b00      	ldr	r3, [sp, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	4605      	mov	r5, r0
 800a142:	dc67      	bgt.n	800a214 <_dtoa_r+0x94c>
 800a144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a146:	2b02      	cmp	r3, #2
 800a148:	dc41      	bgt.n	800a1ce <_dtoa_r+0x906>
 800a14a:	e063      	b.n	800a214 <_dtoa_r+0x94c>
 800a14c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a14e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a152:	e746      	b.n	8009fe2 <_dtoa_r+0x71a>
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	1e5c      	subs	r4, r3, #1
 800a158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a15a:	42a3      	cmp	r3, r4
 800a15c:	bfbf      	itttt	lt
 800a15e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a160:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a162:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a164:	1ae3      	sublt	r3, r4, r3
 800a166:	bfb4      	ite	lt
 800a168:	18d2      	addlt	r2, r2, r3
 800a16a:	1b1c      	subge	r4, r3, r4
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	bfbc      	itt	lt
 800a170:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a172:	2400      	movlt	r4, #0
 800a174:	2b00      	cmp	r3, #0
 800a176:	bfb5      	itete	lt
 800a178:	eba8 0603 	sublt.w	r6, r8, r3
 800a17c:	9b07      	ldrge	r3, [sp, #28]
 800a17e:	2300      	movlt	r3, #0
 800a180:	4646      	movge	r6, r8
 800a182:	e730      	b.n	8009fe6 <_dtoa_r+0x71e>
 800a184:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a186:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a188:	4646      	mov	r6, r8
 800a18a:	e735      	b.n	8009ff8 <_dtoa_r+0x730>
 800a18c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a18e:	e75c      	b.n	800a04a <_dtoa_r+0x782>
 800a190:	2300      	movs	r3, #0
 800a192:	e788      	b.n	800a0a6 <_dtoa_r+0x7de>
 800a194:	3fe00000 	.word	0x3fe00000
 800a198:	40240000 	.word	0x40240000
 800a19c:	40140000 	.word	0x40140000
 800a1a0:	9b02      	ldr	r3, [sp, #8]
 800a1a2:	e780      	b.n	800a0a6 <_dtoa_r+0x7de>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1a8:	e782      	b.n	800a0b0 <_dtoa_r+0x7e8>
 800a1aa:	d099      	beq.n	800a0e0 <_dtoa_r+0x818>
 800a1ac:	9a08      	ldr	r2, [sp, #32]
 800a1ae:	331c      	adds	r3, #28
 800a1b0:	441a      	add	r2, r3
 800a1b2:	4498      	add	r8, r3
 800a1b4:	441e      	add	r6, r3
 800a1b6:	9208      	str	r2, [sp, #32]
 800a1b8:	e792      	b.n	800a0e0 <_dtoa_r+0x818>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	e7f6      	b.n	800a1ac <_dtoa_r+0x8e4>
 800a1be:	9b07      	ldr	r3, [sp, #28]
 800a1c0:	9704      	str	r7, [sp, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dc20      	bgt.n	800a208 <_dtoa_r+0x940>
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	dd1e      	ble.n	800a20c <_dtoa_r+0x944>
 800a1ce:	9b00      	ldr	r3, [sp, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f47f aec0 	bne.w	8009f56 <_dtoa_r+0x68e>
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	2205      	movs	r2, #5
 800a1da:	4658      	mov	r0, fp
 800a1dc:	f000 fd30 	bl	800ac40 <__multadd>
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	4648      	mov	r0, r9
 800a1e6:	f000 ff8d 	bl	800b104 <__mcmp>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f77f aeb3 	ble.w	8009f56 <_dtoa_r+0x68e>
 800a1f0:	4656      	mov	r6, sl
 800a1f2:	2331      	movs	r3, #49	@ 0x31
 800a1f4:	f806 3b01 	strb.w	r3, [r6], #1
 800a1f8:	9b04      	ldr	r3, [sp, #16]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	9304      	str	r3, [sp, #16]
 800a1fe:	e6ae      	b.n	8009f5e <_dtoa_r+0x696>
 800a200:	9c07      	ldr	r4, [sp, #28]
 800a202:	9704      	str	r7, [sp, #16]
 800a204:	4625      	mov	r5, r4
 800a206:	e7f3      	b.n	800a1f0 <_dtoa_r+0x928>
 800a208:	9b07      	ldr	r3, [sp, #28]
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 8104 	beq.w	800a41c <_dtoa_r+0xb54>
 800a214:	2e00      	cmp	r6, #0
 800a216:	dd05      	ble.n	800a224 <_dtoa_r+0x95c>
 800a218:	4629      	mov	r1, r5
 800a21a:	4632      	mov	r2, r6
 800a21c:	4658      	mov	r0, fp
 800a21e:	f000 ff05 	bl	800b02c <__lshift>
 800a222:	4605      	mov	r5, r0
 800a224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a226:	2b00      	cmp	r3, #0
 800a228:	d05a      	beq.n	800a2e0 <_dtoa_r+0xa18>
 800a22a:	6869      	ldr	r1, [r5, #4]
 800a22c:	4658      	mov	r0, fp
 800a22e:	f000 fca5 	bl	800ab7c <_Balloc>
 800a232:	4606      	mov	r6, r0
 800a234:	b928      	cbnz	r0, 800a242 <_dtoa_r+0x97a>
 800a236:	4b84      	ldr	r3, [pc, #528]	@ (800a448 <_dtoa_r+0xb80>)
 800a238:	4602      	mov	r2, r0
 800a23a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a23e:	f7ff bb5a 	b.w	80098f6 <_dtoa_r+0x2e>
 800a242:	692a      	ldr	r2, [r5, #16]
 800a244:	3202      	adds	r2, #2
 800a246:	0092      	lsls	r2, r2, #2
 800a248:	f105 010c 	add.w	r1, r5, #12
 800a24c:	300c      	adds	r0, #12
 800a24e:	f7ff fa94 	bl	800977a <memcpy>
 800a252:	2201      	movs	r2, #1
 800a254:	4631      	mov	r1, r6
 800a256:	4658      	mov	r0, fp
 800a258:	f000 fee8 	bl	800b02c <__lshift>
 800a25c:	f10a 0301 	add.w	r3, sl, #1
 800a260:	9307      	str	r3, [sp, #28]
 800a262:	9b00      	ldr	r3, [sp, #0]
 800a264:	4453      	add	r3, sl
 800a266:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a268:	9b02      	ldr	r3, [sp, #8]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	462f      	mov	r7, r5
 800a270:	930a      	str	r3, [sp, #40]	@ 0x28
 800a272:	4605      	mov	r5, r0
 800a274:	9b07      	ldr	r3, [sp, #28]
 800a276:	4621      	mov	r1, r4
 800a278:	3b01      	subs	r3, #1
 800a27a:	4648      	mov	r0, r9
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	f7ff fa99 	bl	80097b4 <quorem>
 800a282:	4639      	mov	r1, r7
 800a284:	9002      	str	r0, [sp, #8]
 800a286:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a28a:	4648      	mov	r0, r9
 800a28c:	f000 ff3a 	bl	800b104 <__mcmp>
 800a290:	462a      	mov	r2, r5
 800a292:	9008      	str	r0, [sp, #32]
 800a294:	4621      	mov	r1, r4
 800a296:	4658      	mov	r0, fp
 800a298:	f000 ff50 	bl	800b13c <__mdiff>
 800a29c:	68c2      	ldr	r2, [r0, #12]
 800a29e:	4606      	mov	r6, r0
 800a2a0:	bb02      	cbnz	r2, 800a2e4 <_dtoa_r+0xa1c>
 800a2a2:	4601      	mov	r1, r0
 800a2a4:	4648      	mov	r0, r9
 800a2a6:	f000 ff2d 	bl	800b104 <__mcmp>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	4631      	mov	r1, r6
 800a2ae:	4658      	mov	r0, fp
 800a2b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2b2:	f000 fca3 	bl	800abfc <_Bfree>
 800a2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2ba:	9e07      	ldr	r6, [sp, #28]
 800a2bc:	ea43 0102 	orr.w	r1, r3, r2
 800a2c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2c2:	4319      	orrs	r1, r3
 800a2c4:	d110      	bne.n	800a2e8 <_dtoa_r+0xa20>
 800a2c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a2ca:	d029      	beq.n	800a320 <_dtoa_r+0xa58>
 800a2cc:	9b08      	ldr	r3, [sp, #32]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	dd02      	ble.n	800a2d8 <_dtoa_r+0xa10>
 800a2d2:	9b02      	ldr	r3, [sp, #8]
 800a2d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a2d8:	9b00      	ldr	r3, [sp, #0]
 800a2da:	f883 8000 	strb.w	r8, [r3]
 800a2de:	e63f      	b.n	8009f60 <_dtoa_r+0x698>
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	e7bb      	b.n	800a25c <_dtoa_r+0x994>
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	e7e1      	b.n	800a2ac <_dtoa_r+0x9e4>
 800a2e8:	9b08      	ldr	r3, [sp, #32]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	db04      	blt.n	800a2f8 <_dtoa_r+0xa30>
 800a2ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2f0:	430b      	orrs	r3, r1
 800a2f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2f4:	430b      	orrs	r3, r1
 800a2f6:	d120      	bne.n	800a33a <_dtoa_r+0xa72>
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	dded      	ble.n	800a2d8 <_dtoa_r+0xa10>
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	2201      	movs	r2, #1
 800a300:	4658      	mov	r0, fp
 800a302:	f000 fe93 	bl	800b02c <__lshift>
 800a306:	4621      	mov	r1, r4
 800a308:	4681      	mov	r9, r0
 800a30a:	f000 fefb 	bl	800b104 <__mcmp>
 800a30e:	2800      	cmp	r0, #0
 800a310:	dc03      	bgt.n	800a31a <_dtoa_r+0xa52>
 800a312:	d1e1      	bne.n	800a2d8 <_dtoa_r+0xa10>
 800a314:	f018 0f01 	tst.w	r8, #1
 800a318:	d0de      	beq.n	800a2d8 <_dtoa_r+0xa10>
 800a31a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a31e:	d1d8      	bne.n	800a2d2 <_dtoa_r+0xa0a>
 800a320:	9a00      	ldr	r2, [sp, #0]
 800a322:	2339      	movs	r3, #57	@ 0x39
 800a324:	7013      	strb	r3, [r2, #0]
 800a326:	4633      	mov	r3, r6
 800a328:	461e      	mov	r6, r3
 800a32a:	3b01      	subs	r3, #1
 800a32c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a330:	2a39      	cmp	r2, #57	@ 0x39
 800a332:	d052      	beq.n	800a3da <_dtoa_r+0xb12>
 800a334:	3201      	adds	r2, #1
 800a336:	701a      	strb	r2, [r3, #0]
 800a338:	e612      	b.n	8009f60 <_dtoa_r+0x698>
 800a33a:	2a00      	cmp	r2, #0
 800a33c:	dd07      	ble.n	800a34e <_dtoa_r+0xa86>
 800a33e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a342:	d0ed      	beq.n	800a320 <_dtoa_r+0xa58>
 800a344:	9a00      	ldr	r2, [sp, #0]
 800a346:	f108 0301 	add.w	r3, r8, #1
 800a34a:	7013      	strb	r3, [r2, #0]
 800a34c:	e608      	b.n	8009f60 <_dtoa_r+0x698>
 800a34e:	9b07      	ldr	r3, [sp, #28]
 800a350:	9a07      	ldr	r2, [sp, #28]
 800a352:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a358:	4293      	cmp	r3, r2
 800a35a:	d028      	beq.n	800a3ae <_dtoa_r+0xae6>
 800a35c:	4649      	mov	r1, r9
 800a35e:	2300      	movs	r3, #0
 800a360:	220a      	movs	r2, #10
 800a362:	4658      	mov	r0, fp
 800a364:	f000 fc6c 	bl	800ac40 <__multadd>
 800a368:	42af      	cmp	r7, r5
 800a36a:	4681      	mov	r9, r0
 800a36c:	f04f 0300 	mov.w	r3, #0
 800a370:	f04f 020a 	mov.w	r2, #10
 800a374:	4639      	mov	r1, r7
 800a376:	4658      	mov	r0, fp
 800a378:	d107      	bne.n	800a38a <_dtoa_r+0xac2>
 800a37a:	f000 fc61 	bl	800ac40 <__multadd>
 800a37e:	4607      	mov	r7, r0
 800a380:	4605      	mov	r5, r0
 800a382:	9b07      	ldr	r3, [sp, #28]
 800a384:	3301      	adds	r3, #1
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	e774      	b.n	800a274 <_dtoa_r+0x9ac>
 800a38a:	f000 fc59 	bl	800ac40 <__multadd>
 800a38e:	4629      	mov	r1, r5
 800a390:	4607      	mov	r7, r0
 800a392:	2300      	movs	r3, #0
 800a394:	220a      	movs	r2, #10
 800a396:	4658      	mov	r0, fp
 800a398:	f000 fc52 	bl	800ac40 <__multadd>
 800a39c:	4605      	mov	r5, r0
 800a39e:	e7f0      	b.n	800a382 <_dtoa_r+0xaba>
 800a3a0:	9b00      	ldr	r3, [sp, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	bfcc      	ite	gt
 800a3a6:	461e      	movgt	r6, r3
 800a3a8:	2601      	movle	r6, #1
 800a3aa:	4456      	add	r6, sl
 800a3ac:	2700      	movs	r7, #0
 800a3ae:	4649      	mov	r1, r9
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	4658      	mov	r0, fp
 800a3b4:	f000 fe3a 	bl	800b02c <__lshift>
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4681      	mov	r9, r0
 800a3bc:	f000 fea2 	bl	800b104 <__mcmp>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	dcb0      	bgt.n	800a326 <_dtoa_r+0xa5e>
 800a3c4:	d102      	bne.n	800a3cc <_dtoa_r+0xb04>
 800a3c6:	f018 0f01 	tst.w	r8, #1
 800a3ca:	d1ac      	bne.n	800a326 <_dtoa_r+0xa5e>
 800a3cc:	4633      	mov	r3, r6
 800a3ce:	461e      	mov	r6, r3
 800a3d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3d4:	2a30      	cmp	r2, #48	@ 0x30
 800a3d6:	d0fa      	beq.n	800a3ce <_dtoa_r+0xb06>
 800a3d8:	e5c2      	b.n	8009f60 <_dtoa_r+0x698>
 800a3da:	459a      	cmp	sl, r3
 800a3dc:	d1a4      	bne.n	800a328 <_dtoa_r+0xa60>
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	2331      	movs	r3, #49	@ 0x31
 800a3e6:	f88a 3000 	strb.w	r3, [sl]
 800a3ea:	e5b9      	b.n	8009f60 <_dtoa_r+0x698>
 800a3ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a44c <_dtoa_r+0xb84>
 800a3f2:	b11b      	cbz	r3, 800a3fc <_dtoa_r+0xb34>
 800a3f4:	f10a 0308 	add.w	r3, sl, #8
 800a3f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	4650      	mov	r0, sl
 800a3fe:	b019      	add	sp, #100	@ 0x64
 800a400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a406:	2b01      	cmp	r3, #1
 800a408:	f77f ae37 	ble.w	800a07a <_dtoa_r+0x7b2>
 800a40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a40e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a410:	2001      	movs	r0, #1
 800a412:	e655      	b.n	800a0c0 <_dtoa_r+0x7f8>
 800a414:	9b00      	ldr	r3, [sp, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f77f aed6 	ble.w	800a1c8 <_dtoa_r+0x900>
 800a41c:	4656      	mov	r6, sl
 800a41e:	4621      	mov	r1, r4
 800a420:	4648      	mov	r0, r9
 800a422:	f7ff f9c7 	bl	80097b4 <quorem>
 800a426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a42a:	f806 8b01 	strb.w	r8, [r6], #1
 800a42e:	9b00      	ldr	r3, [sp, #0]
 800a430:	eba6 020a 	sub.w	r2, r6, sl
 800a434:	4293      	cmp	r3, r2
 800a436:	ddb3      	ble.n	800a3a0 <_dtoa_r+0xad8>
 800a438:	4649      	mov	r1, r9
 800a43a:	2300      	movs	r3, #0
 800a43c:	220a      	movs	r2, #10
 800a43e:	4658      	mov	r0, fp
 800a440:	f000 fbfe 	bl	800ac40 <__multadd>
 800a444:	4681      	mov	r9, r0
 800a446:	e7ea      	b.n	800a41e <_dtoa_r+0xb56>
 800a448:	0800c295 	.word	0x0800c295
 800a44c:	0800c219 	.word	0x0800c219

0800a450 <_free_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4605      	mov	r5, r0
 800a454:	2900      	cmp	r1, #0
 800a456:	d041      	beq.n	800a4dc <_free_r+0x8c>
 800a458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a45c:	1f0c      	subs	r4, r1, #4
 800a45e:	2b00      	cmp	r3, #0
 800a460:	bfb8      	it	lt
 800a462:	18e4      	addlt	r4, r4, r3
 800a464:	f7fd fb42 	bl	8007aec <__malloc_lock>
 800a468:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e0 <_free_r+0x90>)
 800a46a:	6813      	ldr	r3, [r2, #0]
 800a46c:	b933      	cbnz	r3, 800a47c <_free_r+0x2c>
 800a46e:	6063      	str	r3, [r4, #4]
 800a470:	6014      	str	r4, [r2, #0]
 800a472:	4628      	mov	r0, r5
 800a474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a478:	f7fd bb3e 	b.w	8007af8 <__malloc_unlock>
 800a47c:	42a3      	cmp	r3, r4
 800a47e:	d908      	bls.n	800a492 <_free_r+0x42>
 800a480:	6820      	ldr	r0, [r4, #0]
 800a482:	1821      	adds	r1, r4, r0
 800a484:	428b      	cmp	r3, r1
 800a486:	bf01      	itttt	eq
 800a488:	6819      	ldreq	r1, [r3, #0]
 800a48a:	685b      	ldreq	r3, [r3, #4]
 800a48c:	1809      	addeq	r1, r1, r0
 800a48e:	6021      	streq	r1, [r4, #0]
 800a490:	e7ed      	b.n	800a46e <_free_r+0x1e>
 800a492:	461a      	mov	r2, r3
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	b10b      	cbz	r3, 800a49c <_free_r+0x4c>
 800a498:	42a3      	cmp	r3, r4
 800a49a:	d9fa      	bls.n	800a492 <_free_r+0x42>
 800a49c:	6811      	ldr	r1, [r2, #0]
 800a49e:	1850      	adds	r0, r2, r1
 800a4a0:	42a0      	cmp	r0, r4
 800a4a2:	d10b      	bne.n	800a4bc <_free_r+0x6c>
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	4401      	add	r1, r0
 800a4a8:	1850      	adds	r0, r2, r1
 800a4aa:	4283      	cmp	r3, r0
 800a4ac:	6011      	str	r1, [r2, #0]
 800a4ae:	d1e0      	bne.n	800a472 <_free_r+0x22>
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	6053      	str	r3, [r2, #4]
 800a4b6:	4408      	add	r0, r1
 800a4b8:	6010      	str	r0, [r2, #0]
 800a4ba:	e7da      	b.n	800a472 <_free_r+0x22>
 800a4bc:	d902      	bls.n	800a4c4 <_free_r+0x74>
 800a4be:	230c      	movs	r3, #12
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	e7d6      	b.n	800a472 <_free_r+0x22>
 800a4c4:	6820      	ldr	r0, [r4, #0]
 800a4c6:	1821      	adds	r1, r4, r0
 800a4c8:	428b      	cmp	r3, r1
 800a4ca:	bf04      	itt	eq
 800a4cc:	6819      	ldreq	r1, [r3, #0]
 800a4ce:	685b      	ldreq	r3, [r3, #4]
 800a4d0:	6063      	str	r3, [r4, #4]
 800a4d2:	bf04      	itt	eq
 800a4d4:	1809      	addeq	r1, r1, r0
 800a4d6:	6021      	streq	r1, [r4, #0]
 800a4d8:	6054      	str	r4, [r2, #4]
 800a4da:	e7ca      	b.n	800a472 <_free_r+0x22>
 800a4dc:	bd38      	pop	{r3, r4, r5, pc}
 800a4de:	bf00      	nop
 800a4e0:	200008b0 	.word	0x200008b0

0800a4e4 <rshift>:
 800a4e4:	6903      	ldr	r3, [r0, #16]
 800a4e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4f2:	f100 0414 	add.w	r4, r0, #20
 800a4f6:	dd45      	ble.n	800a584 <rshift+0xa0>
 800a4f8:	f011 011f 	ands.w	r1, r1, #31
 800a4fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a500:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a504:	d10c      	bne.n	800a520 <rshift+0x3c>
 800a506:	f100 0710 	add.w	r7, r0, #16
 800a50a:	4629      	mov	r1, r5
 800a50c:	42b1      	cmp	r1, r6
 800a50e:	d334      	bcc.n	800a57a <rshift+0x96>
 800a510:	1a9b      	subs	r3, r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	1eea      	subs	r2, r5, #3
 800a516:	4296      	cmp	r6, r2
 800a518:	bf38      	it	cc
 800a51a:	2300      	movcc	r3, #0
 800a51c:	4423      	add	r3, r4
 800a51e:	e015      	b.n	800a54c <rshift+0x68>
 800a520:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a524:	f1c1 0820 	rsb	r8, r1, #32
 800a528:	40cf      	lsrs	r7, r1
 800a52a:	f105 0e04 	add.w	lr, r5, #4
 800a52e:	46a1      	mov	r9, r4
 800a530:	4576      	cmp	r6, lr
 800a532:	46f4      	mov	ip, lr
 800a534:	d815      	bhi.n	800a562 <rshift+0x7e>
 800a536:	1a9a      	subs	r2, r3, r2
 800a538:	0092      	lsls	r2, r2, #2
 800a53a:	3a04      	subs	r2, #4
 800a53c:	3501      	adds	r5, #1
 800a53e:	42ae      	cmp	r6, r5
 800a540:	bf38      	it	cc
 800a542:	2200      	movcc	r2, #0
 800a544:	18a3      	adds	r3, r4, r2
 800a546:	50a7      	str	r7, [r4, r2]
 800a548:	b107      	cbz	r7, 800a54c <rshift+0x68>
 800a54a:	3304      	adds	r3, #4
 800a54c:	1b1a      	subs	r2, r3, r4
 800a54e:	42a3      	cmp	r3, r4
 800a550:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a554:	bf08      	it	eq
 800a556:	2300      	moveq	r3, #0
 800a558:	6102      	str	r2, [r0, #16]
 800a55a:	bf08      	it	eq
 800a55c:	6143      	streq	r3, [r0, #20]
 800a55e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a562:	f8dc c000 	ldr.w	ip, [ip]
 800a566:	fa0c fc08 	lsl.w	ip, ip, r8
 800a56a:	ea4c 0707 	orr.w	r7, ip, r7
 800a56e:	f849 7b04 	str.w	r7, [r9], #4
 800a572:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a576:	40cf      	lsrs	r7, r1
 800a578:	e7da      	b.n	800a530 <rshift+0x4c>
 800a57a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a57e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a582:	e7c3      	b.n	800a50c <rshift+0x28>
 800a584:	4623      	mov	r3, r4
 800a586:	e7e1      	b.n	800a54c <rshift+0x68>

0800a588 <__hexdig_fun>:
 800a588:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a58c:	2b09      	cmp	r3, #9
 800a58e:	d802      	bhi.n	800a596 <__hexdig_fun+0xe>
 800a590:	3820      	subs	r0, #32
 800a592:	b2c0      	uxtb	r0, r0
 800a594:	4770      	bx	lr
 800a596:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a59a:	2b05      	cmp	r3, #5
 800a59c:	d801      	bhi.n	800a5a2 <__hexdig_fun+0x1a>
 800a59e:	3847      	subs	r0, #71	@ 0x47
 800a5a0:	e7f7      	b.n	800a592 <__hexdig_fun+0xa>
 800a5a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a5a6:	2b05      	cmp	r3, #5
 800a5a8:	d801      	bhi.n	800a5ae <__hexdig_fun+0x26>
 800a5aa:	3827      	subs	r0, #39	@ 0x27
 800a5ac:	e7f1      	b.n	800a592 <__hexdig_fun+0xa>
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	4770      	bx	lr
	...

0800a5b4 <__gethex>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	b085      	sub	sp, #20
 800a5ba:	468a      	mov	sl, r1
 800a5bc:	9302      	str	r3, [sp, #8]
 800a5be:	680b      	ldr	r3, [r1, #0]
 800a5c0:	9001      	str	r0, [sp, #4]
 800a5c2:	4690      	mov	r8, r2
 800a5c4:	1c9c      	adds	r4, r3, #2
 800a5c6:	46a1      	mov	r9, r4
 800a5c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a5cc:	2830      	cmp	r0, #48	@ 0x30
 800a5ce:	d0fa      	beq.n	800a5c6 <__gethex+0x12>
 800a5d0:	eba9 0303 	sub.w	r3, r9, r3
 800a5d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a5d8:	f7ff ffd6 	bl	800a588 <__hexdig_fun>
 800a5dc:	4605      	mov	r5, r0
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d168      	bne.n	800a6b4 <__gethex+0x100>
 800a5e2:	49a0      	ldr	r1, [pc, #640]	@ (800a864 <__gethex+0x2b0>)
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	4648      	mov	r0, r9
 800a5e8:	f7ff f82d 	bl	8009646 <strncmp>
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d167      	bne.n	800a6c2 <__gethex+0x10e>
 800a5f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a5f6:	4626      	mov	r6, r4
 800a5f8:	f7ff ffc6 	bl	800a588 <__hexdig_fun>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d062      	beq.n	800a6c6 <__gethex+0x112>
 800a600:	4623      	mov	r3, r4
 800a602:	7818      	ldrb	r0, [r3, #0]
 800a604:	2830      	cmp	r0, #48	@ 0x30
 800a606:	4699      	mov	r9, r3
 800a608:	f103 0301 	add.w	r3, r3, #1
 800a60c:	d0f9      	beq.n	800a602 <__gethex+0x4e>
 800a60e:	f7ff ffbb 	bl	800a588 <__hexdig_fun>
 800a612:	fab0 f580 	clz	r5, r0
 800a616:	096d      	lsrs	r5, r5, #5
 800a618:	f04f 0b01 	mov.w	fp, #1
 800a61c:	464a      	mov	r2, r9
 800a61e:	4616      	mov	r6, r2
 800a620:	3201      	adds	r2, #1
 800a622:	7830      	ldrb	r0, [r6, #0]
 800a624:	f7ff ffb0 	bl	800a588 <__hexdig_fun>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d1f8      	bne.n	800a61e <__gethex+0x6a>
 800a62c:	498d      	ldr	r1, [pc, #564]	@ (800a864 <__gethex+0x2b0>)
 800a62e:	2201      	movs	r2, #1
 800a630:	4630      	mov	r0, r6
 800a632:	f7ff f808 	bl	8009646 <strncmp>
 800a636:	2800      	cmp	r0, #0
 800a638:	d13f      	bne.n	800a6ba <__gethex+0x106>
 800a63a:	b944      	cbnz	r4, 800a64e <__gethex+0x9a>
 800a63c:	1c74      	adds	r4, r6, #1
 800a63e:	4622      	mov	r2, r4
 800a640:	4616      	mov	r6, r2
 800a642:	3201      	adds	r2, #1
 800a644:	7830      	ldrb	r0, [r6, #0]
 800a646:	f7ff ff9f 	bl	800a588 <__hexdig_fun>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	d1f8      	bne.n	800a640 <__gethex+0x8c>
 800a64e:	1ba4      	subs	r4, r4, r6
 800a650:	00a7      	lsls	r7, r4, #2
 800a652:	7833      	ldrb	r3, [r6, #0]
 800a654:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a658:	2b50      	cmp	r3, #80	@ 0x50
 800a65a:	d13e      	bne.n	800a6da <__gethex+0x126>
 800a65c:	7873      	ldrb	r3, [r6, #1]
 800a65e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a660:	d033      	beq.n	800a6ca <__gethex+0x116>
 800a662:	2b2d      	cmp	r3, #45	@ 0x2d
 800a664:	d034      	beq.n	800a6d0 <__gethex+0x11c>
 800a666:	1c71      	adds	r1, r6, #1
 800a668:	2400      	movs	r4, #0
 800a66a:	7808      	ldrb	r0, [r1, #0]
 800a66c:	f7ff ff8c 	bl	800a588 <__hexdig_fun>
 800a670:	1e43      	subs	r3, r0, #1
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b18      	cmp	r3, #24
 800a676:	d830      	bhi.n	800a6da <__gethex+0x126>
 800a678:	f1a0 0210 	sub.w	r2, r0, #16
 800a67c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a680:	f7ff ff82 	bl	800a588 <__hexdig_fun>
 800a684:	f100 3cff 	add.w	ip, r0, #4294967295
 800a688:	fa5f fc8c 	uxtb.w	ip, ip
 800a68c:	f1bc 0f18 	cmp.w	ip, #24
 800a690:	f04f 030a 	mov.w	r3, #10
 800a694:	d91e      	bls.n	800a6d4 <__gethex+0x120>
 800a696:	b104      	cbz	r4, 800a69a <__gethex+0xe6>
 800a698:	4252      	negs	r2, r2
 800a69a:	4417      	add	r7, r2
 800a69c:	f8ca 1000 	str.w	r1, [sl]
 800a6a0:	b1ed      	cbz	r5, 800a6de <__gethex+0x12a>
 800a6a2:	f1bb 0f00 	cmp.w	fp, #0
 800a6a6:	bf0c      	ite	eq
 800a6a8:	2506      	moveq	r5, #6
 800a6aa:	2500      	movne	r5, #0
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	b005      	add	sp, #20
 800a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b4:	2500      	movs	r5, #0
 800a6b6:	462c      	mov	r4, r5
 800a6b8:	e7b0      	b.n	800a61c <__gethex+0x68>
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	d1c7      	bne.n	800a64e <__gethex+0x9a>
 800a6be:	4627      	mov	r7, r4
 800a6c0:	e7c7      	b.n	800a652 <__gethex+0x9e>
 800a6c2:	464e      	mov	r6, r9
 800a6c4:	462f      	mov	r7, r5
 800a6c6:	2501      	movs	r5, #1
 800a6c8:	e7c3      	b.n	800a652 <__gethex+0x9e>
 800a6ca:	2400      	movs	r4, #0
 800a6cc:	1cb1      	adds	r1, r6, #2
 800a6ce:	e7cc      	b.n	800a66a <__gethex+0xb6>
 800a6d0:	2401      	movs	r4, #1
 800a6d2:	e7fb      	b.n	800a6cc <__gethex+0x118>
 800a6d4:	fb03 0002 	mla	r0, r3, r2, r0
 800a6d8:	e7ce      	b.n	800a678 <__gethex+0xc4>
 800a6da:	4631      	mov	r1, r6
 800a6dc:	e7de      	b.n	800a69c <__gethex+0xe8>
 800a6de:	eba6 0309 	sub.w	r3, r6, r9
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	2b07      	cmp	r3, #7
 800a6e8:	dc0a      	bgt.n	800a700 <__gethex+0x14c>
 800a6ea:	9801      	ldr	r0, [sp, #4]
 800a6ec:	f000 fa46 	bl	800ab7c <_Balloc>
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	b940      	cbnz	r0, 800a706 <__gethex+0x152>
 800a6f4:	4b5c      	ldr	r3, [pc, #368]	@ (800a868 <__gethex+0x2b4>)
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	21e4      	movs	r1, #228	@ 0xe4
 800a6fa:	485c      	ldr	r0, [pc, #368]	@ (800a86c <__gethex+0x2b8>)
 800a6fc:	f001 f996 	bl	800ba2c <__assert_func>
 800a700:	3101      	adds	r1, #1
 800a702:	105b      	asrs	r3, r3, #1
 800a704:	e7ef      	b.n	800a6e6 <__gethex+0x132>
 800a706:	f100 0a14 	add.w	sl, r0, #20
 800a70a:	2300      	movs	r3, #0
 800a70c:	4655      	mov	r5, sl
 800a70e:	469b      	mov	fp, r3
 800a710:	45b1      	cmp	r9, r6
 800a712:	d337      	bcc.n	800a784 <__gethex+0x1d0>
 800a714:	f845 bb04 	str.w	fp, [r5], #4
 800a718:	eba5 050a 	sub.w	r5, r5, sl
 800a71c:	10ad      	asrs	r5, r5, #2
 800a71e:	6125      	str	r5, [r4, #16]
 800a720:	4658      	mov	r0, fp
 800a722:	f000 fb1d 	bl	800ad60 <__hi0bits>
 800a726:	016d      	lsls	r5, r5, #5
 800a728:	f8d8 6000 	ldr.w	r6, [r8]
 800a72c:	1a2d      	subs	r5, r5, r0
 800a72e:	42b5      	cmp	r5, r6
 800a730:	dd54      	ble.n	800a7dc <__gethex+0x228>
 800a732:	1bad      	subs	r5, r5, r6
 800a734:	4629      	mov	r1, r5
 800a736:	4620      	mov	r0, r4
 800a738:	f000 feb1 	bl	800b49e <__any_on>
 800a73c:	4681      	mov	r9, r0
 800a73e:	b178      	cbz	r0, 800a760 <__gethex+0x1ac>
 800a740:	1e6b      	subs	r3, r5, #1
 800a742:	1159      	asrs	r1, r3, #5
 800a744:	f003 021f 	and.w	r2, r3, #31
 800a748:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a74c:	f04f 0901 	mov.w	r9, #1
 800a750:	fa09 f202 	lsl.w	r2, r9, r2
 800a754:	420a      	tst	r2, r1
 800a756:	d003      	beq.n	800a760 <__gethex+0x1ac>
 800a758:	454b      	cmp	r3, r9
 800a75a:	dc36      	bgt.n	800a7ca <__gethex+0x216>
 800a75c:	f04f 0902 	mov.w	r9, #2
 800a760:	4629      	mov	r1, r5
 800a762:	4620      	mov	r0, r4
 800a764:	f7ff febe 	bl	800a4e4 <rshift>
 800a768:	442f      	add	r7, r5
 800a76a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a76e:	42bb      	cmp	r3, r7
 800a770:	da42      	bge.n	800a7f8 <__gethex+0x244>
 800a772:	9801      	ldr	r0, [sp, #4]
 800a774:	4621      	mov	r1, r4
 800a776:	f000 fa41 	bl	800abfc <_Bfree>
 800a77a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a77c:	2300      	movs	r3, #0
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	25a3      	movs	r5, #163	@ 0xa3
 800a782:	e793      	b.n	800a6ac <__gethex+0xf8>
 800a784:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a788:	2a2e      	cmp	r2, #46	@ 0x2e
 800a78a:	d012      	beq.n	800a7b2 <__gethex+0x1fe>
 800a78c:	2b20      	cmp	r3, #32
 800a78e:	d104      	bne.n	800a79a <__gethex+0x1e6>
 800a790:	f845 bb04 	str.w	fp, [r5], #4
 800a794:	f04f 0b00 	mov.w	fp, #0
 800a798:	465b      	mov	r3, fp
 800a79a:	7830      	ldrb	r0, [r6, #0]
 800a79c:	9303      	str	r3, [sp, #12]
 800a79e:	f7ff fef3 	bl	800a588 <__hexdig_fun>
 800a7a2:	9b03      	ldr	r3, [sp, #12]
 800a7a4:	f000 000f 	and.w	r0, r0, #15
 800a7a8:	4098      	lsls	r0, r3
 800a7aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	e7ae      	b.n	800a710 <__gethex+0x15c>
 800a7b2:	45b1      	cmp	r9, r6
 800a7b4:	d8ea      	bhi.n	800a78c <__gethex+0x1d8>
 800a7b6:	492b      	ldr	r1, [pc, #172]	@ (800a864 <__gethex+0x2b0>)
 800a7b8:	9303      	str	r3, [sp, #12]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f7fe ff42 	bl	8009646 <strncmp>
 800a7c2:	9b03      	ldr	r3, [sp, #12]
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d1e1      	bne.n	800a78c <__gethex+0x1d8>
 800a7c8:	e7a2      	b.n	800a710 <__gethex+0x15c>
 800a7ca:	1ea9      	subs	r1, r5, #2
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fe66 	bl	800b49e <__any_on>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d0c2      	beq.n	800a75c <__gethex+0x1a8>
 800a7d6:	f04f 0903 	mov.w	r9, #3
 800a7da:	e7c1      	b.n	800a760 <__gethex+0x1ac>
 800a7dc:	da09      	bge.n	800a7f2 <__gethex+0x23e>
 800a7de:	1b75      	subs	r5, r6, r5
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	9801      	ldr	r0, [sp, #4]
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	f000 fc21 	bl	800b02c <__lshift>
 800a7ea:	1b7f      	subs	r7, r7, r5
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	f100 0a14 	add.w	sl, r0, #20
 800a7f2:	f04f 0900 	mov.w	r9, #0
 800a7f6:	e7b8      	b.n	800a76a <__gethex+0x1b6>
 800a7f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7fc:	42bd      	cmp	r5, r7
 800a7fe:	dd6f      	ble.n	800a8e0 <__gethex+0x32c>
 800a800:	1bed      	subs	r5, r5, r7
 800a802:	42ae      	cmp	r6, r5
 800a804:	dc34      	bgt.n	800a870 <__gethex+0x2bc>
 800a806:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d022      	beq.n	800a854 <__gethex+0x2a0>
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d024      	beq.n	800a85c <__gethex+0x2a8>
 800a812:	2b01      	cmp	r3, #1
 800a814:	d115      	bne.n	800a842 <__gethex+0x28e>
 800a816:	42ae      	cmp	r6, r5
 800a818:	d113      	bne.n	800a842 <__gethex+0x28e>
 800a81a:	2e01      	cmp	r6, #1
 800a81c:	d10b      	bne.n	800a836 <__gethex+0x282>
 800a81e:	9a02      	ldr	r2, [sp, #8]
 800a820:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a824:	6013      	str	r3, [r2, #0]
 800a826:	2301      	movs	r3, #1
 800a828:	6123      	str	r3, [r4, #16]
 800a82a:	f8ca 3000 	str.w	r3, [sl]
 800a82e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a830:	2562      	movs	r5, #98	@ 0x62
 800a832:	601c      	str	r4, [r3, #0]
 800a834:	e73a      	b.n	800a6ac <__gethex+0xf8>
 800a836:	1e71      	subs	r1, r6, #1
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fe30 	bl	800b49e <__any_on>
 800a83e:	2800      	cmp	r0, #0
 800a840:	d1ed      	bne.n	800a81e <__gethex+0x26a>
 800a842:	9801      	ldr	r0, [sp, #4]
 800a844:	4621      	mov	r1, r4
 800a846:	f000 f9d9 	bl	800abfc <_Bfree>
 800a84a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a84c:	2300      	movs	r3, #0
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	2550      	movs	r5, #80	@ 0x50
 800a852:	e72b      	b.n	800a6ac <__gethex+0xf8>
 800a854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1f3      	bne.n	800a842 <__gethex+0x28e>
 800a85a:	e7e0      	b.n	800a81e <__gethex+0x26a>
 800a85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1dd      	bne.n	800a81e <__gethex+0x26a>
 800a862:	e7ee      	b.n	800a842 <__gethex+0x28e>
 800a864:	0800c184 	.word	0x0800c184
 800a868:	0800c295 	.word	0x0800c295
 800a86c:	0800c2a6 	.word	0x0800c2a6
 800a870:	1e6f      	subs	r7, r5, #1
 800a872:	f1b9 0f00 	cmp.w	r9, #0
 800a876:	d130      	bne.n	800a8da <__gethex+0x326>
 800a878:	b127      	cbz	r7, 800a884 <__gethex+0x2d0>
 800a87a:	4639      	mov	r1, r7
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 fe0e 	bl	800b49e <__any_on>
 800a882:	4681      	mov	r9, r0
 800a884:	117a      	asrs	r2, r7, #5
 800a886:	2301      	movs	r3, #1
 800a888:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a88c:	f007 071f 	and.w	r7, r7, #31
 800a890:	40bb      	lsls	r3, r7
 800a892:	4213      	tst	r3, r2
 800a894:	4629      	mov	r1, r5
 800a896:	4620      	mov	r0, r4
 800a898:	bf18      	it	ne
 800a89a:	f049 0902 	orrne.w	r9, r9, #2
 800a89e:	f7ff fe21 	bl	800a4e4 <rshift>
 800a8a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a8a6:	1b76      	subs	r6, r6, r5
 800a8a8:	2502      	movs	r5, #2
 800a8aa:	f1b9 0f00 	cmp.w	r9, #0
 800a8ae:	d047      	beq.n	800a940 <__gethex+0x38c>
 800a8b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d015      	beq.n	800a8e4 <__gethex+0x330>
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d017      	beq.n	800a8ec <__gethex+0x338>
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d109      	bne.n	800a8d4 <__gethex+0x320>
 800a8c0:	f019 0f02 	tst.w	r9, #2
 800a8c4:	d006      	beq.n	800a8d4 <__gethex+0x320>
 800a8c6:	f8da 3000 	ldr.w	r3, [sl]
 800a8ca:	ea49 0903 	orr.w	r9, r9, r3
 800a8ce:	f019 0f01 	tst.w	r9, #1
 800a8d2:	d10e      	bne.n	800a8f2 <__gethex+0x33e>
 800a8d4:	f045 0510 	orr.w	r5, r5, #16
 800a8d8:	e032      	b.n	800a940 <__gethex+0x38c>
 800a8da:	f04f 0901 	mov.w	r9, #1
 800a8de:	e7d1      	b.n	800a884 <__gethex+0x2d0>
 800a8e0:	2501      	movs	r5, #1
 800a8e2:	e7e2      	b.n	800a8aa <__gethex+0x2f6>
 800a8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8e6:	f1c3 0301 	rsb	r3, r3, #1
 800a8ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0f0      	beq.n	800a8d4 <__gethex+0x320>
 800a8f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8f6:	f104 0314 	add.w	r3, r4, #20
 800a8fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a8fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a902:	f04f 0c00 	mov.w	ip, #0
 800a906:	4618      	mov	r0, r3
 800a908:	f853 2b04 	ldr.w	r2, [r3], #4
 800a90c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a910:	d01b      	beq.n	800a94a <__gethex+0x396>
 800a912:	3201      	adds	r2, #1
 800a914:	6002      	str	r2, [r0, #0]
 800a916:	2d02      	cmp	r5, #2
 800a918:	f104 0314 	add.w	r3, r4, #20
 800a91c:	d13c      	bne.n	800a998 <__gethex+0x3e4>
 800a91e:	f8d8 2000 	ldr.w	r2, [r8]
 800a922:	3a01      	subs	r2, #1
 800a924:	42b2      	cmp	r2, r6
 800a926:	d109      	bne.n	800a93c <__gethex+0x388>
 800a928:	1171      	asrs	r1, r6, #5
 800a92a:	2201      	movs	r2, #1
 800a92c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a930:	f006 061f 	and.w	r6, r6, #31
 800a934:	fa02 f606 	lsl.w	r6, r2, r6
 800a938:	421e      	tst	r6, r3
 800a93a:	d13a      	bne.n	800a9b2 <__gethex+0x3fe>
 800a93c:	f045 0520 	orr.w	r5, r5, #32
 800a940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a942:	601c      	str	r4, [r3, #0]
 800a944:	9b02      	ldr	r3, [sp, #8]
 800a946:	601f      	str	r7, [r3, #0]
 800a948:	e6b0      	b.n	800a6ac <__gethex+0xf8>
 800a94a:	4299      	cmp	r1, r3
 800a94c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a950:	d8d9      	bhi.n	800a906 <__gethex+0x352>
 800a952:	68a3      	ldr	r3, [r4, #8]
 800a954:	459b      	cmp	fp, r3
 800a956:	db17      	blt.n	800a988 <__gethex+0x3d4>
 800a958:	6861      	ldr	r1, [r4, #4]
 800a95a:	9801      	ldr	r0, [sp, #4]
 800a95c:	3101      	adds	r1, #1
 800a95e:	f000 f90d 	bl	800ab7c <_Balloc>
 800a962:	4681      	mov	r9, r0
 800a964:	b918      	cbnz	r0, 800a96e <__gethex+0x3ba>
 800a966:	4b1a      	ldr	r3, [pc, #104]	@ (800a9d0 <__gethex+0x41c>)
 800a968:	4602      	mov	r2, r0
 800a96a:	2184      	movs	r1, #132	@ 0x84
 800a96c:	e6c5      	b.n	800a6fa <__gethex+0x146>
 800a96e:	6922      	ldr	r2, [r4, #16]
 800a970:	3202      	adds	r2, #2
 800a972:	f104 010c 	add.w	r1, r4, #12
 800a976:	0092      	lsls	r2, r2, #2
 800a978:	300c      	adds	r0, #12
 800a97a:	f7fe fefe 	bl	800977a <memcpy>
 800a97e:	4621      	mov	r1, r4
 800a980:	9801      	ldr	r0, [sp, #4]
 800a982:	f000 f93b 	bl	800abfc <_Bfree>
 800a986:	464c      	mov	r4, r9
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a990:	6122      	str	r2, [r4, #16]
 800a992:	2201      	movs	r2, #1
 800a994:	615a      	str	r2, [r3, #20]
 800a996:	e7be      	b.n	800a916 <__gethex+0x362>
 800a998:	6922      	ldr	r2, [r4, #16]
 800a99a:	455a      	cmp	r2, fp
 800a99c:	dd0b      	ble.n	800a9b6 <__gethex+0x402>
 800a99e:	2101      	movs	r1, #1
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7ff fd9f 	bl	800a4e4 <rshift>
 800a9a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9aa:	3701      	adds	r7, #1
 800a9ac:	42bb      	cmp	r3, r7
 800a9ae:	f6ff aee0 	blt.w	800a772 <__gethex+0x1be>
 800a9b2:	2501      	movs	r5, #1
 800a9b4:	e7c2      	b.n	800a93c <__gethex+0x388>
 800a9b6:	f016 061f 	ands.w	r6, r6, #31
 800a9ba:	d0fa      	beq.n	800a9b2 <__gethex+0x3fe>
 800a9bc:	4453      	add	r3, sl
 800a9be:	f1c6 0620 	rsb	r6, r6, #32
 800a9c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a9c6:	f000 f9cb 	bl	800ad60 <__hi0bits>
 800a9ca:	42b0      	cmp	r0, r6
 800a9cc:	dbe7      	blt.n	800a99e <__gethex+0x3ea>
 800a9ce:	e7f0      	b.n	800a9b2 <__gethex+0x3fe>
 800a9d0:	0800c295 	.word	0x0800c295

0800a9d4 <L_shift>:
 800a9d4:	f1c2 0208 	rsb	r2, r2, #8
 800a9d8:	0092      	lsls	r2, r2, #2
 800a9da:	b570      	push	{r4, r5, r6, lr}
 800a9dc:	f1c2 0620 	rsb	r6, r2, #32
 800a9e0:	6843      	ldr	r3, [r0, #4]
 800a9e2:	6804      	ldr	r4, [r0, #0]
 800a9e4:	fa03 f506 	lsl.w	r5, r3, r6
 800a9e8:	432c      	orrs	r4, r5
 800a9ea:	40d3      	lsrs	r3, r2
 800a9ec:	6004      	str	r4, [r0, #0]
 800a9ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9f2:	4288      	cmp	r0, r1
 800a9f4:	d3f4      	bcc.n	800a9e0 <L_shift+0xc>
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}

0800a9f8 <__match>:
 800a9f8:	b530      	push	{r4, r5, lr}
 800a9fa:	6803      	ldr	r3, [r0, #0]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa02:	b914      	cbnz	r4, 800aa0a <__match+0x12>
 800aa04:	6003      	str	r3, [r0, #0]
 800aa06:	2001      	movs	r0, #1
 800aa08:	bd30      	pop	{r4, r5, pc}
 800aa0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aa12:	2d19      	cmp	r5, #25
 800aa14:	bf98      	it	ls
 800aa16:	3220      	addls	r2, #32
 800aa18:	42a2      	cmp	r2, r4
 800aa1a:	d0f0      	beq.n	800a9fe <__match+0x6>
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	e7f3      	b.n	800aa08 <__match+0x10>

0800aa20 <__hexnan>:
 800aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa24:	680b      	ldr	r3, [r1, #0]
 800aa26:	6801      	ldr	r1, [r0, #0]
 800aa28:	115e      	asrs	r6, r3, #5
 800aa2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa2e:	f013 031f 	ands.w	r3, r3, #31
 800aa32:	b087      	sub	sp, #28
 800aa34:	bf18      	it	ne
 800aa36:	3604      	addne	r6, #4
 800aa38:	2500      	movs	r5, #0
 800aa3a:	1f37      	subs	r7, r6, #4
 800aa3c:	4682      	mov	sl, r0
 800aa3e:	4690      	mov	r8, r2
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa46:	46b9      	mov	r9, r7
 800aa48:	463c      	mov	r4, r7
 800aa4a:	9502      	str	r5, [sp, #8]
 800aa4c:	46ab      	mov	fp, r5
 800aa4e:	784a      	ldrb	r2, [r1, #1]
 800aa50:	1c4b      	adds	r3, r1, #1
 800aa52:	9303      	str	r3, [sp, #12]
 800aa54:	b342      	cbz	r2, 800aaa8 <__hexnan+0x88>
 800aa56:	4610      	mov	r0, r2
 800aa58:	9105      	str	r1, [sp, #20]
 800aa5a:	9204      	str	r2, [sp, #16]
 800aa5c:	f7ff fd94 	bl	800a588 <__hexdig_fun>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d151      	bne.n	800ab08 <__hexnan+0xe8>
 800aa64:	9a04      	ldr	r2, [sp, #16]
 800aa66:	9905      	ldr	r1, [sp, #20]
 800aa68:	2a20      	cmp	r2, #32
 800aa6a:	d818      	bhi.n	800aa9e <__hexnan+0x7e>
 800aa6c:	9b02      	ldr	r3, [sp, #8]
 800aa6e:	459b      	cmp	fp, r3
 800aa70:	dd13      	ble.n	800aa9a <__hexnan+0x7a>
 800aa72:	454c      	cmp	r4, r9
 800aa74:	d206      	bcs.n	800aa84 <__hexnan+0x64>
 800aa76:	2d07      	cmp	r5, #7
 800aa78:	dc04      	bgt.n	800aa84 <__hexnan+0x64>
 800aa7a:	462a      	mov	r2, r5
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f7ff ffa8 	bl	800a9d4 <L_shift>
 800aa84:	4544      	cmp	r4, r8
 800aa86:	d952      	bls.n	800ab2e <__hexnan+0x10e>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f1a4 0904 	sub.w	r9, r4, #4
 800aa8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa92:	f8cd b008 	str.w	fp, [sp, #8]
 800aa96:	464c      	mov	r4, r9
 800aa98:	461d      	mov	r5, r3
 800aa9a:	9903      	ldr	r1, [sp, #12]
 800aa9c:	e7d7      	b.n	800aa4e <__hexnan+0x2e>
 800aa9e:	2a29      	cmp	r2, #41	@ 0x29
 800aaa0:	d157      	bne.n	800ab52 <__hexnan+0x132>
 800aaa2:	3102      	adds	r1, #2
 800aaa4:	f8ca 1000 	str.w	r1, [sl]
 800aaa8:	f1bb 0f00 	cmp.w	fp, #0
 800aaac:	d051      	beq.n	800ab52 <__hexnan+0x132>
 800aaae:	454c      	cmp	r4, r9
 800aab0:	d206      	bcs.n	800aac0 <__hexnan+0xa0>
 800aab2:	2d07      	cmp	r5, #7
 800aab4:	dc04      	bgt.n	800aac0 <__hexnan+0xa0>
 800aab6:	462a      	mov	r2, r5
 800aab8:	4649      	mov	r1, r9
 800aaba:	4620      	mov	r0, r4
 800aabc:	f7ff ff8a 	bl	800a9d4 <L_shift>
 800aac0:	4544      	cmp	r4, r8
 800aac2:	d936      	bls.n	800ab32 <__hexnan+0x112>
 800aac4:	f1a8 0204 	sub.w	r2, r8, #4
 800aac8:	4623      	mov	r3, r4
 800aaca:	f853 1b04 	ldr.w	r1, [r3], #4
 800aace:	f842 1f04 	str.w	r1, [r2, #4]!
 800aad2:	429f      	cmp	r7, r3
 800aad4:	d2f9      	bcs.n	800aaca <__hexnan+0xaa>
 800aad6:	1b3b      	subs	r3, r7, r4
 800aad8:	f023 0303 	bic.w	r3, r3, #3
 800aadc:	3304      	adds	r3, #4
 800aade:	3401      	adds	r4, #1
 800aae0:	3e03      	subs	r6, #3
 800aae2:	42b4      	cmp	r4, r6
 800aae4:	bf88      	it	hi
 800aae6:	2304      	movhi	r3, #4
 800aae8:	4443      	add	r3, r8
 800aaea:	2200      	movs	r2, #0
 800aaec:	f843 2b04 	str.w	r2, [r3], #4
 800aaf0:	429f      	cmp	r7, r3
 800aaf2:	d2fb      	bcs.n	800aaec <__hexnan+0xcc>
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	b91b      	cbnz	r3, 800ab00 <__hexnan+0xe0>
 800aaf8:	4547      	cmp	r7, r8
 800aafa:	d128      	bne.n	800ab4e <__hexnan+0x12e>
 800aafc:	2301      	movs	r3, #1
 800aafe:	603b      	str	r3, [r7, #0]
 800ab00:	2005      	movs	r0, #5
 800ab02:	b007      	add	sp, #28
 800ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab08:	3501      	adds	r5, #1
 800ab0a:	2d08      	cmp	r5, #8
 800ab0c:	f10b 0b01 	add.w	fp, fp, #1
 800ab10:	dd06      	ble.n	800ab20 <__hexnan+0x100>
 800ab12:	4544      	cmp	r4, r8
 800ab14:	d9c1      	bls.n	800aa9a <__hexnan+0x7a>
 800ab16:	2300      	movs	r3, #0
 800ab18:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab1c:	2501      	movs	r5, #1
 800ab1e:	3c04      	subs	r4, #4
 800ab20:	6822      	ldr	r2, [r4, #0]
 800ab22:	f000 000f 	and.w	r0, r0, #15
 800ab26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab2a:	6020      	str	r0, [r4, #0]
 800ab2c:	e7b5      	b.n	800aa9a <__hexnan+0x7a>
 800ab2e:	2508      	movs	r5, #8
 800ab30:	e7b3      	b.n	800aa9a <__hexnan+0x7a>
 800ab32:	9b01      	ldr	r3, [sp, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d0dd      	beq.n	800aaf4 <__hexnan+0xd4>
 800ab38:	f1c3 0320 	rsb	r3, r3, #32
 800ab3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab40:	40da      	lsrs	r2, r3
 800ab42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab46:	4013      	ands	r3, r2
 800ab48:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab4c:	e7d2      	b.n	800aaf4 <__hexnan+0xd4>
 800ab4e:	3f04      	subs	r7, #4
 800ab50:	e7d0      	b.n	800aaf4 <__hexnan+0xd4>
 800ab52:	2004      	movs	r0, #4
 800ab54:	e7d5      	b.n	800ab02 <__hexnan+0xe2>

0800ab56 <__ascii_mbtowc>:
 800ab56:	b082      	sub	sp, #8
 800ab58:	b901      	cbnz	r1, 800ab5c <__ascii_mbtowc+0x6>
 800ab5a:	a901      	add	r1, sp, #4
 800ab5c:	b142      	cbz	r2, 800ab70 <__ascii_mbtowc+0x1a>
 800ab5e:	b14b      	cbz	r3, 800ab74 <__ascii_mbtowc+0x1e>
 800ab60:	7813      	ldrb	r3, [r2, #0]
 800ab62:	600b      	str	r3, [r1, #0]
 800ab64:	7812      	ldrb	r2, [r2, #0]
 800ab66:	1e10      	subs	r0, r2, #0
 800ab68:	bf18      	it	ne
 800ab6a:	2001      	movne	r0, #1
 800ab6c:	b002      	add	sp, #8
 800ab6e:	4770      	bx	lr
 800ab70:	4610      	mov	r0, r2
 800ab72:	e7fb      	b.n	800ab6c <__ascii_mbtowc+0x16>
 800ab74:	f06f 0001 	mvn.w	r0, #1
 800ab78:	e7f8      	b.n	800ab6c <__ascii_mbtowc+0x16>
	...

0800ab7c <_Balloc>:
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	69c6      	ldr	r6, [r0, #28]
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	b976      	cbnz	r6, 800aba4 <_Balloc+0x28>
 800ab86:	2010      	movs	r0, #16
 800ab88:	f7fc ff06 	bl	8007998 <malloc>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	61e0      	str	r0, [r4, #28]
 800ab90:	b920      	cbnz	r0, 800ab9c <_Balloc+0x20>
 800ab92:	4b18      	ldr	r3, [pc, #96]	@ (800abf4 <_Balloc+0x78>)
 800ab94:	4818      	ldr	r0, [pc, #96]	@ (800abf8 <_Balloc+0x7c>)
 800ab96:	216b      	movs	r1, #107	@ 0x6b
 800ab98:	f000 ff48 	bl	800ba2c <__assert_func>
 800ab9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aba0:	6006      	str	r6, [r0, #0]
 800aba2:	60c6      	str	r6, [r0, #12]
 800aba4:	69e6      	ldr	r6, [r4, #28]
 800aba6:	68f3      	ldr	r3, [r6, #12]
 800aba8:	b183      	cbz	r3, 800abcc <_Balloc+0x50>
 800abaa:	69e3      	ldr	r3, [r4, #28]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abb2:	b9b8      	cbnz	r0, 800abe4 <_Balloc+0x68>
 800abb4:	2101      	movs	r1, #1
 800abb6:	fa01 f605 	lsl.w	r6, r1, r5
 800abba:	1d72      	adds	r2, r6, #5
 800abbc:	0092      	lsls	r2, r2, #2
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 ff52 	bl	800ba68 <_calloc_r>
 800abc4:	b160      	cbz	r0, 800abe0 <_Balloc+0x64>
 800abc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abca:	e00e      	b.n	800abea <_Balloc+0x6e>
 800abcc:	2221      	movs	r2, #33	@ 0x21
 800abce:	2104      	movs	r1, #4
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 ff49 	bl	800ba68 <_calloc_r>
 800abd6:	69e3      	ldr	r3, [r4, #28]
 800abd8:	60f0      	str	r0, [r6, #12]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1e4      	bne.n	800abaa <_Balloc+0x2e>
 800abe0:	2000      	movs	r0, #0
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	6802      	ldr	r2, [r0, #0]
 800abe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abea:	2300      	movs	r3, #0
 800abec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abf0:	e7f7      	b.n	800abe2 <_Balloc+0x66>
 800abf2:	bf00      	nop
 800abf4:	0800c226 	.word	0x0800c226
 800abf8:	0800c306 	.word	0x0800c306

0800abfc <_Bfree>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	69c6      	ldr	r6, [r0, #28]
 800ac00:	4605      	mov	r5, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	b976      	cbnz	r6, 800ac24 <_Bfree+0x28>
 800ac06:	2010      	movs	r0, #16
 800ac08:	f7fc fec6 	bl	8007998 <malloc>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	61e8      	str	r0, [r5, #28]
 800ac10:	b920      	cbnz	r0, 800ac1c <_Bfree+0x20>
 800ac12:	4b09      	ldr	r3, [pc, #36]	@ (800ac38 <_Bfree+0x3c>)
 800ac14:	4809      	ldr	r0, [pc, #36]	@ (800ac3c <_Bfree+0x40>)
 800ac16:	218f      	movs	r1, #143	@ 0x8f
 800ac18:	f000 ff08 	bl	800ba2c <__assert_func>
 800ac1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac20:	6006      	str	r6, [r0, #0]
 800ac22:	60c6      	str	r6, [r0, #12]
 800ac24:	b13c      	cbz	r4, 800ac36 <_Bfree+0x3a>
 800ac26:	69eb      	ldr	r3, [r5, #28]
 800ac28:	6862      	ldr	r2, [r4, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac30:	6021      	str	r1, [r4, #0]
 800ac32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	0800c226 	.word	0x0800c226
 800ac3c:	0800c306 	.word	0x0800c306

0800ac40 <__multadd>:
 800ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac44:	690d      	ldr	r5, [r1, #16]
 800ac46:	4607      	mov	r7, r0
 800ac48:	460c      	mov	r4, r1
 800ac4a:	461e      	mov	r6, r3
 800ac4c:	f101 0c14 	add.w	ip, r1, #20
 800ac50:	2000      	movs	r0, #0
 800ac52:	f8dc 3000 	ldr.w	r3, [ip]
 800ac56:	b299      	uxth	r1, r3
 800ac58:	fb02 6101 	mla	r1, r2, r1, r6
 800ac5c:	0c1e      	lsrs	r6, r3, #16
 800ac5e:	0c0b      	lsrs	r3, r1, #16
 800ac60:	fb02 3306 	mla	r3, r2, r6, r3
 800ac64:	b289      	uxth	r1, r1
 800ac66:	3001      	adds	r0, #1
 800ac68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac6c:	4285      	cmp	r5, r0
 800ac6e:	f84c 1b04 	str.w	r1, [ip], #4
 800ac72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac76:	dcec      	bgt.n	800ac52 <__multadd+0x12>
 800ac78:	b30e      	cbz	r6, 800acbe <__multadd+0x7e>
 800ac7a:	68a3      	ldr	r3, [r4, #8]
 800ac7c:	42ab      	cmp	r3, r5
 800ac7e:	dc19      	bgt.n	800acb4 <__multadd+0x74>
 800ac80:	6861      	ldr	r1, [r4, #4]
 800ac82:	4638      	mov	r0, r7
 800ac84:	3101      	adds	r1, #1
 800ac86:	f7ff ff79 	bl	800ab7c <_Balloc>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	b928      	cbnz	r0, 800ac9a <__multadd+0x5a>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4b0c      	ldr	r3, [pc, #48]	@ (800acc4 <__multadd+0x84>)
 800ac92:	480d      	ldr	r0, [pc, #52]	@ (800acc8 <__multadd+0x88>)
 800ac94:	21ba      	movs	r1, #186	@ 0xba
 800ac96:	f000 fec9 	bl	800ba2c <__assert_func>
 800ac9a:	6922      	ldr	r2, [r4, #16]
 800ac9c:	3202      	adds	r2, #2
 800ac9e:	f104 010c 	add.w	r1, r4, #12
 800aca2:	0092      	lsls	r2, r2, #2
 800aca4:	300c      	adds	r0, #12
 800aca6:	f7fe fd68 	bl	800977a <memcpy>
 800acaa:	4621      	mov	r1, r4
 800acac:	4638      	mov	r0, r7
 800acae:	f7ff ffa5 	bl	800abfc <_Bfree>
 800acb2:	4644      	mov	r4, r8
 800acb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acb8:	3501      	adds	r5, #1
 800acba:	615e      	str	r6, [r3, #20]
 800acbc:	6125      	str	r5, [r4, #16]
 800acbe:	4620      	mov	r0, r4
 800acc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc4:	0800c295 	.word	0x0800c295
 800acc8:	0800c306 	.word	0x0800c306

0800accc <__s2b>:
 800accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd0:	460c      	mov	r4, r1
 800acd2:	4615      	mov	r5, r2
 800acd4:	461f      	mov	r7, r3
 800acd6:	2209      	movs	r2, #9
 800acd8:	3308      	adds	r3, #8
 800acda:	4606      	mov	r6, r0
 800acdc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ace0:	2100      	movs	r1, #0
 800ace2:	2201      	movs	r2, #1
 800ace4:	429a      	cmp	r2, r3
 800ace6:	db09      	blt.n	800acfc <__s2b+0x30>
 800ace8:	4630      	mov	r0, r6
 800acea:	f7ff ff47 	bl	800ab7c <_Balloc>
 800acee:	b940      	cbnz	r0, 800ad02 <__s2b+0x36>
 800acf0:	4602      	mov	r2, r0
 800acf2:	4b19      	ldr	r3, [pc, #100]	@ (800ad58 <__s2b+0x8c>)
 800acf4:	4819      	ldr	r0, [pc, #100]	@ (800ad5c <__s2b+0x90>)
 800acf6:	21d3      	movs	r1, #211	@ 0xd3
 800acf8:	f000 fe98 	bl	800ba2c <__assert_func>
 800acfc:	0052      	lsls	r2, r2, #1
 800acfe:	3101      	adds	r1, #1
 800ad00:	e7f0      	b.n	800ace4 <__s2b+0x18>
 800ad02:	9b08      	ldr	r3, [sp, #32]
 800ad04:	6143      	str	r3, [r0, #20]
 800ad06:	2d09      	cmp	r5, #9
 800ad08:	f04f 0301 	mov.w	r3, #1
 800ad0c:	6103      	str	r3, [r0, #16]
 800ad0e:	dd16      	ble.n	800ad3e <__s2b+0x72>
 800ad10:	f104 0909 	add.w	r9, r4, #9
 800ad14:	46c8      	mov	r8, r9
 800ad16:	442c      	add	r4, r5
 800ad18:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad1c:	4601      	mov	r1, r0
 800ad1e:	3b30      	subs	r3, #48	@ 0x30
 800ad20:	220a      	movs	r2, #10
 800ad22:	4630      	mov	r0, r6
 800ad24:	f7ff ff8c 	bl	800ac40 <__multadd>
 800ad28:	45a0      	cmp	r8, r4
 800ad2a:	d1f5      	bne.n	800ad18 <__s2b+0x4c>
 800ad2c:	f1a5 0408 	sub.w	r4, r5, #8
 800ad30:	444c      	add	r4, r9
 800ad32:	1b2d      	subs	r5, r5, r4
 800ad34:	1963      	adds	r3, r4, r5
 800ad36:	42bb      	cmp	r3, r7
 800ad38:	db04      	blt.n	800ad44 <__s2b+0x78>
 800ad3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad3e:	340a      	adds	r4, #10
 800ad40:	2509      	movs	r5, #9
 800ad42:	e7f6      	b.n	800ad32 <__s2b+0x66>
 800ad44:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad48:	4601      	mov	r1, r0
 800ad4a:	3b30      	subs	r3, #48	@ 0x30
 800ad4c:	220a      	movs	r2, #10
 800ad4e:	4630      	mov	r0, r6
 800ad50:	f7ff ff76 	bl	800ac40 <__multadd>
 800ad54:	e7ee      	b.n	800ad34 <__s2b+0x68>
 800ad56:	bf00      	nop
 800ad58:	0800c295 	.word	0x0800c295
 800ad5c:	0800c306 	.word	0x0800c306

0800ad60 <__hi0bits>:
 800ad60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad64:	4603      	mov	r3, r0
 800ad66:	bf36      	itet	cc
 800ad68:	0403      	lslcc	r3, r0, #16
 800ad6a:	2000      	movcs	r0, #0
 800ad6c:	2010      	movcc	r0, #16
 800ad6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad72:	bf3c      	itt	cc
 800ad74:	021b      	lslcc	r3, r3, #8
 800ad76:	3008      	addcc	r0, #8
 800ad78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad7c:	bf3c      	itt	cc
 800ad7e:	011b      	lslcc	r3, r3, #4
 800ad80:	3004      	addcc	r0, #4
 800ad82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad86:	bf3c      	itt	cc
 800ad88:	009b      	lslcc	r3, r3, #2
 800ad8a:	3002      	addcc	r0, #2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	db05      	blt.n	800ad9c <__hi0bits+0x3c>
 800ad90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad94:	f100 0001 	add.w	r0, r0, #1
 800ad98:	bf08      	it	eq
 800ad9a:	2020      	moveq	r0, #32
 800ad9c:	4770      	bx	lr

0800ad9e <__lo0bits>:
 800ad9e:	6803      	ldr	r3, [r0, #0]
 800ada0:	4602      	mov	r2, r0
 800ada2:	f013 0007 	ands.w	r0, r3, #7
 800ada6:	d00b      	beq.n	800adc0 <__lo0bits+0x22>
 800ada8:	07d9      	lsls	r1, r3, #31
 800adaa:	d421      	bmi.n	800adf0 <__lo0bits+0x52>
 800adac:	0798      	lsls	r0, r3, #30
 800adae:	bf49      	itett	mi
 800adb0:	085b      	lsrmi	r3, r3, #1
 800adb2:	089b      	lsrpl	r3, r3, #2
 800adb4:	2001      	movmi	r0, #1
 800adb6:	6013      	strmi	r3, [r2, #0]
 800adb8:	bf5c      	itt	pl
 800adba:	6013      	strpl	r3, [r2, #0]
 800adbc:	2002      	movpl	r0, #2
 800adbe:	4770      	bx	lr
 800adc0:	b299      	uxth	r1, r3
 800adc2:	b909      	cbnz	r1, 800adc8 <__lo0bits+0x2a>
 800adc4:	0c1b      	lsrs	r3, r3, #16
 800adc6:	2010      	movs	r0, #16
 800adc8:	b2d9      	uxtb	r1, r3
 800adca:	b909      	cbnz	r1, 800add0 <__lo0bits+0x32>
 800adcc:	3008      	adds	r0, #8
 800adce:	0a1b      	lsrs	r3, r3, #8
 800add0:	0719      	lsls	r1, r3, #28
 800add2:	bf04      	itt	eq
 800add4:	091b      	lsreq	r3, r3, #4
 800add6:	3004      	addeq	r0, #4
 800add8:	0799      	lsls	r1, r3, #30
 800adda:	bf04      	itt	eq
 800addc:	089b      	lsreq	r3, r3, #2
 800adde:	3002      	addeq	r0, #2
 800ade0:	07d9      	lsls	r1, r3, #31
 800ade2:	d403      	bmi.n	800adec <__lo0bits+0x4e>
 800ade4:	085b      	lsrs	r3, r3, #1
 800ade6:	f100 0001 	add.w	r0, r0, #1
 800adea:	d003      	beq.n	800adf4 <__lo0bits+0x56>
 800adec:	6013      	str	r3, [r2, #0]
 800adee:	4770      	bx	lr
 800adf0:	2000      	movs	r0, #0
 800adf2:	4770      	bx	lr
 800adf4:	2020      	movs	r0, #32
 800adf6:	4770      	bx	lr

0800adf8 <__i2b>:
 800adf8:	b510      	push	{r4, lr}
 800adfa:	460c      	mov	r4, r1
 800adfc:	2101      	movs	r1, #1
 800adfe:	f7ff febd 	bl	800ab7c <_Balloc>
 800ae02:	4602      	mov	r2, r0
 800ae04:	b928      	cbnz	r0, 800ae12 <__i2b+0x1a>
 800ae06:	4b05      	ldr	r3, [pc, #20]	@ (800ae1c <__i2b+0x24>)
 800ae08:	4805      	ldr	r0, [pc, #20]	@ (800ae20 <__i2b+0x28>)
 800ae0a:	f240 1145 	movw	r1, #325	@ 0x145
 800ae0e:	f000 fe0d 	bl	800ba2c <__assert_func>
 800ae12:	2301      	movs	r3, #1
 800ae14:	6144      	str	r4, [r0, #20]
 800ae16:	6103      	str	r3, [r0, #16]
 800ae18:	bd10      	pop	{r4, pc}
 800ae1a:	bf00      	nop
 800ae1c:	0800c295 	.word	0x0800c295
 800ae20:	0800c306 	.word	0x0800c306

0800ae24 <__multiply>:
 800ae24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae28:	4614      	mov	r4, r2
 800ae2a:	690a      	ldr	r2, [r1, #16]
 800ae2c:	6923      	ldr	r3, [r4, #16]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	bfa8      	it	ge
 800ae32:	4623      	movge	r3, r4
 800ae34:	460f      	mov	r7, r1
 800ae36:	bfa4      	itt	ge
 800ae38:	460c      	movge	r4, r1
 800ae3a:	461f      	movge	r7, r3
 800ae3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ae40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ae44:	68a3      	ldr	r3, [r4, #8]
 800ae46:	6861      	ldr	r1, [r4, #4]
 800ae48:	eb0a 0609 	add.w	r6, sl, r9
 800ae4c:	42b3      	cmp	r3, r6
 800ae4e:	b085      	sub	sp, #20
 800ae50:	bfb8      	it	lt
 800ae52:	3101      	addlt	r1, #1
 800ae54:	f7ff fe92 	bl	800ab7c <_Balloc>
 800ae58:	b930      	cbnz	r0, 800ae68 <__multiply+0x44>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	4b44      	ldr	r3, [pc, #272]	@ (800af70 <__multiply+0x14c>)
 800ae5e:	4845      	ldr	r0, [pc, #276]	@ (800af74 <__multiply+0x150>)
 800ae60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae64:	f000 fde2 	bl	800ba2c <__assert_func>
 800ae68:	f100 0514 	add.w	r5, r0, #20
 800ae6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae70:	462b      	mov	r3, r5
 800ae72:	2200      	movs	r2, #0
 800ae74:	4543      	cmp	r3, r8
 800ae76:	d321      	bcc.n	800aebc <__multiply+0x98>
 800ae78:	f107 0114 	add.w	r1, r7, #20
 800ae7c:	f104 0214 	add.w	r2, r4, #20
 800ae80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ae84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ae88:	9302      	str	r3, [sp, #8]
 800ae8a:	1b13      	subs	r3, r2, r4
 800ae8c:	3b15      	subs	r3, #21
 800ae8e:	f023 0303 	bic.w	r3, r3, #3
 800ae92:	3304      	adds	r3, #4
 800ae94:	f104 0715 	add.w	r7, r4, #21
 800ae98:	42ba      	cmp	r2, r7
 800ae9a:	bf38      	it	cc
 800ae9c:	2304      	movcc	r3, #4
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	9b02      	ldr	r3, [sp, #8]
 800aea2:	9103      	str	r1, [sp, #12]
 800aea4:	428b      	cmp	r3, r1
 800aea6:	d80c      	bhi.n	800aec2 <__multiply+0x9e>
 800aea8:	2e00      	cmp	r6, #0
 800aeaa:	dd03      	ble.n	800aeb4 <__multiply+0x90>
 800aeac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d05b      	beq.n	800af6c <__multiply+0x148>
 800aeb4:	6106      	str	r6, [r0, #16]
 800aeb6:	b005      	add	sp, #20
 800aeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebc:	f843 2b04 	str.w	r2, [r3], #4
 800aec0:	e7d8      	b.n	800ae74 <__multiply+0x50>
 800aec2:	f8b1 a000 	ldrh.w	sl, [r1]
 800aec6:	f1ba 0f00 	cmp.w	sl, #0
 800aeca:	d024      	beq.n	800af16 <__multiply+0xf2>
 800aecc:	f104 0e14 	add.w	lr, r4, #20
 800aed0:	46a9      	mov	r9, r5
 800aed2:	f04f 0c00 	mov.w	ip, #0
 800aed6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aeda:	f8d9 3000 	ldr.w	r3, [r9]
 800aede:	fa1f fb87 	uxth.w	fp, r7
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	fb0a 330b 	mla	r3, sl, fp, r3
 800aee8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aeec:	f8d9 7000 	ldr.w	r7, [r9]
 800aef0:	4463      	add	r3, ip
 800aef2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aef6:	fb0a c70b 	mla	r7, sl, fp, ip
 800aefa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aefe:	b29b      	uxth	r3, r3
 800af00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af04:	4572      	cmp	r2, lr
 800af06:	f849 3b04 	str.w	r3, [r9], #4
 800af0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af0e:	d8e2      	bhi.n	800aed6 <__multiply+0xb2>
 800af10:	9b01      	ldr	r3, [sp, #4]
 800af12:	f845 c003 	str.w	ip, [r5, r3]
 800af16:	9b03      	ldr	r3, [sp, #12]
 800af18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af1c:	3104      	adds	r1, #4
 800af1e:	f1b9 0f00 	cmp.w	r9, #0
 800af22:	d021      	beq.n	800af68 <__multiply+0x144>
 800af24:	682b      	ldr	r3, [r5, #0]
 800af26:	f104 0c14 	add.w	ip, r4, #20
 800af2a:	46ae      	mov	lr, r5
 800af2c:	f04f 0a00 	mov.w	sl, #0
 800af30:	f8bc b000 	ldrh.w	fp, [ip]
 800af34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800af38:	fb09 770b 	mla	r7, r9, fp, r7
 800af3c:	4457      	add	r7, sl
 800af3e:	b29b      	uxth	r3, r3
 800af40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af44:	f84e 3b04 	str.w	r3, [lr], #4
 800af48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af50:	f8be 3000 	ldrh.w	r3, [lr]
 800af54:	fb09 330a 	mla	r3, r9, sl, r3
 800af58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800af5c:	4562      	cmp	r2, ip
 800af5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af62:	d8e5      	bhi.n	800af30 <__multiply+0x10c>
 800af64:	9f01      	ldr	r7, [sp, #4]
 800af66:	51eb      	str	r3, [r5, r7]
 800af68:	3504      	adds	r5, #4
 800af6a:	e799      	b.n	800aea0 <__multiply+0x7c>
 800af6c:	3e01      	subs	r6, #1
 800af6e:	e79b      	b.n	800aea8 <__multiply+0x84>
 800af70:	0800c295 	.word	0x0800c295
 800af74:	0800c306 	.word	0x0800c306

0800af78 <__pow5mult>:
 800af78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af7c:	4615      	mov	r5, r2
 800af7e:	f012 0203 	ands.w	r2, r2, #3
 800af82:	4607      	mov	r7, r0
 800af84:	460e      	mov	r6, r1
 800af86:	d007      	beq.n	800af98 <__pow5mult+0x20>
 800af88:	4c25      	ldr	r4, [pc, #148]	@ (800b020 <__pow5mult+0xa8>)
 800af8a:	3a01      	subs	r2, #1
 800af8c:	2300      	movs	r3, #0
 800af8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af92:	f7ff fe55 	bl	800ac40 <__multadd>
 800af96:	4606      	mov	r6, r0
 800af98:	10ad      	asrs	r5, r5, #2
 800af9a:	d03d      	beq.n	800b018 <__pow5mult+0xa0>
 800af9c:	69fc      	ldr	r4, [r7, #28]
 800af9e:	b97c      	cbnz	r4, 800afc0 <__pow5mult+0x48>
 800afa0:	2010      	movs	r0, #16
 800afa2:	f7fc fcf9 	bl	8007998 <malloc>
 800afa6:	4602      	mov	r2, r0
 800afa8:	61f8      	str	r0, [r7, #28]
 800afaa:	b928      	cbnz	r0, 800afb8 <__pow5mult+0x40>
 800afac:	4b1d      	ldr	r3, [pc, #116]	@ (800b024 <__pow5mult+0xac>)
 800afae:	481e      	ldr	r0, [pc, #120]	@ (800b028 <__pow5mult+0xb0>)
 800afb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800afb4:	f000 fd3a 	bl	800ba2c <__assert_func>
 800afb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afbc:	6004      	str	r4, [r0, #0]
 800afbe:	60c4      	str	r4, [r0, #12]
 800afc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800afc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afc8:	b94c      	cbnz	r4, 800afde <__pow5mult+0x66>
 800afca:	f240 2171 	movw	r1, #625	@ 0x271
 800afce:	4638      	mov	r0, r7
 800afd0:	f7ff ff12 	bl	800adf8 <__i2b>
 800afd4:	2300      	movs	r3, #0
 800afd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800afda:	4604      	mov	r4, r0
 800afdc:	6003      	str	r3, [r0, #0]
 800afde:	f04f 0900 	mov.w	r9, #0
 800afe2:	07eb      	lsls	r3, r5, #31
 800afe4:	d50a      	bpl.n	800affc <__pow5mult+0x84>
 800afe6:	4631      	mov	r1, r6
 800afe8:	4622      	mov	r2, r4
 800afea:	4638      	mov	r0, r7
 800afec:	f7ff ff1a 	bl	800ae24 <__multiply>
 800aff0:	4631      	mov	r1, r6
 800aff2:	4680      	mov	r8, r0
 800aff4:	4638      	mov	r0, r7
 800aff6:	f7ff fe01 	bl	800abfc <_Bfree>
 800affa:	4646      	mov	r6, r8
 800affc:	106d      	asrs	r5, r5, #1
 800affe:	d00b      	beq.n	800b018 <__pow5mult+0xa0>
 800b000:	6820      	ldr	r0, [r4, #0]
 800b002:	b938      	cbnz	r0, 800b014 <__pow5mult+0x9c>
 800b004:	4622      	mov	r2, r4
 800b006:	4621      	mov	r1, r4
 800b008:	4638      	mov	r0, r7
 800b00a:	f7ff ff0b 	bl	800ae24 <__multiply>
 800b00e:	6020      	str	r0, [r4, #0]
 800b010:	f8c0 9000 	str.w	r9, [r0]
 800b014:	4604      	mov	r4, r0
 800b016:	e7e4      	b.n	800afe2 <__pow5mult+0x6a>
 800b018:	4630      	mov	r0, r6
 800b01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01e:	bf00      	nop
 800b020:	0800c360 	.word	0x0800c360
 800b024:	0800c226 	.word	0x0800c226
 800b028:	0800c306 	.word	0x0800c306

0800b02c <__lshift>:
 800b02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	460c      	mov	r4, r1
 800b032:	6849      	ldr	r1, [r1, #4]
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b03a:	68a3      	ldr	r3, [r4, #8]
 800b03c:	4607      	mov	r7, r0
 800b03e:	4691      	mov	r9, r2
 800b040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b044:	f108 0601 	add.w	r6, r8, #1
 800b048:	42b3      	cmp	r3, r6
 800b04a:	db0b      	blt.n	800b064 <__lshift+0x38>
 800b04c:	4638      	mov	r0, r7
 800b04e:	f7ff fd95 	bl	800ab7c <_Balloc>
 800b052:	4605      	mov	r5, r0
 800b054:	b948      	cbnz	r0, 800b06a <__lshift+0x3e>
 800b056:	4602      	mov	r2, r0
 800b058:	4b28      	ldr	r3, [pc, #160]	@ (800b0fc <__lshift+0xd0>)
 800b05a:	4829      	ldr	r0, [pc, #164]	@ (800b100 <__lshift+0xd4>)
 800b05c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b060:	f000 fce4 	bl	800ba2c <__assert_func>
 800b064:	3101      	adds	r1, #1
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	e7ee      	b.n	800b048 <__lshift+0x1c>
 800b06a:	2300      	movs	r3, #0
 800b06c:	f100 0114 	add.w	r1, r0, #20
 800b070:	f100 0210 	add.w	r2, r0, #16
 800b074:	4618      	mov	r0, r3
 800b076:	4553      	cmp	r3, sl
 800b078:	db33      	blt.n	800b0e2 <__lshift+0xb6>
 800b07a:	6920      	ldr	r0, [r4, #16]
 800b07c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b080:	f104 0314 	add.w	r3, r4, #20
 800b084:	f019 091f 	ands.w	r9, r9, #31
 800b088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b08c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b090:	d02b      	beq.n	800b0ea <__lshift+0xbe>
 800b092:	f1c9 0e20 	rsb	lr, r9, #32
 800b096:	468a      	mov	sl, r1
 800b098:	2200      	movs	r2, #0
 800b09a:	6818      	ldr	r0, [r3, #0]
 800b09c:	fa00 f009 	lsl.w	r0, r0, r9
 800b0a0:	4310      	orrs	r0, r2
 800b0a2:	f84a 0b04 	str.w	r0, [sl], #4
 800b0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0aa:	459c      	cmp	ip, r3
 800b0ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0b0:	d8f3      	bhi.n	800b09a <__lshift+0x6e>
 800b0b2:	ebac 0304 	sub.w	r3, ip, r4
 800b0b6:	3b15      	subs	r3, #21
 800b0b8:	f023 0303 	bic.w	r3, r3, #3
 800b0bc:	3304      	adds	r3, #4
 800b0be:	f104 0015 	add.w	r0, r4, #21
 800b0c2:	4584      	cmp	ip, r0
 800b0c4:	bf38      	it	cc
 800b0c6:	2304      	movcc	r3, #4
 800b0c8:	50ca      	str	r2, [r1, r3]
 800b0ca:	b10a      	cbz	r2, 800b0d0 <__lshift+0xa4>
 800b0cc:	f108 0602 	add.w	r6, r8, #2
 800b0d0:	3e01      	subs	r6, #1
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	612e      	str	r6, [r5, #16]
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	f7ff fd90 	bl	800abfc <_Bfree>
 800b0dc:	4628      	mov	r0, r5
 800b0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	e7c5      	b.n	800b076 <__lshift+0x4a>
 800b0ea:	3904      	subs	r1, #4
 800b0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0f4:	459c      	cmp	ip, r3
 800b0f6:	d8f9      	bhi.n	800b0ec <__lshift+0xc0>
 800b0f8:	e7ea      	b.n	800b0d0 <__lshift+0xa4>
 800b0fa:	bf00      	nop
 800b0fc:	0800c295 	.word	0x0800c295
 800b100:	0800c306 	.word	0x0800c306

0800b104 <__mcmp>:
 800b104:	690a      	ldr	r2, [r1, #16]
 800b106:	4603      	mov	r3, r0
 800b108:	6900      	ldr	r0, [r0, #16]
 800b10a:	1a80      	subs	r0, r0, r2
 800b10c:	b530      	push	{r4, r5, lr}
 800b10e:	d10e      	bne.n	800b12e <__mcmp+0x2a>
 800b110:	3314      	adds	r3, #20
 800b112:	3114      	adds	r1, #20
 800b114:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b118:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b11c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b120:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b124:	4295      	cmp	r5, r2
 800b126:	d003      	beq.n	800b130 <__mcmp+0x2c>
 800b128:	d205      	bcs.n	800b136 <__mcmp+0x32>
 800b12a:	f04f 30ff 	mov.w	r0, #4294967295
 800b12e:	bd30      	pop	{r4, r5, pc}
 800b130:	42a3      	cmp	r3, r4
 800b132:	d3f3      	bcc.n	800b11c <__mcmp+0x18>
 800b134:	e7fb      	b.n	800b12e <__mcmp+0x2a>
 800b136:	2001      	movs	r0, #1
 800b138:	e7f9      	b.n	800b12e <__mcmp+0x2a>
	...

0800b13c <__mdiff>:
 800b13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	4689      	mov	r9, r1
 800b142:	4606      	mov	r6, r0
 800b144:	4611      	mov	r1, r2
 800b146:	4648      	mov	r0, r9
 800b148:	4614      	mov	r4, r2
 800b14a:	f7ff ffdb 	bl	800b104 <__mcmp>
 800b14e:	1e05      	subs	r5, r0, #0
 800b150:	d112      	bne.n	800b178 <__mdiff+0x3c>
 800b152:	4629      	mov	r1, r5
 800b154:	4630      	mov	r0, r6
 800b156:	f7ff fd11 	bl	800ab7c <_Balloc>
 800b15a:	4602      	mov	r2, r0
 800b15c:	b928      	cbnz	r0, 800b16a <__mdiff+0x2e>
 800b15e:	4b3f      	ldr	r3, [pc, #252]	@ (800b25c <__mdiff+0x120>)
 800b160:	f240 2137 	movw	r1, #567	@ 0x237
 800b164:	483e      	ldr	r0, [pc, #248]	@ (800b260 <__mdiff+0x124>)
 800b166:	f000 fc61 	bl	800ba2c <__assert_func>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b170:	4610      	mov	r0, r2
 800b172:	b003      	add	sp, #12
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	bfbc      	itt	lt
 800b17a:	464b      	movlt	r3, r9
 800b17c:	46a1      	movlt	r9, r4
 800b17e:	4630      	mov	r0, r6
 800b180:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b184:	bfba      	itte	lt
 800b186:	461c      	movlt	r4, r3
 800b188:	2501      	movlt	r5, #1
 800b18a:	2500      	movge	r5, #0
 800b18c:	f7ff fcf6 	bl	800ab7c <_Balloc>
 800b190:	4602      	mov	r2, r0
 800b192:	b918      	cbnz	r0, 800b19c <__mdiff+0x60>
 800b194:	4b31      	ldr	r3, [pc, #196]	@ (800b25c <__mdiff+0x120>)
 800b196:	f240 2145 	movw	r1, #581	@ 0x245
 800b19a:	e7e3      	b.n	800b164 <__mdiff+0x28>
 800b19c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b1a0:	6926      	ldr	r6, [r4, #16]
 800b1a2:	60c5      	str	r5, [r0, #12]
 800b1a4:	f109 0310 	add.w	r3, r9, #16
 800b1a8:	f109 0514 	add.w	r5, r9, #20
 800b1ac:	f104 0e14 	add.w	lr, r4, #20
 800b1b0:	f100 0b14 	add.w	fp, r0, #20
 800b1b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b1b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	46d9      	mov	r9, fp
 800b1c0:	f04f 0c00 	mov.w	ip, #0
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b1ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b1ce:	9301      	str	r3, [sp, #4]
 800b1d0:	fa1f f38a 	uxth.w	r3, sl
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	b283      	uxth	r3, r0
 800b1d8:	1acb      	subs	r3, r1, r3
 800b1da:	0c00      	lsrs	r0, r0, #16
 800b1dc:	4463      	add	r3, ip
 800b1de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b1e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b1ec:	4576      	cmp	r6, lr
 800b1ee:	f849 3b04 	str.w	r3, [r9], #4
 800b1f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1f6:	d8e5      	bhi.n	800b1c4 <__mdiff+0x88>
 800b1f8:	1b33      	subs	r3, r6, r4
 800b1fa:	3b15      	subs	r3, #21
 800b1fc:	f023 0303 	bic.w	r3, r3, #3
 800b200:	3415      	adds	r4, #21
 800b202:	3304      	adds	r3, #4
 800b204:	42a6      	cmp	r6, r4
 800b206:	bf38      	it	cc
 800b208:	2304      	movcc	r3, #4
 800b20a:	441d      	add	r5, r3
 800b20c:	445b      	add	r3, fp
 800b20e:	461e      	mov	r6, r3
 800b210:	462c      	mov	r4, r5
 800b212:	4544      	cmp	r4, r8
 800b214:	d30e      	bcc.n	800b234 <__mdiff+0xf8>
 800b216:	f108 0103 	add.w	r1, r8, #3
 800b21a:	1b49      	subs	r1, r1, r5
 800b21c:	f021 0103 	bic.w	r1, r1, #3
 800b220:	3d03      	subs	r5, #3
 800b222:	45a8      	cmp	r8, r5
 800b224:	bf38      	it	cc
 800b226:	2100      	movcc	r1, #0
 800b228:	440b      	add	r3, r1
 800b22a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b22e:	b191      	cbz	r1, 800b256 <__mdiff+0x11a>
 800b230:	6117      	str	r7, [r2, #16]
 800b232:	e79d      	b.n	800b170 <__mdiff+0x34>
 800b234:	f854 1b04 	ldr.w	r1, [r4], #4
 800b238:	46e6      	mov	lr, ip
 800b23a:	0c08      	lsrs	r0, r1, #16
 800b23c:	fa1c fc81 	uxtah	ip, ip, r1
 800b240:	4471      	add	r1, lr
 800b242:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b246:	b289      	uxth	r1, r1
 800b248:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b24c:	f846 1b04 	str.w	r1, [r6], #4
 800b250:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b254:	e7dd      	b.n	800b212 <__mdiff+0xd6>
 800b256:	3f01      	subs	r7, #1
 800b258:	e7e7      	b.n	800b22a <__mdiff+0xee>
 800b25a:	bf00      	nop
 800b25c:	0800c295 	.word	0x0800c295
 800b260:	0800c306 	.word	0x0800c306

0800b264 <__ulp>:
 800b264:	b082      	sub	sp, #8
 800b266:	ed8d 0b00 	vstr	d0, [sp]
 800b26a:	9a01      	ldr	r2, [sp, #4]
 800b26c:	4b0f      	ldr	r3, [pc, #60]	@ (800b2ac <__ulp+0x48>)
 800b26e:	4013      	ands	r3, r2
 800b270:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b274:	2b00      	cmp	r3, #0
 800b276:	dc08      	bgt.n	800b28a <__ulp+0x26>
 800b278:	425b      	negs	r3, r3
 800b27a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b27e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b282:	da04      	bge.n	800b28e <__ulp+0x2a>
 800b284:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b288:	4113      	asrs	r3, r2
 800b28a:	2200      	movs	r2, #0
 800b28c:	e008      	b.n	800b2a0 <__ulp+0x3c>
 800b28e:	f1a2 0314 	sub.w	r3, r2, #20
 800b292:	2b1e      	cmp	r3, #30
 800b294:	bfda      	itte	le
 800b296:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b29a:	40da      	lsrle	r2, r3
 800b29c:	2201      	movgt	r2, #1
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	ec41 0b10 	vmov	d0, r0, r1
 800b2a8:	b002      	add	sp, #8
 800b2aa:	4770      	bx	lr
 800b2ac:	7ff00000 	.word	0x7ff00000

0800b2b0 <__b2d>:
 800b2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b4:	6906      	ldr	r6, [r0, #16]
 800b2b6:	f100 0814 	add.w	r8, r0, #20
 800b2ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b2be:	1f37      	subs	r7, r6, #4
 800b2c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	f7ff fd4b 	bl	800ad60 <__hi0bits>
 800b2ca:	f1c0 0320 	rsb	r3, r0, #32
 800b2ce:	280a      	cmp	r0, #10
 800b2d0:	600b      	str	r3, [r1, #0]
 800b2d2:	491b      	ldr	r1, [pc, #108]	@ (800b340 <__b2d+0x90>)
 800b2d4:	dc15      	bgt.n	800b302 <__b2d+0x52>
 800b2d6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b2da:	fa22 f30c 	lsr.w	r3, r2, ip
 800b2de:	45b8      	cmp	r8, r7
 800b2e0:	ea43 0501 	orr.w	r5, r3, r1
 800b2e4:	bf34      	ite	cc
 800b2e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b2ea:	2300      	movcs	r3, #0
 800b2ec:	3015      	adds	r0, #21
 800b2ee:	fa02 f000 	lsl.w	r0, r2, r0
 800b2f2:	fa23 f30c 	lsr.w	r3, r3, ip
 800b2f6:	4303      	orrs	r3, r0
 800b2f8:	461c      	mov	r4, r3
 800b2fa:	ec45 4b10 	vmov	d0, r4, r5
 800b2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b302:	45b8      	cmp	r8, r7
 800b304:	bf3a      	itte	cc
 800b306:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b30a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b30e:	2300      	movcs	r3, #0
 800b310:	380b      	subs	r0, #11
 800b312:	d012      	beq.n	800b33a <__b2d+0x8a>
 800b314:	f1c0 0120 	rsb	r1, r0, #32
 800b318:	fa23 f401 	lsr.w	r4, r3, r1
 800b31c:	4082      	lsls	r2, r0
 800b31e:	4322      	orrs	r2, r4
 800b320:	4547      	cmp	r7, r8
 800b322:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b326:	bf8c      	ite	hi
 800b328:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b32c:	2200      	movls	r2, #0
 800b32e:	4083      	lsls	r3, r0
 800b330:	40ca      	lsrs	r2, r1
 800b332:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b336:	4313      	orrs	r3, r2
 800b338:	e7de      	b.n	800b2f8 <__b2d+0x48>
 800b33a:	ea42 0501 	orr.w	r5, r2, r1
 800b33e:	e7db      	b.n	800b2f8 <__b2d+0x48>
 800b340:	3ff00000 	.word	0x3ff00000

0800b344 <__d2b>:
 800b344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b348:	460f      	mov	r7, r1
 800b34a:	2101      	movs	r1, #1
 800b34c:	ec59 8b10 	vmov	r8, r9, d0
 800b350:	4616      	mov	r6, r2
 800b352:	f7ff fc13 	bl	800ab7c <_Balloc>
 800b356:	4604      	mov	r4, r0
 800b358:	b930      	cbnz	r0, 800b368 <__d2b+0x24>
 800b35a:	4602      	mov	r2, r0
 800b35c:	4b23      	ldr	r3, [pc, #140]	@ (800b3ec <__d2b+0xa8>)
 800b35e:	4824      	ldr	r0, [pc, #144]	@ (800b3f0 <__d2b+0xac>)
 800b360:	f240 310f 	movw	r1, #783	@ 0x30f
 800b364:	f000 fb62 	bl	800ba2c <__assert_func>
 800b368:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b36c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b370:	b10d      	cbz	r5, 800b376 <__d2b+0x32>
 800b372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	f1b8 0300 	subs.w	r3, r8, #0
 800b37c:	d023      	beq.n	800b3c6 <__d2b+0x82>
 800b37e:	4668      	mov	r0, sp
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	f7ff fd0c 	bl	800ad9e <__lo0bits>
 800b386:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b38a:	b1d0      	cbz	r0, 800b3c2 <__d2b+0x7e>
 800b38c:	f1c0 0320 	rsb	r3, r0, #32
 800b390:	fa02 f303 	lsl.w	r3, r2, r3
 800b394:	430b      	orrs	r3, r1
 800b396:	40c2      	lsrs	r2, r0
 800b398:	6163      	str	r3, [r4, #20]
 800b39a:	9201      	str	r2, [sp, #4]
 800b39c:	9b01      	ldr	r3, [sp, #4]
 800b39e:	61a3      	str	r3, [r4, #24]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	bf0c      	ite	eq
 800b3a4:	2201      	moveq	r2, #1
 800b3a6:	2202      	movne	r2, #2
 800b3a8:	6122      	str	r2, [r4, #16]
 800b3aa:	b1a5      	cbz	r5, 800b3d6 <__d2b+0x92>
 800b3ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b3b0:	4405      	add	r5, r0
 800b3b2:	603d      	str	r5, [r7, #0]
 800b3b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b3b8:	6030      	str	r0, [r6, #0]
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	b003      	add	sp, #12
 800b3be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3c2:	6161      	str	r1, [r4, #20]
 800b3c4:	e7ea      	b.n	800b39c <__d2b+0x58>
 800b3c6:	a801      	add	r0, sp, #4
 800b3c8:	f7ff fce9 	bl	800ad9e <__lo0bits>
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	6163      	str	r3, [r4, #20]
 800b3d0:	3020      	adds	r0, #32
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	e7e8      	b.n	800b3a8 <__d2b+0x64>
 800b3d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b3de:	6038      	str	r0, [r7, #0]
 800b3e0:	6918      	ldr	r0, [r3, #16]
 800b3e2:	f7ff fcbd 	bl	800ad60 <__hi0bits>
 800b3e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3ea:	e7e5      	b.n	800b3b8 <__d2b+0x74>
 800b3ec:	0800c295 	.word	0x0800c295
 800b3f0:	0800c306 	.word	0x0800c306

0800b3f4 <__ratio>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	b085      	sub	sp, #20
 800b3fa:	e9cd 1000 	strd	r1, r0, [sp]
 800b3fe:	a902      	add	r1, sp, #8
 800b400:	f7ff ff56 	bl	800b2b0 <__b2d>
 800b404:	9800      	ldr	r0, [sp, #0]
 800b406:	a903      	add	r1, sp, #12
 800b408:	ec55 4b10 	vmov	r4, r5, d0
 800b40c:	f7ff ff50 	bl	800b2b0 <__b2d>
 800b410:	9b01      	ldr	r3, [sp, #4]
 800b412:	6919      	ldr	r1, [r3, #16]
 800b414:	9b00      	ldr	r3, [sp, #0]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	1ac9      	subs	r1, r1, r3
 800b41a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b41e:	1a9b      	subs	r3, r3, r2
 800b420:	ec5b ab10 	vmov	sl, fp, d0
 800b424:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b428:	2b00      	cmp	r3, #0
 800b42a:	bfce      	itee	gt
 800b42c:	462a      	movgt	r2, r5
 800b42e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b432:	465a      	movle	r2, fp
 800b434:	462f      	mov	r7, r5
 800b436:	46d9      	mov	r9, fp
 800b438:	bfcc      	ite	gt
 800b43a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b43e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b442:	464b      	mov	r3, r9
 800b444:	4652      	mov	r2, sl
 800b446:	4620      	mov	r0, r4
 800b448:	4639      	mov	r1, r7
 800b44a:	f7f5 fa1f 	bl	800088c <__aeabi_ddiv>
 800b44e:	ec41 0b10 	vmov	d0, r0, r1
 800b452:	b005      	add	sp, #20
 800b454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b458 <__copybits>:
 800b458:	3901      	subs	r1, #1
 800b45a:	b570      	push	{r4, r5, r6, lr}
 800b45c:	1149      	asrs	r1, r1, #5
 800b45e:	6914      	ldr	r4, [r2, #16]
 800b460:	3101      	adds	r1, #1
 800b462:	f102 0314 	add.w	r3, r2, #20
 800b466:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b46a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b46e:	1f05      	subs	r5, r0, #4
 800b470:	42a3      	cmp	r3, r4
 800b472:	d30c      	bcc.n	800b48e <__copybits+0x36>
 800b474:	1aa3      	subs	r3, r4, r2
 800b476:	3b11      	subs	r3, #17
 800b478:	f023 0303 	bic.w	r3, r3, #3
 800b47c:	3211      	adds	r2, #17
 800b47e:	42a2      	cmp	r2, r4
 800b480:	bf88      	it	hi
 800b482:	2300      	movhi	r3, #0
 800b484:	4418      	add	r0, r3
 800b486:	2300      	movs	r3, #0
 800b488:	4288      	cmp	r0, r1
 800b48a:	d305      	bcc.n	800b498 <__copybits+0x40>
 800b48c:	bd70      	pop	{r4, r5, r6, pc}
 800b48e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b492:	f845 6f04 	str.w	r6, [r5, #4]!
 800b496:	e7eb      	b.n	800b470 <__copybits+0x18>
 800b498:	f840 3b04 	str.w	r3, [r0], #4
 800b49c:	e7f4      	b.n	800b488 <__copybits+0x30>

0800b49e <__any_on>:
 800b49e:	f100 0214 	add.w	r2, r0, #20
 800b4a2:	6900      	ldr	r0, [r0, #16]
 800b4a4:	114b      	asrs	r3, r1, #5
 800b4a6:	4298      	cmp	r0, r3
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	db11      	blt.n	800b4d0 <__any_on+0x32>
 800b4ac:	dd0a      	ble.n	800b4c4 <__any_on+0x26>
 800b4ae:	f011 011f 	ands.w	r1, r1, #31
 800b4b2:	d007      	beq.n	800b4c4 <__any_on+0x26>
 800b4b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4b8:	fa24 f001 	lsr.w	r0, r4, r1
 800b4bc:	fa00 f101 	lsl.w	r1, r0, r1
 800b4c0:	428c      	cmp	r4, r1
 800b4c2:	d10b      	bne.n	800b4dc <__any_on+0x3e>
 800b4c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d803      	bhi.n	800b4d4 <__any_on+0x36>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	bd10      	pop	{r4, pc}
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	e7f7      	b.n	800b4c4 <__any_on+0x26>
 800b4d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4d8:	2900      	cmp	r1, #0
 800b4da:	d0f5      	beq.n	800b4c8 <__any_on+0x2a>
 800b4dc:	2001      	movs	r0, #1
 800b4de:	e7f6      	b.n	800b4ce <__any_on+0x30>

0800b4e0 <_strtol_l.constprop.0>:
 800b4e0:	2b24      	cmp	r3, #36	@ 0x24
 800b4e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e6:	4686      	mov	lr, r0
 800b4e8:	4690      	mov	r8, r2
 800b4ea:	d801      	bhi.n	800b4f0 <_strtol_l.constprop.0+0x10>
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d106      	bne.n	800b4fe <_strtol_l.constprop.0+0x1e>
 800b4f0:	f7fe f916 	bl	8009720 <__errno>
 800b4f4:	2316      	movs	r3, #22
 800b4f6:	6003      	str	r3, [r0, #0]
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4fe:	4834      	ldr	r0, [pc, #208]	@ (800b5d0 <_strtol_l.constprop.0+0xf0>)
 800b500:	460d      	mov	r5, r1
 800b502:	462a      	mov	r2, r5
 800b504:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b508:	5d06      	ldrb	r6, [r0, r4]
 800b50a:	f016 0608 	ands.w	r6, r6, #8
 800b50e:	d1f8      	bne.n	800b502 <_strtol_l.constprop.0+0x22>
 800b510:	2c2d      	cmp	r4, #45	@ 0x2d
 800b512:	d12d      	bne.n	800b570 <_strtol_l.constprop.0+0x90>
 800b514:	782c      	ldrb	r4, [r5, #0]
 800b516:	2601      	movs	r6, #1
 800b518:	1c95      	adds	r5, r2, #2
 800b51a:	f033 0210 	bics.w	r2, r3, #16
 800b51e:	d109      	bne.n	800b534 <_strtol_l.constprop.0+0x54>
 800b520:	2c30      	cmp	r4, #48	@ 0x30
 800b522:	d12a      	bne.n	800b57a <_strtol_l.constprop.0+0x9a>
 800b524:	782a      	ldrb	r2, [r5, #0]
 800b526:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b52a:	2a58      	cmp	r2, #88	@ 0x58
 800b52c:	d125      	bne.n	800b57a <_strtol_l.constprop.0+0x9a>
 800b52e:	786c      	ldrb	r4, [r5, #1]
 800b530:	2310      	movs	r3, #16
 800b532:	3502      	adds	r5, #2
 800b534:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b538:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b53c:	2200      	movs	r2, #0
 800b53e:	fbbc f9f3 	udiv	r9, ip, r3
 800b542:	4610      	mov	r0, r2
 800b544:	fb03 ca19 	mls	sl, r3, r9, ip
 800b548:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b54c:	2f09      	cmp	r7, #9
 800b54e:	d81b      	bhi.n	800b588 <_strtol_l.constprop.0+0xa8>
 800b550:	463c      	mov	r4, r7
 800b552:	42a3      	cmp	r3, r4
 800b554:	dd27      	ble.n	800b5a6 <_strtol_l.constprop.0+0xc6>
 800b556:	1c57      	adds	r7, r2, #1
 800b558:	d007      	beq.n	800b56a <_strtol_l.constprop.0+0x8a>
 800b55a:	4581      	cmp	r9, r0
 800b55c:	d320      	bcc.n	800b5a0 <_strtol_l.constprop.0+0xc0>
 800b55e:	d101      	bne.n	800b564 <_strtol_l.constprop.0+0x84>
 800b560:	45a2      	cmp	sl, r4
 800b562:	db1d      	blt.n	800b5a0 <_strtol_l.constprop.0+0xc0>
 800b564:	fb00 4003 	mla	r0, r0, r3, r4
 800b568:	2201      	movs	r2, #1
 800b56a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b56e:	e7eb      	b.n	800b548 <_strtol_l.constprop.0+0x68>
 800b570:	2c2b      	cmp	r4, #43	@ 0x2b
 800b572:	bf04      	itt	eq
 800b574:	782c      	ldrbeq	r4, [r5, #0]
 800b576:	1c95      	addeq	r5, r2, #2
 800b578:	e7cf      	b.n	800b51a <_strtol_l.constprop.0+0x3a>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1da      	bne.n	800b534 <_strtol_l.constprop.0+0x54>
 800b57e:	2c30      	cmp	r4, #48	@ 0x30
 800b580:	bf0c      	ite	eq
 800b582:	2308      	moveq	r3, #8
 800b584:	230a      	movne	r3, #10
 800b586:	e7d5      	b.n	800b534 <_strtol_l.constprop.0+0x54>
 800b588:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b58c:	2f19      	cmp	r7, #25
 800b58e:	d801      	bhi.n	800b594 <_strtol_l.constprop.0+0xb4>
 800b590:	3c37      	subs	r4, #55	@ 0x37
 800b592:	e7de      	b.n	800b552 <_strtol_l.constprop.0+0x72>
 800b594:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b598:	2f19      	cmp	r7, #25
 800b59a:	d804      	bhi.n	800b5a6 <_strtol_l.constprop.0+0xc6>
 800b59c:	3c57      	subs	r4, #87	@ 0x57
 800b59e:	e7d8      	b.n	800b552 <_strtol_l.constprop.0+0x72>
 800b5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a4:	e7e1      	b.n	800b56a <_strtol_l.constprop.0+0x8a>
 800b5a6:	1c53      	adds	r3, r2, #1
 800b5a8:	d108      	bne.n	800b5bc <_strtol_l.constprop.0+0xdc>
 800b5aa:	2322      	movs	r3, #34	@ 0x22
 800b5ac:	f8ce 3000 	str.w	r3, [lr]
 800b5b0:	4660      	mov	r0, ip
 800b5b2:	f1b8 0f00 	cmp.w	r8, #0
 800b5b6:	d0a0      	beq.n	800b4fa <_strtol_l.constprop.0+0x1a>
 800b5b8:	1e69      	subs	r1, r5, #1
 800b5ba:	e006      	b.n	800b5ca <_strtol_l.constprop.0+0xea>
 800b5bc:	b106      	cbz	r6, 800b5c0 <_strtol_l.constprop.0+0xe0>
 800b5be:	4240      	negs	r0, r0
 800b5c0:	f1b8 0f00 	cmp.w	r8, #0
 800b5c4:	d099      	beq.n	800b4fa <_strtol_l.constprop.0+0x1a>
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	d1f6      	bne.n	800b5b8 <_strtol_l.constprop.0+0xd8>
 800b5ca:	f8c8 1000 	str.w	r1, [r8]
 800b5ce:	e794      	b.n	800b4fa <_strtol_l.constprop.0+0x1a>
 800b5d0:	0800c461 	.word	0x0800c461

0800b5d4 <_strtol_r>:
 800b5d4:	f7ff bf84 	b.w	800b4e0 <_strtol_l.constprop.0>

0800b5d8 <__ascii_wctomb>:
 800b5d8:	4603      	mov	r3, r0
 800b5da:	4608      	mov	r0, r1
 800b5dc:	b141      	cbz	r1, 800b5f0 <__ascii_wctomb+0x18>
 800b5de:	2aff      	cmp	r2, #255	@ 0xff
 800b5e0:	d904      	bls.n	800b5ec <__ascii_wctomb+0x14>
 800b5e2:	228a      	movs	r2, #138	@ 0x8a
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ea:	4770      	bx	lr
 800b5ec:	700a      	strb	r2, [r1, #0]
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	4770      	bx	lr

0800b5f2 <__ssputs_r>:
 800b5f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f6:	688e      	ldr	r6, [r1, #8]
 800b5f8:	461f      	mov	r7, r3
 800b5fa:	42be      	cmp	r6, r7
 800b5fc:	680b      	ldr	r3, [r1, #0]
 800b5fe:	4682      	mov	sl, r0
 800b600:	460c      	mov	r4, r1
 800b602:	4690      	mov	r8, r2
 800b604:	d82d      	bhi.n	800b662 <__ssputs_r+0x70>
 800b606:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b60a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b60e:	d026      	beq.n	800b65e <__ssputs_r+0x6c>
 800b610:	6965      	ldr	r5, [r4, #20]
 800b612:	6909      	ldr	r1, [r1, #16]
 800b614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b618:	eba3 0901 	sub.w	r9, r3, r1
 800b61c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b620:	1c7b      	adds	r3, r7, #1
 800b622:	444b      	add	r3, r9
 800b624:	106d      	asrs	r5, r5, #1
 800b626:	429d      	cmp	r5, r3
 800b628:	bf38      	it	cc
 800b62a:	461d      	movcc	r5, r3
 800b62c:	0553      	lsls	r3, r2, #21
 800b62e:	d527      	bpl.n	800b680 <__ssputs_r+0x8e>
 800b630:	4629      	mov	r1, r5
 800b632:	f7fc f9db 	bl	80079ec <_malloc_r>
 800b636:	4606      	mov	r6, r0
 800b638:	b360      	cbz	r0, 800b694 <__ssputs_r+0xa2>
 800b63a:	6921      	ldr	r1, [r4, #16]
 800b63c:	464a      	mov	r2, r9
 800b63e:	f7fe f89c 	bl	800977a <memcpy>
 800b642:	89a3      	ldrh	r3, [r4, #12]
 800b644:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b64c:	81a3      	strh	r3, [r4, #12]
 800b64e:	6126      	str	r6, [r4, #16]
 800b650:	6165      	str	r5, [r4, #20]
 800b652:	444e      	add	r6, r9
 800b654:	eba5 0509 	sub.w	r5, r5, r9
 800b658:	6026      	str	r6, [r4, #0]
 800b65a:	60a5      	str	r5, [r4, #8]
 800b65c:	463e      	mov	r6, r7
 800b65e:	42be      	cmp	r6, r7
 800b660:	d900      	bls.n	800b664 <__ssputs_r+0x72>
 800b662:	463e      	mov	r6, r7
 800b664:	6820      	ldr	r0, [r4, #0]
 800b666:	4632      	mov	r2, r6
 800b668:	4641      	mov	r1, r8
 800b66a:	f000 f9c5 	bl	800b9f8 <memmove>
 800b66e:	68a3      	ldr	r3, [r4, #8]
 800b670:	1b9b      	subs	r3, r3, r6
 800b672:	60a3      	str	r3, [r4, #8]
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	4433      	add	r3, r6
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	2000      	movs	r0, #0
 800b67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b680:	462a      	mov	r2, r5
 800b682:	f000 fa05 	bl	800ba90 <_realloc_r>
 800b686:	4606      	mov	r6, r0
 800b688:	2800      	cmp	r0, #0
 800b68a:	d1e0      	bne.n	800b64e <__ssputs_r+0x5c>
 800b68c:	6921      	ldr	r1, [r4, #16]
 800b68e:	4650      	mov	r0, sl
 800b690:	f7fe fede 	bl	800a450 <_free_r>
 800b694:	230c      	movs	r3, #12
 800b696:	f8ca 3000 	str.w	r3, [sl]
 800b69a:	89a3      	ldrh	r3, [r4, #12]
 800b69c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6a0:	81a3      	strh	r3, [r4, #12]
 800b6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a6:	e7e9      	b.n	800b67c <__ssputs_r+0x8a>

0800b6a8 <_svfiprintf_r>:
 800b6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	4698      	mov	r8, r3
 800b6ae:	898b      	ldrh	r3, [r1, #12]
 800b6b0:	061b      	lsls	r3, r3, #24
 800b6b2:	b09d      	sub	sp, #116	@ 0x74
 800b6b4:	4607      	mov	r7, r0
 800b6b6:	460d      	mov	r5, r1
 800b6b8:	4614      	mov	r4, r2
 800b6ba:	d510      	bpl.n	800b6de <_svfiprintf_r+0x36>
 800b6bc:	690b      	ldr	r3, [r1, #16]
 800b6be:	b973      	cbnz	r3, 800b6de <_svfiprintf_r+0x36>
 800b6c0:	2140      	movs	r1, #64	@ 0x40
 800b6c2:	f7fc f993 	bl	80079ec <_malloc_r>
 800b6c6:	6028      	str	r0, [r5, #0]
 800b6c8:	6128      	str	r0, [r5, #16]
 800b6ca:	b930      	cbnz	r0, 800b6da <_svfiprintf_r+0x32>
 800b6cc:	230c      	movs	r3, #12
 800b6ce:	603b      	str	r3, [r7, #0]
 800b6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d4:	b01d      	add	sp, #116	@ 0x74
 800b6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6da:	2340      	movs	r3, #64	@ 0x40
 800b6dc:	616b      	str	r3, [r5, #20]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6e2:	2320      	movs	r3, #32
 800b6e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ec:	2330      	movs	r3, #48	@ 0x30
 800b6ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b88c <_svfiprintf_r+0x1e4>
 800b6f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6f6:	f04f 0901 	mov.w	r9, #1
 800b6fa:	4623      	mov	r3, r4
 800b6fc:	469a      	mov	sl, r3
 800b6fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b702:	b10a      	cbz	r2, 800b708 <_svfiprintf_r+0x60>
 800b704:	2a25      	cmp	r2, #37	@ 0x25
 800b706:	d1f9      	bne.n	800b6fc <_svfiprintf_r+0x54>
 800b708:	ebba 0b04 	subs.w	fp, sl, r4
 800b70c:	d00b      	beq.n	800b726 <_svfiprintf_r+0x7e>
 800b70e:	465b      	mov	r3, fp
 800b710:	4622      	mov	r2, r4
 800b712:	4629      	mov	r1, r5
 800b714:	4638      	mov	r0, r7
 800b716:	f7ff ff6c 	bl	800b5f2 <__ssputs_r>
 800b71a:	3001      	adds	r0, #1
 800b71c:	f000 80a7 	beq.w	800b86e <_svfiprintf_r+0x1c6>
 800b720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b722:	445a      	add	r2, fp
 800b724:	9209      	str	r2, [sp, #36]	@ 0x24
 800b726:	f89a 3000 	ldrb.w	r3, [sl]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 809f 	beq.w	800b86e <_svfiprintf_r+0x1c6>
 800b730:	2300      	movs	r3, #0
 800b732:	f04f 32ff 	mov.w	r2, #4294967295
 800b736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b73a:	f10a 0a01 	add.w	sl, sl, #1
 800b73e:	9304      	str	r3, [sp, #16]
 800b740:	9307      	str	r3, [sp, #28]
 800b742:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b746:	931a      	str	r3, [sp, #104]	@ 0x68
 800b748:	4654      	mov	r4, sl
 800b74a:	2205      	movs	r2, #5
 800b74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b750:	484e      	ldr	r0, [pc, #312]	@ (800b88c <_svfiprintf_r+0x1e4>)
 800b752:	f7f4 fd5d 	bl	8000210 <memchr>
 800b756:	9a04      	ldr	r2, [sp, #16]
 800b758:	b9d8      	cbnz	r0, 800b792 <_svfiprintf_r+0xea>
 800b75a:	06d0      	lsls	r0, r2, #27
 800b75c:	bf44      	itt	mi
 800b75e:	2320      	movmi	r3, #32
 800b760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b764:	0711      	lsls	r1, r2, #28
 800b766:	bf44      	itt	mi
 800b768:	232b      	movmi	r3, #43	@ 0x2b
 800b76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b76e:	f89a 3000 	ldrb.w	r3, [sl]
 800b772:	2b2a      	cmp	r3, #42	@ 0x2a
 800b774:	d015      	beq.n	800b7a2 <_svfiprintf_r+0xfa>
 800b776:	9a07      	ldr	r2, [sp, #28]
 800b778:	4654      	mov	r4, sl
 800b77a:	2000      	movs	r0, #0
 800b77c:	f04f 0c0a 	mov.w	ip, #10
 800b780:	4621      	mov	r1, r4
 800b782:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b786:	3b30      	subs	r3, #48	@ 0x30
 800b788:	2b09      	cmp	r3, #9
 800b78a:	d94b      	bls.n	800b824 <_svfiprintf_r+0x17c>
 800b78c:	b1b0      	cbz	r0, 800b7bc <_svfiprintf_r+0x114>
 800b78e:	9207      	str	r2, [sp, #28]
 800b790:	e014      	b.n	800b7bc <_svfiprintf_r+0x114>
 800b792:	eba0 0308 	sub.w	r3, r0, r8
 800b796:	fa09 f303 	lsl.w	r3, r9, r3
 800b79a:	4313      	orrs	r3, r2
 800b79c:	9304      	str	r3, [sp, #16]
 800b79e:	46a2      	mov	sl, r4
 800b7a0:	e7d2      	b.n	800b748 <_svfiprintf_r+0xa0>
 800b7a2:	9b03      	ldr	r3, [sp, #12]
 800b7a4:	1d19      	adds	r1, r3, #4
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	9103      	str	r1, [sp, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	bfbb      	ittet	lt
 800b7ae:	425b      	neglt	r3, r3
 800b7b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b7b4:	9307      	strge	r3, [sp, #28]
 800b7b6:	9307      	strlt	r3, [sp, #28]
 800b7b8:	bfb8      	it	lt
 800b7ba:	9204      	strlt	r2, [sp, #16]
 800b7bc:	7823      	ldrb	r3, [r4, #0]
 800b7be:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7c0:	d10a      	bne.n	800b7d8 <_svfiprintf_r+0x130>
 800b7c2:	7863      	ldrb	r3, [r4, #1]
 800b7c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7c6:	d132      	bne.n	800b82e <_svfiprintf_r+0x186>
 800b7c8:	9b03      	ldr	r3, [sp, #12]
 800b7ca:	1d1a      	adds	r2, r3, #4
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	9203      	str	r2, [sp, #12]
 800b7d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7d4:	3402      	adds	r4, #2
 800b7d6:	9305      	str	r3, [sp, #20]
 800b7d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b89c <_svfiprintf_r+0x1f4>
 800b7dc:	7821      	ldrb	r1, [r4, #0]
 800b7de:	2203      	movs	r2, #3
 800b7e0:	4650      	mov	r0, sl
 800b7e2:	f7f4 fd15 	bl	8000210 <memchr>
 800b7e6:	b138      	cbz	r0, 800b7f8 <_svfiprintf_r+0x150>
 800b7e8:	9b04      	ldr	r3, [sp, #16]
 800b7ea:	eba0 000a 	sub.w	r0, r0, sl
 800b7ee:	2240      	movs	r2, #64	@ 0x40
 800b7f0:	4082      	lsls	r2, r0
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	3401      	adds	r4, #1
 800b7f6:	9304      	str	r3, [sp, #16]
 800b7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fc:	4824      	ldr	r0, [pc, #144]	@ (800b890 <_svfiprintf_r+0x1e8>)
 800b7fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b802:	2206      	movs	r2, #6
 800b804:	f7f4 fd04 	bl	8000210 <memchr>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d036      	beq.n	800b87a <_svfiprintf_r+0x1d2>
 800b80c:	4b21      	ldr	r3, [pc, #132]	@ (800b894 <_svfiprintf_r+0x1ec>)
 800b80e:	bb1b      	cbnz	r3, 800b858 <_svfiprintf_r+0x1b0>
 800b810:	9b03      	ldr	r3, [sp, #12]
 800b812:	3307      	adds	r3, #7
 800b814:	f023 0307 	bic.w	r3, r3, #7
 800b818:	3308      	adds	r3, #8
 800b81a:	9303      	str	r3, [sp, #12]
 800b81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b81e:	4433      	add	r3, r6
 800b820:	9309      	str	r3, [sp, #36]	@ 0x24
 800b822:	e76a      	b.n	800b6fa <_svfiprintf_r+0x52>
 800b824:	fb0c 3202 	mla	r2, ip, r2, r3
 800b828:	460c      	mov	r4, r1
 800b82a:	2001      	movs	r0, #1
 800b82c:	e7a8      	b.n	800b780 <_svfiprintf_r+0xd8>
 800b82e:	2300      	movs	r3, #0
 800b830:	3401      	adds	r4, #1
 800b832:	9305      	str	r3, [sp, #20]
 800b834:	4619      	mov	r1, r3
 800b836:	f04f 0c0a 	mov.w	ip, #10
 800b83a:	4620      	mov	r0, r4
 800b83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b840:	3a30      	subs	r2, #48	@ 0x30
 800b842:	2a09      	cmp	r2, #9
 800b844:	d903      	bls.n	800b84e <_svfiprintf_r+0x1a6>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d0c6      	beq.n	800b7d8 <_svfiprintf_r+0x130>
 800b84a:	9105      	str	r1, [sp, #20]
 800b84c:	e7c4      	b.n	800b7d8 <_svfiprintf_r+0x130>
 800b84e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b852:	4604      	mov	r4, r0
 800b854:	2301      	movs	r3, #1
 800b856:	e7f0      	b.n	800b83a <_svfiprintf_r+0x192>
 800b858:	ab03      	add	r3, sp, #12
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	462a      	mov	r2, r5
 800b85e:	4b0e      	ldr	r3, [pc, #56]	@ (800b898 <_svfiprintf_r+0x1f0>)
 800b860:	a904      	add	r1, sp, #16
 800b862:	4638      	mov	r0, r7
 800b864:	f7fc fff6 	bl	8008854 <_printf_float>
 800b868:	1c42      	adds	r2, r0, #1
 800b86a:	4606      	mov	r6, r0
 800b86c:	d1d6      	bne.n	800b81c <_svfiprintf_r+0x174>
 800b86e:	89ab      	ldrh	r3, [r5, #12]
 800b870:	065b      	lsls	r3, r3, #25
 800b872:	f53f af2d 	bmi.w	800b6d0 <_svfiprintf_r+0x28>
 800b876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b878:	e72c      	b.n	800b6d4 <_svfiprintf_r+0x2c>
 800b87a:	ab03      	add	r3, sp, #12
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	462a      	mov	r2, r5
 800b880:	4b05      	ldr	r3, [pc, #20]	@ (800b898 <_svfiprintf_r+0x1f0>)
 800b882:	a904      	add	r1, sp, #16
 800b884:	4638      	mov	r0, r7
 800b886:	f7fd fa7d 	bl	8008d84 <_printf_i>
 800b88a:	e7ed      	b.n	800b868 <_svfiprintf_r+0x1c0>
 800b88c:	0800c561 	.word	0x0800c561
 800b890:	0800c56b 	.word	0x0800c56b
 800b894:	08008855 	.word	0x08008855
 800b898:	0800b5f3 	.word	0x0800b5f3
 800b89c:	0800c567 	.word	0x0800c567

0800b8a0 <__sflush_r>:
 800b8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a8:	0716      	lsls	r6, r2, #28
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	d454      	bmi.n	800b95a <__sflush_r+0xba>
 800b8b0:	684b      	ldr	r3, [r1, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	dc02      	bgt.n	800b8bc <__sflush_r+0x1c>
 800b8b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dd48      	ble.n	800b94e <__sflush_r+0xae>
 800b8bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8be:	2e00      	cmp	r6, #0
 800b8c0:	d045      	beq.n	800b94e <__sflush_r+0xae>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8c8:	682f      	ldr	r7, [r5, #0]
 800b8ca:	6a21      	ldr	r1, [r4, #32]
 800b8cc:	602b      	str	r3, [r5, #0]
 800b8ce:	d030      	beq.n	800b932 <__sflush_r+0x92>
 800b8d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	0759      	lsls	r1, r3, #29
 800b8d6:	d505      	bpl.n	800b8e4 <__sflush_r+0x44>
 800b8d8:	6863      	ldr	r3, [r4, #4]
 800b8da:	1ad2      	subs	r2, r2, r3
 800b8dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8de:	b10b      	cbz	r3, 800b8e4 <__sflush_r+0x44>
 800b8e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8e2:	1ad2      	subs	r2, r2, r3
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8e8:	6a21      	ldr	r1, [r4, #32]
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	47b0      	blx	r6
 800b8ee:	1c43      	adds	r3, r0, #1
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	d106      	bne.n	800b902 <__sflush_r+0x62>
 800b8f4:	6829      	ldr	r1, [r5, #0]
 800b8f6:	291d      	cmp	r1, #29
 800b8f8:	d82b      	bhi.n	800b952 <__sflush_r+0xb2>
 800b8fa:	4a2a      	ldr	r2, [pc, #168]	@ (800b9a4 <__sflush_r+0x104>)
 800b8fc:	410a      	asrs	r2, r1
 800b8fe:	07d6      	lsls	r6, r2, #31
 800b900:	d427      	bmi.n	800b952 <__sflush_r+0xb2>
 800b902:	2200      	movs	r2, #0
 800b904:	6062      	str	r2, [r4, #4]
 800b906:	04d9      	lsls	r1, r3, #19
 800b908:	6922      	ldr	r2, [r4, #16]
 800b90a:	6022      	str	r2, [r4, #0]
 800b90c:	d504      	bpl.n	800b918 <__sflush_r+0x78>
 800b90e:	1c42      	adds	r2, r0, #1
 800b910:	d101      	bne.n	800b916 <__sflush_r+0x76>
 800b912:	682b      	ldr	r3, [r5, #0]
 800b914:	b903      	cbnz	r3, 800b918 <__sflush_r+0x78>
 800b916:	6560      	str	r0, [r4, #84]	@ 0x54
 800b918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b91a:	602f      	str	r7, [r5, #0]
 800b91c:	b1b9      	cbz	r1, 800b94e <__sflush_r+0xae>
 800b91e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b922:	4299      	cmp	r1, r3
 800b924:	d002      	beq.n	800b92c <__sflush_r+0x8c>
 800b926:	4628      	mov	r0, r5
 800b928:	f7fe fd92 	bl	800a450 <_free_r>
 800b92c:	2300      	movs	r3, #0
 800b92e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b930:	e00d      	b.n	800b94e <__sflush_r+0xae>
 800b932:	2301      	movs	r3, #1
 800b934:	4628      	mov	r0, r5
 800b936:	47b0      	blx	r6
 800b938:	4602      	mov	r2, r0
 800b93a:	1c50      	adds	r0, r2, #1
 800b93c:	d1c9      	bne.n	800b8d2 <__sflush_r+0x32>
 800b93e:	682b      	ldr	r3, [r5, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0c6      	beq.n	800b8d2 <__sflush_r+0x32>
 800b944:	2b1d      	cmp	r3, #29
 800b946:	d001      	beq.n	800b94c <__sflush_r+0xac>
 800b948:	2b16      	cmp	r3, #22
 800b94a:	d11e      	bne.n	800b98a <__sflush_r+0xea>
 800b94c:	602f      	str	r7, [r5, #0]
 800b94e:	2000      	movs	r0, #0
 800b950:	e022      	b.n	800b998 <__sflush_r+0xf8>
 800b952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b956:	b21b      	sxth	r3, r3
 800b958:	e01b      	b.n	800b992 <__sflush_r+0xf2>
 800b95a:	690f      	ldr	r7, [r1, #16]
 800b95c:	2f00      	cmp	r7, #0
 800b95e:	d0f6      	beq.n	800b94e <__sflush_r+0xae>
 800b960:	0793      	lsls	r3, r2, #30
 800b962:	680e      	ldr	r6, [r1, #0]
 800b964:	bf08      	it	eq
 800b966:	694b      	ldreq	r3, [r1, #20]
 800b968:	600f      	str	r7, [r1, #0]
 800b96a:	bf18      	it	ne
 800b96c:	2300      	movne	r3, #0
 800b96e:	eba6 0807 	sub.w	r8, r6, r7
 800b972:	608b      	str	r3, [r1, #8]
 800b974:	f1b8 0f00 	cmp.w	r8, #0
 800b978:	dde9      	ble.n	800b94e <__sflush_r+0xae>
 800b97a:	6a21      	ldr	r1, [r4, #32]
 800b97c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b97e:	4643      	mov	r3, r8
 800b980:	463a      	mov	r2, r7
 800b982:	4628      	mov	r0, r5
 800b984:	47b0      	blx	r6
 800b986:	2800      	cmp	r0, #0
 800b988:	dc08      	bgt.n	800b99c <__sflush_r+0xfc>
 800b98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b992:	81a3      	strh	r3, [r4, #12]
 800b994:	f04f 30ff 	mov.w	r0, #4294967295
 800b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b99c:	4407      	add	r7, r0
 800b99e:	eba8 0800 	sub.w	r8, r8, r0
 800b9a2:	e7e7      	b.n	800b974 <__sflush_r+0xd4>
 800b9a4:	dfbffffe 	.word	0xdfbffffe

0800b9a8 <_fflush_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	690b      	ldr	r3, [r1, #16]
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	b913      	cbnz	r3, 800b9b8 <_fflush_r+0x10>
 800b9b2:	2500      	movs	r5, #0
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	b118      	cbz	r0, 800b9c2 <_fflush_r+0x1a>
 800b9ba:	6a03      	ldr	r3, [r0, #32]
 800b9bc:	b90b      	cbnz	r3, 800b9c2 <_fflush_r+0x1a>
 800b9be:	f7fd fda1 	bl	8009504 <__sinit>
 800b9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d0f3      	beq.n	800b9b2 <_fflush_r+0xa>
 800b9ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9cc:	07d0      	lsls	r0, r2, #31
 800b9ce:	d404      	bmi.n	800b9da <_fflush_r+0x32>
 800b9d0:	0599      	lsls	r1, r3, #22
 800b9d2:	d402      	bmi.n	800b9da <_fflush_r+0x32>
 800b9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9d6:	f7fd fece 	bl	8009776 <__retarget_lock_acquire_recursive>
 800b9da:	4628      	mov	r0, r5
 800b9dc:	4621      	mov	r1, r4
 800b9de:	f7ff ff5f 	bl	800b8a0 <__sflush_r>
 800b9e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9e4:	07da      	lsls	r2, r3, #31
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	d4e4      	bmi.n	800b9b4 <_fflush_r+0xc>
 800b9ea:	89a3      	ldrh	r3, [r4, #12]
 800b9ec:	059b      	lsls	r3, r3, #22
 800b9ee:	d4e1      	bmi.n	800b9b4 <_fflush_r+0xc>
 800b9f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9f2:	f7fd fec1 	bl	8009778 <__retarget_lock_release_recursive>
 800b9f6:	e7dd      	b.n	800b9b4 <_fflush_r+0xc>

0800b9f8 <memmove>:
 800b9f8:	4288      	cmp	r0, r1
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	eb01 0402 	add.w	r4, r1, r2
 800ba00:	d902      	bls.n	800ba08 <memmove+0x10>
 800ba02:	4284      	cmp	r4, r0
 800ba04:	4623      	mov	r3, r4
 800ba06:	d807      	bhi.n	800ba18 <memmove+0x20>
 800ba08:	1e43      	subs	r3, r0, #1
 800ba0a:	42a1      	cmp	r1, r4
 800ba0c:	d008      	beq.n	800ba20 <memmove+0x28>
 800ba0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba16:	e7f8      	b.n	800ba0a <memmove+0x12>
 800ba18:	4402      	add	r2, r0
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	428a      	cmp	r2, r1
 800ba1e:	d100      	bne.n	800ba22 <memmove+0x2a>
 800ba20:	bd10      	pop	{r4, pc}
 800ba22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba2a:	e7f7      	b.n	800ba1c <memmove+0x24>

0800ba2c <__assert_func>:
 800ba2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba2e:	4614      	mov	r4, r2
 800ba30:	461a      	mov	r2, r3
 800ba32:	4b09      	ldr	r3, [pc, #36]	@ (800ba58 <__assert_func+0x2c>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4605      	mov	r5, r0
 800ba38:	68d8      	ldr	r0, [r3, #12]
 800ba3a:	b954      	cbnz	r4, 800ba52 <__assert_func+0x26>
 800ba3c:	4b07      	ldr	r3, [pc, #28]	@ (800ba5c <__assert_func+0x30>)
 800ba3e:	461c      	mov	r4, r3
 800ba40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba44:	9100      	str	r1, [sp, #0]
 800ba46:	462b      	mov	r3, r5
 800ba48:	4905      	ldr	r1, [pc, #20]	@ (800ba60 <__assert_func+0x34>)
 800ba4a:	f000 f84f 	bl	800baec <fiprintf>
 800ba4e:	f000 f85f 	bl	800bb10 <abort>
 800ba52:	4b04      	ldr	r3, [pc, #16]	@ (800ba64 <__assert_func+0x38>)
 800ba54:	e7f4      	b.n	800ba40 <__assert_func+0x14>
 800ba56:	bf00      	nop
 800ba58:	20000188 	.word	0x20000188
 800ba5c:	0800c5ad 	.word	0x0800c5ad
 800ba60:	0800c57f 	.word	0x0800c57f
 800ba64:	0800c572 	.word	0x0800c572

0800ba68 <_calloc_r>:
 800ba68:	b570      	push	{r4, r5, r6, lr}
 800ba6a:	fba1 5402 	umull	r5, r4, r1, r2
 800ba6e:	b93c      	cbnz	r4, 800ba80 <_calloc_r+0x18>
 800ba70:	4629      	mov	r1, r5
 800ba72:	f7fb ffbb 	bl	80079ec <_malloc_r>
 800ba76:	4606      	mov	r6, r0
 800ba78:	b928      	cbnz	r0, 800ba86 <_calloc_r+0x1e>
 800ba7a:	2600      	movs	r6, #0
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}
 800ba80:	220c      	movs	r2, #12
 800ba82:	6002      	str	r2, [r0, #0]
 800ba84:	e7f9      	b.n	800ba7a <_calloc_r+0x12>
 800ba86:	462a      	mov	r2, r5
 800ba88:	4621      	mov	r1, r4
 800ba8a:	f7fd fdd4 	bl	8009636 <memset>
 800ba8e:	e7f5      	b.n	800ba7c <_calloc_r+0x14>

0800ba90 <_realloc_r>:
 800ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba94:	4680      	mov	r8, r0
 800ba96:	4615      	mov	r5, r2
 800ba98:	460c      	mov	r4, r1
 800ba9a:	b921      	cbnz	r1, 800baa6 <_realloc_r+0x16>
 800ba9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baa0:	4611      	mov	r1, r2
 800baa2:	f7fb bfa3 	b.w	80079ec <_malloc_r>
 800baa6:	b92a      	cbnz	r2, 800bab4 <_realloc_r+0x24>
 800baa8:	f7fe fcd2 	bl	800a450 <_free_r>
 800baac:	2400      	movs	r4, #0
 800baae:	4620      	mov	r0, r4
 800bab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab4:	f000 f833 	bl	800bb1e <_malloc_usable_size_r>
 800bab8:	4285      	cmp	r5, r0
 800baba:	4606      	mov	r6, r0
 800babc:	d802      	bhi.n	800bac4 <_realloc_r+0x34>
 800babe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bac2:	d8f4      	bhi.n	800baae <_realloc_r+0x1e>
 800bac4:	4629      	mov	r1, r5
 800bac6:	4640      	mov	r0, r8
 800bac8:	f7fb ff90 	bl	80079ec <_malloc_r>
 800bacc:	4607      	mov	r7, r0
 800bace:	2800      	cmp	r0, #0
 800bad0:	d0ec      	beq.n	800baac <_realloc_r+0x1c>
 800bad2:	42b5      	cmp	r5, r6
 800bad4:	462a      	mov	r2, r5
 800bad6:	4621      	mov	r1, r4
 800bad8:	bf28      	it	cs
 800bada:	4632      	movcs	r2, r6
 800badc:	f7fd fe4d 	bl	800977a <memcpy>
 800bae0:	4621      	mov	r1, r4
 800bae2:	4640      	mov	r0, r8
 800bae4:	f7fe fcb4 	bl	800a450 <_free_r>
 800bae8:	463c      	mov	r4, r7
 800baea:	e7e0      	b.n	800baae <_realloc_r+0x1e>

0800baec <fiprintf>:
 800baec:	b40e      	push	{r1, r2, r3}
 800baee:	b503      	push	{r0, r1, lr}
 800baf0:	4601      	mov	r1, r0
 800baf2:	ab03      	add	r3, sp, #12
 800baf4:	4805      	ldr	r0, [pc, #20]	@ (800bb0c <fiprintf+0x20>)
 800baf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bafa:	6800      	ldr	r0, [r0, #0]
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	f000 f83f 	bl	800bb80 <_vfiprintf_r>
 800bb02:	b002      	add	sp, #8
 800bb04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb08:	b003      	add	sp, #12
 800bb0a:	4770      	bx	lr
 800bb0c:	20000188 	.word	0x20000188

0800bb10 <abort>:
 800bb10:	b508      	push	{r3, lr}
 800bb12:	2006      	movs	r0, #6
 800bb14:	f000 fa08 	bl	800bf28 <raise>
 800bb18:	2001      	movs	r0, #1
 800bb1a:	f7f7 fbc5 	bl	80032a8 <_exit>

0800bb1e <_malloc_usable_size_r>:
 800bb1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb22:	1f18      	subs	r0, r3, #4
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	bfbc      	itt	lt
 800bb28:	580b      	ldrlt	r3, [r1, r0]
 800bb2a:	18c0      	addlt	r0, r0, r3
 800bb2c:	4770      	bx	lr

0800bb2e <__sfputc_r>:
 800bb2e:	6893      	ldr	r3, [r2, #8]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	b410      	push	{r4}
 800bb36:	6093      	str	r3, [r2, #8]
 800bb38:	da08      	bge.n	800bb4c <__sfputc_r+0x1e>
 800bb3a:	6994      	ldr	r4, [r2, #24]
 800bb3c:	42a3      	cmp	r3, r4
 800bb3e:	db01      	blt.n	800bb44 <__sfputc_r+0x16>
 800bb40:	290a      	cmp	r1, #10
 800bb42:	d103      	bne.n	800bb4c <__sfputc_r+0x1e>
 800bb44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb48:	f000 b932 	b.w	800bdb0 <__swbuf_r>
 800bb4c:	6813      	ldr	r3, [r2, #0]
 800bb4e:	1c58      	adds	r0, r3, #1
 800bb50:	6010      	str	r0, [r2, #0]
 800bb52:	7019      	strb	r1, [r3, #0]
 800bb54:	4608      	mov	r0, r1
 800bb56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <__sfputs_r>:
 800bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5e:	4606      	mov	r6, r0
 800bb60:	460f      	mov	r7, r1
 800bb62:	4614      	mov	r4, r2
 800bb64:	18d5      	adds	r5, r2, r3
 800bb66:	42ac      	cmp	r4, r5
 800bb68:	d101      	bne.n	800bb6e <__sfputs_r+0x12>
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	e007      	b.n	800bb7e <__sfputs_r+0x22>
 800bb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb72:	463a      	mov	r2, r7
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff ffda 	bl	800bb2e <__sfputc_r>
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	d1f3      	bne.n	800bb66 <__sfputs_r+0xa>
 800bb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb80 <_vfiprintf_r>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	460d      	mov	r5, r1
 800bb86:	b09d      	sub	sp, #116	@ 0x74
 800bb88:	4614      	mov	r4, r2
 800bb8a:	4698      	mov	r8, r3
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	b118      	cbz	r0, 800bb98 <_vfiprintf_r+0x18>
 800bb90:	6a03      	ldr	r3, [r0, #32]
 800bb92:	b90b      	cbnz	r3, 800bb98 <_vfiprintf_r+0x18>
 800bb94:	f7fd fcb6 	bl	8009504 <__sinit>
 800bb98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb9a:	07d9      	lsls	r1, r3, #31
 800bb9c:	d405      	bmi.n	800bbaa <_vfiprintf_r+0x2a>
 800bb9e:	89ab      	ldrh	r3, [r5, #12]
 800bba0:	059a      	lsls	r2, r3, #22
 800bba2:	d402      	bmi.n	800bbaa <_vfiprintf_r+0x2a>
 800bba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bba6:	f7fd fde6 	bl	8009776 <__retarget_lock_acquire_recursive>
 800bbaa:	89ab      	ldrh	r3, [r5, #12]
 800bbac:	071b      	lsls	r3, r3, #28
 800bbae:	d501      	bpl.n	800bbb4 <_vfiprintf_r+0x34>
 800bbb0:	692b      	ldr	r3, [r5, #16]
 800bbb2:	b99b      	cbnz	r3, 800bbdc <_vfiprintf_r+0x5c>
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f000 f938 	bl	800be2c <__swsetup_r>
 800bbbc:	b170      	cbz	r0, 800bbdc <_vfiprintf_r+0x5c>
 800bbbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbc0:	07dc      	lsls	r4, r3, #31
 800bbc2:	d504      	bpl.n	800bbce <_vfiprintf_r+0x4e>
 800bbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc8:	b01d      	add	sp, #116	@ 0x74
 800bbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbce:	89ab      	ldrh	r3, [r5, #12]
 800bbd0:	0598      	lsls	r0, r3, #22
 800bbd2:	d4f7      	bmi.n	800bbc4 <_vfiprintf_r+0x44>
 800bbd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbd6:	f7fd fdcf 	bl	8009778 <__retarget_lock_release_recursive>
 800bbda:	e7f3      	b.n	800bbc4 <_vfiprintf_r+0x44>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbe0:	2320      	movs	r3, #32
 800bbe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbea:	2330      	movs	r3, #48	@ 0x30
 800bbec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd9c <_vfiprintf_r+0x21c>
 800bbf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbf4:	f04f 0901 	mov.w	r9, #1
 800bbf8:	4623      	mov	r3, r4
 800bbfa:	469a      	mov	sl, r3
 800bbfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc00:	b10a      	cbz	r2, 800bc06 <_vfiprintf_r+0x86>
 800bc02:	2a25      	cmp	r2, #37	@ 0x25
 800bc04:	d1f9      	bne.n	800bbfa <_vfiprintf_r+0x7a>
 800bc06:	ebba 0b04 	subs.w	fp, sl, r4
 800bc0a:	d00b      	beq.n	800bc24 <_vfiprintf_r+0xa4>
 800bc0c:	465b      	mov	r3, fp
 800bc0e:	4622      	mov	r2, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7ff ffa2 	bl	800bb5c <__sfputs_r>
 800bc18:	3001      	adds	r0, #1
 800bc1a:	f000 80a7 	beq.w	800bd6c <_vfiprintf_r+0x1ec>
 800bc1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc20:	445a      	add	r2, fp
 800bc22:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc24:	f89a 3000 	ldrb.w	r3, [sl]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 809f 	beq.w	800bd6c <_vfiprintf_r+0x1ec>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	f04f 32ff 	mov.w	r2, #4294967295
 800bc34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc38:	f10a 0a01 	add.w	sl, sl, #1
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	9307      	str	r3, [sp, #28]
 800bc40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc44:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc46:	4654      	mov	r4, sl
 800bc48:	2205      	movs	r2, #5
 800bc4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc4e:	4853      	ldr	r0, [pc, #332]	@ (800bd9c <_vfiprintf_r+0x21c>)
 800bc50:	f7f4 fade 	bl	8000210 <memchr>
 800bc54:	9a04      	ldr	r2, [sp, #16]
 800bc56:	b9d8      	cbnz	r0, 800bc90 <_vfiprintf_r+0x110>
 800bc58:	06d1      	lsls	r1, r2, #27
 800bc5a:	bf44      	itt	mi
 800bc5c:	2320      	movmi	r3, #32
 800bc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc62:	0713      	lsls	r3, r2, #28
 800bc64:	bf44      	itt	mi
 800bc66:	232b      	movmi	r3, #43	@ 0x2b
 800bc68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc70:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc72:	d015      	beq.n	800bca0 <_vfiprintf_r+0x120>
 800bc74:	9a07      	ldr	r2, [sp, #28]
 800bc76:	4654      	mov	r4, sl
 800bc78:	2000      	movs	r0, #0
 800bc7a:	f04f 0c0a 	mov.w	ip, #10
 800bc7e:	4621      	mov	r1, r4
 800bc80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc84:	3b30      	subs	r3, #48	@ 0x30
 800bc86:	2b09      	cmp	r3, #9
 800bc88:	d94b      	bls.n	800bd22 <_vfiprintf_r+0x1a2>
 800bc8a:	b1b0      	cbz	r0, 800bcba <_vfiprintf_r+0x13a>
 800bc8c:	9207      	str	r2, [sp, #28]
 800bc8e:	e014      	b.n	800bcba <_vfiprintf_r+0x13a>
 800bc90:	eba0 0308 	sub.w	r3, r0, r8
 800bc94:	fa09 f303 	lsl.w	r3, r9, r3
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	9304      	str	r3, [sp, #16]
 800bc9c:	46a2      	mov	sl, r4
 800bc9e:	e7d2      	b.n	800bc46 <_vfiprintf_r+0xc6>
 800bca0:	9b03      	ldr	r3, [sp, #12]
 800bca2:	1d19      	adds	r1, r3, #4
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	9103      	str	r1, [sp, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	bfbb      	ittet	lt
 800bcac:	425b      	neglt	r3, r3
 800bcae:	f042 0202 	orrlt.w	r2, r2, #2
 800bcb2:	9307      	strge	r3, [sp, #28]
 800bcb4:	9307      	strlt	r3, [sp, #28]
 800bcb6:	bfb8      	it	lt
 800bcb8:	9204      	strlt	r2, [sp, #16]
 800bcba:	7823      	ldrb	r3, [r4, #0]
 800bcbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcbe:	d10a      	bne.n	800bcd6 <_vfiprintf_r+0x156>
 800bcc0:	7863      	ldrb	r3, [r4, #1]
 800bcc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcc4:	d132      	bne.n	800bd2c <_vfiprintf_r+0x1ac>
 800bcc6:	9b03      	ldr	r3, [sp, #12]
 800bcc8:	1d1a      	adds	r2, r3, #4
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	9203      	str	r2, [sp, #12]
 800bcce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcd2:	3402      	adds	r4, #2
 800bcd4:	9305      	str	r3, [sp, #20]
 800bcd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bdac <_vfiprintf_r+0x22c>
 800bcda:	7821      	ldrb	r1, [r4, #0]
 800bcdc:	2203      	movs	r2, #3
 800bcde:	4650      	mov	r0, sl
 800bce0:	f7f4 fa96 	bl	8000210 <memchr>
 800bce4:	b138      	cbz	r0, 800bcf6 <_vfiprintf_r+0x176>
 800bce6:	9b04      	ldr	r3, [sp, #16]
 800bce8:	eba0 000a 	sub.w	r0, r0, sl
 800bcec:	2240      	movs	r2, #64	@ 0x40
 800bcee:	4082      	lsls	r2, r0
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	3401      	adds	r4, #1
 800bcf4:	9304      	str	r3, [sp, #16]
 800bcf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfa:	4829      	ldr	r0, [pc, #164]	@ (800bda0 <_vfiprintf_r+0x220>)
 800bcfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd00:	2206      	movs	r2, #6
 800bd02:	f7f4 fa85 	bl	8000210 <memchr>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d03f      	beq.n	800bd8a <_vfiprintf_r+0x20a>
 800bd0a:	4b26      	ldr	r3, [pc, #152]	@ (800bda4 <_vfiprintf_r+0x224>)
 800bd0c:	bb1b      	cbnz	r3, 800bd56 <_vfiprintf_r+0x1d6>
 800bd0e:	9b03      	ldr	r3, [sp, #12]
 800bd10:	3307      	adds	r3, #7
 800bd12:	f023 0307 	bic.w	r3, r3, #7
 800bd16:	3308      	adds	r3, #8
 800bd18:	9303      	str	r3, [sp, #12]
 800bd1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd1c:	443b      	add	r3, r7
 800bd1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd20:	e76a      	b.n	800bbf8 <_vfiprintf_r+0x78>
 800bd22:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd26:	460c      	mov	r4, r1
 800bd28:	2001      	movs	r0, #1
 800bd2a:	e7a8      	b.n	800bc7e <_vfiprintf_r+0xfe>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	3401      	adds	r4, #1
 800bd30:	9305      	str	r3, [sp, #20]
 800bd32:	4619      	mov	r1, r3
 800bd34:	f04f 0c0a 	mov.w	ip, #10
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd3e:	3a30      	subs	r2, #48	@ 0x30
 800bd40:	2a09      	cmp	r2, #9
 800bd42:	d903      	bls.n	800bd4c <_vfiprintf_r+0x1cc>
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d0c6      	beq.n	800bcd6 <_vfiprintf_r+0x156>
 800bd48:	9105      	str	r1, [sp, #20]
 800bd4a:	e7c4      	b.n	800bcd6 <_vfiprintf_r+0x156>
 800bd4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd50:	4604      	mov	r4, r0
 800bd52:	2301      	movs	r3, #1
 800bd54:	e7f0      	b.n	800bd38 <_vfiprintf_r+0x1b8>
 800bd56:	ab03      	add	r3, sp, #12
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	462a      	mov	r2, r5
 800bd5c:	4b12      	ldr	r3, [pc, #72]	@ (800bda8 <_vfiprintf_r+0x228>)
 800bd5e:	a904      	add	r1, sp, #16
 800bd60:	4630      	mov	r0, r6
 800bd62:	f7fc fd77 	bl	8008854 <_printf_float>
 800bd66:	4607      	mov	r7, r0
 800bd68:	1c78      	adds	r0, r7, #1
 800bd6a:	d1d6      	bne.n	800bd1a <_vfiprintf_r+0x19a>
 800bd6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd6e:	07d9      	lsls	r1, r3, #31
 800bd70:	d405      	bmi.n	800bd7e <_vfiprintf_r+0x1fe>
 800bd72:	89ab      	ldrh	r3, [r5, #12]
 800bd74:	059a      	lsls	r2, r3, #22
 800bd76:	d402      	bmi.n	800bd7e <_vfiprintf_r+0x1fe>
 800bd78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd7a:	f7fd fcfd 	bl	8009778 <__retarget_lock_release_recursive>
 800bd7e:	89ab      	ldrh	r3, [r5, #12]
 800bd80:	065b      	lsls	r3, r3, #25
 800bd82:	f53f af1f 	bmi.w	800bbc4 <_vfiprintf_r+0x44>
 800bd86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd88:	e71e      	b.n	800bbc8 <_vfiprintf_r+0x48>
 800bd8a:	ab03      	add	r3, sp, #12
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	462a      	mov	r2, r5
 800bd90:	4b05      	ldr	r3, [pc, #20]	@ (800bda8 <_vfiprintf_r+0x228>)
 800bd92:	a904      	add	r1, sp, #16
 800bd94:	4630      	mov	r0, r6
 800bd96:	f7fc fff5 	bl	8008d84 <_printf_i>
 800bd9a:	e7e4      	b.n	800bd66 <_vfiprintf_r+0x1e6>
 800bd9c:	0800c561 	.word	0x0800c561
 800bda0:	0800c56b 	.word	0x0800c56b
 800bda4:	08008855 	.word	0x08008855
 800bda8:	0800bb5d 	.word	0x0800bb5d
 800bdac:	0800c567 	.word	0x0800c567

0800bdb0 <__swbuf_r>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	460e      	mov	r6, r1
 800bdb4:	4614      	mov	r4, r2
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	b118      	cbz	r0, 800bdc2 <__swbuf_r+0x12>
 800bdba:	6a03      	ldr	r3, [r0, #32]
 800bdbc:	b90b      	cbnz	r3, 800bdc2 <__swbuf_r+0x12>
 800bdbe:	f7fd fba1 	bl	8009504 <__sinit>
 800bdc2:	69a3      	ldr	r3, [r4, #24]
 800bdc4:	60a3      	str	r3, [r4, #8]
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	071a      	lsls	r2, r3, #28
 800bdca:	d501      	bpl.n	800bdd0 <__swbuf_r+0x20>
 800bdcc:	6923      	ldr	r3, [r4, #16]
 800bdce:	b943      	cbnz	r3, 800bde2 <__swbuf_r+0x32>
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f000 f82a 	bl	800be2c <__swsetup_r>
 800bdd8:	b118      	cbz	r0, 800bde2 <__swbuf_r+0x32>
 800bdda:	f04f 37ff 	mov.w	r7, #4294967295
 800bdde:	4638      	mov	r0, r7
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	6922      	ldr	r2, [r4, #16]
 800bde6:	1a98      	subs	r0, r3, r2
 800bde8:	6963      	ldr	r3, [r4, #20]
 800bdea:	b2f6      	uxtb	r6, r6
 800bdec:	4283      	cmp	r3, r0
 800bdee:	4637      	mov	r7, r6
 800bdf0:	dc05      	bgt.n	800bdfe <__swbuf_r+0x4e>
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f7ff fdd7 	bl	800b9a8 <_fflush_r>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d1ed      	bne.n	800bdda <__swbuf_r+0x2a>
 800bdfe:	68a3      	ldr	r3, [r4, #8]
 800be00:	3b01      	subs	r3, #1
 800be02:	60a3      	str	r3, [r4, #8]
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	6022      	str	r2, [r4, #0]
 800be0a:	701e      	strb	r6, [r3, #0]
 800be0c:	6962      	ldr	r2, [r4, #20]
 800be0e:	1c43      	adds	r3, r0, #1
 800be10:	429a      	cmp	r2, r3
 800be12:	d004      	beq.n	800be1e <__swbuf_r+0x6e>
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	07db      	lsls	r3, r3, #31
 800be18:	d5e1      	bpl.n	800bdde <__swbuf_r+0x2e>
 800be1a:	2e0a      	cmp	r6, #10
 800be1c:	d1df      	bne.n	800bdde <__swbuf_r+0x2e>
 800be1e:	4621      	mov	r1, r4
 800be20:	4628      	mov	r0, r5
 800be22:	f7ff fdc1 	bl	800b9a8 <_fflush_r>
 800be26:	2800      	cmp	r0, #0
 800be28:	d0d9      	beq.n	800bdde <__swbuf_r+0x2e>
 800be2a:	e7d6      	b.n	800bdda <__swbuf_r+0x2a>

0800be2c <__swsetup_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	4b29      	ldr	r3, [pc, #164]	@ (800bed4 <__swsetup_r+0xa8>)
 800be30:	4605      	mov	r5, r0
 800be32:	6818      	ldr	r0, [r3, #0]
 800be34:	460c      	mov	r4, r1
 800be36:	b118      	cbz	r0, 800be40 <__swsetup_r+0x14>
 800be38:	6a03      	ldr	r3, [r0, #32]
 800be3a:	b90b      	cbnz	r3, 800be40 <__swsetup_r+0x14>
 800be3c:	f7fd fb62 	bl	8009504 <__sinit>
 800be40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be44:	0719      	lsls	r1, r3, #28
 800be46:	d422      	bmi.n	800be8e <__swsetup_r+0x62>
 800be48:	06da      	lsls	r2, r3, #27
 800be4a:	d407      	bmi.n	800be5c <__swsetup_r+0x30>
 800be4c:	2209      	movs	r2, #9
 800be4e:	602a      	str	r2, [r5, #0]
 800be50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be54:	81a3      	strh	r3, [r4, #12]
 800be56:	f04f 30ff 	mov.w	r0, #4294967295
 800be5a:	e033      	b.n	800bec4 <__swsetup_r+0x98>
 800be5c:	0758      	lsls	r0, r3, #29
 800be5e:	d512      	bpl.n	800be86 <__swsetup_r+0x5a>
 800be60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be62:	b141      	cbz	r1, 800be76 <__swsetup_r+0x4a>
 800be64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be68:	4299      	cmp	r1, r3
 800be6a:	d002      	beq.n	800be72 <__swsetup_r+0x46>
 800be6c:	4628      	mov	r0, r5
 800be6e:	f7fe faef 	bl	800a450 <_free_r>
 800be72:	2300      	movs	r3, #0
 800be74:	6363      	str	r3, [r4, #52]	@ 0x34
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be7c:	81a3      	strh	r3, [r4, #12]
 800be7e:	2300      	movs	r3, #0
 800be80:	6063      	str	r3, [r4, #4]
 800be82:	6923      	ldr	r3, [r4, #16]
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	f043 0308 	orr.w	r3, r3, #8
 800be8c:	81a3      	strh	r3, [r4, #12]
 800be8e:	6923      	ldr	r3, [r4, #16]
 800be90:	b94b      	cbnz	r3, 800bea6 <__swsetup_r+0x7a>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be9c:	d003      	beq.n	800bea6 <__swsetup_r+0x7a>
 800be9e:	4621      	mov	r1, r4
 800bea0:	4628      	mov	r0, r5
 800bea2:	f000 f883 	bl	800bfac <__smakebuf_r>
 800bea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beaa:	f013 0201 	ands.w	r2, r3, #1
 800beae:	d00a      	beq.n	800bec6 <__swsetup_r+0x9a>
 800beb0:	2200      	movs	r2, #0
 800beb2:	60a2      	str	r2, [r4, #8]
 800beb4:	6962      	ldr	r2, [r4, #20]
 800beb6:	4252      	negs	r2, r2
 800beb8:	61a2      	str	r2, [r4, #24]
 800beba:	6922      	ldr	r2, [r4, #16]
 800bebc:	b942      	cbnz	r2, 800bed0 <__swsetup_r+0xa4>
 800bebe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bec2:	d1c5      	bne.n	800be50 <__swsetup_r+0x24>
 800bec4:	bd38      	pop	{r3, r4, r5, pc}
 800bec6:	0799      	lsls	r1, r3, #30
 800bec8:	bf58      	it	pl
 800beca:	6962      	ldrpl	r2, [r4, #20]
 800becc:	60a2      	str	r2, [r4, #8]
 800bece:	e7f4      	b.n	800beba <__swsetup_r+0x8e>
 800bed0:	2000      	movs	r0, #0
 800bed2:	e7f7      	b.n	800bec4 <__swsetup_r+0x98>
 800bed4:	20000188 	.word	0x20000188

0800bed8 <_raise_r>:
 800bed8:	291f      	cmp	r1, #31
 800beda:	b538      	push	{r3, r4, r5, lr}
 800bedc:	4605      	mov	r5, r0
 800bede:	460c      	mov	r4, r1
 800bee0:	d904      	bls.n	800beec <_raise_r+0x14>
 800bee2:	2316      	movs	r3, #22
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	f04f 30ff 	mov.w	r0, #4294967295
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800beee:	b112      	cbz	r2, 800bef6 <_raise_r+0x1e>
 800bef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bef4:	b94b      	cbnz	r3, 800bf0a <_raise_r+0x32>
 800bef6:	4628      	mov	r0, r5
 800bef8:	f000 f830 	bl	800bf5c <_getpid_r>
 800befc:	4622      	mov	r2, r4
 800befe:	4601      	mov	r1, r0
 800bf00:	4628      	mov	r0, r5
 800bf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf06:	f000 b817 	b.w	800bf38 <_kill_r>
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d00a      	beq.n	800bf24 <_raise_r+0x4c>
 800bf0e:	1c59      	adds	r1, r3, #1
 800bf10:	d103      	bne.n	800bf1a <_raise_r+0x42>
 800bf12:	2316      	movs	r3, #22
 800bf14:	6003      	str	r3, [r0, #0]
 800bf16:	2001      	movs	r0, #1
 800bf18:	e7e7      	b.n	800beea <_raise_r+0x12>
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf20:	4620      	mov	r0, r4
 800bf22:	4798      	blx	r3
 800bf24:	2000      	movs	r0, #0
 800bf26:	e7e0      	b.n	800beea <_raise_r+0x12>

0800bf28 <raise>:
 800bf28:	4b02      	ldr	r3, [pc, #8]	@ (800bf34 <raise+0xc>)
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	f7ff bfd3 	b.w	800bed8 <_raise_r>
 800bf32:	bf00      	nop
 800bf34:	20000188 	.word	0x20000188

0800bf38 <_kill_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d07      	ldr	r5, [pc, #28]	@ (800bf58 <_kill_r+0x20>)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4608      	mov	r0, r1
 800bf42:	4611      	mov	r1, r2
 800bf44:	602b      	str	r3, [r5, #0]
 800bf46:	f7f7 f99f 	bl	8003288 <_kill>
 800bf4a:	1c43      	adds	r3, r0, #1
 800bf4c:	d102      	bne.n	800bf54 <_kill_r+0x1c>
 800bf4e:	682b      	ldr	r3, [r5, #0]
 800bf50:	b103      	cbz	r3, 800bf54 <_kill_r+0x1c>
 800bf52:	6023      	str	r3, [r4, #0]
 800bf54:	bd38      	pop	{r3, r4, r5, pc}
 800bf56:	bf00      	nop
 800bf58:	200009f0 	.word	0x200009f0

0800bf5c <_getpid_r>:
 800bf5c:	f7f7 b98c 	b.w	8003278 <_getpid>

0800bf60 <__swhatbuf_r>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	460c      	mov	r4, r1
 800bf64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf68:	2900      	cmp	r1, #0
 800bf6a:	b096      	sub	sp, #88	@ 0x58
 800bf6c:	4615      	mov	r5, r2
 800bf6e:	461e      	mov	r6, r3
 800bf70:	da0d      	bge.n	800bf8e <__swhatbuf_r+0x2e>
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf78:	f04f 0100 	mov.w	r1, #0
 800bf7c:	bf14      	ite	ne
 800bf7e:	2340      	movne	r3, #64	@ 0x40
 800bf80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf84:	2000      	movs	r0, #0
 800bf86:	6031      	str	r1, [r6, #0]
 800bf88:	602b      	str	r3, [r5, #0]
 800bf8a:	b016      	add	sp, #88	@ 0x58
 800bf8c:	bd70      	pop	{r4, r5, r6, pc}
 800bf8e:	466a      	mov	r2, sp
 800bf90:	f000 f848 	bl	800c024 <_fstat_r>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	dbec      	blt.n	800bf72 <__swhatbuf_r+0x12>
 800bf98:	9901      	ldr	r1, [sp, #4]
 800bf9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bfa2:	4259      	negs	r1, r3
 800bfa4:	4159      	adcs	r1, r3
 800bfa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfaa:	e7eb      	b.n	800bf84 <__swhatbuf_r+0x24>

0800bfac <__smakebuf_r>:
 800bfac:	898b      	ldrh	r3, [r1, #12]
 800bfae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfb0:	079d      	lsls	r5, r3, #30
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	460c      	mov	r4, r1
 800bfb6:	d507      	bpl.n	800bfc8 <__smakebuf_r+0x1c>
 800bfb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	6123      	str	r3, [r4, #16]
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	6163      	str	r3, [r4, #20]
 800bfc4:	b003      	add	sp, #12
 800bfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfc8:	ab01      	add	r3, sp, #4
 800bfca:	466a      	mov	r2, sp
 800bfcc:	f7ff ffc8 	bl	800bf60 <__swhatbuf_r>
 800bfd0:	9f00      	ldr	r7, [sp, #0]
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	4639      	mov	r1, r7
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7fb fd08 	bl	80079ec <_malloc_r>
 800bfdc:	b948      	cbnz	r0, 800bff2 <__smakebuf_r+0x46>
 800bfde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe2:	059a      	lsls	r2, r3, #22
 800bfe4:	d4ee      	bmi.n	800bfc4 <__smakebuf_r+0x18>
 800bfe6:	f023 0303 	bic.w	r3, r3, #3
 800bfea:	f043 0302 	orr.w	r3, r3, #2
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	e7e2      	b.n	800bfb8 <__smakebuf_r+0xc>
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	6020      	str	r0, [r4, #0]
 800bff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bffa:	81a3      	strh	r3, [r4, #12]
 800bffc:	9b01      	ldr	r3, [sp, #4]
 800bffe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c002:	b15b      	cbz	r3, 800c01c <__smakebuf_r+0x70>
 800c004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c008:	4630      	mov	r0, r6
 800c00a:	f000 f81d 	bl	800c048 <_isatty_r>
 800c00e:	b128      	cbz	r0, 800c01c <__smakebuf_r+0x70>
 800c010:	89a3      	ldrh	r3, [r4, #12]
 800c012:	f023 0303 	bic.w	r3, r3, #3
 800c016:	f043 0301 	orr.w	r3, r3, #1
 800c01a:	81a3      	strh	r3, [r4, #12]
 800c01c:	89a3      	ldrh	r3, [r4, #12]
 800c01e:	431d      	orrs	r5, r3
 800c020:	81a5      	strh	r5, [r4, #12]
 800c022:	e7cf      	b.n	800bfc4 <__smakebuf_r+0x18>

0800c024 <_fstat_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4d07      	ldr	r5, [pc, #28]	@ (800c044 <_fstat_r+0x20>)
 800c028:	2300      	movs	r3, #0
 800c02a:	4604      	mov	r4, r0
 800c02c:	4608      	mov	r0, r1
 800c02e:	4611      	mov	r1, r2
 800c030:	602b      	str	r3, [r5, #0]
 800c032:	f7f7 f989 	bl	8003348 <_fstat>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	d102      	bne.n	800c040 <_fstat_r+0x1c>
 800c03a:	682b      	ldr	r3, [r5, #0]
 800c03c:	b103      	cbz	r3, 800c040 <_fstat_r+0x1c>
 800c03e:	6023      	str	r3, [r4, #0]
 800c040:	bd38      	pop	{r3, r4, r5, pc}
 800c042:	bf00      	nop
 800c044:	200009f0 	.word	0x200009f0

0800c048 <_isatty_r>:
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	4d06      	ldr	r5, [pc, #24]	@ (800c064 <_isatty_r+0x1c>)
 800c04c:	2300      	movs	r3, #0
 800c04e:	4604      	mov	r4, r0
 800c050:	4608      	mov	r0, r1
 800c052:	602b      	str	r3, [r5, #0]
 800c054:	f7f7 f988 	bl	8003368 <_isatty>
 800c058:	1c43      	adds	r3, r0, #1
 800c05a:	d102      	bne.n	800c062 <_isatty_r+0x1a>
 800c05c:	682b      	ldr	r3, [r5, #0]
 800c05e:	b103      	cbz	r3, 800c062 <_isatty_r+0x1a>
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	bd38      	pop	{r3, r4, r5, pc}
 800c064:	200009f0 	.word	0x200009f0

0800c068 <_init>:
 800c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06a:	bf00      	nop
 800c06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c06e:	bc08      	pop	{r3}
 800c070:	469e      	mov	lr, r3
 800c072:	4770      	bx	lr

0800c074 <_fini>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	bf00      	nop
 800c078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07a:	bc08      	pop	{r3}
 800c07c:	469e      	mov	lr, r3
 800c07e:	4770      	bx	lr
