
my_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015088  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08015258  08015258  00016258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a88  08015a88  000172e8  2**0
                  CONTENTS
  4 .ARM          00000008  08015a88  08015a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a90  08015a90  000172e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a90  08015a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015a94  08015a94  00016a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  20000000  08015a98  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002484  200002e8  08015d80  000172e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000276c  08015d80  0001776c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000172e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002113d  00000000  00000000  00017318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004826  00000000  00000000  00038455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  0003cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000160e  00000000  00000000  0003e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007689  00000000  00000000  0003fed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b27  00000000  00000000  0004755f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9bcb  00000000  00000000  0006d086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156c51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009330  00000000  00000000  00156c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015ffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e8 	.word	0x200002e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015240 	.word	0x08015240

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002ec 	.word	0x200002ec
 800020c:	08015240 	.word	0x08015240

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d106      	bne.n	8001046 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3371      	adds	r3, #113	@ 0x71
 800103c:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800103e:	e002      	b.n	8001046 <prv_parse_number+0x22>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <prv_parse_number+0x30>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b20      	cmp	r3, #32
 8001052:	d0f5      	beq.n	8001040 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b2d      	cmp	r3, #45	@ 0x2d
 800105a:	d104      	bne.n	8001066 <prv_parse_number+0x42>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <prv_parse_number+0x44>
 8001066:	2300      	movs	r3, #0
 8001068:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 800106a:	e00d      	b.n	8001088 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	461a      	mov	r2, r3
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b30      	subs	r3, #48	@ 0x30
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <prv_parse_number+0x7a>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b2f      	cmp	r3, #47	@ 0x2f
 8001094:	d903      	bls.n	800109e <prv_parse_number+0x7a>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b39      	cmp	r3, #57	@ 0x39
 800109c:	d9e6      	bls.n	800106c <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <prv_parse_number+0x86>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	425b      	negs	r3, r3
 80010a8:	e000      	b.n	80010ac <prv_parse_number+0x88>
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3371      	adds	r3, #113	@ 0x71
 80010cc:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80010ce:	e002      	b.n	80010d6 <prv_parse_float_number+0x1e>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <prv_parse_float_number+0x2c>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b20      	cmp	r3, #32
 80010e2:	d0f5      	beq.n	80010d0 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80010e4:	2100      	movs	r1, #0
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f00e fa08 	bl	800f4fc <strtod>
 80010ec:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80010f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010f8:	eeb0 0a47 	vmov.f32	s0, s14
 80010fc:	eef0 0a67 	vmov.f32	s1, s15
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001110:	2100      	movs	r1, #0
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffd0 	bl	80010b8 <prv_parse_float_number>
 8001118:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 800111c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001120:	f7ff fd3a 	bl	8000b98 <__aeabi_d2iz>
 8001124:	4603      	mov	r3, r0
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <prv_parse_lat_long+0x94>)
 8001128:	fb82 1203 	smull	r1, r2, r2, r3
 800112c:	1152      	asrs	r2, r2, #5
 800112e:	17db      	asrs	r3, r3, #31
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa16 	bl	8000564 <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <prv_parse_lat_long+0x98>)
 8001146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800114a:	f7ff fa75 	bl	8000638 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001156:	f7ff f8b7 	bl	80002c8 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <prv_parse_lat_long+0x9c>)
 8001168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800116c:	f7ff fb8e 	bl	800088c <__aeabi_ddiv>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001178:	f7ff f8a8 	bl	80002cc <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001188:	ec43 2b17 	vmov	d7, r2, r3
}
 800118c:	eeb0 0a47 	vmov.f32	s0, s14
 8001190:	eef0 0a67 	vmov.f32	s1, s15
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	51eb851f 	.word	0x51eb851f
 80011a0:	40590000 	.word	0x40590000
 80011a4:	404e0000 	.word	0x404e0000

080011a8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80011a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d169      	bne.n	8001290 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3371      	adds	r3, #113	@ 0x71
 80011c0:	2206      	movs	r2, #6
 80011c2:	49ba      	ldr	r1, [pc, #744]	@ (80014ac <prv_parse_term+0x304>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00f f93e 	bl	8010446 <strncmp>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <prv_parse_term+0x3c>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3371      	adds	r3, #113	@ 0x71
 80011d4:	2206      	movs	r2, #6
 80011d6:	49b6      	ldr	r1, [pc, #728]	@ (80014b0 <prv_parse_term+0x308>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f00f f934 	bl	8010446 <strncmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80011ec:	e04e      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3371      	adds	r3, #113	@ 0x71
 80011f2:	2206      	movs	r2, #6
 80011f4:	49af      	ldr	r1, [pc, #700]	@ (80014b4 <prv_parse_term+0x30c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00f f925 	bl	8010446 <strncmp>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <prv_parse_term+0x6e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3371      	adds	r3, #113	@ 0x71
 8001206:	2206      	movs	r2, #6
 8001208:	49ab      	ldr	r1, [pc, #684]	@ (80014b8 <prv_parse_term+0x310>)
 800120a:	4618      	mov	r0, r3
 800120c:	f00f f91b 	bl	8010446 <strncmp>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d104      	bne.n	8001220 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2202      	movs	r2, #2
 800121a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800121e:	e035      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3371      	adds	r3, #113	@ 0x71
 8001224:	2206      	movs	r2, #6
 8001226:	49a5      	ldr	r1, [pc, #660]	@ (80014bc <prv_parse_term+0x314>)
 8001228:	4618      	mov	r0, r3
 800122a:	f00f f90c 	bl	8010446 <strncmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d009      	beq.n	8001248 <prv_parse_term+0xa0>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3371      	adds	r3, #113	@ 0x71
 8001238:	2206      	movs	r2, #6
 800123a:	49a1      	ldr	r1, [pc, #644]	@ (80014c0 <prv_parse_term+0x318>)
 800123c:	4618      	mov	r0, r3
 800123e:	f00f f902 	bl	8010446 <strncmp>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2203      	movs	r2, #3
 800124c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001250:	e01c      	b.n	800128c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3371      	adds	r3, #113	@ 0x71
 8001256:	2206      	movs	r2, #6
 8001258:	499a      	ldr	r1, [pc, #616]	@ (80014c4 <prv_parse_term+0x31c>)
 800125a:	4618      	mov	r0, r3
 800125c:	f00f f8f3 	bl	8010446 <strncmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <prv_parse_term+0xd2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3371      	adds	r3, #113	@ 0x71
 800126a:	2206      	movs	r2, #6
 800126c:	4996      	ldr	r1, [pc, #600]	@ (80014c8 <prv_parse_term+0x320>)
 800126e:	4618      	mov	r0, r3
 8001270:	f00f f8e9 	bl	8010446 <strncmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d104      	bne.n	8001284 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2204      	movs	r2, #4
 800127e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001282:	e003      	b.n	800128c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 800128c:	2301      	movs	r3, #1
 800128e:	e231      	b.n	80016f4 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001296:	2900      	cmp	r1, #0
 8001298:	f000 822b 	beq.w	80016f2 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80012a2:	2901      	cmp	r1, #1
 80012a4:	f040 80c9 	bne.w	800143a <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80012ae:	3b01      	subs	r3, #1
 80012b0:	2b0a      	cmp	r3, #10
 80012b2:	f200 8213 	bhi.w	80016dc <prv_parse_term+0x534>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <prv_parse_term+0x114>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	08001363 	.word	0x08001363
 80012c4:	08001379 	.word	0x08001379
 80012c8:	080013a3 	.word	0x080013a3
 80012cc:	080013b9 	.word	0x080013b9
 80012d0:	080013e3 	.word	0x080013e3
 80012d4:	080013f7 	.word	0x080013f7
 80012d8:	080016dd 	.word	0x080016dd
 80012dc:	0800140b 	.word	0x0800140b
 80012e0:	080016dd 	.word	0x080016dd
 80012e4:	08001423 	.word	0x08001423
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80012ee:	3b30      	subs	r3, #48	@ 0x30
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001302:	4413      	add	r3, r2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3b30      	subs	r3, #48	@ 0x30
 8001308:	b2da      	uxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001316:	3b30      	subs	r3, #48	@ 0x30
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	3b30      	subs	r3, #48	@ 0x30
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800133e:	3b30      	subs	r3, #48	@ 0x30
 8001340:	b2db      	uxtb	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001352:	4413      	add	r3, r2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3b30      	subs	r3, #48	@ 0x30
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8001360:	e1c7      	b.n	80016f2 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fed0 	bl	8001108 <prv_parse_lat_long>
 8001368:	eeb0 7a40 	vmov.f32	s14, s0
 800136c:	eef0 7a60 	vmov.f32	s15, s1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 8001376:	e1bc      	b.n	80016f2 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800137e:	2b53      	cmp	r3, #83	@ 0x53
 8001380:	d005      	beq.n	800138e <prv_parse_term+0x1e6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001388:	2b73      	cmp	r3, #115	@ 0x73
 800138a:	f040 81a9 	bne.w	80016e0 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001394:	4690      	mov	r8, r2
 8001396:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80013a0:	e19e      	b.n	80016e0 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff feb0 	bl	8001108 <prv_parse_lat_long>
 80013a8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ac:	eef0 7a60 	vmov.f32	s15, s1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80013b6:	e19c      	b.n	80016f2 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013be:	2b57      	cmp	r3, #87	@ 0x57
 80013c0:	d005      	beq.n	80013ce <prv_parse_term+0x226>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013c8:	2b77      	cmp	r3, #119	@ 0x77
 80013ca:	f040 818b 	bne.w	80016e4 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80013d4:	4614      	mov	r4, r2
 80013d6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80013e0:	e180      	b.n	80016e4 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe1d 	bl	8001024 <prv_parse_number>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 80013f4:	e17d      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe13 	bl	8001024 <prv_parse_number>
 80013fe:	4603      	mov	r3, r0
 8001400:	b2da      	uxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8001408:	e173      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe53 	bl	80010b8 <prv_parse_float_number>
 8001412:	eeb0 7a40 	vmov.f32	s14, s0
 8001416:	eef0 7a60 	vmov.f32	s15, s1
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001420:	e167      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001422:	2100      	movs	r1, #0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe47 	bl	80010b8 <prv_parse_float_number>
 800142a:	eeb0 7a40 	vmov.f32	s14, s0
 800142e:	eef0 7a60 	vmov.f32	s15, s1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001438:	e15b      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001440:	2902      	cmp	r1, #2
 8001442:	f040 8083 	bne.w	800154c <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800144c:	3b02      	subs	r3, #2
 800144e:	2b0f      	cmp	r3, #15
 8001450:	d860      	bhi.n	8001514 <prv_parse_term+0x36c>
 8001452:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <prv_parse_term+0x2b0>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001499 	.word	0x08001499
 800145c:	08001515 	.word	0x08001515
 8001460:	08001515 	.word	0x08001515
 8001464:	08001515 	.word	0x08001515
 8001468:	08001515 	.word	0x08001515
 800146c:	08001515 	.word	0x08001515
 8001470:	08001515 	.word	0x08001515
 8001474:	08001515 	.word	0x08001515
 8001478:	08001515 	.word	0x08001515
 800147c:	08001515 	.word	0x08001515
 8001480:	08001515 	.word	0x08001515
 8001484:	08001515 	.word	0x08001515
 8001488:	08001515 	.word	0x08001515
 800148c:	080014cd 	.word	0x080014cd
 8001490:	080014e5 	.word	0x080014e5
 8001494:	080014fd 	.word	0x080014fd
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001498:	2100      	movs	r1, #0
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fdc2 	bl	8001024 <prv_parse_number>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 80014aa:	e122      	b.n	80016f2 <prv_parse_term+0x54a>
 80014ac:	08015258 	.word	0x08015258
 80014b0:	08015260 	.word	0x08015260
 80014b4:	08015268 	.word	0x08015268
 80014b8:	08015270 	.word	0x08015270
 80014bc:	08015278 	.word	0x08015278
 80014c0:	08015280 	.word	0x08015280
 80014c4:	08015288 	.word	0x08015288
 80014c8:	08015290 	.word	0x08015290
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fdf2 	bl	80010b8 <prv_parse_float_number>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	eef0 7a60 	vmov.f32	s15, s1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80014e2:	e106      	b.n	80016f2 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80014e4:	2100      	movs	r1, #0
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fde6 	bl	80010b8 <prv_parse_float_number>
 80014ec:	eeb0 7a40 	vmov.f32	s14, s0
 80014f0:	eef0 7a60 	vmov.f32	s15, s1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 80014fa:	e0fa      	b.n	80016f2 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80014fc:	2100      	movs	r1, #0
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fdda 	bl	80010b8 <prv_parse_float_number>
 8001504:	eeb0 7a40 	vmov.f32	s14, s0
 8001508:	eef0 7a60 	vmov.f32	s15, s1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001512:	e0ee      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800151a:	2b02      	cmp	r3, #2
 800151c:	f240 80e4 	bls.w	80016e8 <prv_parse_term+0x540>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001526:	2b0e      	cmp	r3, #14
 8001528:	f200 80de 	bhi.w	80016e8 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fd78 	bl	8001024 <prv_parse_number>
 8001534:	4602      	mov	r2, r0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800153c:	3b03      	subs	r3, #3
 800153e:	b2d1      	uxtb	r1, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	460a      	mov	r2, r1
 8001546:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800154a:	e0cd      	b.n	80016e8 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001552:	2903      	cmp	r1, #3
 8001554:	d11b      	bne.n	800158e <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800155c:	2b02      	cmp	r3, #2
 800155e:	d002      	beq.n	8001566 <prv_parse_term+0x3be>
 8001560:	2b03      	cmp	r3, #3
 8001562:	d00a      	beq.n	800157a <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001564:	e0c5      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fd5b 	bl	8001024 <prv_parse_number>
 800156e:	4603      	mov	r3, r0
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 8001578:	e0bb      	b.n	80016f2 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800157a:	2100      	movs	r1, #0
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd51 	bl	8001024 <prv_parse_number>
 8001582:	4603      	mov	r3, r0
 8001584:	b2da      	uxtb	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 800158c:	e0b1      	b.n	80016f2 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001594:	2904      	cmp	r1, #4
 8001596:	f040 80ac 	bne.w	80016f2 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80015a0:	3902      	subs	r1, #2
 80015a2:	2909      	cmp	r1, #9
 80015a4:	f200 80a2 	bhi.w	80016ec <prv_parse_term+0x544>
 80015a8:	a001      	add	r0, pc, #4	@ (adr r0, 80015b0 <prv_parse_term+0x408>)
 80015aa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080016ed 	.word	0x080016ed
 80015b8:	080016ed 	.word	0x080016ed
 80015bc:	080016ed 	.word	0x080016ed
 80015c0:	080016ed 	.word	0x080016ed
 80015c4:	080015f3 	.word	0x080015f3
 80015c8:	0800160b 	.word	0x0800160b
 80015cc:	08001623 	.word	0x08001623
 80015d0:	0800169d 	.word	0x0800169d
 80015d4:	080016b5 	.word	0x080016b5
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80015de:	2b41      	cmp	r3, #65	@ 0x41
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80015f0:	e07f      	b.n	80016f2 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80015f2:	2100      	movs	r1, #0
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd5f 	bl	80010b8 <prv_parse_float_number>
 80015fa:	eeb0 7a40 	vmov.f32	s14, s0
 80015fe:	eef0 7a60 	vmov.f32	s15, s1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001608:	e073      	b.n	80016f2 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 800160a:	2100      	movs	r1, #0
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd53 	bl	80010b8 <prv_parse_float_number>
 8001612:	eeb0 7a40 	vmov.f32	s14, s0
 8001616:	eef0 7a60 	vmov.f32	s15, s1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001620:	e067      	b.n	80016f2 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001628:	3b30      	subs	r3, #48	@ 0x30
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800163c:	4413      	add	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	3b30      	subs	r3, #48	@ 0x30
 8001642:	b2da      	uxtb	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001650:	3b30      	subs	r3, #48	@ 0x30
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4413      	add	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001664:	4413      	add	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3b30      	subs	r3, #48	@ 0x30
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001678:	3b30      	subs	r3, #48	@ 0x30
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800168c:	4413      	add	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b30      	subs	r3, #48	@ 0x30
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 800169a:	e02a      	b.n	80016f2 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800169c:	2100      	movs	r1, #0
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fd0a 	bl	80010b8 <prv_parse_float_number>
 80016a4:	eeb0 7a40 	vmov.f32	s14, s0
 80016a8:	eef0 7a60 	vmov.f32	s15, s1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 80016b2:	e01e      	b.n	80016f2 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016ba:	2957      	cmp	r1, #87	@ 0x57
 80016bc:	d004      	beq.n	80016c8 <prv_parse_term+0x520>
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80016c4:	2977      	cmp	r1, #119	@ 0x77
 80016c6:	d113      	bne.n	80016f0 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80016ce:	4602      	mov	r2, r0
 80016d0:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80016da:	e009      	b.n	80016f0 <prv_parse_term+0x548>
                break;
 80016dc:	bf00      	nop
 80016de:	e008      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e0:	bf00      	nop
 80016e2:	e006      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <prv_parse_term+0x54a>
            default:
                break;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <prv_parse_term+0x54a>
                break;
 80016f0:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016fe:	bf00      	nop

08001700 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800170e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001710:	d90d      	bls.n	800172e <prv_check_crc+0x2e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001718:	2b39      	cmp	r3, #57	@ 0x39
 800171a:	d808      	bhi.n	800172e <prv_check_crc+0x2e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001722:	3b30      	subs	r3, #48	@ 0x30
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b25b      	sxtb	r3, r3
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	b25a      	sxtb	r2, r3
 800172c:	e026      	b.n	800177c <prv_check_crc+0x7c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001734:	2b60      	cmp	r3, #96	@ 0x60
 8001736:	d90d      	bls.n	8001754 <prv_check_crc+0x54>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800173e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001740:	d808      	bhi.n	8001754 <prv_check_crc+0x54>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001748:	3b57      	subs	r3, #87	@ 0x57
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	b25a      	sxtb	r2, r3
 8001752:	e013      	b.n	800177c <prv_check_crc+0x7c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800175a:	2b40      	cmp	r3, #64	@ 0x40
 800175c:	d90d      	bls.n	800177a <prv_check_crc+0x7a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001764:	2b5a      	cmp	r3, #90	@ 0x5a
 8001766:	d808      	bhi.n	800177a <prv_check_crc+0x7a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800176e:	3b37      	subs	r3, #55	@ 0x37
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b25b      	sxtb	r3, r3
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	b25a      	sxtb	r2, r3
 8001778:	e000      	b.n	800177c <prv_check_crc+0x7c>
 800177a:	2200      	movs	r2, #0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001782:	2b2f      	cmp	r3, #47	@ 0x2f
 8001784:	d90c      	bls.n	80017a0 <prv_check_crc+0xa0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800178c:	2b39      	cmp	r3, #57	@ 0x39
 800178e:	d807      	bhi.n	80017a0 <prv_check_crc+0xa0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	b25b      	sxtb	r3, r3
 800179e:	e028      	b.n	80017f2 <prv_check_crc+0xf2>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017a6:	2b60      	cmp	r3, #96	@ 0x60
 80017a8:	d90e      	bls.n	80017c8 <prv_check_crc+0xc8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80017b2:	d809      	bhi.n	80017c8 <prv_check_crc+0xc8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ba:	3b57      	subs	r3, #87	@ 0x57
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	e014      	b.n	80017f2 <prv_check_crc+0xf2>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017ce:	2b40      	cmp	r3, #64	@ 0x40
 80017d0:	d90e      	bls.n	80017f0 <prv_check_crc+0xf0>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017d8:	2b5a      	cmp	r3, #90	@ 0x5a
 80017da:	d809      	bhi.n	80017f0 <prv_check_crc+0xf0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017e2:	3b37      	subs	r3, #55	@ 0x37
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	e000      	b.n	80017f2 <prv_check_crc+0xf2>
 80017f0:	2300      	movs	r3, #0
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	429a      	cmp	r2, r3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001824:	2b01      	cmp	r3, #1
 8001826:	d136      	bne.n	8001896 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001894:	e061      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800189c:	2b02      	cmp	r3, #2
 800189e:	d121      	bne.n	80018e4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	33a1      	adds	r3, #161	@ 0xa1
 80018da:	220c      	movs	r2, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	f00e fe4c 	bl	801057a <memcpy>
 80018e2:	e03a      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d106      	bne.n	80018fc <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80018fa:	e02e      	b.n	800195a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001902:	2b04      	cmp	r3, #4
 8001904:	d129      	bne.n	800195a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800196c:	22b0      	movs	r2, #176	@ 0xb0
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f00e fd60 	bl	8010436 <memset>
    return 1;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001990:	e0ad      	b.n	8001aee <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b24      	cmp	r3, #36	@ 0x24
 8001998:	d128      	bne.n	80019ec <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3370      	adds	r3, #112	@ 0x70
 800199e:	2240      	movs	r2, #64	@ 0x40
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00e fd47 	bl	8010436 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ae:	2b0b      	cmp	r3, #11
 80019b0:	f200 8097 	bhi.w	8001ae2 <lwgps_process+0x162>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ba:	4619      	mov	r1, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019ea:	e07a      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80019f2:	d11d      	bne.n	8001a30 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fbd7 	bl	80011a8 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4053      	eors	r3, r2
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a2e:	e058      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a36:	d117      	bne.n	8001a68 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff fbb5 	bl	80011a8 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a66:	e03c      	b.n	8001ae2 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0d      	cmp	r3, #13
 8001a6e:	d109      	bne.n	8001a84 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe45 	bl	8001700 <prv_check_crc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d032      	beq.n	8001ae2 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff feca 	bl	8001816 <prv_copy_from_tmp_memory>
 8001a82:	e02e      	b.n	8001ae2 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4053      	eors	r3, r2
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001aa8:	2b0b      	cmp	r3, #11
 8001aaa:	d81a      	bhi.n	8001ae2 <lwgps_process+0x162>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f af4e 	bne.w	8001992 <lwgps_process+0x12>
        }
    }
    return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	ed2d 8b04 	vpush	{d8-d9}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0a:	f002 fcc9 	bl	80044a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0e:	f000 fd91 	bl	8002634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b12:	f001 f863 	bl	8002bdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b16:	f001 f841 	bl	8002b9c <MX_DMA_Init>
  MX_ADC1_Init();
 8001b1a:	f000 fdf7 	bl	800270c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b1e:	f000 fe47 	bl	80027b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001b22:	f000 fe73 	bl	800280c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001b26:	f000 ffbb 	bl	8002aa0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b2a:	f000 ffe3 	bl	8002af4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001b2e:	f001 f80b 	bl	8002b48 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8001b32:	f000 ff8b 	bl	8002a4c <MX_UART4_Init>
  MX_TIM2_Init();
 8001b36:	f000 fe9f 	bl	8002878 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b3a:	f000 feeb 	bl	8002914 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b3e:	f000 ff37 	bl	80029b0 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8001b42:	f00c f88b 	bl	800dc5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8001b46:	2064      	movs	r0, #100	@ 0x64
 8001b48:	f002 fd1c 	bl	8004584 <HAL_Delay>
  receive_data =E220_write_register(0x2, 0x64);
 8001b4c:	2164      	movs	r1, #100	@ 0x64
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f001 fa66 	bl	8003020 <E220_write_register>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b81      	ldr	r3, [pc, #516]	@ (8001d60 <main+0x260>)
 8001b5a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001b5c:	2064      	movs	r0, #100	@ 0x64
 8001b5e:	f002 fd11 	bl	8004584 <HAL_Delay>

  HAL_Delay(100);
 8001b62:	2064      	movs	r0, #100	@ 0x64
 8001b64:	f002 fd0e 	bl	8004584 <HAL_Delay>
  receive_data =E220_write_register(0x2, 0x64);
 8001b68:	2164      	movs	r1, #100	@ 0x64
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f001 fa58 	bl	8003020 <E220_write_register>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b7a      	ldr	r3, [pc, #488]	@ (8001d60 <main+0x260>)
 8001b76:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001b78:	2064      	movs	r0, #100	@ 0x64
 8001b7a:	f002 fd03 	bl	8004584 <HAL_Delay>

  receive_data =E220_write_register(0x3, 0x40);
 8001b7e:	2140      	movs	r1, #64	@ 0x40
 8001b80:	2003      	movs	r0, #3
 8001b82:	f001 fa4d 	bl	8003020 <E220_write_register>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b75      	ldr	r3, [pc, #468]	@ (8001d60 <main+0x260>)
 8001b8c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001b8e:	2064      	movs	r0, #100	@ 0x64
 8001b90:	f002 fcf8 	bl	8004584 <HAL_Delay>
  receive_data =E220_write_register(0x4, 0x10); // ch
 8001b94:	2110      	movs	r1, #16
 8001b96:	2004      	movs	r0, #4
 8001b98:	f001 fa42 	bl	8003020 <E220_write_register>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8001d60 <main+0x260>)
 8001ba2:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001ba4:	2064      	movs	r0, #100	@ 0x64
 8001ba6:	f002 fced 	bl	8004584 <HAL_Delay>
  receive_data =E220_write_register(0x5, 0x40);//40
 8001baa:	2140      	movs	r1, #64	@ 0x40
 8001bac:	2005      	movs	r0, #5
 8001bae:	f001 fa37 	bl	8003020 <E220_write_register>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d60 <main+0x260>)
 8001bb8:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001bba:	2064      	movs	r0, #100	@ 0x64
 8001bbc:	f002 fce2 	bl	8004584 <HAL_Delay>
  receive_data =E220_write_register(0x6, 0x00);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2006      	movs	r0, #6
 8001bc4:	f001 fa2c 	bl	8003020 <E220_write_register>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b64      	ldr	r3, [pc, #400]	@ (8001d60 <main+0x260>)
 8001bce:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001bd0:	2064      	movs	r0, #100	@ 0x64
 8001bd2:	f002 fcd7 	bl	8004584 <HAL_Delay>
  receive_data =E220_write_register(0x7, 0x00);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2007      	movs	r0, #7
 8001bda:	f001 fa21 	bl	8003020 <E220_write_register>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d60 <main+0x260>)
 8001be4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001be6:	2064      	movs	r0, #100	@ 0x64
 8001be8:	f002 fccc 	bl	8004584 <HAL_Delay>
  receive_data =E220_write_register(0, 0x06); // h 0x06
 8001bec:	2106      	movs	r1, #6
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f001 fa16 	bl	8003020 <E220_write_register>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b59      	ldr	r3, [pc, #356]	@ (8001d60 <main+0x260>)
 8001bfa:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001bfc:	2064      	movs	r0, #100	@ 0x64
 8001bfe:	f002 fcc1 	bl	8004584 <HAL_Delay>

  receive_data =E220_write_register(0x1, 0x03); // low 0x03
 8001c02:	2103      	movs	r1, #3
 8001c04:	2001      	movs	r0, #1
 8001c06:	f001 fa0b 	bl	8003020 <E220_write_register>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b54      	ldr	r3, [pc, #336]	@ (8001d60 <main+0x260>)
 8001c10:	701a      	strb	r2, [r3, #0]
  HAL_Delay(200);
 8001c12:	20c8      	movs	r0, #200	@ 0xc8
 8001c14:	f002 fcb6 	bl	8004584 <HAL_Delay>

  receive_data = E220_read_register(0);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f001 fa49 	bl	80030b0 <E220_read_register>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b4f      	ldr	r3, [pc, #316]	@ (8001d60 <main+0x260>)
 8001c24:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001c26:	2064      	movs	r0, #100	@ 0x64
 8001c28:	f002 fcac 	bl	8004584 <HAL_Delay>
  receive_data = E220_read_register(1);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f001 fa3f 	bl	80030b0 <E220_read_register>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b4a      	ldr	r3, [pc, #296]	@ (8001d60 <main+0x260>)
 8001c38:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001c3a:	2064      	movs	r0, #100	@ 0x64
 8001c3c:	f002 fca2 	bl	8004584 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);//m0
 8001c40:	2200      	movs	r2, #0
 8001c42:	2101      	movs	r1, #1
 8001c44:	4847      	ldr	r0, [pc, #284]	@ (8001d64 <main+0x264>)
 8001c46:	f003 fff5 	bl	8005c34 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c4a:	2064      	movs	r0, #100	@ 0x64
 8001c4c:	f002 fc9a 	bl	8004584 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET); //m1
 8001c50:	2201      	movs	r2, #1
 8001c52:	2102      	movs	r1, #2
 8001c54:	4843      	ldr	r0, [pc, #268]	@ (8001d64 <main+0x264>)
 8001c56:	f003 ffed 	bl	8005c34 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001c5a:	2064      	movs	r0, #100	@ 0x64
 8001c5c:	f002 fc92 	bl	8004584 <HAL_Delay>

  lwgps_init(&gps);
 8001c60:	4841      	ldr	r0, [pc, #260]	@ (8001d68 <main+0x268>)
 8001c62:	f7ff fe7f 	bl	8001964 <lwgps_init>


  HAL_TIM_Base_Start_IT(&htim2);
 8001c66:	4841      	ldr	r0, [pc, #260]	@ (8001d6c <main+0x26c>)
 8001c68:	f006 fdc8 	bl	80087fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001c6c:	4840      	ldr	r0, [pc, #256]	@ (8001d70 <main+0x270>)
 8001c6e:	f006 fdc5 	bl	80087fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001c72:	4840      	ldr	r0, [pc, #256]	@ (8001d74 <main+0x274>)
 8001c74:	f006 fdc2 	bl	80087fc <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_IT(&hadc1);
 8001c78:	483f      	ldr	r0, [pc, #252]	@ (8001d78 <main+0x278>)
 8001c7a:	f002 fceb 	bl	8004654 <HAL_ADC_Start_IT>

  //HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
  HAL_UART_Receive_IT(&huart2, &rx_data_gps, 1);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	493e      	ldr	r1, [pc, #248]	@ (8001d7c <main+0x27c>)
 8001c82:	483f      	ldr	r0, [pc, #252]	@ (8001d80 <main+0x280>)
 8001c84:	f007 fb52 	bl	800932c <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart3, Lora_Control_Buffer, 72);
 8001c88:	2248      	movs	r2, #72	@ 0x48
 8001c8a:	493e      	ldr	r1, [pc, #248]	@ (8001d84 <main+0x284>)
 8001c8c:	483e      	ldr	r0, [pc, #248]	@ (8001d88 <main+0x288>)
 8001c8e:	f007 fb72 	bl	8009376 <HAL_UART_Receive_DMA>

  HYI_BUFFER_Fill();
 8001c92:	f001 fa63 	bl	800315c <HYI_BUFFER_Fill>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(Lora_Rx_Buffer[0]==2 && Lora_Rx_Buffer[47] == 0x31){
 8001c96:	4b3d      	ldr	r3, [pc, #244]	@ (8001d8c <main+0x28c>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	f040 819d 	bne.w	8001fda <main+0x4da>
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8001d8c <main+0x28c>)
 8001ca2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001ca6:	2b31      	cmp	r3, #49	@ 0x31
 8001ca8:	f040 8197 	bne.w	8001fda <main+0x4da>

	  		  Sustainer.satsinview=Lora_Rx_Buffer[1];
 8001cac:	4b37      	ldr	r3, [pc, #220]	@ (8001d8c <main+0x28c>)
 8001cae:	785a      	ldrb	r2, [r3, #1]
 8001cb0:	4b37      	ldr	r3, [pc, #220]	@ (8001d90 <main+0x290>)
 8001cb2:	701a      	strb	r2, [r3, #0]

	  		  Sustainer_union_converter();
 8001cb4:	f001 fc30 	bl	8003518 <Sustainer_union_converter>
	  		  Sustainer.battery=Lora_Rx_Buffer[46];
 8001cb8:	4b34      	ldr	r3, [pc, #208]	@ (8001d8c <main+0x28c>)
 8001cba:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8001cbe:	4b34      	ldr	r3, [pc, #208]	@ (8001d90 <main+0x290>)
 8001cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  		  Sustainer.mod=Lora_Rx_Buffer[70];
 8001cc4:	4b31      	ldr	r3, [pc, #196]	@ (8001d8c <main+0x28c>)
 8001cc6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001cca:	4b31      	ldr	r3, [pc, #196]	@ (8001d90 <main+0x290>)
 8001ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	  		  Sustainer.communication=Lora_Rx_Buffer[48];
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d8c <main+0x28c>)
 8001cd2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d90 <main+0x290>)
 8001cd8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	  			 //EGU PART
	  			 EGU_ARIZA=Lora_Rx_Buffer[49];
 8001cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d8c <main+0x28c>)
 8001cde:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d94 <main+0x294>)
 8001ce4:	701a      	strb	r2, [r3, #0]
	  			 EGU_AYRILMA_TESPIT=Lora_Rx_Buffer[50];
 8001ce6:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <main+0x28c>)
 8001ce8:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8001cec:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <main+0x298>)
 8001cee:	701a      	strb	r2, [r3, #0]
	  			HYI_BUFFER[74]= EGU_AYRILMA_TESPIT;//EGU_AYRILMA_TESPIT;
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <main+0x298>)
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	4b29      	ldr	r3, [pc, #164]	@ (8001d9c <main+0x29c>)
 8001cf6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

	  			 float2unit8 f2u8_EGU_BATTERY;
	  			for(uint8_t i=0;i<4;i++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	77fb      	strb	r3, [r7, #31]
 8001cfe:	e00e      	b.n	8001d1e <main+0x21e>
	  			{
	  				f2u8_EGU_BATTERY.array[i]=Lora_Rx_Buffer[i+51];
 8001d00:	7ffb      	ldrb	r3, [r7, #31]
 8001d02:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	4920      	ldr	r1, [pc, #128]	@ (8001d8c <main+0x28c>)
 8001d0a:	5c8a      	ldrb	r2, [r1, r2]
 8001d0c:	3318      	adds	r3, #24
 8001d0e:	f107 0108 	add.w	r1, r7, #8
 8001d12:	440b      	add	r3, r1
 8001d14:	f803 2c08 	strb.w	r2, [r3, #-8]
	  			for(uint8_t i=0;i<4;i++)
 8001d18:	7ffb      	ldrb	r3, [r7, #31]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	77fb      	strb	r3, [r7, #31]
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d9ed      	bls.n	8001d00 <main+0x200>
	  			}
	  			 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <main+0x2a0>)
 8001d28:	6013      	str	r3, [r2, #0]

	  			 float2unit8 f2u8_EGU_ANGLE;
	  			for(uint8_t i=0;i<4;i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	77bb      	strb	r3, [r7, #30]
 8001d2e:	e00e      	b.n	8001d4e <main+0x24e>
	  			{
	  				f2u8_EGU_ANGLE.array[i]=Lora_Rx_Buffer[i+55];
 8001d30:	7fbb      	ldrb	r3, [r7, #30]
 8001d32:	f103 0237 	add.w	r2, r3, #55	@ 0x37
 8001d36:	7fbb      	ldrb	r3, [r7, #30]
 8001d38:	4914      	ldr	r1, [pc, #80]	@ (8001d8c <main+0x28c>)
 8001d3a:	5c8a      	ldrb	r2, [r1, r2]
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	f107 0108 	add.w	r1, r7, #8
 8001d42:	440b      	add	r3, r1
 8001d44:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  			for(uint8_t i=0;i<4;i++)
 8001d48:	7fbb      	ldrb	r3, [r7, #30]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	77bb      	strb	r3, [r7, #30]
 8001d4e:	7fbb      	ldrb	r3, [r7, #30]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d9ed      	bls.n	8001d30 <main+0x230>
	  			}
	  			  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <main+0x2a4>)
 8001d58:	6013      	str	r3, [r2, #0]

	  			  float2unit8 f2u8_EGU_IRTIFA;
	  			for(uint8_t i=0;i<4;i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	777b      	strb	r3, [r7, #29]
 8001d5e:	e032      	b.n	8001dc6 <main+0x2c6>
 8001d60:	20000a30 	.word	0x20000a30
 8001d64:	40020400 	.word	0x40020400
 8001d68:	20000980 	.word	0x20000980
 8001d6c:	200003f8 	.word	0x200003f8
 8001d70:	20000440 	.word	0x20000440
 8001d74:	20000488 	.word	0x20000488
 8001d78:	20000304 	.word	0x20000304
 8001d7c:	200007a4 	.word	0x200007a4
 8001d80:	20000518 	.word	0x20000518
 8001d84:	20000698 	.word	0x20000698
 8001d88:	20000560 	.word	0x20000560
 8001d8c:	20000650 	.word	0x20000650
 8001d90:	20000944 	.word	0x20000944
 8001d94:	200007c0 	.word	0x200007c0
 8001d98:	200007c1 	.word	0x200007c1
 8001d9c:	200006e0 	.word	0x200006e0
 8001da0:	200007c8 	.word	0x200007c8
 8001da4:	200007d0 	.word	0x200007d0
	  			{
	  				f2u8_EGU_IRTIFA.array[i]=Lora_Rx_Buffer[i+59];
 8001da8:	7f7b      	ldrb	r3, [r7, #29]
 8001daa:	f103 023b 	add.w	r2, r3, #59	@ 0x3b
 8001dae:	7f7b      	ldrb	r3, [r7, #29]
 8001db0:	49ae      	ldr	r1, [pc, #696]	@ (800206c <main+0x56c>)
 8001db2:	5c8a      	ldrb	r2, [r1, r2]
 8001db4:	3318      	adds	r3, #24
 8001db6:	f107 0108 	add.w	r1, r7, #8
 8001dba:	440b      	add	r3, r1
 8001dbc:	f803 2c10 	strb.w	r2, [r3, #-16]
	  			for(uint8_t i=0;i<4;i++)
 8001dc0:	7f7b      	ldrb	r3, [r7, #29]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	777b      	strb	r3, [r7, #29]
 8001dc6:	7f7b      	ldrb	r3, [r7, #29]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d9ed      	bls.n	8001da8 <main+0x2a8>
	  			}
	  		  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4aa8      	ldr	r2, [pc, #672]	@ (8002070 <main+0x570>)
 8001dd0:	6013      	str	r3, [r2, #0]

	  		  EGU_FITIL=Lora_Rx_Buffer[50];
 8001dd2:	4ba6      	ldr	r3, [pc, #664]	@ (800206c <main+0x56c>)
 8001dd4:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8001dd8:	4ba6      	ldr	r3, [pc, #664]	@ (8002074 <main+0x574>)
 8001dda:	701a      	strb	r2, [r3, #0]
	  //	/*  EGU_UCUS_BASLADIMI*/sustv4_mod=Lora_Rx_Buffer[63];
	  		  EGU_STAGE_DURUM=Lora_Rx_Buffer[64];
 8001ddc:	4ba3      	ldr	r3, [pc, #652]	@ (800206c <main+0x56c>)
 8001dde:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8001de2:	4ba5      	ldr	r3, [pc, #660]	@ (8002078 <main+0x578>)
 8001de4:	701a      	strb	r2, [r3, #0]
	  		  EGU_MOTOR_ATESLEME_TALEP_IN=Lora_Rx_Buffer[65];
 8001de6:	4ba1      	ldr	r3, [pc, #644]	@ (800206c <main+0x56c>)
 8001de8:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001dec:	4ba3      	ldr	r3, [pc, #652]	@ (800207c <main+0x57c>)
 8001dee:	701a      	strb	r2, [r3, #0]
	  		  float2unit8 f2u8_altitude;
	  		  f2u8_altitude.array[0] = Lora_Rx_Buffer[66];
 8001df0:	4b9e      	ldr	r3, [pc, #632]	@ (800206c <main+0x56c>)
 8001df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001df6:	733b      	strb	r3, [r7, #12]
	  		  f2u8_altitude.array[1] = Lora_Rx_Buffer[67];
 8001df8:	4b9c      	ldr	r3, [pc, #624]	@ (800206c <main+0x56c>)
 8001dfa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001dfe:	737b      	strb	r3, [r7, #13]
	  		  f2u8_altitude.array[2] = Lora_Rx_Buffer[68];
 8001e00:	4b9a      	ldr	r3, [pc, #616]	@ (800206c <main+0x56c>)
 8001e02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e06:	73bb      	strb	r3, [r7, #14]
	  		  f2u8_altitude.array[3] = Lora_Rx_Buffer[69];
 8001e08:	4b98      	ldr	r3, [pc, #608]	@ (800206c <main+0x56c>)
 8001e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e0e:	73fb      	strb	r3, [r7, #15]
	  		  Sustainer.maxAltitude=f2u8_altitude.fVal;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a9b      	ldr	r2, [pc, #620]	@ (8002080 <main+0x580>)
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30



				sprintf(s_altitude,"%4.3f",Sustainer.altitude);
 8001e16:	4b9a      	ldr	r3, [pc, #616]	@ (8002080 <main+0x580>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fbb4 	bl	8000588 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4997      	ldr	r1, [pc, #604]	@ (8002084 <main+0x584>)
 8001e26:	4898      	ldr	r0, [pc, #608]	@ (8002088 <main+0x588>)
 8001e28:	f00e faa2 	bl	8010370 <siprintf>
				sprintf(s_temperature,"%2.2f",Sustainer.temperature);
 8001e2c:	4b94      	ldr	r3, [pc, #592]	@ (8002080 <main+0x580>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fba9 	bl	8000588 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4994      	ldr	r1, [pc, #592]	@ (800208c <main+0x58c>)
 8001e3c:	4894      	ldr	r0, [pc, #592]	@ (8002090 <main+0x590>)
 8001e3e:	f00e fa97 	bl	8010370 <siprintf>
				sprintf(s_speed,"%2.2f",Sustainer.speed);
 8001e42:	4b8f      	ldr	r3, [pc, #572]	@ (8002080 <main+0x580>)
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb9e 	bl	8000588 <__aeabi_f2d>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	498e      	ldr	r1, [pc, #568]	@ (800208c <main+0x58c>)
 8001e52:	4890      	ldr	r0, [pc, #576]	@ (8002094 <main+0x594>)
 8001e54:	f00e fa8c 	bl	8010370 <siprintf>
				sprintf(s_roll,"%2.2f",Sustainer.normal);
 8001e58:	4b89      	ldr	r3, [pc, #548]	@ (8002080 <main+0x580>)
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb93 	bl	8000588 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4989      	ldr	r1, [pc, #548]	@ (800208c <main+0x58c>)
 8001e68:	488b      	ldr	r0, [pc, #556]	@ (8002098 <main+0x598>)
 8001e6a:	f00e fa81 	bl	8010370 <siprintf>
				sprintf(s_pitch,"%2.2f",Sustainer.pitch);
 8001e6e:	4b84      	ldr	r3, [pc, #528]	@ (8002080 <main+0x580>)
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb88 	bl	8000588 <__aeabi_f2d>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4983      	ldr	r1, [pc, #524]	@ (800208c <main+0x58c>)
 8001e7e:	4887      	ldr	r0, [pc, #540]	@ (800209c <main+0x59c>)
 8001e80:	f00e fa76 	bl	8010370 <siprintf>
				sprintf(s_latitude,"%2.6f",Sustainer.gpslatitude);
 8001e84:	4b7e      	ldr	r3, [pc, #504]	@ (8002080 <main+0x580>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb7d 	bl	8000588 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4983      	ldr	r1, [pc, #524]	@ (80020a0 <main+0x5a0>)
 8001e94:	4883      	ldr	r0, [pc, #524]	@ (80020a4 <main+0x5a4>)
 8001e96:	f00e fa6b 	bl	8010370 <siprintf>
				sprintf(s_longitude,"%2.6f",Sustainer.gpslongitude);
 8001e9a:	4b79      	ldr	r3, [pc, #484]	@ (8002080 <main+0x580>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fb72 	bl	8000588 <__aeabi_f2d>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	497d      	ldr	r1, [pc, #500]	@ (80020a0 <main+0x5a0>)
 8001eaa:	487f      	ldr	r0, [pc, #508]	@ (80020a8 <main+0x5a8>)
 8001eac:	f00e fa60 	bl	8010370 <siprintf>
				sprintf(s_bat,"%2d",Sustainer.battery);
 8001eb0:	4b73      	ldr	r3, [pc, #460]	@ (8002080 <main+0x580>)
 8001eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	497c      	ldr	r1, [pc, #496]	@ (80020ac <main+0x5ac>)
 8001eba:	487d      	ldr	r0, [pc, #500]	@ (80020b0 <main+0x5b0>)
 8001ebc:	f00e fa58 	bl	8010370 <siprintf>
				sprintf(s_sats,"%2d",Sustainer.satsinview);
 8001ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8002080 <main+0x580>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4979      	ldr	r1, [pc, #484]	@ (80020ac <main+0x5ac>)
 8001ec8:	487a      	ldr	r0, [pc, #488]	@ (80020b4 <main+0x5b4>)
 8001eca:	f00e fa51 	bl	8010370 <siprintf>
				sprintf(s_comm,"%2d",Sustainer.communication);
 8001ece:	4b6c      	ldr	r3, [pc, #432]	@ (8002080 <main+0x580>)
 8001ed0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4975      	ldr	r1, [pc, #468]	@ (80020ac <main+0x5ac>)
 8001ed8:	4877      	ldr	r0, [pc, #476]	@ (80020b8 <main+0x5b8>)
 8001eda:	f00e fa49 	bl	8010370 <siprintf>
				sprintf(s_comm,"%2d",Sustainer.communication);
 8001ede:	4b68      	ldr	r3, [pc, #416]	@ (8002080 <main+0x580>)
 8001ee0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4971      	ldr	r1, [pc, #452]	@ (80020ac <main+0x5ac>)
 8001ee8:	4873      	ldr	r0, [pc, #460]	@ (80020b8 <main+0x5b8>)
 8001eea:	f00e fa41 	bl	8010370 <siprintf>
				//sprintf(s_dist,"%4.2f",s_distance);

				sprintf(e_altitude,"%4.2f",EGU_IRTIFA);
 8001eee:	4b60      	ldr	r3, [pc, #384]	@ (8002070 <main+0x570>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb48 	bl	8000588 <__aeabi_f2d>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	496f      	ldr	r1, [pc, #444]	@ (80020bc <main+0x5bc>)
 8001efe:	4870      	ldr	r0, [pc, #448]	@ (80020c0 <main+0x5c0>)
 8001f00:	f00e fa36 	bl	8010370 <siprintf>
				sprintf(e_angle,"%2.2f",EGU_ANGLE);
 8001f04:	4b6f      	ldr	r3, [pc, #444]	@ (80020c4 <main+0x5c4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb3d 	bl	8000588 <__aeabi_f2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	495e      	ldr	r1, [pc, #376]	@ (800208c <main+0x58c>)
 8001f14:	486c      	ldr	r0, [pc, #432]	@ (80020c8 <main+0x5c8>)
 8001f16:	f00e fa2b 	bl	8010370 <siprintf>
				sprintf(e_bat,"%2d",EGU_BATTERY);
 8001f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80020cc <main+0x5cc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fb32 	bl	8000588 <__aeabi_f2d>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4960      	ldr	r1, [pc, #384]	@ (80020ac <main+0x5ac>)
 8001f2a:	4869      	ldr	r0, [pc, #420]	@ (80020d0 <main+0x5d0>)
 8001f2c:	f00e fa20 	bl	8010370 <siprintf>
				sprintf(e_flight,"%d",EGU_UCUS_BASLADIMI);
 8001f30:	4b68      	ldr	r3, [pc, #416]	@ (80020d4 <main+0x5d4>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4968      	ldr	r1, [pc, #416]	@ (80020d8 <main+0x5d8>)
 8001f38:	4868      	ldr	r0, [pc, #416]	@ (80020dc <main+0x5dc>)
 8001f3a:	f00e fa19 	bl	8010370 <siprintf>
				sprintf(e_stage,"%d",EGU_AYRILMA_TESPIT);
 8001f3e:	4b68      	ldr	r3, [pc, #416]	@ (80020e0 <main+0x5e0>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4964      	ldr	r1, [pc, #400]	@ (80020d8 <main+0x5d8>)
 8001f46:	4867      	ldr	r0, [pc, #412]	@ (80020e4 <main+0x5e4>)
 8001f48:	f00e fa12 	bl	8010370 <siprintf>
				sprintf(e_fitil,"%d",EGU_FITIL);
 8001f4c:	4b49      	ldr	r3, [pc, #292]	@ (8002074 <main+0x574>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4961      	ldr	r1, [pc, #388]	@ (80020d8 <main+0x5d8>)
 8001f54:	4864      	ldr	r0, [pc, #400]	@ (80020e8 <main+0x5e8>)
 8001f56:	f00e fa0b 	bl	8010370 <siprintf>
				// Nextion_SendFloatToTextbox("s1", Sustainer.altitude);
				 NEXTION_SendString("s1", s_altitude);
 8001f5a:	494b      	ldr	r1, [pc, #300]	@ (8002088 <main+0x588>)
 8001f5c:	4863      	ldr	r0, [pc, #396]	@ (80020ec <main+0x5ec>)
 8001f5e:	f001 f8d7 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("s2", s_temperature);
 8001f62:	494b      	ldr	r1, [pc, #300]	@ (8002090 <main+0x590>)
 8001f64:	4862      	ldr	r0, [pc, #392]	@ (80020f0 <main+0x5f0>)
 8001f66:	f001 f8d3 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("s3", s_speed);
 8001f6a:	494a      	ldr	r1, [pc, #296]	@ (8002094 <main+0x594>)
 8001f6c:	4861      	ldr	r0, [pc, #388]	@ (80020f4 <main+0x5f4>)
 8001f6e:	f001 f8cf 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("s4", s_roll);
 8001f72:	4949      	ldr	r1, [pc, #292]	@ (8002098 <main+0x598>)
 8001f74:	4860      	ldr	r0, [pc, #384]	@ (80020f8 <main+0x5f8>)
 8001f76:	f001 f8cb 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("s5", s_pitch);
 8001f7a:	4948      	ldr	r1, [pc, #288]	@ (800209c <main+0x59c>)
 8001f7c:	485f      	ldr	r0, [pc, #380]	@ (80020fc <main+0x5fc>)
 8001f7e:	f001 f8c7 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("s6", s_sats);
 8001f82:	494c      	ldr	r1, [pc, #304]	@ (80020b4 <main+0x5b4>)
 8001f84:	485e      	ldr	r0, [pc, #376]	@ (8002100 <main+0x600>)
 8001f86:	f001 f8c3 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("s7", s_latitude);
 8001f8a:	4946      	ldr	r1, [pc, #280]	@ (80020a4 <main+0x5a4>)
 8001f8c:	485d      	ldr	r0, [pc, #372]	@ (8002104 <main+0x604>)
 8001f8e:	f001 f8bf 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("s8", s_longitude);
 8001f92:	4945      	ldr	r1, [pc, #276]	@ (80020a8 <main+0x5a8>)
 8001f94:	485c      	ldr	r0, [pc, #368]	@ (8002108 <main+0x608>)
 8001f96:	f001 f8bb 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("s9", s_bat);
 8001f9a:	4945      	ldr	r1, [pc, #276]	@ (80020b0 <main+0x5b0>)
 8001f9c:	485b      	ldr	r0, [pc, #364]	@ (800210c <main+0x60c>)
 8001f9e:	f001 f8b7 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("t57", s_comm);
 8001fa2:	4945      	ldr	r1, [pc, #276]	@ (80020b8 <main+0x5b8>)
 8001fa4:	485a      	ldr	r0, [pc, #360]	@ (8002110 <main+0x610>)
 8001fa6:	f001 f8b3 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("t", s_dist);
 8001faa:	495a      	ldr	r1, [pc, #360]	@ (8002114 <main+0x614>)
 8001fac:	485a      	ldr	r0, [pc, #360]	@ (8002118 <main+0x618>)
 8001fae:	f001 f8af 	bl	8003110 <NEXTION_SendString>


				 NEXTION_SendString("m1", e_altitude);
 8001fb2:	4943      	ldr	r1, [pc, #268]	@ (80020c0 <main+0x5c0>)
 8001fb4:	4859      	ldr	r0, [pc, #356]	@ (800211c <main+0x61c>)
 8001fb6:	f001 f8ab 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("m3", e_angle);
 8001fba:	4943      	ldr	r1, [pc, #268]	@ (80020c8 <main+0x5c8>)
 8001fbc:	4858      	ldr	r0, [pc, #352]	@ (8002120 <main+0x620>)
 8001fbe:	f001 f8a7 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("m2", e_bat);
 8001fc2:	4943      	ldr	r1, [pc, #268]	@ (80020d0 <main+0x5d0>)
 8001fc4:	4857      	ldr	r0, [pc, #348]	@ (8002124 <main+0x624>)
 8001fc6:	f001 f8a3 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("m4", e_flight);
 8001fca:	4944      	ldr	r1, [pc, #272]	@ (80020dc <main+0x5dc>)
 8001fcc:	4856      	ldr	r0, [pc, #344]	@ (8002128 <main+0x628>)
 8001fce:	f001 f89f 	bl	8003110 <NEXTION_SendString>
				 NEXTION_SendString("m5", e_stage);
 8001fd2:	4944      	ldr	r1, [pc, #272]	@ (80020e4 <main+0x5e4>)
 8001fd4:	4855      	ldr	r0, [pc, #340]	@ (800212c <main+0x62c>)
 8001fd6:	f001 f89b 	bl	8003110 <NEXTION_SendString>

	  }



	  if(Lora_Rx_Buffer[0]==1 && Lora_Rx_Buffer[47]==0x32){
 8001fda:	4b24      	ldr	r3, [pc, #144]	@ (800206c <main+0x56c>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	f040 8131 	bne.w	8002246 <main+0x746>
 8001fe4:	4b21      	ldr	r3, [pc, #132]	@ (800206c <main+0x56c>)
 8001fe6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001fea:	2b32      	cmp	r3, #50	@ 0x32
 8001fec:	f040 812b 	bne.w	8002246 <main+0x746>

	  		  Booster.satsinview=Lora_Rx_Buffer[1];
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <main+0x56c>)
 8001ff2:	785a      	ldrb	r2, [r3, #1]
 8001ff4:	4b4e      	ldr	r3, [pc, #312]	@ (8002130 <main+0x630>)
 8001ff6:	701a      	strb	r2, [r3, #0]

	      	  Booster_union_converter();
 8001ff8:	f001 f990 	bl	800331c <Booster_union_converter>
	  		  Booster.battery=Lora_Rx_Buffer[46];
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <main+0x56c>)
 8001ffe:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8002002:	4b4b      	ldr	r3, [pc, #300]	@ (8002130 <main+0x630>)
 8002004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  		  Booster.mod=Lora_Rx_Buffer[70];
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <main+0x56c>)
 800200a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800200e:	4b48      	ldr	r3, [pc, #288]	@ (8002130 <main+0x630>)
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	  		  Booster.communication=Lora_Rx_Buffer[48];
 8002014:	4b15      	ldr	r3, [pc, #84]	@ (800206c <main+0x56c>)
 8002016:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800201a:	4b45      	ldr	r3, [pc, #276]	@ (8002130 <main+0x630>)
 800201c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	  		  float2unit8 f2u8_booster;
	  		  f2u8_booster.array[0] = Lora_Rx_Buffer[66];
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <main+0x56c>)
 8002022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002026:	723b      	strb	r3, [r7, #8]
	  		  f2u8_booster.array[1] = Lora_Rx_Buffer[67];
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <main+0x56c>)
 800202a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800202e:	727b      	strb	r3, [r7, #9]
	  		  f2u8_booster.array[2] = Lora_Rx_Buffer[68];
 8002030:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <main+0x56c>)
 8002032:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002036:	72bb      	strb	r3, [r7, #10]
	  		  f2u8_booster.array[3] = Lora_Rx_Buffer[69];
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <main+0x56c>)
 800203a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800203e:	72fb      	strb	r3, [r7, #11]
	  		  Booster.maxAltitude = f2u8_booster.fVal;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4a3b      	ldr	r2, [pc, #236]	@ (8002130 <main+0x630>)
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30


	  		sprintf(b_altitude,"%4.3f",Booster.altitude);
 8002046:	4b3a      	ldr	r3, [pc, #232]	@ (8002130 <main+0x630>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fa9c 	bl	8000588 <__aeabi_f2d>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	490b      	ldr	r1, [pc, #44]	@ (8002084 <main+0x584>)
 8002056:	4837      	ldr	r0, [pc, #220]	@ (8002134 <main+0x634>)
 8002058:	f00e f98a 	bl	8010370 <siprintf>
			sprintf(b_temperature,"%2.2f",Booster.temperature);
 800205c:	4b34      	ldr	r3, [pc, #208]	@ (8002130 <main+0x630>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa91 	bl	8000588 <__aeabi_f2d>
 8002066:	4602      	mov	r2, r0
 8002068:	e066      	b.n	8002138 <main+0x638>
 800206a:	bf00      	nop
 800206c:	20000650 	.word	0x20000650
 8002070:	200007cc 	.word	0x200007cc
 8002074:	200007c5 	.word	0x200007c5
 8002078:	200007c3 	.word	0x200007c3
 800207c:	200007c2 	.word	0x200007c2
 8002080:	20000944 	.word	0x20000944
 8002084:	08015298 	.word	0x08015298
 8002088:	20000828 	.word	0x20000828
 800208c:	080152a0 	.word	0x080152a0
 8002090:	20000830 	.word	0x20000830
 8002094:	20000838 	.word	0x20000838
 8002098:	20000840 	.word	0x20000840
 800209c:	20000848 	.word	0x20000848
 80020a0:	080152a8 	.word	0x080152a8
 80020a4:	20000850 	.word	0x20000850
 80020a8:	2000085c 	.word	0x2000085c
 80020ac:	080152b0 	.word	0x080152b0
 80020b0:	20000868 	.word	0x20000868
 80020b4:	2000086c 	.word	0x2000086c
 80020b8:	20000870 	.word	0x20000870
 80020bc:	080152b4 	.word	0x080152b4
 80020c0:	200008ac 	.word	0x200008ac
 80020c4:	200007d0 	.word	0x200007d0
 80020c8:	200008b8 	.word	0x200008b8
 80020cc:	200007c8 	.word	0x200007c8
 80020d0:	200008b4 	.word	0x200008b4
 80020d4:	200007c4 	.word	0x200007c4
 80020d8:	080152bc 	.word	0x080152bc
 80020dc:	200008c0 	.word	0x200008c0
 80020e0:	200007c1 	.word	0x200007c1
 80020e4:	200008c4 	.word	0x200008c4
 80020e8:	200008c8 	.word	0x200008c8
 80020ec:	080152c0 	.word	0x080152c0
 80020f0:	080152c4 	.word	0x080152c4
 80020f4:	080152c8 	.word	0x080152c8
 80020f8:	080152cc 	.word	0x080152cc
 80020fc:	080152d0 	.word	0x080152d0
 8002100:	080152d4 	.word	0x080152d4
 8002104:	080152d8 	.word	0x080152d8
 8002108:	080152dc 	.word	0x080152dc
 800210c:	080152e0 	.word	0x080152e0
 8002110:	080152e4 	.word	0x080152e4
 8002114:	20000874 	.word	0x20000874
 8002118:	080152e8 	.word	0x080152e8
 800211c:	080152ec 	.word	0x080152ec
 8002120:	080152f0 	.word	0x080152f0
 8002124:	080152f4 	.word	0x080152f4
 8002128:	080152f8 	.word	0x080152f8
 800212c:	080152fc 	.word	0x080152fc
 8002130:	2000090c 	.word	0x2000090c
 8002134:	200007d4 	.word	0x200007d4
 8002138:	460b      	mov	r3, r1
 800213a:	49b3      	ldr	r1, [pc, #716]	@ (8002408 <main+0x908>)
 800213c:	48b3      	ldr	r0, [pc, #716]	@ (800240c <main+0x90c>)
 800213e:	f00e f917 	bl	8010370 <siprintf>
			sprintf(b_speed,"%2.2f",Booster.speed);
 8002142:	4bb3      	ldr	r3, [pc, #716]	@ (8002410 <main+0x910>)
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fa1e 	bl	8000588 <__aeabi_f2d>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	49ad      	ldr	r1, [pc, #692]	@ (8002408 <main+0x908>)
 8002152:	48b0      	ldr	r0, [pc, #704]	@ (8002414 <main+0x914>)
 8002154:	f00e f90c 	bl	8010370 <siprintf>
			sprintf(b_roll,"%2.2f",Booster.normal);
 8002158:	4bad      	ldr	r3, [pc, #692]	@ (8002410 <main+0x910>)
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fa13 	bl	8000588 <__aeabi_f2d>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	49a8      	ldr	r1, [pc, #672]	@ (8002408 <main+0x908>)
 8002168:	48ab      	ldr	r0, [pc, #684]	@ (8002418 <main+0x918>)
 800216a:	f00e f901 	bl	8010370 <siprintf>
			sprintf(b_pitch,"%2.2f",Booster.pitch);
 800216e:	4ba8      	ldr	r3, [pc, #672]	@ (8002410 <main+0x910>)
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fa08 	bl	8000588 <__aeabi_f2d>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	49a2      	ldr	r1, [pc, #648]	@ (8002408 <main+0x908>)
 800217e:	48a7      	ldr	r0, [pc, #668]	@ (800241c <main+0x91c>)
 8002180:	f00e f8f6 	bl	8010370 <siprintf>
			sprintf(b_latitude,"%2.6f",Booster.gpslatitude);
 8002184:	4ba2      	ldr	r3, [pc, #648]	@ (8002410 <main+0x910>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f9fd 	bl	8000588 <__aeabi_f2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	49a3      	ldr	r1, [pc, #652]	@ (8002420 <main+0x920>)
 8002194:	48a3      	ldr	r0, [pc, #652]	@ (8002424 <main+0x924>)
 8002196:	f00e f8eb 	bl	8010370 <siprintf>
			sprintf(b_longitude,"%2.6f",Booster.gpslongitude);
 800219a:	4b9d      	ldr	r3, [pc, #628]	@ (8002410 <main+0x910>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9f2 	bl	8000588 <__aeabi_f2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	499d      	ldr	r1, [pc, #628]	@ (8002420 <main+0x920>)
 80021aa:	489f      	ldr	r0, [pc, #636]	@ (8002428 <main+0x928>)
 80021ac:	f00e f8e0 	bl	8010370 <siprintf>
			sprintf(b_bat,"%2d",Booster.battery);
 80021b0:	4b97      	ldr	r3, [pc, #604]	@ (8002410 <main+0x910>)
 80021b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021b6:	461a      	mov	r2, r3
 80021b8:	499c      	ldr	r1, [pc, #624]	@ (800242c <main+0x92c>)
 80021ba:	489d      	ldr	r0, [pc, #628]	@ (8002430 <main+0x930>)
 80021bc:	f00e f8d8 	bl	8010370 <siprintf>
			sprintf(b_sats,"%2d",Booster.satsinview);
 80021c0:	4b93      	ldr	r3, [pc, #588]	@ (8002410 <main+0x910>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4999      	ldr	r1, [pc, #612]	@ (800242c <main+0x92c>)
 80021c8:	489a      	ldr	r0, [pc, #616]	@ (8002434 <main+0x934>)
 80021ca:	f00e f8d1 	bl	8010370 <siprintf>
			sprintf(b_comm,"%2d",Booster.communication);
 80021ce:	4b90      	ldr	r3, [pc, #576]	@ (8002410 <main+0x910>)
 80021d0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80021d4:	461a      	mov	r2, r3
 80021d6:	4995      	ldr	r1, [pc, #596]	@ (800242c <main+0x92c>)
 80021d8:	4897      	ldr	r0, [pc, #604]	@ (8002438 <main+0x938>)
 80021da:	f00e f8c9 	bl	8010370 <siprintf>
		//	sprintf(b_dist,"%4.2f",bs_distance);

			NEXTION_SendString("bs1", b_altitude);
 80021de:	4997      	ldr	r1, [pc, #604]	@ (800243c <main+0x93c>)
 80021e0:	4897      	ldr	r0, [pc, #604]	@ (8002440 <main+0x940>)
 80021e2:	f000 ff95 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("bs2", b_temperature);
 80021e6:	4989      	ldr	r1, [pc, #548]	@ (800240c <main+0x90c>)
 80021e8:	4896      	ldr	r0, [pc, #600]	@ (8002444 <main+0x944>)
 80021ea:	f000 ff91 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("bs3", b_speed);
 80021ee:	4989      	ldr	r1, [pc, #548]	@ (8002414 <main+0x914>)
 80021f0:	4895      	ldr	r0, [pc, #596]	@ (8002448 <main+0x948>)
 80021f2:	f000 ff8d 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("bs4", b_roll);
 80021f6:	4988      	ldr	r1, [pc, #544]	@ (8002418 <main+0x918>)
 80021f8:	4894      	ldr	r0, [pc, #592]	@ (800244c <main+0x94c>)
 80021fa:	f000 ff89 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("bs5", b_pitch);
 80021fe:	4987      	ldr	r1, [pc, #540]	@ (800241c <main+0x91c>)
 8002200:	4893      	ldr	r0, [pc, #588]	@ (8002450 <main+0x950>)
 8002202:	f000 ff85 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("bs6", b_sats);
 8002206:	498b      	ldr	r1, [pc, #556]	@ (8002434 <main+0x934>)
 8002208:	4892      	ldr	r0, [pc, #584]	@ (8002454 <main+0x954>)
 800220a:	f000 ff81 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("bs7", b_latitude);
 800220e:	4985      	ldr	r1, [pc, #532]	@ (8002424 <main+0x924>)
 8002210:	4891      	ldr	r0, [pc, #580]	@ (8002458 <main+0x958>)
 8002212:	f000 ff7d 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("bs8", b_longitude);
 8002216:	4984      	ldr	r1, [pc, #528]	@ (8002428 <main+0x928>)
 8002218:	4890      	ldr	r0, [pc, #576]	@ (800245c <main+0x95c>)
 800221a:	f000 ff79 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("bs9", b_bat);
 800221e:	4984      	ldr	r1, [pc, #528]	@ (8002430 <main+0x930>)
 8002220:	488f      	ldr	r0, [pc, #572]	@ (8002460 <main+0x960>)
 8002222:	f000 ff75 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("t56", b_comm);
 8002226:	4984      	ldr	r1, [pc, #528]	@ (8002438 <main+0x938>)
 8002228:	488e      	ldr	r0, [pc, #568]	@ (8002464 <main+0x964>)
 800222a:	f000 ff71 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("t17", b_dist);
 800222e:	498e      	ldr	r1, [pc, #568]	@ (8002468 <main+0x968>)
 8002230:	488e      	ldr	r0, [pc, #568]	@ (800246c <main+0x96c>)
 8002232:	f000 ff6d 	bl	8003110 <NEXTION_SendString>

			NEXTION_SendString("m7", e_engine_request);
 8002236:	498e      	ldr	r1, [pc, #568]	@ (8002470 <main+0x970>)
 8002238:	488e      	ldr	r0, [pc, #568]	@ (8002474 <main+0x974>)
 800223a:	f000 ff69 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("t59", e_fitil);
 800223e:	498e      	ldr	r1, [pc, #568]	@ (8002478 <main+0x978>)
 8002240:	488e      	ldr	r0, [pc, #568]	@ (800247c <main+0x97c>)
 8002242:	f000 ff65 	bl	8003110 <NEXTION_SendString>
//			HAL_UART_Transmit(&huart3,send_data ,4, 100);
//			HAL_UART_Receive(&huart3, receive_data, 4, 100);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);

	  }
	  if(Lora_Rx_Buffer[0]==3 && Lora_Rx_Buffer[47]==0x33)
 8002246:	4b8e      	ldr	r3, [pc, #568]	@ (8002480 <main+0x980>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d164      	bne.n	8002318 <main+0x818>
 800224e:	4b8c      	ldr	r3, [pc, #560]	@ (8002480 <main+0x980>)
 8002250:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002254:	2b33      	cmp	r3, #51	@ 0x33
 8002256:	d15f      	bne.n	8002318 <main+0x818>
		  {

		  Payload.satsinview=Lora_Rx_Buffer[1];
 8002258:	4b89      	ldr	r3, [pc, #548]	@ (8002480 <main+0x980>)
 800225a:	785a      	ldrb	r2, [r3, #1]
 800225c:	4b89      	ldr	r3, [pc, #548]	@ (8002484 <main+0x984>)
 800225e:	701a      	strb	r2, [r3, #0]

		  Payload_union_converter();
 8002260:	f001 fa9a 	bl	8003798 <Payload_union_converter>

		  Payload.battery=Lora_Rx_Buffer[46];
 8002264:	4b86      	ldr	r3, [pc, #536]	@ (8002480 <main+0x980>)
 8002266:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800226a:	4b86      	ldr	r3, [pc, #536]	@ (8002484 <main+0x984>)
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		  Payload.mod=Lora_Rx_Buffer[70];
 8002270:	4b83      	ldr	r3, [pc, #524]	@ (8002480 <main+0x980>)
 8002272:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8002276:	4b83      	ldr	r3, [pc, #524]	@ (8002484 <main+0x984>)
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		  Payload.communication=Lora_Rx_Buffer[48];
 800227c:	4b80      	ldr	r3, [pc, #512]	@ (8002480 <main+0x980>)
 800227e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002282:	4b80      	ldr	r3, [pc, #512]	@ (8002484 <main+0x984>)
 8002284:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	        // payload ekran

			sprintf(p_altitude,"%4.2f",Payload.altitude);
 8002288:	4b7e      	ldr	r3, [pc, #504]	@ (8002484 <main+0x984>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f97b 	bl	8000588 <__aeabi_f2d>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	497c      	ldr	r1, [pc, #496]	@ (8002488 <main+0x988>)
 8002298:	487c      	ldr	r0, [pc, #496]	@ (800248c <main+0x98c>)
 800229a:	f00e f869 	bl	8010370 <siprintf>
			sprintf(p_latitude,"%2.6f",Payload.gpslatitude);
 800229e:	4b79      	ldr	r3, [pc, #484]	@ (8002484 <main+0x984>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f970 	bl	8000588 <__aeabi_f2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	495c      	ldr	r1, [pc, #368]	@ (8002420 <main+0x920>)
 80022ae:	4878      	ldr	r0, [pc, #480]	@ (8002490 <main+0x990>)
 80022b0:	f00e f85e 	bl	8010370 <siprintf>
			sprintf(p_gpsaltitude,"%4.2f",Payload.gpsaltitude);
 80022b4:	4b73      	ldr	r3, [pc, #460]	@ (8002484 <main+0x984>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f965 	bl	8000588 <__aeabi_f2d>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4971      	ldr	r1, [pc, #452]	@ (8002488 <main+0x988>)
 80022c4:	4873      	ldr	r0, [pc, #460]	@ (8002494 <main+0x994>)
 80022c6:	f00e f853 	bl	8010370 <siprintf>
			sprintf(p_longitude,"%2.6f",Payload.gpslongitude);
 80022ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002484 <main+0x984>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f95a 	bl	8000588 <__aeabi_f2d>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4951      	ldr	r1, [pc, #324]	@ (8002420 <main+0x920>)
 80022da:	486f      	ldr	r0, [pc, #444]	@ (8002498 <main+0x998>)
 80022dc:	f00e f848 	bl	8010370 <siprintf>
			sprintf(p_bat,"%2d",Payload.battery);
 80022e0:	4b68      	ldr	r3, [pc, #416]	@ (8002484 <main+0x984>)
 80022e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022e6:	461a      	mov	r2, r3
 80022e8:	4950      	ldr	r1, [pc, #320]	@ (800242c <main+0x92c>)
 80022ea:	486c      	ldr	r0, [pc, #432]	@ (800249c <main+0x99c>)
 80022ec:	f00e f840 	bl	8010370 <siprintf>

			NEXTION_SendString("vp1", p_latitude);
 80022f0:	4967      	ldr	r1, [pc, #412]	@ (8002490 <main+0x990>)
 80022f2:	486b      	ldr	r0, [pc, #428]	@ (80024a0 <main+0x9a0>)
 80022f4:	f000 ff0c 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("vp2", p_longitude);
 80022f8:	4967      	ldr	r1, [pc, #412]	@ (8002498 <main+0x998>)
 80022fa:	486a      	ldr	r0, [pc, #424]	@ (80024a4 <main+0x9a4>)
 80022fc:	f000 ff08 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("vp3", p_gpsaltitude);
 8002300:	4964      	ldr	r1, [pc, #400]	@ (8002494 <main+0x994>)
 8002302:	4869      	ldr	r0, [pc, #420]	@ (80024a8 <main+0x9a8>)
 8002304:	f000 ff04 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("vp4", p_altitude);
 8002308:	4960      	ldr	r1, [pc, #384]	@ (800248c <main+0x98c>)
 800230a:	4868      	ldr	r0, [pc, #416]	@ (80024ac <main+0x9ac>)
 800230c:	f000 ff00 	bl	8003110 <NEXTION_SendString>
			NEXTION_SendString("vp5", p_bat);
 8002310:	4962      	ldr	r1, [pc, #392]	@ (800249c <main+0x99c>)
 8002312:	4867      	ldr	r0, [pc, #412]	@ (80024b0 <main+0x9b0>)
 8002314:	f000 fefc 	bl	8003110 <NEXTION_SendString>

		  }

/*************************************************************************************************/

	  if(flag_hyi ==2)
 8002318:	4b66      	ldr	r3, [pc, #408]	@ (80024b4 <main+0x9b4>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d104      	bne.n	800232a <main+0x82a>
	  {
		  HYI_BUFFER_Fill();
 8002320:	f000 ff1c 	bl	800315c <HYI_BUFFER_Fill>
	      flag_hyi=0;
 8002324:	4b63      	ldr	r3, [pc, #396]	@ (80024b4 <main+0x9b4>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
	  }


	  if(flag_adc_cnt >=10 && flag_adc ==1)
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <main+0x9b8>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b09      	cmp	r3, #9
 8002330:	f67f acb1 	bls.w	8001c96 <main+0x196>
 8002334:	4b61      	ldr	r3, [pc, #388]	@ (80024bc <main+0x9bc>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	f47f acac 	bne.w	8001c96 <main+0x196>
	  	  {
	  		  if(adc > 2476) adc = 2234;
 800233e:	4b60      	ldr	r3, [pc, #384]	@ (80024c0 <main+0x9c0>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80024c4 <main+0x9c4>
 8002348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	dd02      	ble.n	8002358 <main+0x858>
 8002352:	4b5b      	ldr	r3, [pc, #364]	@ (80024c0 <main+0x9c0>)
 8002354:	4a5c      	ldr	r2, [pc, #368]	@ (80024c8 <main+0x9c8>)
 8002356:	601a      	str	r2, [r3, #0]
	  		  if(adc < 1755) adc = 1755;
 8002358:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <main+0x9c0>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80024cc <main+0x9cc>
 8002362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	d502      	bpl.n	8002372 <main+0x872>
 800236c:	4b54      	ldr	r3, [pc, #336]	@ (80024c0 <main+0x9c0>)
 800236e:	4a58      	ldr	r2, [pc, #352]	@ (80024d0 <main+0x9d0>)
 8002370:	601a      	str	r2, [r3, #0]
	  		  // 6V = 1755 adc val 1,41V
	  		  // 8.4V = 2476 adc val 1,99V 0,58V
	  		  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ;
 8002372:	4b53      	ldr	r3, [pc, #332]	@ (80024c0 <main+0x9c0>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80024d4 <main+0x9d4>
 800237c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002380:	ee16 0a90 	vmov	r0, s13
 8002384:	f7fe f900 	bl	8000588 <__aeabi_f2d>
 8002388:	a319      	add	r3, pc, #100	@ (adr r3, 80023f0 <main+0x8f0>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f7fe f953 	bl	8000638 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	a317      	add	r3, pc, #92	@ (adr r3, 80023f8 <main+0x8f8>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	f7fd ff92 	bl	80002c8 <__aeabi_dsub>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	a314      	add	r3, pc, #80	@ (adr r3, 8002400 <main+0x900>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fe fa6b 	bl	800088c <__aeabi_ddiv>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe fc33 	bl	8000c28 <__aeabi_d2f>
 80023c2:	ee07 0a10 	vmov	s14, r0
 80023c6:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80024d8 <main+0x9d8>
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	4b43      	ldr	r3, [pc, #268]	@ (80024dc <main+0x9dc>)
 80023d0:	edc3 7a00 	vstr	s15, [r3]
	  		 // adc_pil_val = (adc-1755)/(2746-1755)*100;

	  		  s_distance=distance_in_m(gps.latitude,gps.longitude,Sustainer.gpslatitude,Sustainer.gpslongitude);
 80023d4:	4b42      	ldr	r3, [pc, #264]	@ (80024e0 <main+0x9e0>)
 80023d6:	ed93 8b00 	vldr	d8, [r3]
 80023da:	4b41      	ldr	r3, [pc, #260]	@ (80024e0 <main+0x9e0>)
 80023dc:	ed93 9b02 	vldr	d9, [r3, #8]
 80023e0:	4b40      	ldr	r3, [pc, #256]	@ (80024e4 <main+0x9e4>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8cf 	bl	8000588 <__aeabi_f2d>
 80023ea:	4604      	mov	r4, r0
 80023ec:	460d      	mov	r5, r1
 80023ee:	e07b      	b.n	80024e8 <main+0x9e8>
 80023f0:	66666666 	.word	0x66666666
 80023f4:	400a6666 	.word	0x400a6666
 80023f8:	28f5c28f 	.word	0x28f5c28f
 80023fc:	3ff68f5c 	.word	0x3ff68f5c
 8002400:	28f5c290 	.word	0x28f5c290
 8002404:	3fe28f5c 	.word	0x3fe28f5c
 8002408:	080152a0 	.word	0x080152a0
 800240c:	200007dc 	.word	0x200007dc
 8002410:	2000090c 	.word	0x2000090c
 8002414:	200007e4 	.word	0x200007e4
 8002418:	200007ec 	.word	0x200007ec
 800241c:	200007f4 	.word	0x200007f4
 8002420:	080152a8 	.word	0x080152a8
 8002424:	200007fc 	.word	0x200007fc
 8002428:	20000808 	.word	0x20000808
 800242c:	080152b0 	.word	0x080152b0
 8002430:	20000814 	.word	0x20000814
 8002434:	20000818 	.word	0x20000818
 8002438:	2000081c 	.word	0x2000081c
 800243c:	200007d4 	.word	0x200007d4
 8002440:	08015300 	.word	0x08015300
 8002444:	08015304 	.word	0x08015304
 8002448:	08015308 	.word	0x08015308
 800244c:	0801530c 	.word	0x0801530c
 8002450:	08015310 	.word	0x08015310
 8002454:	08015314 	.word	0x08015314
 8002458:	08015318 	.word	0x08015318
 800245c:	0801531c 	.word	0x0801531c
 8002460:	08015320 	.word	0x08015320
 8002464:	08015324 	.word	0x08015324
 8002468:	20000820 	.word	0x20000820
 800246c:	08015328 	.word	0x08015328
 8002470:	200008d0 	.word	0x200008d0
 8002474:	0801532c 	.word	0x0801532c
 8002478:	200008c8 	.word	0x200008c8
 800247c:	08015330 	.word	0x08015330
 8002480:	20000650 	.word	0x20000650
 8002484:	200008d4 	.word	0x200008d4
 8002488:	080152b4 	.word	0x080152b4
 800248c:	20000898 	.word	0x20000898
 8002490:	20000880 	.word	0x20000880
 8002494:	200008a0 	.word	0x200008a0
 8002498:	2000088c 	.word	0x2000088c
 800249c:	200008a8 	.word	0x200008a8
 80024a0:	08015334 	.word	0x08015334
 80024a4:	08015338 	.word	0x08015338
 80024a8:	0801533c 	.word	0x0801533c
 80024ac:	08015340 	.word	0x08015340
 80024b0:	08015344 	.word	0x08015344
 80024b4:	200007ad 	.word	0x200007ad
 80024b8:	200007ab 	.word	0x200007ab
 80024bc:	200007ac 	.word	0x200007ac
 80024c0:	200007b0 	.word	0x200007b0
 80024c4:	451ac000 	.word	0x451ac000
 80024c8:	450ba000 	.word	0x450ba000
 80024cc:	44db6000 	.word	0x44db6000
 80024d0:	44db6000 	.word	0x44db6000
 80024d4:	457ff000 	.word	0x457ff000
 80024d8:	42c80000 	.word	0x42c80000
 80024dc:	200007b4 	.word	0x200007b4
 80024e0:	20000980 	.word	0x20000980
 80024e4:	20000944 	.word	0x20000944
 80024e8:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <main+0xaf0>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe f84b 	bl	8000588 <__aeabi_f2d>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	ec43 2b13 	vmov	d3, r2, r3
 80024fa:	ec45 4b12 	vmov	d2, r4, r5
 80024fe:	eeb0 1a49 	vmov.f32	s2, s18
 8002502:	eef0 1a69 	vmov.f32	s3, s19
 8002506:	eeb0 0a48 	vmov.f32	s0, s16
 800250a:	eef0 0a68 	vmov.f32	s1, s17
 800250e:	f001 fa43 	bl	8003998 <distance_in_m>
 8002512:	ec53 2b10 	vmov	r2, r3, d0
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fb85 	bl	8000c28 <__aeabi_d2f>
 800251e:	4603      	mov	r3, r0
 8002520:	4a34      	ldr	r2, [pc, #208]	@ (80025f4 <main+0xaf4>)
 8002522:	6013      	str	r3, [r2, #0]
	  		  bs_distance=distance_in_m(gps.latitude,gps.longitude,Booster.gpslatitude,Booster.gpslongitude);
 8002524:	4b34      	ldr	r3, [pc, #208]	@ (80025f8 <main+0xaf8>)
 8002526:	ed93 8b00 	vldr	d8, [r3]
 800252a:	4b33      	ldr	r3, [pc, #204]	@ (80025f8 <main+0xaf8>)
 800252c:	ed93 9b02 	vldr	d9, [r3, #8]
 8002530:	4b32      	ldr	r3, [pc, #200]	@ (80025fc <main+0xafc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f827 	bl	8000588 <__aeabi_f2d>
 800253a:	4604      	mov	r4, r0
 800253c:	460d      	mov	r5, r1
 800253e:	4b2f      	ldr	r3, [pc, #188]	@ (80025fc <main+0xafc>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe f820 	bl	8000588 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	ec43 2b13 	vmov	d3, r2, r3
 8002550:	ec45 4b12 	vmov	d2, r4, r5
 8002554:	eeb0 1a49 	vmov.f32	s2, s18
 8002558:	eef0 1a69 	vmov.f32	s3, s19
 800255c:	eeb0 0a48 	vmov.f32	s0, s16
 8002560:	eef0 0a68 	vmov.f32	s1, s17
 8002564:	f001 fa18 	bl	8003998 <distance_in_m>
 8002568:	ec53 2b10 	vmov	r2, r3, d0
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	f7fe fb5a 	bl	8000c28 <__aeabi_d2f>
 8002574:	4603      	mov	r3, r0
 8002576:	4a22      	ldr	r2, [pc, #136]	@ (8002600 <main+0xb00>)
 8002578:	6013      	str	r3, [r2, #0]

			  sprintf(s_dist,"%4.2f",s_distance);
 800257a:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <main+0xaf4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe f802 	bl	8000588 <__aeabi_f2d>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	491e      	ldr	r1, [pc, #120]	@ (8002604 <main+0xb04>)
 800258a:	481f      	ldr	r0, [pc, #124]	@ (8002608 <main+0xb08>)
 800258c:	f00d fef0 	bl	8010370 <siprintf>
			  NEXTION_SendString("t", s_dist);
 8002590:	491d      	ldr	r1, [pc, #116]	@ (8002608 <main+0xb08>)
 8002592:	481e      	ldr	r0, [pc, #120]	@ (800260c <main+0xb0c>)
 8002594:	f000 fdbc 	bl	8003110 <NEXTION_SendString>

			  sprintf(b_dist,"%4.2f",bs_distance);
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <main+0xb00>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fff3 	bl	8000588 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4917      	ldr	r1, [pc, #92]	@ (8002604 <main+0xb04>)
 80025a8:	4819      	ldr	r0, [pc, #100]	@ (8002610 <main+0xb10>)
 80025aa:	f00d fee1 	bl	8010370 <siprintf>
			  NEXTION_SendString("t17", b_dist);
 80025ae:	4918      	ldr	r1, [pc, #96]	@ (8002610 <main+0xb10>)
 80025b0:	4818      	ldr	r0, [pc, #96]	@ (8002614 <main+0xb14>)
 80025b2:	f000 fdad 	bl	8003110 <NEXTION_SendString>

	  		  sprintf(st_bat,"%2d",(uint8_t)adc_pil_val);
 80025b6:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <main+0xb18>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80025c4:	793b      	ldrb	r3, [r7, #4]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	4914      	ldr	r1, [pc, #80]	@ (800261c <main+0xb1c>)
 80025cc:	4814      	ldr	r0, [pc, #80]	@ (8002620 <main+0xb20>)
 80025ce:	f00d fecf 	bl	8010370 <siprintf>
	  		  NEXTION_SendString("t54", st_bat);
 80025d2:	4913      	ldr	r1, [pc, #76]	@ (8002620 <main+0xb20>)
 80025d4:	4813      	ldr	r0, [pc, #76]	@ (8002624 <main+0xb24>)
 80025d6:	f000 fd9b 	bl	8003110 <NEXTION_SendString>


	  		  flag_adc=0;
 80025da:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <main+0xb28>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
	  		  flag_adc_cnt=0;
 80025e0:	4b12      	ldr	r3, [pc, #72]	@ (800262c <main+0xb2c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
	  		  HAL_ADC_Start_IT(&hadc1);
 80025e6:	4812      	ldr	r0, [pc, #72]	@ (8002630 <main+0xb30>)
 80025e8:	f002 f834 	bl	8004654 <HAL_ADC_Start_IT>
	  if(Lora_Rx_Buffer[0]==2 && Lora_Rx_Buffer[47] == 0x31){
 80025ec:	f7ff bb53 	b.w	8001c96 <main+0x196>
 80025f0:	20000944 	.word	0x20000944
 80025f4:	200007b8 	.word	0x200007b8
 80025f8:	20000980 	.word	0x20000980
 80025fc:	2000090c 	.word	0x2000090c
 8002600:	200007bc 	.word	0x200007bc
 8002604:	080152b4 	.word	0x080152b4
 8002608:	20000874 	.word	0x20000874
 800260c:	080152e8 	.word	0x080152e8
 8002610:	20000820 	.word	0x20000820
 8002614:	08015328 	.word	0x08015328
 8002618:	200007b4 	.word	0x200007b4
 800261c:	080152b0 	.word	0x080152b0
 8002620:	2000087c 	.word	0x2000087c
 8002624:	08015348 	.word	0x08015348
 8002628:	200007ac 	.word	0x200007ac
 800262c:	200007ab 	.word	0x200007ab
 8002630:	20000304 	.word	0x20000304

08002634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b094      	sub	sp, #80	@ 0x50
 8002638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	2234      	movs	r2, #52	@ 0x34
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f00d fef7 	bl	8010436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	4b29      	ldr	r3, [pc, #164]	@ (8002704 <SystemClock_Config+0xd0>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002660:	4a28      	ldr	r2, [pc, #160]	@ (8002704 <SystemClock_Config+0xd0>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002666:	6413      	str	r3, [r2, #64]	@ 0x40
 8002668:	4b26      	ldr	r3, [pc, #152]	@ (8002704 <SystemClock_Config+0xd0>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002674:	2300      	movs	r3, #0
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	4b23      	ldr	r3, [pc, #140]	@ (8002708 <SystemClock_Config+0xd4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002680:	4a21      	ldr	r2, [pc, #132]	@ (8002708 <SystemClock_Config+0xd4>)
 8002682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <SystemClock_Config+0xd4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002694:	2301      	movs	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800269c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800269e:	2302      	movs	r3, #2
 80026a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026a8:	2304      	movs	r3, #4
 80026aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026ac:	23a8      	movs	r3, #168	@ 0xa8
 80026ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b0:	2302      	movs	r3, #2
 80026b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026b4:	2307      	movs	r3, #7
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026b8:	2302      	movs	r3, #2
 80026ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f107 031c 	add.w	r3, r7, #28
 80026c0:	4618      	mov	r0, r3
 80026c2:	f005 fd25 	bl	8008110 <HAL_RCC_OscConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80026cc:	f001 fa8c 	bl	8003be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d0:	230f      	movs	r3, #15
 80026d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d4:	2302      	movs	r3, #2
 80026d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026e6:	f107 0308 	add.w	r3, r7, #8
 80026ea:	2102      	movs	r1, #2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f004 fe9b 	bl	8007428 <HAL_RCC_ClockConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80026f8:	f001 fa76 	bl	8003be8 <Error_Handler>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3750      	adds	r7, #80	@ 0x50
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000

0800270c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002712:	463b      	mov	r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800271e:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <MX_ADC1_Init+0x98>)
 8002720:	4a21      	ldr	r2, [pc, #132]	@ (80027a8 <MX_ADC1_Init+0x9c>)
 8002722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002724:	4b1f      	ldr	r3, [pc, #124]	@ (80027a4 <MX_ADC1_Init+0x98>)
 8002726:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800272a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <MX_ADC1_Init+0x98>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002732:	4b1c      	ldr	r3, [pc, #112]	@ (80027a4 <MX_ADC1_Init+0x98>)
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002738:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <MX_ADC1_Init+0x98>)
 800273a:	2201      	movs	r2, #1
 800273c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800273e:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <MX_ADC1_Init+0x98>)
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002746:	4b17      	ldr	r3, [pc, #92]	@ (80027a4 <MX_ADC1_Init+0x98>)
 8002748:	2200      	movs	r2, #0
 800274a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800274c:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <MX_ADC1_Init+0x98>)
 800274e:	4a17      	ldr	r2, [pc, #92]	@ (80027ac <MX_ADC1_Init+0xa0>)
 8002750:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002752:	4b14      	ldr	r3, [pc, #80]	@ (80027a4 <MX_ADC1_Init+0x98>)
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <MX_ADC1_Init+0x98>)
 800275a:	2201      	movs	r2, #1
 800275c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800275e:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <MX_ADC1_Init+0x98>)
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002766:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <MX_ADC1_Init+0x98>)
 8002768:	2201      	movs	r2, #1
 800276a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800276c:	480d      	ldr	r0, [pc, #52]	@ (80027a4 <MX_ADC1_Init+0x98>)
 800276e:	f001 ff2d 	bl	80045cc <HAL_ADC_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002778:	f001 fa36 	bl	8003be8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800277c:	230c      	movs	r3, #12
 800277e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002780:	2301      	movs	r3, #1
 8002782:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002788:	463b      	mov	r3, r7
 800278a:	4619      	mov	r1, r3
 800278c:	4805      	ldr	r0, [pc, #20]	@ (80027a4 <MX_ADC1_Init+0x98>)
 800278e:	f002 f971 	bl	8004a74 <HAL_ADC_ConfigChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002798:	f001 fa26 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000304 	.word	0x20000304
 80027a8:	40012000 	.word	0x40012000
 80027ac:	0f000001 	.word	0x0f000001

080027b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027b4:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027b6:	4a13      	ldr	r2, [pc, #76]	@ (8002804 <MX_I2C1_Init+0x54>)
 80027b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80027ba:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027bc:	4a12      	ldr	r2, [pc, #72]	@ (8002808 <MX_I2C1_Init+0x58>)
 80027be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e0:	4b07      	ldr	r3, [pc, #28]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027e6:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ec:	4804      	ldr	r0, [pc, #16]	@ (8002800 <MX_I2C1_Init+0x50>)
 80027ee:	f003 fa3b 	bl	8005c68 <HAL_I2C_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027f8:	f001 f9f6 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	2000034c 	.word	0x2000034c
 8002804:	40005400 	.word	0x40005400
 8002808:	00061a80 	.word	0x00061a80

0800280c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002810:	4b17      	ldr	r3, [pc, #92]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002812:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <MX_SPI1_Init+0x68>)
 8002814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002816:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002818:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800281c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800281e:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002824:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <MX_SPI1_Init+0x64>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002830:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002832:	2200      	movs	r2, #0
 8002834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002836:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800283c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800283e:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002840:	2200      	movs	r2, #0
 8002842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002844:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002846:	2200      	movs	r2, #0
 8002848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <MX_SPI1_Init+0x64>)
 800284c:	2200      	movs	r2, #0
 800284e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002850:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002852:	2200      	movs	r2, #0
 8002854:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <MX_SPI1_Init+0x64>)
 8002858:	220a      	movs	r2, #10
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800285c:	4804      	ldr	r0, [pc, #16]	@ (8002870 <MX_SPI1_Init+0x64>)
 800285e:	f005 fef5 	bl	800864c <HAL_SPI_Init>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002868:	f001 f9be 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200003a0 	.word	0x200003a0
 8002874:	40013000 	.word	0x40013000

08002878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288c:	463b      	mov	r3, r7
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002894:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <MX_TIM2_Init+0x98>)
 8002896:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800289a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 800289c:	4b1c      	ldr	r3, [pc, #112]	@ (8002910 <MX_TIM2_Init+0x98>)
 800289e:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80028a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002910 <MX_TIM2_Init+0x98>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 80028aa:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <MX_TIM2_Init+0x98>)
 80028ac:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80028b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b2:	4b17      	ldr	r3, [pc, #92]	@ (8002910 <MX_TIM2_Init+0x98>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b8:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <MX_TIM2_Init+0x98>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028be:	4814      	ldr	r0, [pc, #80]	@ (8002910 <MX_TIM2_Init+0x98>)
 80028c0:	f005 ff4d 	bl	800875e <HAL_TIM_Base_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80028ca:	f001 f98d 	bl	8003be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028d4:	f107 0308 	add.w	r3, r7, #8
 80028d8:	4619      	mov	r1, r3
 80028da:	480d      	ldr	r0, [pc, #52]	@ (8002910 <MX_TIM2_Init+0x98>)
 80028dc:	f006 f8ee 	bl	8008abc <HAL_TIM_ConfigClockSource>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80028e6:	f001 f97f 	bl	8003be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028f2:	463b      	mov	r3, r7
 80028f4:	4619      	mov	r1, r3
 80028f6:	4806      	ldr	r0, [pc, #24]	@ (8002910 <MX_TIM2_Init+0x98>)
 80028f8:	f006 fb16 	bl	8008f28 <HAL_TIMEx_MasterConfigSynchronization>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002902:	f001 f971 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200003f8 	.word	0x200003f8

08002914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002928:	463b      	mov	r3, r7
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002930:	4b1d      	ldr	r3, [pc, #116]	@ (80029a8 <MX_TIM3_Init+0x94>)
 8002932:	4a1e      	ldr	r2, [pc, #120]	@ (80029ac <MX_TIM3_Init+0x98>)
 8002934:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 8002936:	4b1c      	ldr	r3, [pc, #112]	@ (80029a8 <MX_TIM3_Init+0x94>)
 8002938:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 800293c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293e:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <MX_TIM3_Init+0x94>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300-1;
 8002944:	4b18      	ldr	r3, [pc, #96]	@ (80029a8 <MX_TIM3_Init+0x94>)
 8002946:	f240 122b 	movw	r2, #299	@ 0x12b
 800294a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294c:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <MX_TIM3_Init+0x94>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <MX_TIM3_Init+0x94>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002958:	4813      	ldr	r0, [pc, #76]	@ (80029a8 <MX_TIM3_Init+0x94>)
 800295a:	f005 ff00 	bl	800875e <HAL_TIM_Base_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002964:	f001 f940 	bl	8003be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	4619      	mov	r1, r3
 8002974:	480c      	ldr	r0, [pc, #48]	@ (80029a8 <MX_TIM3_Init+0x94>)
 8002976:	f006 f8a1 	bl	8008abc <HAL_TIM_ConfigClockSource>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002980:	f001 f932 	bl	8003be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800298c:	463b      	mov	r3, r7
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	@ (80029a8 <MX_TIM3_Init+0x94>)
 8002992:	f006 fac9 	bl	8008f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800299c:	f001 f924 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000440 	.word	0x20000440
 80029ac:	40000400 	.word	0x40000400

080029b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029b6:	f107 0308 	add.w	r3, r7, #8
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c4:	463b      	mov	r3, r7
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <MX_TIM4_Init+0x94>)
 80029ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002a48 <MX_TIM4_Init+0x98>)
 80029d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400;
 80029d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a44 <MX_TIM4_Init+0x94>)
 80029d4:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80029d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029da:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <MX_TIM4_Init+0x94>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 80029e0:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <MX_TIM4_Init+0x94>)
 80029e2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80029e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e8:	4b16      	ldr	r3, [pc, #88]	@ (8002a44 <MX_TIM4_Init+0x94>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <MX_TIM4_Init+0x94>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029f4:	4813      	ldr	r0, [pc, #76]	@ (8002a44 <MX_TIM4_Init+0x94>)
 80029f6:	f005 feb2 	bl	800875e <HAL_TIM_Base_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002a00:	f001 f8f2 	bl	8003be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a0a:	f107 0308 	add.w	r3, r7, #8
 8002a0e:	4619      	mov	r1, r3
 8002a10:	480c      	ldr	r0, [pc, #48]	@ (8002a44 <MX_TIM4_Init+0x94>)
 8002a12:	f006 f853 	bl	8008abc <HAL_TIM_ConfigClockSource>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002a1c:	f001 f8e4 	bl	8003be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a28:	463b      	mov	r3, r7
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4805      	ldr	r0, [pc, #20]	@ (8002a44 <MX_TIM4_Init+0x94>)
 8002a2e:	f006 fa7b 	bl	8008f28 <HAL_TIMEx_MasterConfigSynchronization>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002a38:	f001 f8d6 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a3c:	bf00      	nop
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000488 	.word	0x20000488
 8002a48:	40000800 	.word	0x40000800

08002a4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a50:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <MX_UART4_Init+0x4c>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <MX_UART4_Init+0x50>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <MX_UART4_Init+0x4c>)
 8002a58:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <MX_UART4_Init+0x4c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <MX_UART4_Init+0x4c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <MX_UART4_Init+0x4c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <MX_UART4_Init+0x4c>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <MX_UART4_Init+0x4c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <MX_UART4_Init+0x4c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a82:	4805      	ldr	r0, [pc, #20]	@ (8002a98 <MX_UART4_Init+0x4c>)
 8002a84:	f006 fae0 	bl	8009048 <HAL_UART_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002a8e:	f001 f8ab 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200004d0 	.word	0x200004d0
 8002a9c:	40004c00 	.word	0x40004c00

08002aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002aa6:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <MX_USART2_UART_Init+0x50>)
 8002aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002aaa:	4b10      	ldr	r3, [pc, #64]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002aac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002abe:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aca:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ad6:	4805      	ldr	r0, [pc, #20]	@ (8002aec <MX_USART2_UART_Init+0x4c>)
 8002ad8:	f006 fab6 	bl	8009048 <HAL_UART_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ae2:	f001 f881 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000518 	.word	0x20000518
 8002af0:	40004400 	.word	0x40004400

08002af4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002af8:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <MX_USART3_UART_Init+0x4c>)
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <MX_USART3_UART_Init+0x50>)
 8002afc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <MX_USART3_UART_Init+0x4c>)
 8002b00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <MX_USART3_UART_Init+0x4c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <MX_USART3_UART_Init+0x4c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b12:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <MX_USART3_UART_Init+0x4c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b18:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <MX_USART3_UART_Init+0x4c>)
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1e:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <MX_USART3_UART_Init+0x4c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <MX_USART3_UART_Init+0x4c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b2a:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <MX_USART3_UART_Init+0x4c>)
 8002b2c:	f006 fa8c 	bl	8009048 <HAL_UART_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b36:	f001 f857 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000560 	.word	0x20000560
 8002b44:	40004800 	.word	0x40004800

08002b48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	@ (8002b94 <MX_USART6_UART_Init+0x4c>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <MX_USART6_UART_Init+0x50>)
 8002b50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <MX_USART6_UART_Init+0x4c>)
 8002b54:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002b58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <MX_USART6_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b60:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <MX_USART6_UART_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <MX_USART6_UART_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <MX_USART6_UART_Init+0x4c>)
 8002b6e:	220c      	movs	r2, #12
 8002b70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <MX_USART6_UART_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <MX_USART6_UART_Init+0x4c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b7e:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <MX_USART6_UART_Init+0x4c>)
 8002b80:	f006 fa62 	bl	8009048 <HAL_UART_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002b8a:	f001 f82d 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200005a8 	.word	0x200005a8
 8002b98:	40011400 	.word	0x40011400

08002b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <MX_DMA_Init+0x3c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd8 <MX_DMA_Init+0x3c>)
 8002bac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <MX_DMA_Init+0x3c>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	200c      	movs	r0, #12
 8002bc4:	f002 fa69 	bl	800509a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002bc8:	200c      	movs	r0, #12
 8002bca:	f002 fa82 	bl	80050d2 <HAL_NVIC_EnableIRQ>

}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800

08002bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	@ 0x28
 8002be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	4b38      	ldr	r3, [pc, #224]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	4a37      	ldr	r2, [pc, #220]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c02:	4b35      	ldr	r3, [pc, #212]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	4a30      	ldr	r2, [pc, #192]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a29      	ldr	r2, [pc, #164]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b27      	ldr	r3, [pc, #156]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4a22      	ldr	r2, [pc, #136]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <MX_GPIO_Init+0xfc>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8002c62:	2200      	movs	r2, #0
 8002c64:	f642 4112 	movw	r1, #11282	@ 0x2c12
 8002c68:	481c      	ldr	r0, [pc, #112]	@ (8002cdc <MX_GPIO_Init+0x100>)
 8002c6a:	f002 ffe3 	bl	8005c34 <HAL_GPIO_WritePin>
                          |GATE_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|Led2_Pin
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f246 011f 	movw	r1, #24607	@ 0x601f
 8002c74:	481a      	ldr	r0, [pc, #104]	@ (8002ce0 <MX_GPIO_Init+0x104>)
 8002c76:	f002 ffdd 	bl	8005c34 <HAL_GPIO_WritePin>
                          |Led1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 CS_Pin Buzzer_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8002c7a:	f642 4312 	movw	r3, #11282	@ 0x2c12
 8002c7e:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4619      	mov	r1, r3
 8002c92:	4812      	ldr	r0, [pc, #72]	@ (8002cdc <MX_GPIO_Init+0x100>)
 8002c94:	f002 fe3a 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 Button_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|Button_Pin;
 8002c98:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	4619      	mov	r1, r3
 8002cac:	480b      	ldr	r0, [pc, #44]	@ (8002cdc <MX_GPIO_Init+0x100>)
 8002cae:	f002 fe2d 	bl	800590c <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin Led2_Pin
                           Led1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|Led2_Pin
 8002cb2:	f246 031f 	movw	r3, #24607	@ 0x601f
 8002cb6:	617b      	str	r3, [r7, #20]
                          |Led1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4805      	ldr	r0, [pc, #20]	@ (8002ce0 <MX_GPIO_Init+0x104>)
 8002ccc:	f002 fe1e 	bl	800590c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cd0:	bf00      	nop
 8002cd2:	3728      	adds	r7, #40	@ 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	40020400 	.word	0x40020400

08002ce4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

	if(htim==&htim2)// Lora timer
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a22      	ldr	r2, [pc, #136]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d11c      	bne.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		flag_lora=1;
 8002cf4:	4b21      	ldr	r3, [pc, #132]	@ (8002d7c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]

		flag_hyi++;
 8002cfa:	4b21      	ldr	r3, [pc, #132]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4b1f      	ldr	r3, [pc, #124]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d04:	701a      	strb	r2, [r3, #0]
		if(flag_hyi >=3)flag_hyi=0;
 8002d06:	4b1e      	ldr	r3, [pc, #120]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d902      	bls.n	8002d14 <HAL_TIM_PeriodElapsedCallback+0x30>
 8002d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]

		flag_adc_cnt++;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d1e:	701a      	strb	r2, [r3, #0]
		if(flag_adc_cnt >=12) flag_adc_cnt=0;
 8002d20:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b0b      	cmp	r3, #11
 8002d26:	d902      	bls.n	8002d2e <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002d28:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
	}

	if(htim==&htim3)// sensor timer 30ms
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d112      	bne.n	8002d5c <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		flag_sensor_imu=1;
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]

		flag_counter++;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d46:	701a      	strb	r2, [r3, #0]
		if(flag_counter == 10)
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b0a      	cmp	r3, #10
 8002d4e:	d105      	bne.n	8002d5c <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			flag_sensor_barometre =1;
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
			flag_counter=0;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim==&htim4)// megü timer
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d102      	bne.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x86>
	{
		flag_megu=1;
 8002d64:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]

	}

}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	200003f8 	.word	0x200003f8
 8002d7c:	200007a6 	.word	0x200007a6
 8002d80:	200007ad 	.word	0x200007ad
 8002d84:	200007ab 	.word	0x200007ab
 8002d88:	20000440 	.word	0x20000440
 8002d8c:	200007a8 	.word	0x200007a8
 8002d90:	200007aa 	.word	0x200007aa
 8002d94:	200007a9 	.word	0x200007a9
 8002d98:	20000488 	.word	0x20000488
 8002d9c:	200007a7 	.word	0x200007a7

08002da0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	if(huart==&huart2){
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a2f      	ldr	r2, [pc, #188]	@ (8002e68 <HAL_UART_RxCpltCallback+0xc8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d127      	bne.n	8002e00 <HAL_UART_RxCpltCallback+0x60>
	if(rx_data_gps != '\n' && rx_index_gps < RX_BUFFER_SIZE) {
 8002db0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e6c <HAL_UART_RxCpltCallback+0xcc>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b0a      	cmp	r3, #10
 8002db6:	d010      	beq.n	8002dda <HAL_UART_RxCpltCallback+0x3a>
 8002db8:	4b2d      	ldr	r3, [pc, #180]	@ (8002e70 <HAL_UART_RxCpltCallback+0xd0>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b25b      	sxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0b      	blt.n	8002dda <HAL_UART_RxCpltCallback+0x3a>
		rx_buffer_gps[rx_index_gps++] = rx_data_gps;
 8002dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e70 <HAL_UART_RxCpltCallback+0xd0>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	b2d1      	uxtb	r1, r2
 8002dca:	4a29      	ldr	r2, [pc, #164]	@ (8002e70 <HAL_UART_RxCpltCallback+0xd0>)
 8002dcc:	7011      	strb	r1, [r2, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b26      	ldr	r3, [pc, #152]	@ (8002e6c <HAL_UART_RxCpltCallback+0xcc>)
 8002dd2:	7819      	ldrb	r1, [r3, #0]
 8002dd4:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <HAL_UART_RxCpltCallback+0xd4>)
 8002dd6:	5499      	strb	r1, [r3, r2]
 8002dd8:	e00d      	b.n	8002df6 <HAL_UART_RxCpltCallback+0x56>
	} else {
		lwgps_process(&gps, rx_buffer_gps, rx_index_gps+1);
 8002dda:	4b25      	ldr	r3, [pc, #148]	@ (8002e70 <HAL_UART_RxCpltCallback+0xd0>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	461a      	mov	r2, r3
 8002de2:	4924      	ldr	r1, [pc, #144]	@ (8002e74 <HAL_UART_RxCpltCallback+0xd4>)
 8002de4:	4824      	ldr	r0, [pc, #144]	@ (8002e78 <HAL_UART_RxCpltCallback+0xd8>)
 8002de6:	f7fe fdcb 	bl	8001980 <lwgps_process>
		rx_index_gps = 0;
 8002dea:	4b21      	ldr	r3, [pc, #132]	@ (8002e70 <HAL_UART_RxCpltCallback+0xd0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
		rx_data_gps = 0;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e6c <HAL_UART_RxCpltCallback+0xcc>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &rx_data_gps, 1);
 8002df6:	2201      	movs	r2, #1
 8002df8:	491c      	ldr	r1, [pc, #112]	@ (8002e6c <HAL_UART_RxCpltCallback+0xcc>)
 8002dfa:	481b      	ldr	r0, [pc, #108]	@ (8002e68 <HAL_UART_RxCpltCallback+0xc8>)
 8002dfc:	f006 fa96 	bl	800932c <HAL_UART_Receive_IT>
	}


	if(huart == &huart3){
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a1e      	ldr	r2, [pc, #120]	@ (8002e7c <HAL_UART_RxCpltCallback+0xdc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d12b      	bne.n	8002e60 <HAL_UART_RxCpltCallback+0xc0>
//			rx_index_lora=0;
//
//			}
		//HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);

				if((Lora_Control_Buffer[0] != 1 &&Lora_Control_Buffer[47] != 50) && (Lora_Control_Buffer[0] != 2 &&Lora_Control_Buffer[47] != 49)&& (Lora_Control_Buffer[0] != 3 &&Lora_Control_Buffer[47] != 0x33))
 8002e08:	4b1d      	ldr	r3, [pc, #116]	@ (8002e80 <HAL_UART_RxCpltCallback+0xe0>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d01a      	beq.n	8002e46 <HAL_UART_RxCpltCallback+0xa6>
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <HAL_UART_RxCpltCallback+0xe0>)
 8002e12:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002e16:	2b32      	cmp	r3, #50	@ 0x32
 8002e18:	d015      	beq.n	8002e46 <HAL_UART_RxCpltCallback+0xa6>
 8002e1a:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <HAL_UART_RxCpltCallback+0xe0>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d011      	beq.n	8002e46 <HAL_UART_RxCpltCallback+0xa6>
 8002e22:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <HAL_UART_RxCpltCallback+0xe0>)
 8002e24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002e28:	2b31      	cmp	r3, #49	@ 0x31
 8002e2a:	d00c      	beq.n	8002e46 <HAL_UART_RxCpltCallback+0xa6>
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <HAL_UART_RxCpltCallback+0xe0>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d008      	beq.n	8002e46 <HAL_UART_RxCpltCallback+0xa6>
 8002e34:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <HAL_UART_RxCpltCallback+0xe0>)
 8002e36:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002e3a:	2b33      	cmp	r3, #51	@ 0x33
 8002e3c:	d003      	beq.n	8002e46 <HAL_UART_RxCpltCallback+0xa6>
				{
					//memcpy(Lora_Rx_Buffer,Lora_Control_Buffer, Lora_Rx_Buffer_SIZE);
					correct_packet(Lora_Control_Buffer,Lora_Rx_Buffer_SIZE);
 8002e3e:	2148      	movs	r1, #72	@ 0x48
 8002e40:	480f      	ldr	r0, [pc, #60]	@ (8002e80 <HAL_UART_RxCpltCallback+0xe0>)
 8002e42:	f000 f843 	bl	8002ecc <correct_packet>
//					}
//					for(int i =0; i<52;i++)
//					{
//						Lora_Rx_Buffer[i+20] =Lora_Control_Buffer[i+20];
//					}
					memcpy(Lora_Rx_Buffer , Lora_Control_Buffer , Lora_Rx_Buffer_SIZE);
 8002e46:	4a0f      	ldr	r2, [pc, #60]	@ (8002e84 <HAL_UART_RxCpltCallback+0xe4>)
 8002e48:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <HAL_UART_RxCpltCallback+0xe0>)
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	2348      	movs	r3, #72	@ 0x48
 8002e50:	461a      	mov	r2, r3
 8002e52:	f00d fb92 	bl	801057a <memcpy>
					HAL_UART_Receive_DMA(&huart3, Lora_Control_Buffer, 72);
 8002e56:	2248      	movs	r2, #72	@ 0x48
 8002e58:	4909      	ldr	r1, [pc, #36]	@ (8002e80 <HAL_UART_RxCpltCallback+0xe0>)
 8002e5a:	4808      	ldr	r0, [pc, #32]	@ (8002e7c <HAL_UART_RxCpltCallback+0xdc>)
 8002e5c:	f006 fa8b 	bl	8009376 <HAL_UART_Receive_DMA>
			//}


		}

}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000518 	.word	0x20000518
 8002e6c:	200007a4 	.word	0x200007a4
 8002e70:	200007a5 	.word	0x200007a5
 8002e74:	20000724 	.word	0x20000724
 8002e78:	20000980 	.word	0x20000980
 8002e7c:	20000560 	.word	0x20000560
 8002e80:	20000698 	.word	0x20000698
 8002e84:	20000650 	.word	0x20000650

08002e88 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a09      	ldr	r2, [pc, #36]	@ (8002ebc <HAL_ADC_ConvCpltCallback+0x34>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10c      	bne.n	8002eb4 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 8002e9a:	4809      	ldr	r0, [pc, #36]	@ (8002ec0 <HAL_ADC_ConvCpltCallback+0x38>)
 8002e9c:	f001 fdc8 	bl	8004a30 <HAL_ADC_GetValue>
 8002ea0:	ee07 0a90 	vmov	s15, r0
 8002ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002eaa:	edc3 7a00 	vstr	s15, [r3]
		flag_adc=1;
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_ADC_ConvCpltCallback+0x40>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
	}
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40012000 	.word	0x40012000
 8002ec0:	20000304 	.word	0x20000304
 8002ec4:	200007b0 	.word	0x200007b0
 8002ec8:	200007ac 	.word	0x200007ac

08002ecc <correct_packet>:



void correct_packet(uint8_t *buffer, int buffer_size) {
 8002ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ed0:	b087      	sub	sp, #28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
	  int start_index = -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	617b      	str	r3, [r7, #20]

	// Paketlerin başlangıcını tespit et
	for (int i = 0; i < buffer_size; i++) {
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	e04d      	b.n	8002f80 <correct_packet+0xb4>
		if ((buffer[i] == PACKET1_ID && buffer[(i + 47) % buffer_size] == PACKET1_MARKER && buffer[(i + 71) % buffer_size] == PACKET_END) ||
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d11d      	bne.n	8002f2c <correct_packet+0x60>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	332f      	adds	r3, #47	@ 0x2f
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	fb93 f2f2 	sdiv	r2, r3, r2
 8002efa:	6839      	ldr	r1, [r7, #0]
 8002efc:	fb01 f202 	mul.w	r2, r1, r2
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	461a      	mov	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b31      	cmp	r3, #49	@ 0x31
 8002f0c:	d10e      	bne.n	8002f2c <correct_packet+0x60>
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	3347      	adds	r3, #71	@ 0x47
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	fb93 f2f2 	sdiv	r2, r3, r2
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	fb01 f202 	mul.w	r2, r1, r2
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b0a      	cmp	r3, #10
 8002f2a:	d023      	beq.n	8002f74 <correct_packet+0xa8>
			(buffer[i] == PACKET2_ID && buffer[(i + 47) % buffer_size] == PACKET2_MARKER && buffer[(i + 71) % buffer_size] == PACKET_END)) {
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	781b      	ldrb	r3, [r3, #0]
		if ((buffer[i] == PACKET1_ID && buffer[(i + 47) % buffer_size] == PACKET1_MARKER && buffer[(i + 71) % buffer_size] == PACKET_END) ||
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d120      	bne.n	8002f7a <correct_packet+0xae>
			(buffer[i] == PACKET2_ID && buffer[(i + 47) % buffer_size] == PACKET2_MARKER && buffer[(i + 71) % buffer_size] == PACKET_END)) {
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	332f      	adds	r3, #47	@ 0x2f
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	fb93 f2f2 	sdiv	r2, r3, r2
 8002f42:	6839      	ldr	r1, [r7, #0]
 8002f44:	fb01 f202 	mul.w	r2, r1, r2
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b32      	cmp	r3, #50	@ 0x32
 8002f54:	d111      	bne.n	8002f7a <correct_packet+0xae>
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	3347      	adds	r3, #71	@ 0x47
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	fb93 f2f2 	sdiv	r2, r3, r2
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	fb01 f202 	mul.w	r2, r1, r2
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b0a      	cmp	r3, #10
 8002f72:	d102      	bne.n	8002f7a <correct_packet+0xae>
			start_index = i;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	617b      	str	r3, [r7, #20]
			break;
 8002f78:	e006      	b.n	8002f88 <correct_packet+0xbc>
	for (int i = 0; i < buffer_size; i++) {
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	dbad      	blt.n	8002ee4 <correct_packet+0x18>
		}
	}

	// Eğer başlangıç bulunduysa ve başta değilse buffer'ı düzelt
	if (start_index > 0) {
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dd42      	ble.n	8003014 <correct_packet+0x148>
 8002f8e:	466b      	mov	r3, sp
 8002f90:	461e      	mov	r6, r3
		uint8_t temp_buffer[buffer_size];
 8002f92:	6839      	ldr	r1, [r7, #0]
 8002f94:	1e4b      	subs	r3, r1, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	460a      	mov	r2, r1
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	4690      	mov	r8, r2
 8002f9e:	4699      	mov	r9, r3
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb4:	460a      	mov	r2, r1
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	4614      	mov	r4, r2
 8002fba:	461d      	mov	r5, r3
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	00eb      	lsls	r3, r5, #3
 8002fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fca:	00e2      	lsls	r2, r4, #3
 8002fcc:	460b      	mov	r3, r1
 8002fce:	3307      	adds	r3, #7
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	ebad 0d03 	sub.w	sp, sp, r3
 8002fd8:	466b      	mov	r3, sp
 8002fda:	3300      	adds	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]

		// Buffer'daki doğru veriyi temp_buffer'a kopyala
		memcpy(temp_buffer, &buffer[start_index], buffer_size - start_index);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	18d1      	adds	r1, r2, r3
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	68b8      	ldr	r0, [r7, #8]
 8002fee:	f00d fac4 	bl	801057a <memcpy>
		memcpy(&temp_buffer[buffer_size - start_index], buffer, start_index);
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	f00d faba 	bl	801057a <memcpy>

		// Düzeltilmiş veriyi orijinal buffer'a kopyala
		memcpy(buffer, temp_buffer, buffer_size);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f00d fab4 	bl	801057a <memcpy>
 8003012:	46b5      	mov	sp, r6
	}

}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003020 <E220_write_register>:

int8_t E220_write_register(uint8_t reg,uint8_t parameter)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	460a      	mov	r2, r1
 800302a:	71fb      	strb	r3, [r7, #7]
 800302c:	4613      	mov	r3, r2
 800302e:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8003030:	2201      	movs	r2, #1
 8003032:	2101      	movs	r1, #1
 8003034:	481c      	ldr	r0, [pc, #112]	@ (80030a8 <E220_write_register+0x88>)
 8003036:	f002 fdfd 	bl	8005c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800303a:	2201      	movs	r2, #1
 800303c:	2102      	movs	r1, #2
 800303e:	481a      	ldr	r0, [pc, #104]	@ (80030a8 <E220_write_register+0x88>)
 8003040:	f002 fdf8 	bl	8005c34 <HAL_GPIO_WritePin>

	HAL_Delay(3);
 8003044:	2003      	movs	r0, #3
 8003046:	f001 fa9d 	bl	8004584 <HAL_Delay>

	uint8_t send_data[4]={CMD_SET_REG,reg,1,parameter};
 800304a:	23c0      	movs	r3, #192	@ 0xc0
 800304c:	733b      	strb	r3, [r7, #12]
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	737b      	strb	r3, [r7, #13]
 8003052:	2301      	movs	r3, #1
 8003054:	73bb      	strb	r3, [r7, #14]
 8003056:	79bb      	ldrb	r3, [r7, #6]
 8003058:	73fb      	strb	r3, [r7, #15]
	uint8_t receive_data[4]={0};
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]

	HAL_UART_Transmit(&huart3,send_data ,4, 100);
 800305e:	f107 010c 	add.w	r1, r7, #12
 8003062:	2364      	movs	r3, #100	@ 0x64
 8003064:	2204      	movs	r2, #4
 8003066:	4811      	ldr	r0, [pc, #68]	@ (80030ac <E220_write_register+0x8c>)
 8003068:	f006 f83e 	bl	80090e8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, receive_data, 4, 100);
 800306c:	f107 0108 	add.w	r1, r7, #8
 8003070:	2364      	movs	r3, #100	@ 0x64
 8003072:	2204      	movs	r2, #4
 8003074:	480d      	ldr	r0, [pc, #52]	@ (80030ac <E220_write_register+0x8c>)
 8003076:	f006 f8c2 	bl	80091fe <HAL_UART_Receive>


	if(receive_data[0]==CMD_READ_REG && receive_data[1]==reg && receive_data[2]==1 && receive_data[3] == parameter)
 800307a:	7a3b      	ldrb	r3, [r7, #8]
 800307c:	2bc1      	cmp	r3, #193	@ 0xc1
 800307e:	d10d      	bne.n	800309c <E220_write_register+0x7c>
 8003080:	7a7b      	ldrb	r3, [r7, #9]
 8003082:	79fa      	ldrb	r2, [r7, #7]
 8003084:	429a      	cmp	r2, r3
 8003086:	d109      	bne.n	800309c <E220_write_register+0x7c>
 8003088:	7abb      	ldrb	r3, [r7, #10]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d106      	bne.n	800309c <E220_write_register+0x7c>
 800308e:	7afb      	ldrb	r3, [r7, #11]
 8003090:	79ba      	ldrb	r2, [r7, #6]
 8003092:	429a      	cmp	r2, r3
 8003094:	d102      	bne.n	800309c <E220_write_register+0x7c>
		return receive_data[3];
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	b25b      	sxtb	r3, r3
 800309a:	e001      	b.n	80030a0 <E220_write_register+0x80>
	else
		return -1;
 800309c:	f04f 33ff 	mov.w	r3, #4294967295

}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40020400 	.word	0x40020400
 80030ac:	20000560 	.word	0x20000560

080030b0 <E220_read_register>:
int8_t E220_read_register(uint8_t reg)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]


	uint8_t send_data[3]={CMD_READ_REG,reg,1};
 80030ba:	23c1      	movs	r3, #193	@ 0xc1
 80030bc:	733b      	strb	r3, [r7, #12]
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	737b      	strb	r3, [r7, #13]
 80030c2:	2301      	movs	r3, #1
 80030c4:	73bb      	strb	r3, [r7, #14]
	uint8_t receive_data[4]={0};
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart3,send_data ,3, 100);
 80030ca:	f107 010c 	add.w	r1, r7, #12
 80030ce:	2364      	movs	r3, #100	@ 0x64
 80030d0:	2203      	movs	r2, #3
 80030d2:	480e      	ldr	r0, [pc, #56]	@ (800310c <E220_read_register+0x5c>)
 80030d4:	f006 f808 	bl	80090e8 <HAL_UART_Transmit>



	HAL_UART_Receive(&huart3, receive_data, 4, 100);
 80030d8:	f107 0108 	add.w	r1, r7, #8
 80030dc:	2364      	movs	r3, #100	@ 0x64
 80030de:	2204      	movs	r2, #4
 80030e0:	480a      	ldr	r0, [pc, #40]	@ (800310c <E220_read_register+0x5c>)
 80030e2:	f006 f88c 	bl	80091fe <HAL_UART_Receive>

	if(receive_data[0]==CMD_READ_REG && receive_data[1]==reg && receive_data[2]==1)
 80030e6:	7a3b      	ldrb	r3, [r7, #8]
 80030e8:	2bc1      	cmp	r3, #193	@ 0xc1
 80030ea:	d109      	bne.n	8003100 <E220_read_register+0x50>
 80030ec:	7a7b      	ldrb	r3, [r7, #9]
 80030ee:	79fa      	ldrb	r2, [r7, #7]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d105      	bne.n	8003100 <E220_read_register+0x50>
 80030f4:	7abb      	ldrb	r3, [r7, #10]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d102      	bne.n	8003100 <E220_read_register+0x50>
		return receive_data[3];
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	b25b      	sxtb	r3, r3
 80030fe:	e001      	b.n	8003104 <E220_read_register+0x54>
	else
		return -1;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20000560 	.word	0x20000560

08003110 <NEXTION_SendString>:


void NEXTION_SendString (char *ID, char *string)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b090      	sub	sp, #64	@ 0x40
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s.txt=\"%s\"", ID, string);
 800311a:	f107 0008 	add.w	r0, r7, #8
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	490b      	ldr	r1, [pc, #44]	@ (8003150 <NEXTION_SendString+0x40>)
 8003124:	f00d f924 	bl	8010370 <siprintf>
 8003128:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, len, 1000);
 800312a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800312c:	b29a      	uxth	r2, r3
 800312e:	f107 0108 	add.w	r1, r7, #8
 8003132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003136:	4807      	ldr	r0, [pc, #28]	@ (8003154 <NEXTION_SendString+0x44>)
 8003138:	f005 ffd6 	bl	80090e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, Cmd_End, 3, 100);
 800313c:	2364      	movs	r3, #100	@ 0x64
 800313e:	2203      	movs	r2, #3
 8003140:	4905      	ldr	r1, [pc, #20]	@ (8003158 <NEXTION_SendString+0x48>)
 8003142:	4804      	ldr	r0, [pc, #16]	@ (8003154 <NEXTION_SendString+0x44>)
 8003144:	f005 ffd0 	bl	80090e8 <HAL_UART_Transmit>
}
 8003148:	bf00      	nop
 800314a:	3740      	adds	r7, #64	@ 0x40
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	0801534c 	.word	0x0801534c
 8003154:	200004d0 	.word	0x200004d0
 8003158:	20000000 	.word	0x20000000

0800315c <HYI_BUFFER_Fill>:
    // Send the command to the Nextion display
    Nextion_SendCommand(command);
}

void HYI_BUFFER_Fill()
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	@ 0x28
 8003160:	af00      	add	r7, sp, #0
//	HYI_BUFFER[76]= 0x0D;
//	HYI_BUFFER[77]= 0x0A;


	float2unit8 f2u8_hAltitude;
		 f2u8_hAltitude.fVal=Sustainer.altitude;
 8003162:	4b6b      	ldr	r3, [pc, #428]	@ (8003310 <HYI_BUFFER_Fill+0x1b4>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	61fb      	str	r3, [r7, #28]
		 for(uint8_t i=0;i<4;i++)
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800316e:	e00e      	b.n	800318e <HYI_BUFFER_Fill+0x32>
		 {
			 HYI_BUFFER[i]=f2u8_hAltitude.array[i];
 8003170:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003178:	3228      	adds	r2, #40	@ 0x28
 800317a:	443a      	add	r2, r7
 800317c:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8003180:	4a64      	ldr	r2, [pc, #400]	@ (8003314 <HYI_BUFFER_Fill+0x1b8>)
 8003182:	54d1      	strb	r1, [r2, r3]
		 for(uint8_t i=0;i<4;i++)
 8003184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003188:	3301      	adds	r3, #1
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800318e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003192:	2b03      	cmp	r3, #3
 8003194:	d9ec      	bls.n	8003170 <HYI_BUFFER_Fill+0x14>
		 }


		  float2unit8 f2u8_hGpsalt;
		  f2u8_hGpsalt.fVal=Sustainer.gpsaltitude;
 8003196:	4b5e      	ldr	r3, [pc, #376]	@ (8003310 <HYI_BUFFER_Fill+0x1b4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61bb      	str	r3, [r7, #24]
		  for(uint8_t i=0;i<4;i++)
 800319c:	2300      	movs	r3, #0
 800319e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80031a2:	e00f      	b.n	80031c4 <HYI_BUFFER_Fill+0x68>
		  {
			 HYI_BUFFER[4+i]=f2u8_hGpsalt.array[i];
 80031a4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80031a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031ac:	3304      	adds	r3, #4
 80031ae:	3228      	adds	r2, #40	@ 0x28
 80031b0:	443a      	add	r2, r7
 80031b2:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80031b6:	4a57      	ldr	r2, [pc, #348]	@ (8003314 <HYI_BUFFER_Fill+0x1b8>)
 80031b8:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i=0;i<4;i++)
 80031ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031be:	3301      	adds	r3, #1
 80031c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80031c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d9eb      	bls.n	80031a4 <HYI_BUFFER_Fill+0x48>
		  }


		  float2unit8 f2u8_hGpslat;
		  f2u8_hGpslat.fVal=Sustainer.gpslatitude;
 80031cc:	4b50      	ldr	r3, [pc, #320]	@ (8003310 <HYI_BUFFER_Fill+0x1b4>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	617b      	str	r3, [r7, #20]
		  for(uint8_t i=0;i<4;i++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80031d8:	e00f      	b.n	80031fa <HYI_BUFFER_Fill+0x9e>
	     {
	   	  HYI_BUFFER[8+i]=f2u8_hGpslat.array[i];
 80031da:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80031de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031e2:	3308      	adds	r3, #8
 80031e4:	3228      	adds	r2, #40	@ 0x28
 80031e6:	443a      	add	r2, r7
 80031e8:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80031ec:	4a49      	ldr	r2, [pc, #292]	@ (8003314 <HYI_BUFFER_Fill+0x1b8>)
 80031ee:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i=0;i<4;i++)
 80031f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031f4:	3301      	adds	r3, #1
 80031f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80031fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d9eb      	bls.n	80031da <HYI_BUFFER_Fill+0x7e>
	     }

		  float2unit8 f2u8_hGpslong;
		  f2u8_hGpslong.fVal=Sustainer.gpslongitude;
 8003202:	4b43      	ldr	r3, [pc, #268]	@ (8003310 <HYI_BUFFER_Fill+0x1b4>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	613b      	str	r3, [r7, #16]
		  for(uint8_t i=0;i<4;i++)
 8003208:	2300      	movs	r3, #0
 800320a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800320e:	e00f      	b.n	8003230 <HYI_BUFFER_Fill+0xd4>
		  {
		  	HYI_BUFFER[12+i]=f2u8_hGpslong.array[i];
 8003210:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003214:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003218:	330c      	adds	r3, #12
 800321a:	3228      	adds	r2, #40	@ 0x28
 800321c:	443a      	add	r2, r7
 800321e:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8003222:	4a3c      	ldr	r2, [pc, #240]	@ (8003314 <HYI_BUFFER_Fill+0x1b8>)
 8003224:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i=0;i<4;i++)
 8003226:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800322a:	3301      	adds	r3, #1
 800322c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8003230:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003234:	2b03      	cmp	r3, #3
 8003236:	d9eb      	bls.n	8003210 <HYI_BUFFER_Fill+0xb4>
		  }

		  for(uint8_t i=0;i<40;i++)
 8003238:	2300      	movs	r3, #0
 800323a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323e:	e00a      	b.n	8003256 <HYI_BUFFER_Fill+0xfa>
		  {
		   HYI_BUFFER[16+i]=0;
 8003240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003244:	3310      	adds	r3, #16
 8003246:	4a33      	ldr	r2, [pc, #204]	@ (8003314 <HYI_BUFFER_Fill+0x1b8>)
 8003248:	2100      	movs	r1, #0
 800324a:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i=0;i<40;i++)
 800324c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003250:	3301      	adds	r3, #1
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003256:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800325a:	2b27      	cmp	r3, #39	@ 0x27
 800325c:	d9f0      	bls.n	8003240 <HYI_BUFFER_Fill+0xe4>
		  }

		  float2unit8 f2u8_h_k_Gpsalt;
		  f2u8_h_k_Gpsalt.fVal=Booster.gpsaltitude;
 800325e:	4b2e      	ldr	r3, [pc, #184]	@ (8003318 <HYI_BUFFER_Fill+0x1bc>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	60fb      	str	r3, [r7, #12]
		  for(uint8_t i=0;i<4;i++)
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800326a:	e00f      	b.n	800328c <HYI_BUFFER_Fill+0x130>
		  {
			 HYI_BUFFER[56+i]= f2u8_h_k_Gpsalt.array[i];
 800326c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003270:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003274:	3338      	adds	r3, #56	@ 0x38
 8003276:	3228      	adds	r2, #40	@ 0x28
 8003278:	443a      	add	r2, r7
 800327a:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 800327e:	4a25      	ldr	r2, [pc, #148]	@ (8003314 <HYI_BUFFER_Fill+0x1b8>)
 8003280:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i=0;i<4;i++)
 8003282:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003286:	3301      	adds	r3, #1
 8003288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800328c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003290:	2b03      	cmp	r3, #3
 8003292:	d9eb      	bls.n	800326c <HYI_BUFFER_Fill+0x110>
		  }


		  float2unit8 f2u8_h_k_Gpslat;
		  f2u8_h_k_Gpslat.fVal=Booster.gpslatitude;
 8003294:	4b20      	ldr	r3, [pc, #128]	@ (8003318 <HYI_BUFFER_Fill+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	60bb      	str	r3, [r7, #8]
		  for(uint8_t i=0;i<4;i++)
 800329a:	2300      	movs	r3, #0
 800329c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80032a0:	e00f      	b.n	80032c2 <HYI_BUFFER_Fill+0x166>
	     {
	   	  HYI_BUFFER[60+i]= f2u8_h_k_Gpslat.array[i];
 80032a2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80032a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80032aa:	333c      	adds	r3, #60	@ 0x3c
 80032ac:	3228      	adds	r2, #40	@ 0x28
 80032ae:	443a      	add	r2, r7
 80032b0:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 80032b4:	4a17      	ldr	r2, [pc, #92]	@ (8003314 <HYI_BUFFER_Fill+0x1b8>)
 80032b6:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i=0;i<4;i++)
 80032b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80032bc:	3301      	adds	r3, #1
 80032be:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80032c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d9eb      	bls.n	80032a2 <HYI_BUFFER_Fill+0x146>
	     }

		  float2unit8 f2u8_h_k_Gpslong;
		  f2u8_h_k_Gpslong.fVal=Booster.gpslongitude;
 80032ca:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <HYI_BUFFER_Fill+0x1bc>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	607b      	str	r3, [r7, #4]
		  for(uint8_t i=0;i<4;i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 3020 	strb.w	r3, [r7, #32]
 80032d6:	e00f      	b.n	80032f8 <HYI_BUFFER_Fill+0x19c>
		  {
		  	HYI_BUFFER[64+i]=f2u8_h_k_Gpslong.array[i];
 80032d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032e0:	3340      	adds	r3, #64	@ 0x40
 80032e2:	3228      	adds	r2, #40	@ 0x28
 80032e4:	443a      	add	r2, r7
 80032e6:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 80032ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <HYI_BUFFER_Fill+0x1b8>)
 80032ec:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i=0;i<4;i++)
 80032ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032f2:	3301      	adds	r3, #1
 80032f4:	f887 3020 	strb.w	r3, [r7, #32]
 80032f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d9eb      	bls.n	80032d8 <HYI_BUFFER_Fill+0x17c>
		  }


		 CDC_Transmit_FS((uint8_t*)HYI_BUFFER,HYI_BUFFER_SIZE);
 8003300:	2144      	movs	r1, #68	@ 0x44
 8003302:	4804      	ldr	r0, [pc, #16]	@ (8003314 <HYI_BUFFER_Fill+0x1b8>)
 8003304:	f00a fd68 	bl	800ddd8 <CDC_Transmit_FS>


}
 8003308:	bf00      	nop
 800330a:	3728      	adds	r7, #40	@ 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000944 	.word	0x20000944
 8003314:	200006e0 	.word	0x200006e0
 8003318:	2000090c 	.word	0x2000090c

0800331c <Booster_union_converter>:

void Booster_union_converter(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
			float2unit8 f2u8_booster;
					 for(uint8_t i=0;i<4;i++)
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
 8003326:	e00b      	b.n	8003340 <Booster_union_converter+0x24>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+2];
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	1c9a      	adds	r2, r3, #2
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	4978      	ldr	r1, [pc, #480]	@ (8003510 <Booster_union_converter+0x1f4>)
 8003330:	5c8a      	ldrb	r2, [r1, r2]
 8003332:	3310      	adds	r3, #16
 8003334:	443b      	add	r3, r7
 8003336:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	3301      	adds	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d9f0      	bls.n	8003328 <Booster_union_converter+0xc>
						// HYI_BUFFER[34+i]=Lora_Rx_Buffer[i+5]; // 34 35 36 37
					 }
					 Booster.gpsaltitude=f2u8_booster.fVal;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	4a72      	ldr	r2, [pc, #456]	@ (8003514 <Booster_union_converter+0x1f8>)
 800334a:	6053      	str	r3, [r2, #4]


					 for(uint8_t i=0;i<4;i++)
 800334c:	2300      	movs	r3, #0
 800334e:	73bb      	strb	r3, [r7, #14]
 8003350:	e00b      	b.n	800336a <Booster_union_converter+0x4e>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+6];
 8003352:	7bbb      	ldrb	r3, [r7, #14]
 8003354:	1d9a      	adds	r2, r3, #6
 8003356:	7bbb      	ldrb	r3, [r7, #14]
 8003358:	496d      	ldr	r1, [pc, #436]	@ (8003510 <Booster_union_converter+0x1f4>)
 800335a:	5c8a      	ldrb	r2, [r1, r2]
 800335c:	3310      	adds	r3, #16
 800335e:	443b      	add	r3, r7
 8003360:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 8003364:	7bbb      	ldrb	r3, [r7, #14]
 8003366:	3301      	adds	r3, #1
 8003368:	73bb      	strb	r3, [r7, #14]
 800336a:	7bbb      	ldrb	r3, [r7, #14]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d9f0      	bls.n	8003352 <Booster_union_converter+0x36>
						 //HYI_BUFFER[38+i]=Lora_Rx_Buffer[i+9]; // 38 39 40 41
					 }
					 Booster.gpslatitude=f2u8_booster.fVal;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4a68      	ldr	r2, [pc, #416]	@ (8003514 <Booster_union_converter+0x1f8>)
 8003374:	6093      	str	r3, [r2, #8]

					 for(uint8_t i=0;i<4;i++)
 8003376:	2300      	movs	r3, #0
 8003378:	737b      	strb	r3, [r7, #13]
 800337a:	e00c      	b.n	8003396 <Booster_union_converter+0x7a>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+10];
 800337c:	7b7b      	ldrb	r3, [r7, #13]
 800337e:	f103 020a 	add.w	r2, r3, #10
 8003382:	7b7b      	ldrb	r3, [r7, #13]
 8003384:	4962      	ldr	r1, [pc, #392]	@ (8003510 <Booster_union_converter+0x1f4>)
 8003386:	5c8a      	ldrb	r2, [r1, r2]
 8003388:	3310      	adds	r3, #16
 800338a:	443b      	add	r3, r7
 800338c:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 8003390:	7b7b      	ldrb	r3, [r7, #13]
 8003392:	3301      	adds	r3, #1
 8003394:	737b      	strb	r3, [r7, #13]
 8003396:	7b7b      	ldrb	r3, [r7, #13]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d9ef      	bls.n	800337c <Booster_union_converter+0x60>
						// HYI_BUFFER[42+i]=Lora_Rx_Buffer[i+13]; // 42 43 44 45
					 }
					 Booster.gpslongitude=f2u8_booster.fVal;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4a5d      	ldr	r2, [pc, #372]	@ (8003514 <Booster_union_converter+0x1f8>)
 80033a0:	60d3      	str	r3, [r2, #12]

					 for(uint8_t i=0;i<4;i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	733b      	strb	r3, [r7, #12]
 80033a6:	e00c      	b.n	80033c2 <Booster_union_converter+0xa6>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+14];
 80033a8:	7b3b      	ldrb	r3, [r7, #12]
 80033aa:	f103 020e 	add.w	r2, r3, #14
 80033ae:	7b3b      	ldrb	r3, [r7, #12]
 80033b0:	4957      	ldr	r1, [pc, #348]	@ (8003510 <Booster_union_converter+0x1f4>)
 80033b2:	5c8a      	ldrb	r2, [r1, r2]
 80033b4:	3310      	adds	r3, #16
 80033b6:	443b      	add	r3, r7
 80033b8:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 80033bc:	7b3b      	ldrb	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	733b      	strb	r3, [r7, #12]
 80033c2:	7b3b      	ldrb	r3, [r7, #12]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d9ef      	bls.n	80033a8 <Booster_union_converter+0x8c>
					 }
					 Booster.altitude=f2u8_booster.fVal;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4a52      	ldr	r2, [pc, #328]	@ (8003514 <Booster_union_converter+0x1f8>)
 80033cc:	6153      	str	r3, [r2, #20]



					 for(uint8_t i=0;i<4;i++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	72fb      	strb	r3, [r7, #11]
 80033d2:	e00c      	b.n	80033ee <Booster_union_converter+0xd2>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+18];
 80033d4:	7afb      	ldrb	r3, [r7, #11]
 80033d6:	f103 0212 	add.w	r2, r3, #18
 80033da:	7afb      	ldrb	r3, [r7, #11]
 80033dc:	494c      	ldr	r1, [pc, #304]	@ (8003510 <Booster_union_converter+0x1f4>)
 80033de:	5c8a      	ldrb	r2, [r1, r2]
 80033e0:	3310      	adds	r3, #16
 80033e2:	443b      	add	r3, r7
 80033e4:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 80033e8:	7afb      	ldrb	r3, [r7, #11]
 80033ea:	3301      	adds	r3, #1
 80033ec:	72fb      	strb	r3, [r7, #11]
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d9ef      	bls.n	80033d4 <Booster_union_converter+0xb8>
					 }
					 Booster.speed=f2u8_booster.fVal;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	4a47      	ldr	r2, [pc, #284]	@ (8003514 <Booster_union_converter+0x1f8>)
 80033f8:	6113      	str	r3, [r2, #16]


					 for(uint8_t i=0;i<4;i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	72bb      	strb	r3, [r7, #10]
 80033fe:	e00c      	b.n	800341a <Booster_union_converter+0xfe>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+22];
 8003400:	7abb      	ldrb	r3, [r7, #10]
 8003402:	f103 0216 	add.w	r2, r3, #22
 8003406:	7abb      	ldrb	r3, [r7, #10]
 8003408:	4941      	ldr	r1, [pc, #260]	@ (8003510 <Booster_union_converter+0x1f4>)
 800340a:	5c8a      	ldrb	r2, [r1, r2]
 800340c:	3310      	adds	r3, #16
 800340e:	443b      	add	r3, r7
 8003410:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 8003414:	7abb      	ldrb	r3, [r7, #10]
 8003416:	3301      	adds	r3, #1
 8003418:	72bb      	strb	r3, [r7, #10]
 800341a:	7abb      	ldrb	r3, [r7, #10]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d9ef      	bls.n	8003400 <Booster_union_converter+0xe4>
					 }
					 Booster.temperature=f2u8_booster.fVal;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a3c      	ldr	r2, [pc, #240]	@ (8003514 <Booster_union_converter+0x1f8>)
 8003424:	6193      	str	r3, [r2, #24]


					 for(uint8_t i=0;i<4;i++)
 8003426:	2300      	movs	r3, #0
 8003428:	727b      	strb	r3, [r7, #9]
 800342a:	e00c      	b.n	8003446 <Booster_union_converter+0x12a>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+26];
 800342c:	7a7b      	ldrb	r3, [r7, #9]
 800342e:	f103 021a 	add.w	r2, r3, #26
 8003432:	7a7b      	ldrb	r3, [r7, #9]
 8003434:	4936      	ldr	r1, [pc, #216]	@ (8003510 <Booster_union_converter+0x1f4>)
 8003436:	5c8a      	ldrb	r2, [r1, r2]
 8003438:	3310      	adds	r3, #16
 800343a:	443b      	add	r3, r7
 800343c:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 8003440:	7a7b      	ldrb	r3, [r7, #9]
 8003442:	3301      	adds	r3, #1
 8003444:	727b      	strb	r3, [r7, #9]
 8003446:	7a7b      	ldrb	r3, [r7, #9]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d9ef      	bls.n	800342c <Booster_union_converter+0x110>
					 }
					 Booster.accx=f2u8_booster.fVal;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4a31      	ldr	r2, [pc, #196]	@ (8003514 <Booster_union_converter+0x1f8>)
 8003450:	61d3      	str	r3, [r2, #28]


					 for(uint8_t i=0;i<4;i++)
 8003452:	2300      	movs	r3, #0
 8003454:	723b      	strb	r3, [r7, #8]
 8003456:	e00c      	b.n	8003472 <Booster_union_converter+0x156>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+30];
 8003458:	7a3b      	ldrb	r3, [r7, #8]
 800345a:	f103 021e 	add.w	r2, r3, #30
 800345e:	7a3b      	ldrb	r3, [r7, #8]
 8003460:	492b      	ldr	r1, [pc, #172]	@ (8003510 <Booster_union_converter+0x1f4>)
 8003462:	5c8a      	ldrb	r2, [r1, r2]
 8003464:	3310      	adds	r3, #16
 8003466:	443b      	add	r3, r7
 8003468:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 800346c:	7a3b      	ldrb	r3, [r7, #8]
 800346e:	3301      	adds	r3, #1
 8003470:	723b      	strb	r3, [r7, #8]
 8003472:	7a3b      	ldrb	r3, [r7, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d9ef      	bls.n	8003458 <Booster_union_converter+0x13c>
					 }
					 Booster.accy=f2u8_booster.fVal;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4a26      	ldr	r2, [pc, #152]	@ (8003514 <Booster_union_converter+0x1f8>)
 800347c:	6213      	str	r3, [r2, #32]


				      for(uint8_t i=0;i<4;i++)
 800347e:	2300      	movs	r3, #0
 8003480:	71fb      	strb	r3, [r7, #7]
 8003482:	e00c      	b.n	800349e <Booster_union_converter+0x182>
					 {
				    	  f2u8_booster.array[i]=Lora_Rx_Buffer[i+34];
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	4920      	ldr	r1, [pc, #128]	@ (8003510 <Booster_union_converter+0x1f4>)
 800348e:	5c8a      	ldrb	r2, [r1, r2]
 8003490:	3310      	adds	r3, #16
 8003492:	443b      	add	r3, r7
 8003494:	f803 2c10 	strb.w	r2, [r3, #-16]
				      for(uint8_t i=0;i<4;i++)
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	3301      	adds	r3, #1
 800349c:	71fb      	strb	r3, [r7, #7]
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d9ef      	bls.n	8003484 <Booster_union_converter+0x168>
					 }
				      Booster.accz=f2u8_booster.fVal;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003514 <Booster_union_converter+0x1f8>)
 80034a8:	6253      	str	r3, [r2, #36]	@ 0x24

					  for(uint8_t i=0;i<4;i++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	71bb      	strb	r3, [r7, #6]
 80034ae:	e00c      	b.n	80034ca <Booster_union_converter+0x1ae>
					 {
						  f2u8_booster.array[i]=Lora_Rx_Buffer[i+38];
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80034b6:	79bb      	ldrb	r3, [r7, #6]
 80034b8:	4915      	ldr	r1, [pc, #84]	@ (8003510 <Booster_union_converter+0x1f4>)
 80034ba:	5c8a      	ldrb	r2, [r1, r2]
 80034bc:	3310      	adds	r3, #16
 80034be:	443b      	add	r3, r7
 80034c0:	f803 2c10 	strb.w	r2, [r3, #-16]
					  for(uint8_t i=0;i<4;i++)
 80034c4:	79bb      	ldrb	r3, [r7, #6]
 80034c6:	3301      	adds	r3, #1
 80034c8:	71bb      	strb	r3, [r7, #6]
 80034ca:	79bb      	ldrb	r3, [r7, #6]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d9ef      	bls.n	80034b0 <Booster_union_converter+0x194>
					 }
					  Booster.normal=f2u8_booster.fVal;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4a10      	ldr	r2, [pc, #64]	@ (8003514 <Booster_union_converter+0x1f8>)
 80034d4:	6293      	str	r3, [r2, #40]	@ 0x28

					  for(uint8_t i=0;i<4;i++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	717b      	strb	r3, [r7, #5]
 80034da:	e00c      	b.n	80034f6 <Booster_union_converter+0x1da>
					 {
						  f2u8_booster.array[i]=Lora_Rx_Buffer[i+42];
 80034dc:	797b      	ldrb	r3, [r7, #5]
 80034de:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80034e2:	797b      	ldrb	r3, [r7, #5]
 80034e4:	490a      	ldr	r1, [pc, #40]	@ (8003510 <Booster_union_converter+0x1f4>)
 80034e6:	5c8a      	ldrb	r2, [r1, r2]
 80034e8:	3310      	adds	r3, #16
 80034ea:	443b      	add	r3, r7
 80034ec:	f803 2c10 	strb.w	r2, [r3, #-16]
					  for(uint8_t i=0;i<4;i++)
 80034f0:	797b      	ldrb	r3, [r7, #5]
 80034f2:	3301      	adds	r3, #1
 80034f4:	717b      	strb	r3, [r7, #5]
 80034f6:	797b      	ldrb	r3, [r7, #5]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d9ef      	bls.n	80034dc <Booster_union_converter+0x1c0>
					 }
					  Booster.pitch=f2u8_booster.fVal;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4a05      	ldr	r2, [pc, #20]	@ (8003514 <Booster_union_converter+0x1f8>)
 8003500:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000650 	.word	0x20000650
 8003514:	2000090c 	.word	0x2000090c

08003518 <Sustainer_union_converter>:




void Sustainer_union_converter(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b08f      	sub	sp, #60	@ 0x3c
 800351c:	af00      	add	r7, sp, #0
	 float2unit8 f2u8_gpsalt;
					 for(uint8_t i=0;i<4;i++)
 800351e:	2300      	movs	r3, #0
 8003520:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003524:	e00f      	b.n	8003546 <Sustainer_union_converter+0x2e>
					 {
						 f2u8_gpsalt.array[i]=Lora_Rx_Buffer[i+2];
 8003526:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800352a:	1c9a      	adds	r2, r3, #2
 800352c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003530:	4997      	ldr	r1, [pc, #604]	@ (8003790 <Sustainer_union_converter+0x278>)
 8003532:	5c8a      	ldrb	r2, [r1, r2]
 8003534:	3338      	adds	r3, #56	@ 0x38
 8003536:	443b      	add	r3, r7
 8003538:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 800353c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003540:	3301      	adds	r3, #1
 8003542:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003546:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800354a:	2b03      	cmp	r3, #3
 800354c:	d9eb      	bls.n	8003526 <Sustainer_union_converter+0xe>
					//	 HYI_BUFFER[10+i] =Lora_Rx_Buffer[i+5]; // 10 11 12 13
					 }
					 Sustainer.gpsaltitude=f2u8_gpsalt.fVal;
 800354e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003550:	4a90      	ldr	r2, [pc, #576]	@ (8003794 <Sustainer_union_converter+0x27c>)
 8003552:	6053      	str	r3, [r2, #4]
				 float2unit8 f2u8_latitude;

					 for(uint8_t i=0;i<4;i++)
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800355a:	e00f      	b.n	800357c <Sustainer_union_converter+0x64>
					 {
						f2u8_latitude.array[i]=Lora_Rx_Buffer[i+6];
 800355c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003560:	1d9a      	adds	r2, r3, #6
 8003562:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003566:	498a      	ldr	r1, [pc, #552]	@ (8003790 <Sustainer_union_converter+0x278>)
 8003568:	5c8a      	ldrb	r2, [r1, r2]
 800356a:	3338      	adds	r3, #56	@ 0x38
 800356c:	443b      	add	r3, r7
 800356e:	f803 2c14 	strb.w	r2, [r3, #-20]
					 for(uint8_t i=0;i<4;i++)
 8003572:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003576:	3301      	adds	r3, #1
 8003578:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800357c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003580:	2b03      	cmp	r3, #3
 8003582:	d9eb      	bls.n	800355c <Sustainer_union_converter+0x44>
					//	HYI_BUFFER[14+i] =Lora_Rx_Buffer[i+9]; // 14 15 16 17
					 }
					 Sustainer.gpslatitude=f2u8_latitude.fVal;
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	4a83      	ldr	r2, [pc, #524]	@ (8003794 <Sustainer_union_converter+0x27c>)
 8003588:	6093      	str	r3, [r2, #8]

				 float2unit8 f2u8_longitude;
					 for(uint8_t i=0;i<4;i++)
 800358a:	2300      	movs	r3, #0
 800358c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8003590:	e010      	b.n	80035b4 <Sustainer_union_converter+0x9c>
					 {
						f2u8_longitude.array[i]=Lora_Rx_Buffer[i+10];
 8003592:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003596:	f103 020a 	add.w	r2, r3, #10
 800359a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800359e:	497c      	ldr	r1, [pc, #496]	@ (8003790 <Sustainer_union_converter+0x278>)
 80035a0:	5c8a      	ldrb	r2, [r1, r2]
 80035a2:	3338      	adds	r3, #56	@ 0x38
 80035a4:	443b      	add	r3, r7
 80035a6:	f803 2c18 	strb.w	r2, [r3, #-24]
					 for(uint8_t i=0;i<4;i++)
 80035aa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80035ae:	3301      	adds	r3, #1
 80035b0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80035b4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d9ea      	bls.n	8003592 <Sustainer_union_converter+0x7a>
					//	HYI_BUFFER[18+i] =Lora_Rx_Buffer[i+13]; // 18 19 20 21
					 }
					 Sustainer.gpslongitude=f2u8_longitude.fVal;
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	4a75      	ldr	r2, [pc, #468]	@ (8003794 <Sustainer_union_converter+0x27c>)
 80035c0:	60d3      	str	r3, [r2, #12]

				 float2unit8 f2u8_altitude;
					 for(uint8_t i=0;i<4;i++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80035c8:	e010      	b.n	80035ec <Sustainer_union_converter+0xd4>
					 {
						f2u8_altitude.array[i]=Lora_Rx_Buffer[i+14];
 80035ca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80035ce:	f103 020e 	add.w	r2, r3, #14
 80035d2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80035d6:	496e      	ldr	r1, [pc, #440]	@ (8003790 <Sustainer_union_converter+0x278>)
 80035d8:	5c8a      	ldrb	r2, [r1, r2]
 80035da:	3338      	adds	r3, #56	@ 0x38
 80035dc:	443b      	add	r3, r7
 80035de:	f803 2c1c 	strb.w	r2, [r3, #-28]
					 for(uint8_t i=0;i<4;i++)
 80035e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80035e6:	3301      	adds	r3, #1
 80035e8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80035ec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d9ea      	bls.n	80035ca <Sustainer_union_converter+0xb2>
					//	HYI_BUFFER[6+i] =Lora_Rx_Buffer[i+17]; // 6 7 8 9
					 }
					 Sustainer.altitude=f2u8_altitude.fVal;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4a67      	ldr	r2, [pc, #412]	@ (8003794 <Sustainer_union_converter+0x27c>)
 80035f8:	6153      	str	r3, [r2, #20]

				 float2unit8 f2u8_speed;

					 for(uint8_t i=0;i<4;i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8003600:	e010      	b.n	8003624 <Sustainer_union_converter+0x10c>
					 {
						 f2u8_speed.array[i]=Lora_Rx_Buffer[i+18];
 8003602:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003606:	f103 0212 	add.w	r2, r3, #18
 800360a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800360e:	4960      	ldr	r1, [pc, #384]	@ (8003790 <Sustainer_union_converter+0x278>)
 8003610:	5c8a      	ldrb	r2, [r1, r2]
 8003612:	3338      	adds	r3, #56	@ 0x38
 8003614:	443b      	add	r3, r7
 8003616:	f803 2c20 	strb.w	r2, [r3, #-32]
					 for(uint8_t i=0;i<4;i++)
 800361a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800361e:	3301      	adds	r3, #1
 8003620:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8003624:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003628:	2b03      	cmp	r3, #3
 800362a:	d9ea      	bls.n	8003602 <Sustainer_union_converter+0xea>
					 }
					 Sustainer.speed=f2u8_speed.fVal;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	4a59      	ldr	r2, [pc, #356]	@ (8003794 <Sustainer_union_converter+0x27c>)
 8003630:	6113      	str	r3, [r2, #16]

				 float2unit8 f2u8_temp;
					 for(uint8_t i=0;i<4;i++)
 8003632:	2300      	movs	r3, #0
 8003634:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8003638:	e010      	b.n	800365c <Sustainer_union_converter+0x144>
					 {
						 f2u8_temp.array[i]=Lora_Rx_Buffer[i+22];
 800363a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800363e:	f103 0216 	add.w	r2, r3, #22
 8003642:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003646:	4952      	ldr	r1, [pc, #328]	@ (8003790 <Sustainer_union_converter+0x278>)
 8003648:	5c8a      	ldrb	r2, [r1, r2]
 800364a:	3338      	adds	r3, #56	@ 0x38
 800364c:	443b      	add	r3, r7
 800364e:	f803 2c24 	strb.w	r2, [r3, #-36]
					 for(uint8_t i=0;i<4;i++)
 8003652:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003656:	3301      	adds	r3, #1
 8003658:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800365c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003660:	2b03      	cmp	r3, #3
 8003662:	d9ea      	bls.n	800363a <Sustainer_union_converter+0x122>
					 }
					 Sustainer.temperature=f2u8_temp.fVal;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	4a4b      	ldr	r2, [pc, #300]	@ (8003794 <Sustainer_union_converter+0x27c>)
 8003668:	6193      	str	r3, [r2, #24]

				 float2unit8 f2u8_accx;
					 for(uint8_t i=0;i<4;i++)
 800366a:	2300      	movs	r3, #0
 800366c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8003670:	e010      	b.n	8003694 <Sustainer_union_converter+0x17c>
					 {
						 f2u8_accx.array[i]=Lora_Rx_Buffer[i+26];
 8003672:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003676:	f103 021a 	add.w	r2, r3, #26
 800367a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800367e:	4944      	ldr	r1, [pc, #272]	@ (8003790 <Sustainer_union_converter+0x278>)
 8003680:	5c8a      	ldrb	r2, [r1, r2]
 8003682:	3338      	adds	r3, #56	@ 0x38
 8003684:	443b      	add	r3, r7
 8003686:	f803 2c28 	strb.w	r2, [r3, #-40]
					 for(uint8_t i=0;i<4;i++)
 800368a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800368e:	3301      	adds	r3, #1
 8003690:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8003694:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003698:	2b03      	cmp	r3, #3
 800369a:	d9ea      	bls.n	8003672 <Sustainer_union_converter+0x15a>
					//	 HYI_BUFFER[58+i]=Lora_Rx_Buffer[i+29]; //
					 }
					 Sustainer.accx=f2u8_accx.fVal;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4a3d      	ldr	r2, [pc, #244]	@ (8003794 <Sustainer_union_converter+0x27c>)
 80036a0:	61d3      	str	r3, [r2, #28]

				float2unit8 f2u8_accy;
					 for(uint8_t i=0;i<4;i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80036a8:	e010      	b.n	80036cc <Sustainer_union_converter+0x1b4>
					 {
						 f2u8_accy.array[i]=Lora_Rx_Buffer[i+30];
 80036aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80036ae:	f103 021e 	add.w	r2, r3, #30
 80036b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80036b6:	4936      	ldr	r1, [pc, #216]	@ (8003790 <Sustainer_union_converter+0x278>)
 80036b8:	5c8a      	ldrb	r2, [r1, r2]
 80036ba:	3338      	adds	r3, #56	@ 0x38
 80036bc:	443b      	add	r3, r7
 80036be:	f803 2c2c 	strb.w	r2, [r3, #-44]
					 for(uint8_t i=0;i<4;i++)
 80036c2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80036c6:	3301      	adds	r3, #1
 80036c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80036cc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d9ea      	bls.n	80036aa <Sustainer_union_converter+0x192>
					//	 HYI_BUFFER[62+i]=Lora_Rx_Buffer[i+33];
					 }
					 Sustainer.accy=f2u8_accy.fVal;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003794 <Sustainer_union_converter+0x27c>)
 80036d8:	6213      	str	r3, [r2, #32]

				float2unit8 f2u8_accz;
				      for(uint8_t i=0;i<4;i++)
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80036e0:	e010      	b.n	8003704 <Sustainer_union_converter+0x1ec>
					 {
				    	  f2u8_accz.array[i]=Lora_Rx_Buffer[i+34];
 80036e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036e6:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80036ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036ee:	4928      	ldr	r1, [pc, #160]	@ (8003790 <Sustainer_union_converter+0x278>)
 80036f0:	5c8a      	ldrb	r2, [r1, r2]
 80036f2:	3338      	adds	r3, #56	@ 0x38
 80036f4:	443b      	add	r3, r7
 80036f6:	f803 2c30 	strb.w	r2, [r3, #-48]
				      for(uint8_t i=0;i<4;i++)
 80036fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036fe:	3301      	adds	r3, #1
 8003700:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003704:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003708:	2b03      	cmp	r3, #3
 800370a:	d9ea      	bls.n	80036e2 <Sustainer_union_converter+0x1ca>
				    //	  HYI_BUFFER[66+i]=Lora_Rx_Buffer[i+37];
					 }
				      Sustainer.accz=f2u8_accz.fVal;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4a21      	ldr	r2, [pc, #132]	@ (8003794 <Sustainer_union_converter+0x27c>)
 8003710:	6253      	str	r3, [r2, #36]	@ 0x24

				float2unit8 f2u8_roll;
					  for(uint8_t i=0;i<4;i++)
 8003712:	2300      	movs	r3, #0
 8003714:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8003718:	e010      	b.n	800373c <Sustainer_union_converter+0x224>
					 {
						  f2u8_roll.array[i]=Lora_Rx_Buffer[i+38];
 800371a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800371e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8003722:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003726:	491a      	ldr	r1, [pc, #104]	@ (8003790 <Sustainer_union_converter+0x278>)
 8003728:	5c8a      	ldrb	r2, [r1, r2]
 800372a:	3338      	adds	r3, #56	@ 0x38
 800372c:	443b      	add	r3, r7
 800372e:	f803 2c34 	strb.w	r2, [r3, #-52]
					  for(uint8_t i=0;i<4;i++)
 8003732:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003736:	3301      	adds	r3, #1
 8003738:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800373c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003740:	2b03      	cmp	r3, #3
 8003742:	d9ea      	bls.n	800371a <Sustainer_union_converter+0x202>
					 }
					  Sustainer.normal=f2u8_roll.fVal;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a13      	ldr	r2, [pc, #76]	@ (8003794 <Sustainer_union_converter+0x27c>)
 8003748:	6293      	str	r3, [r2, #40]	@ 0x28

				float2unit8 f2u8_pitch;
					  for(uint8_t i=0;i<4;i++)
 800374a:	2300      	movs	r3, #0
 800374c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003750:	e010      	b.n	8003774 <Sustainer_union_converter+0x25c>
					 {
						  f2u8_pitch.array[i]=Lora_Rx_Buffer[i+42];
 8003752:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003756:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800375a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800375e:	490c      	ldr	r1, [pc, #48]	@ (8003790 <Sustainer_union_converter+0x278>)
 8003760:	5c8a      	ldrb	r2, [r1, r2]
 8003762:	3338      	adds	r3, #56	@ 0x38
 8003764:	443b      	add	r3, r7
 8003766:	f803 2c38 	strb.w	r2, [r3, #-56]
					  for(uint8_t i=0;i<4;i++)
 800376a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800376e:	3301      	adds	r3, #1
 8003770:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8003774:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003778:	2b03      	cmp	r3, #3
 800377a:	d9ea      	bls.n	8003752 <Sustainer_union_converter+0x23a>
					 }
					  Sustainer.pitch=f2u8_pitch.fVal;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4a05      	ldr	r2, [pc, #20]	@ (8003794 <Sustainer_union_converter+0x27c>)
 8003780:	62d3      	str	r3, [r2, #44]	@ 0x2c

}
 8003782:	bf00      	nop
 8003784:	373c      	adds	r7, #60	@ 0x3c
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000650 	.word	0x20000650
 8003794:	20000944 	.word	0x20000944

08003798 <Payload_union_converter>:
void Payload_union_converter(void)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
	 float2unit8 f2u8;
			 for(uint8_t i=0;i<4;i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	e00b      	b.n	80037bc <Payload_union_converter+0x24>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+2];
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	1c9a      	adds	r2, r3, #2
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	4978      	ldr	r1, [pc, #480]	@ (800398c <Payload_union_converter+0x1f4>)
 80037ac:	5c8a      	ldrb	r2, [r1, r2]
 80037ae:	3310      	adds	r3, #16
 80037b0:	443b      	add	r3, r7
 80037b2:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	3301      	adds	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d9f0      	bls.n	80037a4 <Payload_union_converter+0xc>
				// HYI_BUFFER[22+i]=Lora_Rx_Buffer[i+5]; // 34 35 36 37
			 }
			 Payload.gpsaltitude=f2u8.fVal;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	4a72      	ldr	r2, [pc, #456]	@ (8003990 <Payload_union_converter+0x1f8>)
 80037c6:	6053      	str	r3, [r2, #4]


			 for(uint8_t i=0;i<4;i++)
 80037c8:	2300      	movs	r3, #0
 80037ca:	73bb      	strb	r3, [r7, #14]
 80037cc:	e00b      	b.n	80037e6 <Payload_union_converter+0x4e>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+6];
 80037ce:	7bbb      	ldrb	r3, [r7, #14]
 80037d0:	1d9a      	adds	r2, r3, #6
 80037d2:	7bbb      	ldrb	r3, [r7, #14]
 80037d4:	496d      	ldr	r1, [pc, #436]	@ (800398c <Payload_union_converter+0x1f4>)
 80037d6:	5c8a      	ldrb	r2, [r1, r2]
 80037d8:	3310      	adds	r3, #16
 80037da:	443b      	add	r3, r7
 80037dc:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	3301      	adds	r3, #1
 80037e4:	73bb      	strb	r3, [r7, #14]
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d9f0      	bls.n	80037ce <Payload_union_converter+0x36>
			//	 HYI_BUFFER[26+i]=Lora_Rx_Buffer[i+9]; // 38 39 40 41
			 }
			 Payload.gpslatitude=f2u8.fVal;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4a68      	ldr	r2, [pc, #416]	@ (8003990 <Payload_union_converter+0x1f8>)
 80037f0:	6093      	str	r3, [r2, #8]

			 for(uint8_t i=0;i<4;i++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	737b      	strb	r3, [r7, #13]
 80037f6:	e00c      	b.n	8003812 <Payload_union_converter+0x7a>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+10];
 80037f8:	7b7b      	ldrb	r3, [r7, #13]
 80037fa:	f103 020a 	add.w	r2, r3, #10
 80037fe:	7b7b      	ldrb	r3, [r7, #13]
 8003800:	4962      	ldr	r1, [pc, #392]	@ (800398c <Payload_union_converter+0x1f4>)
 8003802:	5c8a      	ldrb	r2, [r1, r2]
 8003804:	3310      	adds	r3, #16
 8003806:	443b      	add	r3, r7
 8003808:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 800380c:	7b7b      	ldrb	r3, [r7, #13]
 800380e:	3301      	adds	r3, #1
 8003810:	737b      	strb	r3, [r7, #13]
 8003812:	7b7b      	ldrb	r3, [r7, #13]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d9ef      	bls.n	80037f8 <Payload_union_converter+0x60>
			//	 HYI_BUFFER[30+i]=Lora_Rx_Buffer[i+13]; // 42 43 44 45
			 }
			 Payload.gpslongitude=f2u8.fVal;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4a5d      	ldr	r2, [pc, #372]	@ (8003990 <Payload_union_converter+0x1f8>)
 800381c:	60d3      	str	r3, [r2, #12]

			 for(uint8_t i=0;i<4;i++)
 800381e:	2300      	movs	r3, #0
 8003820:	733b      	strb	r3, [r7, #12]
 8003822:	e00c      	b.n	800383e <Payload_union_converter+0xa6>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+14];
 8003824:	7b3b      	ldrb	r3, [r7, #12]
 8003826:	f103 020e 	add.w	r2, r3, #14
 800382a:	7b3b      	ldrb	r3, [r7, #12]
 800382c:	4957      	ldr	r1, [pc, #348]	@ (800398c <Payload_union_converter+0x1f4>)
 800382e:	5c8a      	ldrb	r2, [r1, r2]
 8003830:	3310      	adds	r3, #16
 8003832:	443b      	add	r3, r7
 8003834:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8003838:	7b3b      	ldrb	r3, [r7, #12]
 800383a:	3301      	adds	r3, #1
 800383c:	733b      	strb	r3, [r7, #12]
 800383e:	7b3b      	ldrb	r3, [r7, #12]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d9ef      	bls.n	8003824 <Payload_union_converter+0x8c>
			 }
			 Payload.altitude=f2u8.fVal;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4a52      	ldr	r2, [pc, #328]	@ (8003990 <Payload_union_converter+0x1f8>)
 8003848:	6153      	str	r3, [r2, #20]


			 for(uint8_t i=0;i<4;i++)
 800384a:	2300      	movs	r3, #0
 800384c:	72fb      	strb	r3, [r7, #11]
 800384e:	e00c      	b.n	800386a <Payload_union_converter+0xd2>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+18];
 8003850:	7afb      	ldrb	r3, [r7, #11]
 8003852:	f103 0212 	add.w	r2, r3, #18
 8003856:	7afb      	ldrb	r3, [r7, #11]
 8003858:	494c      	ldr	r1, [pc, #304]	@ (800398c <Payload_union_converter+0x1f4>)
 800385a:	5c8a      	ldrb	r2, [r1, r2]
 800385c:	3310      	adds	r3, #16
 800385e:	443b      	add	r3, r7
 8003860:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8003864:	7afb      	ldrb	r3, [r7, #11]
 8003866:	3301      	adds	r3, #1
 8003868:	72fb      	strb	r3, [r7, #11]
 800386a:	7afb      	ldrb	r3, [r7, #11]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d9ef      	bls.n	8003850 <Payload_union_converter+0xb8>
			 }
			 Payload.speed=f2u8.fVal;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4a47      	ldr	r2, [pc, #284]	@ (8003990 <Payload_union_converter+0x1f8>)
 8003874:	6113      	str	r3, [r2, #16]


			 for(uint8_t i=0;i<4;i++)
 8003876:	2300      	movs	r3, #0
 8003878:	72bb      	strb	r3, [r7, #10]
 800387a:	e00c      	b.n	8003896 <Payload_union_converter+0xfe>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+22];
 800387c:	7abb      	ldrb	r3, [r7, #10]
 800387e:	f103 0216 	add.w	r2, r3, #22
 8003882:	7abb      	ldrb	r3, [r7, #10]
 8003884:	4941      	ldr	r1, [pc, #260]	@ (800398c <Payload_union_converter+0x1f4>)
 8003886:	5c8a      	ldrb	r2, [r1, r2]
 8003888:	3310      	adds	r3, #16
 800388a:	443b      	add	r3, r7
 800388c:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8003890:	7abb      	ldrb	r3, [r7, #10]
 8003892:	3301      	adds	r3, #1
 8003894:	72bb      	strb	r3, [r7, #10]
 8003896:	7abb      	ldrb	r3, [r7, #10]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d9ef      	bls.n	800387c <Payload_union_converter+0xe4>
			 }
			 Payload.temperature=f2u8.fVal;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4a3c      	ldr	r2, [pc, #240]	@ (8003990 <Payload_union_converter+0x1f8>)
 80038a0:	6193      	str	r3, [r2, #24]


			 for(uint8_t i=0;i<4;i++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	727b      	strb	r3, [r7, #9]
 80038a6:	e00c      	b.n	80038c2 <Payload_union_converter+0x12a>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+26];
 80038a8:	7a7b      	ldrb	r3, [r7, #9]
 80038aa:	f103 021a 	add.w	r2, r3, #26
 80038ae:	7a7b      	ldrb	r3, [r7, #9]
 80038b0:	4936      	ldr	r1, [pc, #216]	@ (800398c <Payload_union_converter+0x1f4>)
 80038b2:	5c8a      	ldrb	r2, [r1, r2]
 80038b4:	3310      	adds	r3, #16
 80038b6:	443b      	add	r3, r7
 80038b8:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80038bc:	7a7b      	ldrb	r3, [r7, #9]
 80038be:	3301      	adds	r3, #1
 80038c0:	727b      	strb	r3, [r7, #9]
 80038c2:	7a7b      	ldrb	r3, [r7, #9]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d9ef      	bls.n	80038a8 <Payload_union_converter+0x110>
			 }
			 Payload.accx=f2u8.fVal;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4a31      	ldr	r2, [pc, #196]	@ (8003990 <Payload_union_converter+0x1f8>)
 80038cc:	61d3      	str	r3, [r2, #28]


			 for(uint8_t i=0;i<4;i++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	723b      	strb	r3, [r7, #8]
 80038d2:	e00c      	b.n	80038ee <Payload_union_converter+0x156>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+30];
 80038d4:	7a3b      	ldrb	r3, [r7, #8]
 80038d6:	f103 021e 	add.w	r2, r3, #30
 80038da:	7a3b      	ldrb	r3, [r7, #8]
 80038dc:	492b      	ldr	r1, [pc, #172]	@ (800398c <Payload_union_converter+0x1f4>)
 80038de:	5c8a      	ldrb	r2, [r1, r2]
 80038e0:	3310      	adds	r3, #16
 80038e2:	443b      	add	r3, r7
 80038e4:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80038e8:	7a3b      	ldrb	r3, [r7, #8]
 80038ea:	3301      	adds	r3, #1
 80038ec:	723b      	strb	r3, [r7, #8]
 80038ee:	7a3b      	ldrb	r3, [r7, #8]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d9ef      	bls.n	80038d4 <Payload_union_converter+0x13c>
			 }
			 Payload.accy=f2u8.fVal;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4a26      	ldr	r2, [pc, #152]	@ (8003990 <Payload_union_converter+0x1f8>)
 80038f8:	6213      	str	r3, [r2, #32]


		      for(uint8_t i=0;i<4;i++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	71fb      	strb	r3, [r7, #7]
 80038fe:	e00c      	b.n	800391a <Payload_union_converter+0x182>
			 {
		    	  f2u8.array[i]=Lora_Rx_Buffer[i+34];
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	4920      	ldr	r1, [pc, #128]	@ (800398c <Payload_union_converter+0x1f4>)
 800390a:	5c8a      	ldrb	r2, [r1, r2]
 800390c:	3310      	adds	r3, #16
 800390e:	443b      	add	r3, r7
 8003910:	f803 2c10 	strb.w	r2, [r3, #-16]
		      for(uint8_t i=0;i<4;i++)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	3301      	adds	r3, #1
 8003918:	71fb      	strb	r3, [r7, #7]
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d9ef      	bls.n	8003900 <Payload_union_converter+0x168>
			 }
		      Payload.accz=f2u8.fVal;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4a1b      	ldr	r2, [pc, #108]	@ (8003990 <Payload_union_converter+0x1f8>)
 8003924:	6253      	str	r3, [r2, #36]	@ 0x24


			  for(uint8_t i=0;i<4;i++)
 8003926:	2300      	movs	r3, #0
 8003928:	71bb      	strb	r3, [r7, #6]
 800392a:	e00c      	b.n	8003946 <Payload_union_converter+0x1ae>
			 {
				  f2u8.array[i]=Lora_Rx_Buffer[i+38];
 800392c:	79bb      	ldrb	r3, [r7, #6]
 800392e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8003932:	79bb      	ldrb	r3, [r7, #6]
 8003934:	4915      	ldr	r1, [pc, #84]	@ (800398c <Payload_union_converter+0x1f4>)
 8003936:	5c8a      	ldrb	r2, [r1, r2]
 8003938:	3310      	adds	r3, #16
 800393a:	443b      	add	r3, r7
 800393c:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 8003940:	79bb      	ldrb	r3, [r7, #6]
 8003942:	3301      	adds	r3, #1
 8003944:	71bb      	strb	r3, [r7, #6]
 8003946:	79bb      	ldrb	r3, [r7, #6]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d9ef      	bls.n	800392c <Payload_union_converter+0x194>
			 }
			  Payload.normal=f2u8.fVal;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	4a10      	ldr	r2, [pc, #64]	@ (8003990 <Payload_union_converter+0x1f8>)
 8003950:	6293      	str	r3, [r2, #40]	@ 0x28


			  for(uint8_t i=0;i<4;i++)
 8003952:	2300      	movs	r3, #0
 8003954:	717b      	strb	r3, [r7, #5]
 8003956:	e00c      	b.n	8003972 <Payload_union_converter+0x1da>
			 {
				  f2u8.array[i]=Lora_Rx_Buffer[i+42];
 8003958:	797b      	ldrb	r3, [r7, #5]
 800395a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800395e:	797b      	ldrb	r3, [r7, #5]
 8003960:	490a      	ldr	r1, [pc, #40]	@ (800398c <Payload_union_converter+0x1f4>)
 8003962:	5c8a      	ldrb	r2, [r1, r2]
 8003964:	3310      	adds	r3, #16
 8003966:	443b      	add	r3, r7
 8003968:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 800396c:	797b      	ldrb	r3, [r7, #5]
 800396e:	3301      	adds	r3, #1
 8003970:	717b      	strb	r3, [r7, #5]
 8003972:	797b      	ldrb	r3, [r7, #5]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d9ef      	bls.n	8003958 <Payload_union_converter+0x1c0>
			 }
			  Payload.pitch=f2u8.fVal;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4a05      	ldr	r2, [pc, #20]	@ (8003990 <Payload_union_converter+0x1f8>)
 800397c:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000650 	.word	0x20000650
 8003990:	200008d4 	.word	0x200008d4
 8003994:	00000000 	.word	0x00000000

08003998 <distance_in_m>:


double distance_in_m(double lat1, double long1, double lat2, double long2) {
 8003998:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800399c:	ed2d 8b02 	vpush	{d8}
 80039a0:	b09a      	sub	sp, #104	@ 0x68
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	ed87 0b06 	vstr	d0, [r7, #24]
 80039a8:	ed87 1b04 	vstr	d1, [r7, #16]
 80039ac:	ed87 2b02 	vstr	d2, [r7, #8]
 80039b0:	ed87 3b00 	vstr	d3, [r7]


    double dlat1=lat1*(PI/180);
 80039b4:	a184      	add	r1, pc, #528	@ (adr r1, 8003bc8 <distance_in_m+0x230>)
 80039b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	4b88      	ldr	r3, [pc, #544]	@ (8003be0 <distance_in_m+0x248>)
 80039c0:	f7fc ff64 	bl	800088c <__aeabi_ddiv>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039cc:	f7fc fe34 	bl	8000638 <__aeabi_dmul>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    double dlong1=long1*(PI/180);
 80039d8:	a17b      	add	r1, pc, #492	@ (adr r1, 8003bc8 <distance_in_m+0x230>)
 80039da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	4b7f      	ldr	r3, [pc, #508]	@ (8003be0 <distance_in_m+0x248>)
 80039e4:	f7fc ff52 	bl	800088c <__aeabi_ddiv>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039f0:	f7fc fe22 	bl	8000638 <__aeabi_dmul>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double dlat2=lat2*(PI/180);
 80039fc:	a172      	add	r1, pc, #456	@ (adr r1, 8003bc8 <distance_in_m+0x230>)
 80039fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	4b76      	ldr	r3, [pc, #472]	@ (8003be0 <distance_in_m+0x248>)
 8003a08:	f7fc ff40 	bl	800088c <__aeabi_ddiv>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a14:	f7fc fe10 	bl	8000638 <__aeabi_dmul>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double dlong2=long2*(PI/180);
 8003a20:	a169      	add	r1, pc, #420	@ (adr r1, 8003bc8 <distance_in_m+0x230>)
 8003a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003be0 <distance_in_m+0x248>)
 8003a2c:	f7fc ff2e 	bl	800088c <__aeabi_ddiv>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a38:	f7fc fdfe 	bl	8000638 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    double dLong=dlong1-dlong2;
 8003a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a48:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003a4c:	f7fc fc3c 	bl	80002c8 <__aeabi_dsub>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double dLat=dlat1-dlat2;
 8003a58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003a60:	f7fc fc32 	bl	80002c8 <__aeabi_dsub>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    double aHarv= pow(sin(dLat/2.0),2.0)+cos(dlat1)*cos(dlat2)*pow(sin(dLong/2),2);
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a74:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003a78:	f7fc ff08 	bl	800088c <__aeabi_ddiv>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	ec43 2b17 	vmov	d7, r2, r3
 8003a84:	eeb0 0a47 	vmov.f32	s0, s14
 8003a88:	eef0 0a67 	vmov.f32	s1, s15
 8003a8c:	f00f fae0 	bl	8013050 <sin>
 8003a90:	eeb0 7a40 	vmov.f32	s14, s0
 8003a94:	eef0 7a60 	vmov.f32	s15, s1
 8003a98:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8003bd0 <distance_in_m+0x238>
 8003a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8003aa0:	eef0 0a67 	vmov.f32	s1, s15
 8003aa4:	f00f f9e2 	bl	8012e6c <pow>
 8003aa8:	ec59 8b10 	vmov	r8, r9, d0
 8003aac:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8003ab0:	f00f fa7a 	bl	8012fa8 <cos>
 8003ab4:	ec55 4b10 	vmov	r4, r5, d0
 8003ab8:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8003abc:	f00f fa74 	bl	8012fa8 <cos>
 8003ac0:	ec53 2b10 	vmov	r2, r3, d0
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	f7fc fdb6 	bl	8000638 <__aeabi_dmul>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003adc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8003ae0:	f7fc fed4 	bl	800088c <__aeabi_ddiv>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	ec43 2b17 	vmov	d7, r2, r3
 8003aec:	eeb0 0a47 	vmov.f32	s0, s14
 8003af0:	eef0 0a67 	vmov.f32	s1, s15
 8003af4:	f00f faac 	bl	8013050 <sin>
 8003af8:	eeb0 7a40 	vmov.f32	s14, s0
 8003afc:	eef0 7a60 	vmov.f32	s15, s1
 8003b00:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8003bd0 <distance_in_m+0x238>
 8003b04:	eeb0 0a47 	vmov.f32	s0, s14
 8003b08:	eef0 0a67 	vmov.f32	s1, s15
 8003b0c:	f00f f9ae 	bl	8012e6c <pow>
 8003b10:	ec53 2b10 	vmov	r2, r3, d0
 8003b14:	4620      	mov	r0, r4
 8003b16:	4629      	mov	r1, r5
 8003b18:	f7fc fd8e 	bl	8000638 <__aeabi_dmul>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4640      	mov	r0, r8
 8003b22:	4649      	mov	r1, r9
 8003b24:	f7fc fbd2 	bl	80002cc <__adddf3>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double cHarv=2*atan2(sqrt(aHarv),sqrt(1.0-aHarv));
 8003b30:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8003b34:	f00f fa0a 	bl	8012f4c <sqrt>
 8003b38:	eeb0 8a40 	vmov.f32	s16, s0
 8003b3c:	eef0 8a60 	vmov.f32	s17, s1
 8003b40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b44:	f04f 0000 	mov.w	r0, #0
 8003b48:	4926      	ldr	r1, [pc, #152]	@ (8003be4 <distance_in_m+0x24c>)
 8003b4a:	f7fc fbbd 	bl	80002c8 <__aeabi_dsub>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	ec43 2b17 	vmov	d7, r2, r3
 8003b56:	eeb0 0a47 	vmov.f32	s0, s14
 8003b5a:	eef0 0a67 	vmov.f32	s1, s15
 8003b5e:	f00f f9f5 	bl	8012f4c <sqrt>
 8003b62:	eeb0 7a40 	vmov.f32	s14, s0
 8003b66:	eef0 7a60 	vmov.f32	s15, s1
 8003b6a:	eeb0 1a47 	vmov.f32	s2, s14
 8003b6e:	eef0 1a67 	vmov.f32	s3, s15
 8003b72:	eeb0 0a48 	vmov.f32	s0, s16
 8003b76:	eef0 0a68 	vmov.f32	s1, s17
 8003b7a:	f00f f975 	bl	8012e68 <atan2>
 8003b7e:	ec51 0b10 	vmov	r0, r1, d0
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	f7fc fba1 	bl	80002cc <__adddf3>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double distance=radius_of_earth*cHarv;
 8003b92:	a311      	add	r3, pc, #68	@ (adr r3, 8003bd8 <distance_in_m+0x240>)
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b9c:	f7fc fd4c 	bl	8000638 <__aeabi_dmul>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    return (distance);
 8003ba8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bac:	ec43 2b17 	vmov	d7, r2, r3
    }
 8003bb0:	eeb0 0a47 	vmov.f32	s0, s14
 8003bb4:	eef0 0a67 	vmov.f32	s1, s15
 8003bb8:	3768      	adds	r7, #104	@ 0x68
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	ecbd 8b02 	vpop	{d8}
 8003bc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bc4:	f3af 8000 	nop.w
 8003bc8:	54442d18 	.word	0x54442d18
 8003bcc:	400921fb 	.word	0x400921fb
 8003bd0:	00000000 	.word	0x00000000
 8003bd4:	40000000 	.word	0x40000000
 8003bd8:	03089a02 	.word	0x03089a02
 8003bdc:	415854a6 	.word	0x415854a6
 8003be0:	40668000 	.word	0x40668000
 8003be4:	3ff00000 	.word	0x3ff00000

08003be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bec:	b672      	cpsid	i
}
 8003bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <Error_Handler+0x8>

08003bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_MspInit+0x4c>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	4a0f      	ldr	r2, [pc, #60]	@ (8003c40 <HAL_MspInit+0x4c>)
 8003c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <HAL_MspInit+0x4c>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c12:	607b      	str	r3, [r7, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	4b09      	ldr	r3, [pc, #36]	@ (8003c40 <HAL_MspInit+0x4c>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	4a08      	ldr	r2, [pc, #32]	@ (8003c40 <HAL_MspInit+0x4c>)
 8003c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c26:	4b06      	ldr	r3, [pc, #24]	@ (8003c40 <HAL_MspInit+0x4c>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800

08003c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd0 <HAL_ADC_MspInit+0x8c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d12f      	bne.n	8003cc6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd4 <HAL_ADC_MspInit+0x90>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	4a19      	ldr	r2, [pc, #100]	@ (8003cd4 <HAL_ADC_MspInit+0x90>)
 8003c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c76:	4b17      	ldr	r3, [pc, #92]	@ (8003cd4 <HAL_ADC_MspInit+0x90>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	4b13      	ldr	r3, [pc, #76]	@ (8003cd4 <HAL_ADC_MspInit+0x90>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	4a12      	ldr	r2, [pc, #72]	@ (8003cd4 <HAL_ADC_MspInit+0x90>)
 8003c8c:	f043 0304 	orr.w	r3, r3, #4
 8003c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c92:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <HAL_ADC_MspInit+0x90>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4809      	ldr	r0, [pc, #36]	@ (8003cd8 <HAL_ADC_MspInit+0x94>)
 8003cb2:	f001 fe2b 	bl	800590c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2103      	movs	r1, #3
 8003cba:	2012      	movs	r0, #18
 8003cbc:	f001 f9ed 	bl	800509a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003cc0:	2012      	movs	r0, #18
 8003cc2:	f001 fa06 	bl	80050d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003cc6:	bf00      	nop
 8003cc8:	3728      	adds	r7, #40	@ 0x28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40012000 	.word	0x40012000
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40020800 	.word	0x40020800

08003cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08a      	sub	sp, #40	@ 0x28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	f107 0314 	add.w	r3, r7, #20
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a19      	ldr	r2, [pc, #100]	@ (8003d60 <HAL_I2C_MspInit+0x84>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d12b      	bne.n	8003d56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	4b18      	ldr	r3, [pc, #96]	@ (8003d64 <HAL_I2C_MspInit+0x88>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <HAL_I2C_MspInit+0x88>)
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0e:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <HAL_I2C_MspInit+0x88>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d1a:	23c0      	movs	r3, #192	@ 0xc0
 8003d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d1e:	2312      	movs	r3, #18
 8003d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d26:	2303      	movs	r3, #3
 8003d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d2a:	2304      	movs	r3, #4
 8003d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2e:	f107 0314 	add.w	r3, r7, #20
 8003d32:	4619      	mov	r1, r3
 8003d34:	480c      	ldr	r0, [pc, #48]	@ (8003d68 <HAL_I2C_MspInit+0x8c>)
 8003d36:	f001 fde9 	bl	800590c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_I2C_MspInit+0x88>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	4a08      	ldr	r2, [pc, #32]	@ (8003d64 <HAL_I2C_MspInit+0x88>)
 8003d44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d4a:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <HAL_I2C_MspInit+0x88>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003d56:	bf00      	nop
 8003d58:	3728      	adds	r7, #40	@ 0x28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40005400 	.word	0x40005400
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40020400 	.word	0x40020400

08003d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	@ 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	f107 0314 	add.w	r3, r7, #20
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a19      	ldr	r2, [pc, #100]	@ (8003df0 <HAL_SPI_MspInit+0x84>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d12b      	bne.n	8003de6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	4b18      	ldr	r3, [pc, #96]	@ (8003df4 <HAL_SPI_MspInit+0x88>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	4a17      	ldr	r2, [pc, #92]	@ (8003df4 <HAL_SPI_MspInit+0x88>)
 8003d98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d9e:	4b15      	ldr	r3, [pc, #84]	@ (8003df4 <HAL_SPI_MspInit+0x88>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <HAL_SPI_MspInit+0x88>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	4a10      	ldr	r2, [pc, #64]	@ (8003df4 <HAL_SPI_MspInit+0x88>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dba:	4b0e      	ldr	r3, [pc, #56]	@ (8003df4 <HAL_SPI_MspInit+0x88>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003dc6:	23e0      	movs	r3, #224	@ 0xe0
 8003dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003dd6:	2305      	movs	r3, #5
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dda:	f107 0314 	add.w	r3, r7, #20
 8003dde:	4619      	mov	r1, r3
 8003de0:	4805      	ldr	r0, [pc, #20]	@ (8003df8 <HAL_SPI_MspInit+0x8c>)
 8003de2:	f001 fd93 	bl	800590c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003de6:	bf00      	nop
 8003de8:	3728      	adds	r7, #40	@ 0x28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40013000 	.word	0x40013000
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40020000 	.word	0x40020000

08003dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e0c:	d116      	bne.n	8003e3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	4b28      	ldr	r3, [pc, #160]	@ (8003eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	4a27      	ldr	r2, [pc, #156]	@ (8003eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e1e:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	201c      	movs	r0, #28
 8003e30:	f001 f933 	bl	800509a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e34:	201c      	movs	r0, #28
 8003e36:	f001 f94c 	bl	80050d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003e3a:	e036      	b.n	8003eaa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb8 <HAL_TIM_Base_MspInit+0xbc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d116      	bne.n	8003e74 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e56:	4b17      	ldr	r3, [pc, #92]	@ (8003eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e62:	2200      	movs	r2, #0
 8003e64:	2100      	movs	r1, #0
 8003e66:	201d      	movs	r0, #29
 8003e68:	f001 f917 	bl	800509a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e6c:	201d      	movs	r0, #29
 8003e6e:	f001 f930 	bl	80050d2 <HAL_NVIC_EnableIRQ>
}
 8003e72:	e01a      	b.n	8003eaa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a10      	ldr	r2, [pc, #64]	@ (8003ebc <HAL_TIM_Base_MspInit+0xc0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d115      	bne.n	8003eaa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	4a0b      	ldr	r2, [pc, #44]	@ (8003eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e8e:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	201e      	movs	r0, #30
 8003ea0:	f001 f8fb 	bl	800509a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ea4:	201e      	movs	r0, #30
 8003ea6:	f001 f914 	bl	80050d2 <HAL_NVIC_EnableIRQ>
}
 8003eaa:	bf00      	nop
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800

08003ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b090      	sub	sp, #64	@ 0x40
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a9b      	ldr	r2, [pc, #620]	@ (800414c <HAL_UART_MspInit+0x28c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d134      	bne.n	8003f4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee6:	4b9a      	ldr	r3, [pc, #616]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	4a99      	ldr	r2, [pc, #612]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003eec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ef2:	4b97      	ldr	r3, [pc, #604]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f02:	4b93      	ldr	r3, [pc, #588]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	4a92      	ldr	r2, [pc, #584]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0e:	4b90      	ldr	r3, [pc, #576]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f26:	2303      	movs	r3, #3
 8003f28:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f32:	4619      	mov	r1, r3
 8003f34:	4887      	ldr	r0, [pc, #540]	@ (8004154 <HAL_UART_MspInit+0x294>)
 8003f36:	f001 fce9 	bl	800590c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	2034      	movs	r0, #52	@ 0x34
 8003f40:	f001 f8ab 	bl	800509a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003f44:	2034      	movs	r0, #52	@ 0x34
 8003f46:	f001 f8c4 	bl	80050d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003f4a:	e0fa      	b.n	8004142 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a81      	ldr	r2, [pc, #516]	@ (8004158 <HAL_UART_MspInit+0x298>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d134      	bne.n	8003fc0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f56:	2300      	movs	r3, #0
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	4b7d      	ldr	r3, [pc, #500]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	4a7c      	ldr	r2, [pc, #496]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f66:	4b7a      	ldr	r3, [pc, #488]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	4b76      	ldr	r3, [pc, #472]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	4a75      	ldr	r2, [pc, #468]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f82:	4b73      	ldr	r3, [pc, #460]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f8e:	230c      	movs	r3, #12
 8003f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f92:	2302      	movs	r3, #2
 8003f94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	486a      	ldr	r0, [pc, #424]	@ (8004154 <HAL_UART_MspInit+0x294>)
 8003faa:	f001 fcaf 	bl	800590c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	2026      	movs	r0, #38	@ 0x26
 8003fb4:	f001 f871 	bl	800509a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003fb8:	2026      	movs	r0, #38	@ 0x26
 8003fba:	f001 f88a 	bl	80050d2 <HAL_NVIC_EnableIRQ>
}
 8003fbe:	e0c0      	b.n	8004142 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART3)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a65      	ldr	r2, [pc, #404]	@ (800415c <HAL_UART_MspInit+0x29c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	f040 8082 	bne.w	80040d0 <HAL_UART_MspInit+0x210>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	4a5e      	ldr	r2, [pc, #376]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003fd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	4b58      	ldr	r3, [pc, #352]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	4a57      	ldr	r2, [pc, #348]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff8:	4b55      	ldr	r3, [pc, #340]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	4b51      	ldr	r3, [pc, #324]	@ (8004150 <HAL_UART_MspInit+0x290>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	4a50      	ldr	r2, [pc, #320]	@ (8004150 <HAL_UART_MspInit+0x290>)
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	6313      	str	r3, [r2, #48]	@ 0x30
 8004014:	4b4e      	ldr	r3, [pc, #312]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004020:	2320      	movs	r3, #32
 8004022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004024:	2302      	movs	r3, #2
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402c:	2303      	movs	r3, #3
 800402e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004030:	2307      	movs	r3, #7
 8004032:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004038:	4619      	mov	r1, r3
 800403a:	4849      	ldr	r0, [pc, #292]	@ (8004160 <HAL_UART_MspInit+0x2a0>)
 800403c:	f001 fc66 	bl	800590c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	2302      	movs	r3, #2
 8004048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	2300      	movs	r3, #0
 800404c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404e:	2303      	movs	r3, #3
 8004050:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004052:	2307      	movs	r3, #7
 8004054:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004056:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800405a:	4619      	mov	r1, r3
 800405c:	4841      	ldr	r0, [pc, #260]	@ (8004164 <HAL_UART_MspInit+0x2a4>)
 800405e:	f001 fc55 	bl	800590c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004062:	4b41      	ldr	r3, [pc, #260]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 8004064:	4a41      	ldr	r2, [pc, #260]	@ (800416c <HAL_UART_MspInit+0x2ac>)
 8004066:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004068:	4b3f      	ldr	r3, [pc, #252]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 800406a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800406e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004070:	4b3d      	ldr	r3, [pc, #244]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004076:	4b3c      	ldr	r3, [pc, #240]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 8004078:	2200      	movs	r2, #0
 800407a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800407c:	4b3a      	ldr	r3, [pc, #232]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 800407e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004082:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004084:	4b38      	ldr	r3, [pc, #224]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 8004086:	2200      	movs	r2, #0
 8004088:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800408a:	4b37      	ldr	r3, [pc, #220]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004090:	4b35      	ldr	r3, [pc, #212]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004096:	4b34      	ldr	r3, [pc, #208]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 8004098:	2200      	movs	r2, #0
 800409a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800409c:	4b32      	ldr	r3, [pc, #200]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 800409e:	2200      	movs	r2, #0
 80040a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80040a2:	4831      	ldr	r0, [pc, #196]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 80040a4:	f001 f830 	bl	8005108 <HAL_DMA_Init>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 80040ae:	f7ff fd9b 	bl	8003be8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 80040b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004168 <HAL_UART_MspInit+0x2a8>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80040be:	2200      	movs	r2, #0
 80040c0:	2100      	movs	r1, #0
 80040c2:	2027      	movs	r0, #39	@ 0x27
 80040c4:	f000 ffe9 	bl	800509a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040c8:	2027      	movs	r0, #39	@ 0x27
 80040ca:	f001 f802 	bl	80050d2 <HAL_NVIC_EnableIRQ>
}
 80040ce:	e038      	b.n	8004142 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART6)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a26      	ldr	r2, [pc, #152]	@ (8004170 <HAL_UART_MspInit+0x2b0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d133      	bne.n	8004142 <HAL_UART_MspInit+0x282>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	4b1c      	ldr	r3, [pc, #112]	@ (8004150 <HAL_UART_MspInit+0x290>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004150 <HAL_UART_MspInit+0x290>)
 80040e4:	f043 0320 	orr.w	r3, r3, #32
 80040e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ea:	4b19      	ldr	r3, [pc, #100]	@ (8004150 <HAL_UART_MspInit+0x290>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	4b15      	ldr	r3, [pc, #84]	@ (8004150 <HAL_UART_MspInit+0x290>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fe:	4a14      	ldr	r2, [pc, #80]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8004100:	f043 0304 	orr.w	r3, r3, #4
 8004104:	6313      	str	r3, [r2, #48]	@ 0x30
 8004106:	4b12      	ldr	r3, [pc, #72]	@ (8004150 <HAL_UART_MspInit+0x290>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS_Tx_Pin|RS_Rx_Pin;
 8004112:	23c0      	movs	r3, #192	@ 0xc0
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004116:	2302      	movs	r3, #2
 8004118:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411a:	2300      	movs	r3, #0
 800411c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411e:	2303      	movs	r3, #3
 8004120:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004122:	2308      	movs	r3, #8
 8004124:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004126:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800412a:	4619      	mov	r1, r3
 800412c:	480c      	ldr	r0, [pc, #48]	@ (8004160 <HAL_UART_MspInit+0x2a0>)
 800412e:	f001 fbed 	bl	800590c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004132:	2200      	movs	r2, #0
 8004134:	2100      	movs	r1, #0
 8004136:	2047      	movs	r0, #71	@ 0x47
 8004138:	f000 ffaf 	bl	800509a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800413c:	2047      	movs	r0, #71	@ 0x47
 800413e:	f000 ffc8 	bl	80050d2 <HAL_NVIC_EnableIRQ>
}
 8004142:	bf00      	nop
 8004144:	3740      	adds	r7, #64	@ 0x40
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40004c00 	.word	0x40004c00
 8004150:	40023800 	.word	0x40023800
 8004154:	40020000 	.word	0x40020000
 8004158:	40004400 	.word	0x40004400
 800415c:	40004800 	.word	0x40004800
 8004160:	40020800 	.word	0x40020800
 8004164:	40020400 	.word	0x40020400
 8004168:	200005f0 	.word	0x200005f0
 800416c:	40026028 	.word	0x40026028
 8004170:	40011400 	.word	0x40011400

08004174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <NMI_Handler+0x4>

0800417c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <HardFault_Handler+0x4>

08004184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <MemManage_Handler+0x4>

0800418c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <BusFault_Handler+0x4>

08004194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <UsageFault_Handler+0x4>

0800419c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041ca:	f000 f9bb 	bl	8004544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041d8:	4802      	ldr	r0, [pc, #8]	@ (80041e4 <DMA1_Stream1_IRQHandler+0x10>)
 80041da:	f001 f92d 	bl	8005438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200005f0 	.word	0x200005f0

080041e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80041ec:	4802      	ldr	r0, [pc, #8]	@ (80041f8 <ADC_IRQHandler+0x10>)
 80041ee:	f000 fb0f 	bl	8004810 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000304 	.word	0x20000304

080041fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004200:	4802      	ldr	r0, [pc, #8]	@ (800420c <TIM2_IRQHandler+0x10>)
 8004202:	f004 fb6b 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200003f8 	.word	0x200003f8

08004210 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004214:	4802      	ldr	r0, [pc, #8]	@ (8004220 <TIM3_IRQHandler+0x10>)
 8004216:	f004 fb61 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000440 	.word	0x20000440

08004224 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004228:	4802      	ldr	r0, [pc, #8]	@ (8004234 <TIM4_IRQHandler+0x10>)
 800422a:	f004 fb57 	bl	80088dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000488 	.word	0x20000488

08004238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800423c:	4802      	ldr	r0, [pc, #8]	@ (8004248 <USART2_IRQHandler+0x10>)
 800423e:	f005 f8bf 	bl	80093c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000518 	.word	0x20000518

0800424c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004250:	4802      	ldr	r0, [pc, #8]	@ (800425c <USART3_IRQHandler+0x10>)
 8004252:	f005 f8b5 	bl	80093c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000560 	.word	0x20000560

08004260 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004264:	4802      	ldr	r0, [pc, #8]	@ (8004270 <UART4_IRQHandler+0x10>)
 8004266:	f005 f8ab 	bl	80093c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200004d0 	.word	0x200004d0

08004274 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004278:	4802      	ldr	r0, [pc, #8]	@ (8004284 <OTG_FS_IRQHandler+0x10>)
 800427a:	f001 ff84 	bl	8006186 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20001f1c 	.word	0x20001f1c

08004288 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800428c:	4802      	ldr	r0, [pc, #8]	@ (8004298 <USART6_IRQHandler+0x10>)
 800428e:	f005 f897 	bl	80093c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200005a8 	.word	0x200005a8

0800429c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return 1;
 80042a0:	2301      	movs	r3, #1
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <_kill>:

int _kill(int pid, int sig)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042b6:	f00c f933 	bl	8010520 <__errno>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2216      	movs	r2, #22
 80042be:	601a      	str	r2, [r3, #0]
  return -1;
 80042c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <_exit>:

void _exit (int status)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042d4:	f04f 31ff 	mov.w	r1, #4294967295
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ffe7 	bl	80042ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80042de:	bf00      	nop
 80042e0:	e7fd      	b.n	80042de <_exit+0x12>

080042e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	e00a      	b.n	800430a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042f4:	f3af 8000 	nop.w
 80042f8:	4601      	mov	r1, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	60ba      	str	r2, [r7, #8]
 8004300:	b2ca      	uxtb	r2, r1
 8004302:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3301      	adds	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	dbf0      	blt.n	80042f4 <_read+0x12>
  }

  return len;
 8004312:	687b      	ldr	r3, [r7, #4]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e009      	b.n	8004342 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	60ba      	str	r2, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3301      	adds	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	dbf1      	blt.n	800432e <_write+0x12>
  }
  return len;
 800434a:	687b      	ldr	r3, [r7, #4]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_close>:

int _close(int file)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800437c:	605a      	str	r2, [r3, #4]
  return 0;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <_isatty>:

int _isatty(int file)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004394:	2301      	movs	r3, #1
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043c4:	4a14      	ldr	r2, [pc, #80]	@ (8004418 <_sbrk+0x5c>)
 80043c6:	4b15      	ldr	r3, [pc, #84]	@ (800441c <_sbrk+0x60>)
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043d0:	4b13      	ldr	r3, [pc, #76]	@ (8004420 <_sbrk+0x64>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043d8:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <_sbrk+0x64>)
 80043da:	4a12      	ldr	r2, [pc, #72]	@ (8004424 <_sbrk+0x68>)
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043de:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <_sbrk+0x64>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d207      	bcs.n	80043fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043ec:	f00c f898 	bl	8010520 <__errno>
 80043f0:	4603      	mov	r3, r0
 80043f2:	220c      	movs	r2, #12
 80043f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e009      	b.n	8004410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043fc:	4b08      	ldr	r3, [pc, #32]	@ (8004420 <_sbrk+0x64>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004402:	4b07      	ldr	r3, [pc, #28]	@ (8004420 <_sbrk+0x64>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	4a05      	ldr	r2, [pc, #20]	@ (8004420 <_sbrk+0x64>)
 800440c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20020000 	.word	0x20020000
 800441c:	00000400 	.word	0x00000400
 8004420:	20000a34 	.word	0x20000a34
 8004424:	20002770 	.word	0x20002770

08004428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800442c:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <SystemInit+0x20>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	4a05      	ldr	r2, [pc, #20]	@ (8004448 <SystemInit+0x20>)
 8004434:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004438:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800444c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004484 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004450:	f7ff ffea 	bl	8004428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004454:	480c      	ldr	r0, [pc, #48]	@ (8004488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004456:	490d      	ldr	r1, [pc, #52]	@ (800448c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004458:	4a0d      	ldr	r2, [pc, #52]	@ (8004490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800445a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800445c:	e002      	b.n	8004464 <LoopCopyDataInit>

0800445e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800445e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004462:	3304      	adds	r3, #4

08004464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004468:	d3f9      	bcc.n	800445e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800446a:	4a0a      	ldr	r2, [pc, #40]	@ (8004494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800446c:	4c0a      	ldr	r4, [pc, #40]	@ (8004498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800446e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004470:	e001      	b.n	8004476 <LoopFillZerobss>

08004472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004474:	3204      	adds	r2, #4

08004476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004478:	d3fb      	bcc.n	8004472 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800447a:	f00c f857 	bl	801052c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800447e:	f7fd fb3f 	bl	8001b00 <main>
  bx  lr    
 8004482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800448c:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8004490:	08015a98 	.word	0x08015a98
  ldr r2, =_sbss
 8004494:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8004498:	2000276c 	.word	0x2000276c

0800449c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800449c:	e7fe      	b.n	800449c <CAN1_RX0_IRQHandler>
	...

080044a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044a4:	4b0e      	ldr	r3, [pc, #56]	@ (80044e0 <HAL_Init+0x40>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a0d      	ldr	r2, [pc, #52]	@ (80044e0 <HAL_Init+0x40>)
 80044aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <HAL_Init+0x40>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0a      	ldr	r2, [pc, #40]	@ (80044e0 <HAL_Init+0x40>)
 80044b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044bc:	4b08      	ldr	r3, [pc, #32]	@ (80044e0 <HAL_Init+0x40>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a07      	ldr	r2, [pc, #28]	@ (80044e0 <HAL_Init+0x40>)
 80044c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c8:	2003      	movs	r0, #3
 80044ca:	f000 fddb 	bl	8005084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044ce:	200f      	movs	r0, #15
 80044d0:	f000 f808 	bl	80044e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044d4:	f7ff fb8e 	bl	8003bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023c00 	.word	0x40023c00

080044e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044ec:	4b12      	ldr	r3, [pc, #72]	@ (8004538 <HAL_InitTick+0x54>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b12      	ldr	r3, [pc, #72]	@ (800453c <HAL_InitTick+0x58>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	4619      	mov	r1, r3
 80044f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fdf3 	bl	80050ee <HAL_SYSTICK_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e00e      	b.n	8004530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d80a      	bhi.n	800452e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004518:	2200      	movs	r2, #0
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	f000 fdbb 	bl	800509a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004524:	4a06      	ldr	r2, [pc, #24]	@ (8004540 <HAL_InitTick+0x5c>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000004 	.word	0x20000004
 800453c:	2000000c 	.word	0x2000000c
 8004540:	20000008 	.word	0x20000008

08004544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004548:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <HAL_IncTick+0x20>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <HAL_IncTick+0x24>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4413      	add	r3, r2
 8004554:	4a04      	ldr	r2, [pc, #16]	@ (8004568 <HAL_IncTick+0x24>)
 8004556:	6013      	str	r3, [r2, #0]
}
 8004558:	bf00      	nop
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2000000c 	.word	0x2000000c
 8004568:	20000a38 	.word	0x20000a38

0800456c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return uwTick;
 8004570:	4b03      	ldr	r3, [pc, #12]	@ (8004580 <HAL_GetTick+0x14>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000a38 	.word	0x20000a38

08004584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800458c:	f7ff ffee 	bl	800456c <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d005      	beq.n	80045aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800459e:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <HAL_Delay+0x44>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045aa:	bf00      	nop
 80045ac:	f7ff ffde 	bl	800456c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d8f7      	bhi.n	80045ac <HAL_Delay+0x28>
  {
  }
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000000c 	.word	0x2000000c

080045cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e033      	b.n	800464a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fb2a 	bl	8003c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d118      	bne.n	800463c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004612:	f023 0302 	bic.w	r3, r3, #2
 8004616:	f043 0202 	orr.w	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fb5a 	bl	8004cd8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	f043 0201 	orr.w	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	641a      	str	r2, [r3, #64]	@ 0x40
 800463a:	e001      	b.n	8004640 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004648:	7bfb      	ldrb	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_ADC_Start_IT+0x1a>
 800466a:	2302      	movs	r3, #2
 800466c:	e0bd      	b.n	80047ea <HAL_ADC_Start_IT+0x196>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d018      	beq.n	80046b6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004694:	4b58      	ldr	r3, [pc, #352]	@ (80047f8 <HAL_ADC_Start_IT+0x1a4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a58      	ldr	r2, [pc, #352]	@ (80047fc <HAL_ADC_Start_IT+0x1a8>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	0c9a      	lsrs	r2, r3, #18
 80046a0:	4613      	mov	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80046a8:	e002      	b.n	80046b0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f9      	bne.n	80046aa <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	f040 8085 	bne.w	80047d0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004704:	d106      	bne.n	8004714 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	f023 0206 	bic.w	r2, r3, #6
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	645a      	str	r2, [r3, #68]	@ 0x44
 8004712:	e002      	b.n	800471a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004722:	4b37      	ldr	r3, [pc, #220]	@ (8004800 <HAL_ADC_Start_IT+0x1ac>)
 8004724:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800472e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800473e:	f043 0320 	orr.w	r3, r3, #32
 8004742:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2b00      	cmp	r3, #0
 800474e:	d12a      	bne.n	80047a6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a2b      	ldr	r2, [pc, #172]	@ (8004804 <HAL_ADC_Start_IT+0x1b0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d015      	beq.n	8004786 <HAL_ADC_Start_IT+0x132>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a2a      	ldr	r2, [pc, #168]	@ (8004808 <HAL_ADC_Start_IT+0x1b4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d105      	bne.n	8004770 <HAL_ADC_Start_IT+0x11c>
 8004764:	4b26      	ldr	r3, [pc, #152]	@ (8004800 <HAL_ADC_Start_IT+0x1ac>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a25      	ldr	r2, [pc, #148]	@ (800480c <HAL_ADC_Start_IT+0x1b8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d136      	bne.n	80047e8 <HAL_ADC_Start_IT+0x194>
 800477a:	4b21      	ldr	r3, [pc, #132]	@ (8004800 <HAL_ADC_Start_IT+0x1ac>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	d130      	bne.n	80047e8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d129      	bne.n	80047e8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	e020      	b.n	80047e8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a16      	ldr	r2, [pc, #88]	@ (8004804 <HAL_ADC_Start_IT+0x1b0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d11b      	bne.n	80047e8 <HAL_ADC_Start_IT+0x194>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d114      	bne.n	80047e8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80047cc:	609a      	str	r2, [r3, #8]
 80047ce:	e00b      	b.n	80047e8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	f043 0210 	orr.w	r2, r3, #16
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e0:	f043 0201 	orr.w	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000004 	.word	0x20000004
 80047fc:	431bde83 	.word	0x431bde83
 8004800:	40012300 	.word	0x40012300
 8004804:	40012000 	.word	0x40012000
 8004808:	40012100 	.word	0x40012100
 800480c:	40012200 	.word	0x40012200

08004810 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d049      	beq.n	80048da <HAL_ADC_IRQHandler+0xca>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d046      	beq.n	80048da <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	d105      	bne.n	8004864 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d12b      	bne.n	80048ca <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004876:	2b00      	cmp	r3, #0
 8004878:	d127      	bne.n	80048ca <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004884:	2b00      	cmp	r3, #0
 8004886:	d006      	beq.n	8004896 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004892:	2b00      	cmp	r3, #0
 8004894:	d119      	bne.n	80048ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0220 	bic.w	r2, r2, #32
 80048a4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d105      	bne.n	80048ca <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fe fadc 	bl	8002e88 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0212 	mvn.w	r2, #18
 80048d8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d057      	beq.n	80049a0 <HAL_ADC_IRQHandler+0x190>
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d054      	beq.n	80049a0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d139      	bne.n	8004990 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004922:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004934:	2b00      	cmp	r3, #0
 8004936:	d12b      	bne.n	8004990 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004942:	2b00      	cmp	r3, #0
 8004944:	d124      	bne.n	8004990 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004950:	2b00      	cmp	r3, #0
 8004952:	d11d      	bne.n	8004990 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004958:	2b00      	cmp	r3, #0
 800495a:	d119      	bne.n	8004990 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800496a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	f043 0201 	orr.w	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fa9d 	bl	8004ed0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 020c 	mvn.w	r2, #12
 800499e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ae:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d017      	beq.n	80049e6 <HAL_ADC_IRQHandler+0x1d6>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d014      	beq.n	80049e6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10d      	bne.n	80049e6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f837 	bl	8004a4a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0201 	mvn.w	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049f4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <HAL_ADC_IRQHandler+0x218>
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d012      	beq.n	8004a28 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	f043 0202 	orr.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f06f 0220 	mvn.w	r2, #32
 8004a16:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f820 	bl	8004a5e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0220 	mvn.w	r2, #32
 8004a26:	601a      	str	r2, [r3, #0]
  }
}
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x1c>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e113      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x244>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b09      	cmp	r3, #9
 8004a9e:	d925      	bls.n	8004aec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68d9      	ldr	r1, [r3, #12]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	4613      	mov	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3b1e      	subs	r3, #30
 8004ab6:	2207      	movs	r2, #7
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43da      	mvns	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68d9      	ldr	r1, [r3, #12]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	4603      	mov	r3, r0
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4403      	add	r3, r0
 8004ade:	3b1e      	subs	r3, #30
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	e022      	b.n	8004b32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6919      	ldr	r1, [r3, #16]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	4613      	mov	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	2207      	movs	r2, #7
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	43da      	mvns	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6919      	ldr	r1, [r3, #16]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	4618      	mov	r0, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4403      	add	r3, r0
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d824      	bhi.n	8004b84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	3b05      	subs	r3, #5
 8004b4c:	221f      	movs	r2, #31
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43da      	mvns	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	400a      	ands	r2, r1
 8004b5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4618      	mov	r0, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	3b05      	subs	r3, #5
 8004b76:	fa00 f203 	lsl.w	r2, r0, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b82:	e04c      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d824      	bhi.n	8004bd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3b23      	subs	r3, #35	@ 0x23
 8004b9e:	221f      	movs	r2, #31
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	43da      	mvns	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	400a      	ands	r2, r1
 8004bac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	4618      	mov	r0, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3b23      	subs	r3, #35	@ 0x23
 8004bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bd4:	e023      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	3b41      	subs	r3, #65	@ 0x41
 8004be8:	221f      	movs	r2, #31
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	400a      	ands	r2, r1
 8004bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4618      	mov	r0, r3
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	3b41      	subs	r3, #65	@ 0x41
 8004c12:	fa00 f203 	lsl.w	r2, r0, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c1e:	4b29      	ldr	r3, [pc, #164]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x250>)
 8004c20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a28      	ldr	r2, [pc, #160]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x254>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10f      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x1d8>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b12      	cmp	r3, #18
 8004c32:	d10b      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x254>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d12b      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x23a>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ccc <HAL_ADC_ConfigChannel+0x258>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <HAL_ADC_ConfigChannel+0x1f4>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b11      	cmp	r3, #17
 8004c66:	d122      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a11      	ldr	r2, [pc, #68]	@ (8004ccc <HAL_ADC_ConfigChannel+0x258>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d111      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c8a:	4b11      	ldr	r3, [pc, #68]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x25c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a11      	ldr	r2, [pc, #68]	@ (8004cd4 <HAL_ADC_ConfigChannel+0x260>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	0c9a      	lsrs	r2, r3, #18
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ca0:	e002      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f9      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	40012300 	.word	0x40012300
 8004cc8:	40012000 	.word	0x40012000
 8004ccc:	10000012 	.word	0x10000012
 8004cd0:	20000004 	.word	0x20000004
 8004cd4:	431bde83 	.word	0x431bde83

08004cd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ce0:	4b79      	ldr	r3, [pc, #484]	@ (8004ec8 <ADC_Init+0x1f0>)
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	021a      	lsls	r2, r3, #8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004d30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6899      	ldr	r1, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	4a58      	ldr	r2, [pc, #352]	@ (8004ecc <ADC_Init+0x1f4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d022      	beq.n	8004db6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6899      	ldr	r1, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004da0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6899      	ldr	r1, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	609a      	str	r2, [r3, #8]
 8004db4:	e00f      	b.n	8004dd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004dd4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0202 	bic.w	r2, r2, #2
 8004de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6899      	ldr	r1, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	7e1b      	ldrb	r3, [r3, #24]
 8004df0:	005a      	lsls	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e12:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004e22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	035a      	lsls	r2, r3, #13
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	e007      	b.n	8004e4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e4a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	051a      	lsls	r2, r3, #20
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6899      	ldr	r1, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e8e:	025a      	lsls	r2, r3, #9
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6899      	ldr	r1, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	029a      	lsls	r2, r3, #10
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40012300 	.word	0x40012300
 8004ecc:	0f000001 	.word	0x0f000001

08004ed0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <__NVIC_SetPriorityGrouping+0x44>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f00:	4013      	ands	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f16:	4a04      	ldr	r2, [pc, #16]	@ (8004f28 <__NVIC_SetPriorityGrouping+0x44>)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	60d3      	str	r3, [r2, #12]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f30:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <__NVIC_GetPriorityGrouping+0x18>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	0a1b      	lsrs	r3, r3, #8
 8004f36:	f003 0307 	and.w	r3, r3, #7
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	db0b      	blt.n	8004f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	f003 021f 	and.w	r2, r3, #31
 8004f60:	4907      	ldr	r1, [pc, #28]	@ (8004f80 <__NVIC_EnableIRQ+0x38>)
 8004f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2001      	movs	r0, #1
 8004f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	e000e100 	.word	0xe000e100

08004f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	6039      	str	r1, [r7, #0]
 8004f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	db0a      	blt.n	8004fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	490c      	ldr	r1, [pc, #48]	@ (8004fd0 <__NVIC_SetPriority+0x4c>)
 8004f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa2:	0112      	lsls	r2, r2, #4
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fac:	e00a      	b.n	8004fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	4908      	ldr	r1, [pc, #32]	@ (8004fd4 <__NVIC_SetPriority+0x50>)
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	0112      	lsls	r2, r2, #4
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	761a      	strb	r2, [r3, #24]
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	e000e100 	.word	0xe000e100
 8004fd4:	e000ed00 	.word	0xe000ed00

08004fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	@ 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f1c3 0307 	rsb	r3, r3, #7
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	bf28      	it	cs
 8004ff6:	2304      	movcs	r3, #4
 8004ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	2b06      	cmp	r3, #6
 8005000:	d902      	bls.n	8005008 <NVIC_EncodePriority+0x30>
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3b03      	subs	r3, #3
 8005006:	e000      	b.n	800500a <NVIC_EncodePriority+0x32>
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800500c:	f04f 32ff 	mov.w	r2, #4294967295
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43da      	mvns	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	401a      	ands	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005020:	f04f 31ff 	mov.w	r1, #4294967295
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	43d9      	mvns	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005030:	4313      	orrs	r3, r2
         );
}
 8005032:	4618      	mov	r0, r3
 8005034:	3724      	adds	r7, #36	@ 0x24
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3b01      	subs	r3, #1
 800504c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005050:	d301      	bcc.n	8005056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005052:	2301      	movs	r3, #1
 8005054:	e00f      	b.n	8005076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005056:	4a0a      	ldr	r2, [pc, #40]	@ (8005080 <SysTick_Config+0x40>)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3b01      	subs	r3, #1
 800505c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800505e:	210f      	movs	r1, #15
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	f7ff ff8e 	bl	8004f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005068:	4b05      	ldr	r3, [pc, #20]	@ (8005080 <SysTick_Config+0x40>)
 800506a:	2200      	movs	r2, #0
 800506c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800506e:	4b04      	ldr	r3, [pc, #16]	@ (8005080 <SysTick_Config+0x40>)
 8005070:	2207      	movs	r2, #7
 8005072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	e000e010 	.word	0xe000e010

08005084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff ff29 	bl	8004ee4 <__NVIC_SetPriorityGrouping>
}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af00      	add	r7, sp, #0
 80050a0:	4603      	mov	r3, r0
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050ac:	f7ff ff3e 	bl	8004f2c <__NVIC_GetPriorityGrouping>
 80050b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	6978      	ldr	r0, [r7, #20]
 80050b8:	f7ff ff8e 	bl	8004fd8 <NVIC_EncodePriority>
 80050bc:	4602      	mov	r2, r0
 80050be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff ff5d 	bl	8004f84 <__NVIC_SetPriority>
}
 80050ca:	bf00      	nop
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	4603      	mov	r3, r0
 80050da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff ff31 	bl	8004f48 <__NVIC_EnableIRQ>
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff ffa2 	bl	8005040 <SysTick_Config>
 80050fc:	4603      	mov	r3, r0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005114:	f7ff fa2a 	bl	800456c <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e099      	b.n	8005258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005144:	e00f      	b.n	8005166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005146:	f7ff fa11 	bl	800456c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b05      	cmp	r3, #5
 8005152:	d908      	bls.n	8005166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2203      	movs	r2, #3
 800515e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e078      	b.n	8005258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e8      	bne.n	8005146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4b38      	ldr	r3, [pc, #224]	@ (8005260 <HAL_DMA_Init+0x158>)
 8005180:	4013      	ands	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800519e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d107      	bne.n	80051d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c8:	4313      	orrs	r3, r2
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 0307 	bic.w	r3, r3, #7
 80051e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d117      	bne.n	800522a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00e      	beq.n	800522a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fb01 	bl	8005814 <DMA_CheckFifoParam>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d008      	beq.n	800522a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2240      	movs	r2, #64	@ 0x40
 800521c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005226:	2301      	movs	r3, #1
 8005228:	e016      	b.n	8005258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fab8 	bl	80057a8 <DMA_CalcBaseAndBitshift>
 8005238:	4603      	mov	r3, r0
 800523a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005240:	223f      	movs	r2, #63	@ 0x3f
 8005242:	409a      	lsls	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	f010803f 	.word	0xf010803f

08005264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_DMA_Start_IT+0x26>
 8005286:	2302      	movs	r3, #2
 8005288:	e040      	b.n	800530c <HAL_DMA_Start_IT+0xa8>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d12f      	bne.n	80052fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2202      	movs	r2, #2
 80052a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fa4a 	bl	800574c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052bc:	223f      	movs	r2, #63	@ 0x3f
 80052be:	409a      	lsls	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0216 	orr.w	r2, r2, #22
 80052d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0208 	orr.w	r2, r2, #8
 80052ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e005      	b.n	800530a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005306:	2302      	movs	r3, #2
 8005308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005320:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005322:	f7ff f923 	bl	800456c <HAL_GetTick>
 8005326:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d008      	beq.n	8005346 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2280      	movs	r2, #128	@ 0x80
 8005338:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e052      	b.n	80053ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0216 	bic.w	r2, r2, #22
 8005354:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005364:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <HAL_DMA_Abort+0x62>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0208 	bic.w	r2, r2, #8
 8005384:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005396:	e013      	b.n	80053c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005398:	f7ff f8e8 	bl	800456c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d90c      	bls.n	80053c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2203      	movs	r2, #3
 80053b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e015      	b.n	80053ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e4      	bne.n	8005398 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d2:	223f      	movs	r2, #63	@ 0x3f
 80053d4:	409a      	lsls	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d004      	beq.n	8005412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2280      	movs	r2, #128	@ 0x80
 800540c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e00c      	b.n	800542c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2205      	movs	r2, #5
 8005416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005444:	4b8e      	ldr	r3, [pc, #568]	@ (8005680 <HAL_DMA_IRQHandler+0x248>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a8e      	ldr	r2, [pc, #568]	@ (8005684 <HAL_DMA_IRQHandler+0x24c>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0a9b      	lsrs	r3, r3, #10
 8005450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005462:	2208      	movs	r2, #8
 8005464:	409a      	lsls	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01a      	beq.n	80054a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d013      	beq.n	80054a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0204 	bic.w	r2, r2, #4
 800548a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005490:	2208      	movs	r2, #8
 8005492:	409a      	lsls	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549c:	f043 0201 	orr.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a8:	2201      	movs	r2, #1
 80054aa:	409a      	lsls	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d012      	beq.n	80054da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c6:	2201      	movs	r2, #1
 80054c8:	409a      	lsls	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d2:	f043 0202 	orr.w	r2, r3, #2
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054de:	2204      	movs	r2, #4
 80054e0:	409a      	lsls	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d012      	beq.n	8005510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fc:	2204      	movs	r2, #4
 80054fe:	409a      	lsls	r2, r3
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005514:	2210      	movs	r2, #16
 8005516:	409a      	lsls	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d043      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d03c      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005532:	2210      	movs	r2, #16
 8005534:	409a      	lsls	r2, r3
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d018      	beq.n	800557a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d108      	bne.n	8005568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d024      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	4798      	blx	r3
 8005566:	e01f      	b.n	80055a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
 8005578:	e016      	b.n	80055a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d107      	bne.n	8005598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0208 	bic.w	r2, r2, #8
 8005596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ac:	2220      	movs	r2, #32
 80055ae:	409a      	lsls	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 808f 	beq.w	80056d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8087 	beq.w	80056d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ce:	2220      	movs	r2, #32
 80055d0:	409a      	lsls	r2, r3
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d136      	bne.n	8005650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0216 	bic.w	r2, r2, #22
 80055f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <HAL_DMA_IRQHandler+0x1da>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0208 	bic.w	r2, r2, #8
 8005620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005626:	223f      	movs	r2, #63	@ 0x3f
 8005628:	409a      	lsls	r2, r3
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005642:	2b00      	cmp	r3, #0
 8005644:	d07e      	beq.n	8005744 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	4798      	blx	r3
        }
        return;
 800564e:	e079      	b.n	8005744 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01d      	beq.n	800569a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005670:	2b00      	cmp	r3, #0
 8005672:	d031      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
 800567c:	e02c      	b.n	80056d8 <HAL_DMA_IRQHandler+0x2a0>
 800567e:	bf00      	nop
 8005680:	20000004 	.word	0x20000004
 8005684:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d023      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	4798      	blx	r3
 8005698:	e01e      	b.n	80056d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10f      	bne.n	80056c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0210 	bic.w	r2, r2, #16
 80056b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d032      	beq.n	8005746 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d022      	beq.n	8005732 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2205      	movs	r2, #5
 80056f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	3301      	adds	r3, #1
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	429a      	cmp	r2, r3
 800570e:	d307      	bcc.n	8005720 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f2      	bne.n	8005704 <HAL_DMA_IRQHandler+0x2cc>
 800571e:	e000      	b.n	8005722 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005720:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	4798      	blx	r3
 8005742:	e000      	b.n	8005746 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005744:	bf00      	nop
    }
  }
}
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b40      	cmp	r3, #64	@ 0x40
 8005778:	d108      	bne.n	800578c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800578a:	e007      	b.n	800579c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	60da      	str	r2, [r3, #12]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	3b10      	subs	r3, #16
 80057b8:	4a14      	ldr	r2, [pc, #80]	@ (800580c <DMA_CalcBaseAndBitshift+0x64>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	091b      	lsrs	r3, r3, #4
 80057c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057c2:	4a13      	ldr	r2, [pc, #76]	@ (8005810 <DMA_CalcBaseAndBitshift+0x68>)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d909      	bls.n	80057ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80057de:	f023 0303 	bic.w	r3, r3, #3
 80057e2:	1d1a      	adds	r2, r3, #4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80057e8:	e007      	b.n	80057fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	aaaaaaab 	.word	0xaaaaaaab
 8005810:	080153dc 	.word	0x080153dc

08005814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11f      	bne.n	800586e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d856      	bhi.n	80058e2 <DMA_CheckFifoParam+0xce>
 8005834:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <DMA_CheckFifoParam+0x28>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	0800584d 	.word	0x0800584d
 8005840:	0800585f 	.word	0x0800585f
 8005844:	0800584d 	.word	0x0800584d
 8005848:	080058e3 	.word	0x080058e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d046      	beq.n	80058e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800585c:	e043      	b.n	80058e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005862:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005866:	d140      	bne.n	80058ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800586c:	e03d      	b.n	80058ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005876:	d121      	bne.n	80058bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d837      	bhi.n	80058ee <DMA_CheckFifoParam+0xda>
 800587e:	a201      	add	r2, pc, #4	@ (adr r2, 8005884 <DMA_CheckFifoParam+0x70>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	08005895 	.word	0x08005895
 8005888:	0800589b 	.word	0x0800589b
 800588c:	08005895 	.word	0x08005895
 8005890:	080058ad 	.word	0x080058ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      break;
 8005898:	e030      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d025      	beq.n	80058f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058aa:	e022      	b.n	80058f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058b4:	d11f      	bne.n	80058f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058ba:	e01c      	b.n	80058f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d903      	bls.n	80058ca <DMA_CheckFifoParam+0xb6>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d003      	beq.n	80058d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058c8:	e018      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
      break;
 80058ce:	e015      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
      break;
 80058e0:	e00b      	b.n	80058fa <DMA_CheckFifoParam+0xe6>
      break;
 80058e2:	bf00      	nop
 80058e4:	e00a      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058e6:	bf00      	nop
 80058e8:	e008      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058ea:	bf00      	nop
 80058ec:	e006      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058ee:	bf00      	nop
 80058f0:	e004      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058f2:	bf00      	nop
 80058f4:	e002      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;   
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058fa:	bf00      	nop
    }
  } 
  
  return status; 
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop

0800590c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	@ 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800591a:	2300      	movs	r3, #0
 800591c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800591e:	2300      	movs	r3, #0
 8005920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	e165      	b.n	8005bf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005928:	2201      	movs	r2, #1
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4013      	ands	r3, r2
 800593a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	429a      	cmp	r2, r3
 8005942:	f040 8154 	bne.w	8005bee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b01      	cmp	r3, #1
 8005950:	d005      	beq.n	800595e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800595a:	2b02      	cmp	r3, #2
 800595c:	d130      	bne.n	80059c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	2203      	movs	r2, #3
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4013      	ands	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4313      	orrs	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005994:	2201      	movs	r2, #1
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43db      	mvns	r3, r3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4013      	ands	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	f003 0201 	and.w	r2, r3, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d017      	beq.n	80059fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	2203      	movs	r2, #3
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4013      	ands	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d123      	bne.n	8005a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	08da      	lsrs	r2, r3, #3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3208      	adds	r2, #8
 8005a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	220f      	movs	r2, #15
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	08da      	lsrs	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3208      	adds	r2, #8
 8005a4a:	69b9      	ldr	r1, [r7, #24]
 8005a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 0203 	and.w	r2, r3, #3
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80ae 	beq.w	8005bee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	4b5d      	ldr	r3, [pc, #372]	@ (8005c0c <HAL_GPIO_Init+0x300>)
 8005a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8005c0c <HAL_GPIO_Init+0x300>)
 8005a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8005c0c <HAL_GPIO_Init+0x300>)
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aae:	4a58      	ldr	r2, [pc, #352]	@ (8005c10 <HAL_GPIO_Init+0x304>)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	089b      	lsrs	r3, r3, #2
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	220f      	movs	r2, #15
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8005c14 <HAL_GPIO_Init+0x308>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d025      	beq.n	8005b26 <HAL_GPIO_Init+0x21a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a4e      	ldr	r2, [pc, #312]	@ (8005c18 <HAL_GPIO_Init+0x30c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01f      	beq.n	8005b22 <HAL_GPIO_Init+0x216>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8005c1c <HAL_GPIO_Init+0x310>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d019      	beq.n	8005b1e <HAL_GPIO_Init+0x212>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a4c      	ldr	r2, [pc, #304]	@ (8005c20 <HAL_GPIO_Init+0x314>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <HAL_GPIO_Init+0x20e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a4b      	ldr	r2, [pc, #300]	@ (8005c24 <HAL_GPIO_Init+0x318>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00d      	beq.n	8005b16 <HAL_GPIO_Init+0x20a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a4a      	ldr	r2, [pc, #296]	@ (8005c28 <HAL_GPIO_Init+0x31c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d007      	beq.n	8005b12 <HAL_GPIO_Init+0x206>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a49      	ldr	r2, [pc, #292]	@ (8005c2c <HAL_GPIO_Init+0x320>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d101      	bne.n	8005b0e <HAL_GPIO_Init+0x202>
 8005b0a:	2306      	movs	r3, #6
 8005b0c:	e00c      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b0e:	2307      	movs	r3, #7
 8005b10:	e00a      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b12:	2305      	movs	r3, #5
 8005b14:	e008      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b16:	2304      	movs	r3, #4
 8005b18:	e006      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e004      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e002      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <HAL_GPIO_Init+0x21c>
 8005b26:	2300      	movs	r3, #0
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	f002 0203 	and.w	r2, r2, #3
 8005b2e:	0092      	lsls	r2, r2, #2
 8005b30:	4093      	lsls	r3, r2
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b38:	4935      	ldr	r1, [pc, #212]	@ (8005c10 <HAL_GPIO_Init+0x304>)
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	089b      	lsrs	r3, r3, #2
 8005b3e:	3302      	adds	r3, #2
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b46:	4b3a      	ldr	r3, [pc, #232]	@ (8005c30 <HAL_GPIO_Init+0x324>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b6a:	4a31      	ldr	r2, [pc, #196]	@ (8005c30 <HAL_GPIO_Init+0x324>)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b70:	4b2f      	ldr	r3, [pc, #188]	@ (8005c30 <HAL_GPIO_Init+0x324>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b94:	4a26      	ldr	r2, [pc, #152]	@ (8005c30 <HAL_GPIO_Init+0x324>)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b9a:	4b25      	ldr	r3, [pc, #148]	@ (8005c30 <HAL_GPIO_Init+0x324>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8005c30 <HAL_GPIO_Init+0x324>)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c30 <HAL_GPIO_Init+0x324>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005be8:	4a11      	ldr	r2, [pc, #68]	@ (8005c30 <HAL_GPIO_Init+0x324>)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	f67f ae96 	bls.w	8005928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	3724      	adds	r7, #36	@ 0x24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	40013800 	.word	0x40013800
 8005c14:	40020000 	.word	0x40020000
 8005c18:	40020400 	.word	0x40020400
 8005c1c:	40020800 	.word	0x40020800
 8005c20:	40020c00 	.word	0x40020c00
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40021400 	.word	0x40021400
 8005c2c:	40021800 	.word	0x40021800
 8005c30:	40013c00 	.word	0x40013c00

08005c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	807b      	strh	r3, [r7, #2]
 8005c40:	4613      	mov	r3, r2
 8005c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c44:	787b      	ldrb	r3, [r7, #1]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c4a:	887a      	ldrh	r2, [r7, #2]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c50:	e003      	b.n	8005c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c52:	887b      	ldrh	r3, [r7, #2]
 8005c54:	041a      	lsls	r2, r3, #16
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	619a      	str	r2, [r3, #24]
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e12b      	b.n	8005ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fe f824 	bl	8003cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2224      	movs	r2, #36	@ 0x24
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ccc:	f001 fc9e 	bl	800760c <HAL_RCC_GetPCLK1Freq>
 8005cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4a81      	ldr	r2, [pc, #516]	@ (8005edc <HAL_I2C_Init+0x274>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d807      	bhi.n	8005cec <HAL_I2C_Init+0x84>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4a80      	ldr	r2, [pc, #512]	@ (8005ee0 <HAL_I2C_Init+0x278>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	bf94      	ite	ls
 8005ce4:	2301      	movls	r3, #1
 8005ce6:	2300      	movhi	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	e006      	b.n	8005cfa <HAL_I2C_Init+0x92>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4a7d      	ldr	r2, [pc, #500]	@ (8005ee4 <HAL_I2C_Init+0x27c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	bf94      	ite	ls
 8005cf4:	2301      	movls	r3, #1
 8005cf6:	2300      	movhi	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e0e7      	b.n	8005ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a78      	ldr	r2, [pc, #480]	@ (8005ee8 <HAL_I2C_Init+0x280>)
 8005d06:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0a:	0c9b      	lsrs	r3, r3, #18
 8005d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4a6a      	ldr	r2, [pc, #424]	@ (8005edc <HAL_I2C_Init+0x274>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d802      	bhi.n	8005d3c <HAL_I2C_Init+0xd4>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	e009      	b.n	8005d50 <HAL_I2C_Init+0xe8>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	4a69      	ldr	r2, [pc, #420]	@ (8005eec <HAL_I2C_Init+0x284>)
 8005d48:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4c:	099b      	lsrs	r3, r3, #6
 8005d4e:	3301      	adds	r3, #1
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6812      	ldr	r2, [r2, #0]
 8005d54:	430b      	orrs	r3, r1
 8005d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005d62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	495c      	ldr	r1, [pc, #368]	@ (8005edc <HAL_I2C_Init+0x274>)
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	d819      	bhi.n	8005da4 <HAL_I2C_Init+0x13c>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	1e59      	subs	r1, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d84:	400b      	ands	r3, r1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_I2C_Init+0x138>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1e59      	subs	r1, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d98:	3301      	adds	r3, #1
 8005d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d9e:	e051      	b.n	8005e44 <HAL_I2C_Init+0x1dc>
 8005da0:	2304      	movs	r3, #4
 8005da2:	e04f      	b.n	8005e44 <HAL_I2C_Init+0x1dc>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d111      	bne.n	8005dd0 <HAL_I2C_Init+0x168>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	1e58      	subs	r0, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6859      	ldr	r1, [r3, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	440b      	add	r3, r1
 8005dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2301      	moveq	r3, #1
 8005dca:	2300      	movne	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	e012      	b.n	8005df6 <HAL_I2C_Init+0x18e>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1e58      	subs	r0, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6859      	ldr	r1, [r3, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	0099      	lsls	r1, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005de6:	3301      	adds	r3, #1
 8005de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_I2C_Init+0x196>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e022      	b.n	8005e44 <HAL_I2C_Init+0x1dc>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10e      	bne.n	8005e24 <HAL_I2C_Init+0x1bc>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1e58      	subs	r0, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	440b      	add	r3, r1
 8005e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e22:	e00f      	b.n	8005e44 <HAL_I2C_Init+0x1dc>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1e58      	subs	r0, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6859      	ldr	r1, [r3, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	0099      	lsls	r1, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	6809      	ldr	r1, [r1, #0]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69da      	ldr	r2, [r3, #28]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005e72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6911      	ldr	r1, [r2, #16]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68d2      	ldr	r2, [r2, #12]
 8005e7e:	4311      	orrs	r1, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	000186a0 	.word	0x000186a0
 8005ee0:	001e847f 	.word	0x001e847f
 8005ee4:	003d08ff 	.word	0x003d08ff
 8005ee8:	431bde83 	.word	0x431bde83
 8005eec:	10624dd3 	.word	0x10624dd3

08005ef0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e108      	b.n	8006114 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d106      	bne.n	8005f22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f008 f8b5 	bl	800e08c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2203      	movs	r2, #3
 8005f26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f30:	d102      	bne.n	8005f38 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f004 fc78 	bl	800a832 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	7c1a      	ldrb	r2, [r3, #16]
 8005f4a:	f88d 2000 	strb.w	r2, [sp]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f52:	f004 fb57 	bl	800a604 <USB_CoreInit>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0d5      	b.n	8006114 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f004 fc70 	bl	800a854 <USB_SetCurrentMode>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e0c6      	b.n	8006114 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e04a      	b.n	8006022 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f8c:	7bfa      	ldrb	r2, [r7, #15]
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	3315      	adds	r3, #21
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fa0:	7bfa      	ldrb	r2, [r7, #15]
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	3314      	adds	r3, #20
 8005fb0:	7bfa      	ldrb	r2, [r7, #15]
 8005fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005fb4:	7bfa      	ldrb	r2, [r7, #15]
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	b298      	uxth	r0, r3
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	332e      	adds	r3, #46	@ 0x2e
 8005fc8:	4602      	mov	r2, r0
 8005fca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fcc:	7bfa      	ldrb	r2, [r7, #15]
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	3318      	adds	r3, #24
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fe0:	7bfa      	ldrb	r2, [r7, #15]
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	331c      	adds	r3, #28
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ff4:	7bfa      	ldrb	r2, [r7, #15]
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	3320      	adds	r3, #32
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006008:	7bfa      	ldrb	r2, [r7, #15]
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	4613      	mov	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	3324      	adds	r3, #36	@ 0x24
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	3301      	adds	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	791b      	ldrb	r3, [r3, #4]
 8006026:	7bfa      	ldrb	r2, [r7, #15]
 8006028:	429a      	cmp	r2, r3
 800602a:	d3af      	bcc.n	8005f8c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800602c:	2300      	movs	r3, #0
 800602e:	73fb      	strb	r3, [r7, #15]
 8006030:	e044      	b.n	80060bc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006032:	7bfa      	ldrb	r2, [r7, #15]
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006048:	7bfa      	ldrb	r2, [r7, #15]
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4613      	mov	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800605a:	7bfa      	ldrb	r2, [r7, #15]
 800605c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800605e:	7bfa      	ldrb	r2, [r7, #15]
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006074:	7bfa      	ldrb	r2, [r7, #15]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800608a:	7bfa      	ldrb	r2, [r7, #15]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	4413      	add	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060a0:	7bfa      	ldrb	r2, [r7, #15]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	3301      	adds	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	791b      	ldrb	r3, [r3, #4]
 80060c0:	7bfa      	ldrb	r2, [r7, #15]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d3b5      	bcc.n	8006032 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7c1a      	ldrb	r2, [r3, #16]
 80060ce:	f88d 2000 	strb.w	r2, [sp]
 80060d2:	3304      	adds	r3, #4
 80060d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060d6:	f004 fc09 	bl	800a8ec <USB_DevInit>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e013      	b.n	8006114 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	7b1b      	ldrb	r3, [r3, #12]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d102      	bne.n	8006108 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 f96c 	bl	80073e0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f005 fc40 	bl	800b992 <USB_DevDisconnect>

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_PCD_Start+0x1c>
 8006134:	2302      	movs	r3, #2
 8006136:	e022      	b.n	800617e <HAL_PCD_Start+0x62>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006150:	2b01      	cmp	r3, #1
 8006152:	d105      	bne.n	8006160 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006158:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f004 fb53 	bl	800a810 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f005 fbee 	bl	800b950 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006186:	b590      	push	{r4, r7, lr}
 8006188:	b08d      	sub	sp, #52	@ 0x34
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f005 fcac 	bl	800bafa <USB_GetMode>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f040 84b9 	bne.w	8006b1c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f005 fc10 	bl	800b9d4 <USB_ReadInterrupts>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 84af 	beq.w	8006b1a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f005 fbfd 	bl	800b9d4 <USB_ReadInterrupts>
 80061da:	4603      	mov	r3, r0
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d107      	bne.n	80061f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f002 0202 	and.w	r2, r2, #2
 80061f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f005 fbeb 	bl	800b9d4 <USB_ReadInterrupts>
 80061fe:	4603      	mov	r3, r0
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b10      	cmp	r3, #16
 8006206:	d161      	bne.n	80062cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0210 	bic.w	r2, r2, #16
 8006216:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	f003 020f 	and.w	r2, r3, #15
 8006224:	4613      	mov	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	4413      	add	r3, r2
 8006234:	3304      	adds	r3, #4
 8006236:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	0c5b      	lsrs	r3, r3, #17
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	2b02      	cmp	r3, #2
 8006242:	d124      	bne.n	800628e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800624a:	4013      	ands	r3, r2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d035      	beq.n	80062bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	091b      	lsrs	r3, r3, #4
 8006258:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800625a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800625e:	b29b      	uxth	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	6a38      	ldr	r0, [r7, #32]
 8006264:	f005 fa22 	bl	800b6ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	091b      	lsrs	r3, r3, #4
 8006270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006274:	441a      	add	r2, r3
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	695a      	ldr	r2, [r3, #20]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006286:	441a      	add	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	615a      	str	r2, [r3, #20]
 800628c:	e016      	b.n	80062bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	0c5b      	lsrs	r3, r3, #17
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	2b06      	cmp	r3, #6
 8006298:	d110      	bne.n	80062bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062a0:	2208      	movs	r2, #8
 80062a2:	4619      	mov	r1, r3
 80062a4:	6a38      	ldr	r0, [r7, #32]
 80062a6:	f005 fa01 	bl	800b6ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	695a      	ldr	r2, [r3, #20]
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062b6:	441a      	add	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0210 	orr.w	r2, r2, #16
 80062ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f005 fb7f 	bl	800b9d4 <USB_ReadInterrupts>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80062e0:	f040 80a7 	bne.w	8006432 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f005 fb84 	bl	800b9fa <USB_ReadDevAllOutEpInterrupt>
 80062f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80062f4:	e099      	b.n	800642a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80062f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 808e 	beq.w	800641e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f005 fba8 	bl	800ba62 <USB_ReadDevOutEPInterrupt>
 8006312:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	461a      	mov	r2, r3
 800632c:	2301      	movs	r3, #1
 800632e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006330:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fece 	bl	80070d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634e:	461a      	mov	r2, r3
 8006350:	2308      	movs	r3, #8
 8006352:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006354:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 ffa4 	bl	80072a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b00      	cmp	r3, #0
 8006364:	d008      	beq.n	8006378 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006372:	461a      	mov	r2, r3
 8006374:	2310      	movs	r3, #16
 8006376:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d030      	beq.n	80063e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638a:	2b80      	cmp	r3, #128	@ 0x80
 800638c:	d109      	bne.n	80063a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800639c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80063a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a4:	4613      	mov	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4413      	add	r3, r2
 80063b4:	3304      	adds	r3, #4
 80063b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	78db      	ldrb	r3, [r3, #3]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d108      	bne.n	80063d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2200      	movs	r2, #0
 80063c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f007 ff79 	bl	800e2c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063de:	461a      	mov	r2, r3
 80063e0:	2302      	movs	r3, #2
 80063e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fa:	461a      	mov	r2, r3
 80063fc:	2320      	movs	r3, #32
 80063fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d009      	beq.n	800641e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006416:	461a      	mov	r2, r3
 8006418:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800641c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	3301      	adds	r3, #1
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	085b      	lsrs	r3, r3, #1
 8006428:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800642a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642c:	2b00      	cmp	r3, #0
 800642e:	f47f af62 	bne.w	80062f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f005 facc 	bl	800b9d4 <USB_ReadInterrupts>
 800643c:	4603      	mov	r3, r0
 800643e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006446:	f040 80db 	bne.w	8006600 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f005 faed 	bl	800ba2e <USB_ReadDevAllInEpInterrupt>
 8006454:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800645a:	e0cd      	b.n	80065f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 80c2 	beq.w	80065ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	4611      	mov	r1, r2
 8006472:	4618      	mov	r0, r3
 8006474:	f005 fb13 	bl	800ba9e <USB_ReadDevInEPInterrupt>
 8006478:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d057      	beq.n	8006534 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	2201      	movs	r2, #1
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	43db      	mvns	r3, r3
 800649e:	69f9      	ldr	r1, [r7, #28]
 80064a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064a4:	4013      	ands	r3, r2
 80064a6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b4:	461a      	mov	r2, r3
 80064b6:	2301      	movs	r3, #1
 80064b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	799b      	ldrb	r3, [r3, #6]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d132      	bne.n	8006528 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c6:	4613      	mov	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	3320      	adds	r3, #32
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d8:	4613      	mov	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4403      	add	r3, r0
 80064e2:	331c      	adds	r3, #28
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4419      	add	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ec:	4613      	mov	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4403      	add	r3, r0
 80064f6:	3320      	adds	r3, #32
 80064f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d113      	bne.n	8006528 <HAL_PCD_IRQHandler+0x3a2>
 8006500:	6879      	ldr	r1, [r7, #4]
 8006502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006504:	4613      	mov	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	3324      	adds	r3, #36	@ 0x24
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d108      	bne.n	8006528 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006520:	461a      	mov	r2, r3
 8006522:	2101      	movs	r1, #1
 8006524:	f005 fb1a 	bl	800bb5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f007 fe43 	bl	800e1ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d008      	beq.n	8006550 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654a:	461a      	mov	r2, r3
 800654c:	2308      	movs	r3, #8
 800654e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006566:	461a      	mov	r2, r3
 8006568:	2310      	movs	r3, #16
 800656a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006582:	461a      	mov	r2, r3
 8006584:	2340      	movs	r3, #64	@ 0x40
 8006586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d023      	beq.n	80065da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006594:	6a38      	ldr	r0, [r7, #32]
 8006596:	f004 fb07 	bl	800aba8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800659a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800659c:	4613      	mov	r3, r2
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	3310      	adds	r3, #16
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	3304      	adds	r3, #4
 80065ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	78db      	ldrb	r3, [r3, #3]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d108      	bne.n	80065c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2200      	movs	r2, #0
 80065ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f007 fe90 	bl	800e2e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d4:	461a      	mov	r2, r3
 80065d6:	2302      	movs	r3, #2
 80065d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80065e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fce8 	bl	8006fbc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	3301      	adds	r3, #1
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80065f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f47f af2e 	bne.w	800645c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f005 f9e5 	bl	800b9d4 <USB_ReadInterrupts>
 800660a:	4603      	mov	r3, r0
 800660c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006614:	d122      	bne.n	800665c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	69fa      	ldr	r2, [r7, #28]
 8006620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006630:	2b01      	cmp	r3, #1
 8006632:	d108      	bne.n	8006646 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800663c:	2100      	movs	r1, #0
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f008 f80a 	bl	800e658 <HAL_PCDEx_LPM_Callback>
 8006644:	e002      	b.n	800664c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f007 fe2e 	bl	800e2a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695a      	ldr	r2, [r3, #20]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800665a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f005 f9b7 	bl	800b9d4 <USB_ReadInterrupts>
 8006666:	4603      	mov	r3, r0
 8006668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800666c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006670:	d112      	bne.n	8006698 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b01      	cmp	r3, #1
 8006680:	d102      	bne.n	8006688 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f007 fdea 	bl	800e25c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006696:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f005 f999 	bl	800b9d4 <USB_ReadInterrupts>
 80066a2:	4603      	mov	r3, r0
 80066a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ac:	d121      	bne.n	80066f2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695a      	ldr	r2, [r3, #20]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80066bc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d111      	bne.n	80066ec <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	f003 020f 	and.w	r2, r3, #15
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80066e2:	2101      	movs	r1, #1
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f007 ffb7 	bl	800e658 <HAL_PCDEx_LPM_Callback>
 80066ea:	e002      	b.n	80066f2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f007 fdb5 	bl	800e25c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f005 f96c 	bl	800b9d4 <USB_ReadInterrupts>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006706:	f040 80b7 	bne.w	8006878 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2110      	movs	r1, #16
 8006724:	4618      	mov	r0, r3
 8006726:	f004 fa3f 	bl	800aba8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800672a:	2300      	movs	r3, #0
 800672c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800672e:	e046      	b.n	80067be <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800673c:	461a      	mov	r2, r3
 800673e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006742:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800675e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006762:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006770:	461a      	mov	r2, r3
 8006772:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006776:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006792:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006796:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ba:	3301      	adds	r3, #1
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	791b      	ldrb	r3, [r3, #4]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d3b2      	bcc.n	8006730 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80067dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7bdb      	ldrb	r3, [r3, #15]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d016      	beq.n	8006814 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067f6:	f043 030b 	orr.w	r3, r3, #11
 80067fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800680c:	f043 030b 	orr.w	r3, r3, #11
 8006810:	6453      	str	r3, [r2, #68]	@ 0x44
 8006812:	e015      	b.n	8006840 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006822:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006826:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800682a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800683a:	f043 030b 	orr.w	r3, r3, #11
 800683e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800684e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006852:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6818      	ldr	r0, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006862:	461a      	mov	r2, r3
 8006864:	f005 f97a 	bl	800bb5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	f005 f8a9 	bl	800b9d4 <USB_ReadInterrupts>
 8006882:	4603      	mov	r3, r0
 8006884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800688c:	d123      	bne.n	80068d6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f005 f93f 	bl	800bb16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f004 f9fc 	bl	800ac9a <USB_GetDevSpeed>
 80068a2:	4603      	mov	r3, r0
 80068a4:	461a      	mov	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681c      	ldr	r4, [r3, #0]
 80068ae:	f000 fea1 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 80068b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068b8:	461a      	mov	r2, r3
 80068ba:	4620      	mov	r0, r4
 80068bc:	f003 ff06 	bl	800a6cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f007 fca2 	bl	800e20a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695a      	ldr	r2, [r3, #20]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80068d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f005 f87a 	bl	800b9d4 <USB_ReadInterrupts>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d10a      	bne.n	8006900 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f007 fc7f 	bl	800e1ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695a      	ldr	r2, [r3, #20]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f002 0208 	and.w	r2, r2, #8
 80068fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f005 f865 	bl	800b9d4 <USB_ReadInterrupts>
 800690a:	4603      	mov	r3, r0
 800690c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006910:	2b80      	cmp	r3, #128	@ 0x80
 8006912:	d123      	bne.n	800695c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006920:	2301      	movs	r3, #1
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
 8006924:	e014      	b.n	8006950 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800692a:	4613      	mov	r3, r2
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d105      	bne.n	800694a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	b2db      	uxtb	r3, r3
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fb08 	bl	8006f5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	3301      	adds	r3, #1
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	791b      	ldrb	r3, [r3, #4]
 8006954:	461a      	mov	r2, r3
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	4293      	cmp	r3, r2
 800695a:	d3e4      	bcc.n	8006926 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f005 f837 	bl	800b9d4 <USB_ReadInterrupts>
 8006966:	4603      	mov	r3, r0
 8006968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800696c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006970:	d13c      	bne.n	80069ec <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006972:	2301      	movs	r3, #1
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
 8006976:	e02b      	b.n	80069d0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698c:	4613      	mov	r3, r2
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	3318      	adds	r3, #24
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d115      	bne.n	80069ca <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800699e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	da12      	bge.n	80069ca <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a8:	4613      	mov	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	3317      	adds	r3, #23
 80069b4:	2201      	movs	r2, #1
 80069b6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80069b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fac8 	bl	8006f5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	3301      	adds	r3, #1
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	791b      	ldrb	r3, [r3, #4]
 80069d4:	461a      	mov	r2, r3
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	4293      	cmp	r3, r2
 80069da:	d3cd      	bcc.n	8006978 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80069ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f004 ffef 	bl	800b9d4 <USB_ReadInterrupts>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a00:	d156      	bne.n	8006ab0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a02:	2301      	movs	r3, #1
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a06:	e045      	b.n	8006a94 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d12e      	bne.n	8006a8e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006a30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da2b      	bge.n	8006a8e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006a42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d121      	bne.n	8006a8e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a4e:	4613      	mov	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a8a:	6053      	str	r3, [r2, #4]
            break;
 8006a8c:	e008      	b.n	8006aa0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	3301      	adds	r3, #1
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	791b      	ldrb	r3, [r3, #4]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d3b3      	bcc.n	8006a08 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f004 ff8d 	bl	800b9d4 <USB_ReadInterrupts>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac4:	d10a      	bne.n	8006adc <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f007 fc20 	bl	800e30c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695a      	ldr	r2, [r3, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f004 ff77 	bl	800b9d4 <USB_ReadInterrupts>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d115      	bne.n	8006b1c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f007 fc10 	bl	800e328 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6859      	ldr	r1, [r3, #4]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]
 8006b18:	e000      	b.n	8006b1c <HAL_PCD_IRQHandler+0x996>
      return;
 8006b1a:	bf00      	nop
    }
  }
}
 8006b1c:	3734      	adds	r7, #52	@ 0x34
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd90      	pop	{r4, r7, pc}

08006b22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_PCD_SetAddress+0x1a>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e012      	b.n	8006b62 <HAL_PCD_SetAddress+0x40>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	78fa      	ldrb	r2, [r7, #3]
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f004 fed6 	bl	800b904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	4608      	mov	r0, r1
 8006b74:	4611      	mov	r1, r2
 8006b76:	461a      	mov	r2, r3
 8006b78:	4603      	mov	r3, r0
 8006b7a:	70fb      	strb	r3, [r7, #3]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	803b      	strh	r3, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	da0f      	bge.n	8006bb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	f003 020f 	and.w	r2, r3, #15
 8006b96:	4613      	mov	r3, r2
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	3310      	adds	r3, #16
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	705a      	strb	r2, [r3, #1]
 8006bae:	e00f      	b.n	8006bd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006bdc:	883a      	ldrh	r2, [r7, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	78ba      	ldrb	r2, [r7, #2]
 8006be6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	785b      	ldrb	r3, [r3, #1]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006bfa:	78bb      	ldrb	r3, [r7, #2]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d102      	bne.n	8006c06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_PCD_EP_Open+0xaa>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e00e      	b.n	8006c32 <HAL_PCD_EP_Open+0xc8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68f9      	ldr	r1, [r7, #12]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f004 f85e 	bl	800ace4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006c30:	7afb      	ldrb	r3, [r7, #11]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da0f      	bge.n	8006c6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	f003 020f 	and.w	r2, r3, #15
 8006c54:	4613      	mov	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	3310      	adds	r3, #16
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	4413      	add	r3, r2
 8006c62:	3304      	adds	r3, #4
 8006c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	705a      	strb	r2, [r3, #1]
 8006c6c:	e00f      	b.n	8006c8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c6e:	78fb      	ldrb	r3, [r7, #3]
 8006c70:	f003 020f 	and.w	r2, r3, #15
 8006c74:	4613      	mov	r3, r2
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	4413      	add	r3, r2
 8006c84:	3304      	adds	r3, #4
 8006c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_PCD_EP_Close+0x6e>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e00e      	b.n	8006cc6 <HAL_PCD_EP_Close+0x8c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68f9      	ldr	r1, [r7, #12]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f004 f89c 	bl	800adf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cde:	7afb      	ldrb	r3, [r7, #11]
 8006ce0:	f003 020f 	and.w	r2, r3, #15
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2200      	movs	r2, #0
 8006d08:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	799b      	ldrb	r3, [r3, #6]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d102      	bne.n	8006d2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	799b      	ldrb	r3, [r3, #6]
 8006d32:	461a      	mov	r2, r3
 8006d34:	6979      	ldr	r1, [r7, #20]
 8006d36:	f004 f939 	bl	800afac <USB_EPStartXfer>

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	f003 020f 	and.w	r2, r3, #15
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	460b      	mov	r3, r1
 8006d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d84:	7afb      	ldrb	r3, [r7, #11]
 8006d86:	f003 020f 	and.w	r2, r3, #15
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	3310      	adds	r3, #16
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	3304      	adds	r3, #4
 8006d9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2200      	movs	r2, #0
 8006dac:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2201      	movs	r2, #1
 8006db2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006db4:	7afb      	ldrb	r3, [r7, #11]
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	799b      	ldrb	r3, [r3, #6]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d102      	bne.n	8006dce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	799b      	ldrb	r3, [r3, #6]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6979      	ldr	r1, [r7, #20]
 8006dda:	f004 f8e7 	bl	800afac <USB_EPStartXfer>

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	f003 030f 	and.w	r3, r3, #15
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	7912      	ldrb	r2, [r2, #4]
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d901      	bls.n	8006e06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e04f      	b.n	8006ea6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da0f      	bge.n	8006e2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	f003 020f 	and.w	r2, r3, #15
 8006e14:	4613      	mov	r3, r2
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	3310      	adds	r3, #16
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	3304      	adds	r3, #4
 8006e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	705a      	strb	r2, [r3, #1]
 8006e2c:	e00d      	b.n	8006e4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	4613      	mov	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	4413      	add	r3, r2
 8006e40:	3304      	adds	r3, #4
 8006e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <HAL_PCD_EP_SetStall+0x82>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e01d      	b.n	8006ea6 <HAL_PCD_EP_SetStall+0xbe>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f004 fc6f 	bl	800b75c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	f003 030f 	and.w	r3, r3, #15
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7999      	ldrb	r1, [r3, #6]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e96:	461a      	mov	r2, r3
 8006e98:	f004 fe60 	bl	800bb5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	7912      	ldrb	r2, [r2, #4]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d901      	bls.n	8006ecc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e042      	b.n	8006f52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da0f      	bge.n	8006ef4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	f003 020f 	and.w	r2, r3, #15
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	3310      	adds	r3, #16
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3304      	adds	r3, #4
 8006eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	705a      	strb	r2, [r3, #1]
 8006ef2:	e00f      	b.n	8006f14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	f003 020f 	and.w	r2, r3, #15
 8006efa:	4613      	mov	r3, r2
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	4413      	add	r3, r2
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_PCD_EP_ClrStall+0x86>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e00e      	b.n	8006f52 <HAL_PCD_EP_ClrStall+0xa4>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68f9      	ldr	r1, [r7, #12]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f004 fc78 	bl	800b838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da0c      	bge.n	8006f88 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	f003 020f 	and.w	r2, r3, #15
 8006f74:	4613      	mov	r3, r2
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	3310      	adds	r3, #16
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	4413      	add	r3, r2
 8006f82:	3304      	adds	r3, #4
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	e00c      	b.n	8006fa2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	f003 020f 	and.w	r2, r3, #15
 8006f8e:	4613      	mov	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68f9      	ldr	r1, [r7, #12]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f004 fa97 	bl	800b4dc <USB_EPStopXfer>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006fb2:	7afb      	ldrb	r3, [r7, #11]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	@ 0x28
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	3310      	adds	r3, #16
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	4413      	add	r3, r2
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	695a      	ldr	r2, [r3, #20]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d901      	bls.n	8006ff4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e06b      	b.n	80070cc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	691a      	ldr	r2, [r3, #16]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	429a      	cmp	r2, r3
 8007008:	d902      	bls.n	8007010 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	3303      	adds	r3, #3
 8007014:	089b      	lsrs	r3, r3, #2
 8007016:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007018:	e02a      	b.n	8007070 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	429a      	cmp	r2, r3
 800702e:	d902      	bls.n	8007036 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3303      	adds	r3, #3
 800703a:	089b      	lsrs	r3, r3, #2
 800703c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68d9      	ldr	r1, [r3, #12]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	4603      	mov	r3, r0
 8007052:	6978      	ldr	r0, [r7, #20]
 8007054:	f004 faec 	bl	800b630 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	441a      	add	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	695a      	ldr	r2, [r3, #20]
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	441a      	add	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	429a      	cmp	r2, r3
 8007084:	d809      	bhi.n	800709a <PCD_WriteEmptyTxFifo+0xde>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	695a      	ldr	r2, [r3, #20]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800708e:	429a      	cmp	r2, r3
 8007090:	d203      	bcs.n	800709a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1bf      	bne.n	800701a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	691a      	ldr	r2, [r3, #16]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d811      	bhi.n	80070ca <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	2201      	movs	r2, #1
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	43db      	mvns	r3, r3
 80070c0:	6939      	ldr	r1, [r7, #16]
 80070c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070c6:	4013      	ands	r3, r2
 80070c8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3720      	adds	r7, #32
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	333c      	adds	r3, #60	@ 0x3c
 80070ec:	3304      	adds	r3, #4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	799b      	ldrb	r3, [r3, #6]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d17b      	bne.n	8007202 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f003 0308 	and.w	r3, r3, #8
 8007110:	2b00      	cmp	r3, #0
 8007112:	d015      	beq.n	8007140 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4a61      	ldr	r2, [pc, #388]	@ (800729c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007118:	4293      	cmp	r3, r2
 800711a:	f240 80b9 	bls.w	8007290 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 80b3 	beq.w	8007290 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007136:	461a      	mov	r2, r3
 8007138:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800713c:	6093      	str	r3, [r2, #8]
 800713e:	e0a7      	b.n	8007290 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007156:	461a      	mov	r2, r3
 8007158:	2320      	movs	r3, #32
 800715a:	6093      	str	r3, [r2, #8]
 800715c:	e098      	b.n	8007290 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007164:	2b00      	cmp	r3, #0
 8007166:	f040 8093 	bne.w	8007290 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	4a4b      	ldr	r2, [pc, #300]	@ (800729c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d90f      	bls.n	8007192 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007188:	461a      	mov	r2, r3
 800718a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800718e:	6093      	str	r3, [r2, #8]
 8007190:	e07e      	b.n	8007290 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	4413      	add	r3, r2
 80071a4:	3304      	adds	r3, #4
 80071a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1a      	ldr	r2, [r3, #32]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	0159      	lsls	r1, r3, #5
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	440b      	add	r3, r1
 80071b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d114      	bne.n	80071f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d109      	bne.n	80071e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071dc:	461a      	mov	r2, r3
 80071de:	2101      	movs	r1, #1
 80071e0:	f004 fcbc 	bl	800bb5c <USB_EP0_OutStart>
 80071e4:	e006      	b.n	80071f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	441a      	add	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f006 ffc2 	bl	800e184 <HAL_PCD_DataOutStageCallback>
 8007200:	e046      	b.n	8007290 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	4a26      	ldr	r2, [pc, #152]	@ (80072a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d124      	bne.n	8007254 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	461a      	mov	r2, r3
 8007222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007226:	6093      	str	r3, [r2, #8]
 8007228:	e032      	b.n	8007290 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007240:	461a      	mov	r2, r3
 8007242:	2320      	movs	r3, #32
 8007244:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f006 ff99 	bl	800e184 <HAL_PCD_DataOutStageCallback>
 8007252:	e01d      	b.n	8007290 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d114      	bne.n	8007284 <PCD_EP_OutXfrComplete_int+0x1b0>
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	4613      	mov	r3, r2
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d108      	bne.n	8007284 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800727c:	461a      	mov	r2, r3
 800727e:	2100      	movs	r1, #0
 8007280:	f004 fc6c 	bl	800bb5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f006 ff7a 	bl	800e184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	4f54300a 	.word	0x4f54300a
 80072a0:	4f54310a 	.word	0x4f54310a

080072a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	333c      	adds	r3, #60	@ 0x3c
 80072bc:	3304      	adds	r3, #4
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a15      	ldr	r2, [pc, #84]	@ (800732c <PCD_EP_OutSetupPacket_int+0x88>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d90e      	bls.n	80072f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d009      	beq.n	80072f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f0:	461a      	mov	r2, r3
 80072f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f006 ff31 	bl	800e160 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4a0a      	ldr	r2, [pc, #40]	@ (800732c <PCD_EP_OutSetupPacket_int+0x88>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d90c      	bls.n	8007320 <PCD_EP_OutSetupPacket_int+0x7c>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	799b      	ldrb	r3, [r3, #6]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d108      	bne.n	8007320 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007318:	461a      	mov	r2, r3
 800731a:	2101      	movs	r1, #1
 800731c:	f004 fc1e 	bl	800bb5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	4f54300a 	.word	0x4f54300a

08007330 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
 800733c:	4613      	mov	r3, r2
 800733e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007348:	78fb      	ldrb	r3, [r7, #3]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d107      	bne.n	800735e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800734e:	883b      	ldrh	r3, [r7, #0]
 8007350:	0419      	lsls	r1, r3, #16
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	430a      	orrs	r2, r1
 800735a:	629a      	str	r2, [r3, #40]	@ 0x28
 800735c:	e028      	b.n	80073b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	4413      	add	r3, r2
 800736a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
 8007370:	e00d      	b.n	800738e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	3340      	adds	r3, #64	@ 0x40
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	0c1b      	lsrs	r3, r3, #16
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	4413      	add	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	3301      	adds	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
 800738e:	7bfa      	ldrb	r2, [r7, #15]
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	3b01      	subs	r3, #1
 8007394:	429a      	cmp	r2, r3
 8007396:	d3ec      	bcc.n	8007372 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007398:	883b      	ldrh	r3, [r7, #0]
 800739a:	0418      	lsls	r0, r3, #16
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6819      	ldr	r1, [r3, #0]
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	4302      	orrs	r2, r0
 80073a8:	3340      	adds	r3, #64	@ 0x40
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	887a      	ldrh	r2, [r7, #2]
 80073d0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007412:	f043 0303 	orr.w	r3, r3, #3
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e0cc      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800743c:	4b68      	ldr	r3, [pc, #416]	@ (80075e0 <HAL_RCC_ClockConfig+0x1b8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 030f 	and.w	r3, r3, #15
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d90c      	bls.n	8007464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800744a:	4b65      	ldr	r3, [pc, #404]	@ (80075e0 <HAL_RCC_ClockConfig+0x1b8>)
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007452:	4b63      	ldr	r3, [pc, #396]	@ (80075e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d001      	beq.n	8007464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e0b8      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d020      	beq.n	80074b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800747c:	4b59      	ldr	r3, [pc, #356]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	4a58      	ldr	r2, [pc, #352]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007494:	4b53      	ldr	r3, [pc, #332]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	4a52      	ldr	r2, [pc, #328]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 800749a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800749e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a0:	4b50      	ldr	r3, [pc, #320]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	494d      	ldr	r1, [pc, #308]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d044      	beq.n	8007548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074c6:	4b47      	ldr	r3, [pc, #284]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d119      	bne.n	8007506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e07f      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d003      	beq.n	80074e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d107      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e6:	4b3f      	ldr	r3, [pc, #252]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e06f      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074f6:	4b3b      	ldr	r3, [pc, #236]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e067      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007506:	4b37      	ldr	r3, [pc, #220]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f023 0203 	bic.w	r2, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	4934      	ldr	r1, [pc, #208]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007514:	4313      	orrs	r3, r2
 8007516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007518:	f7fd f828 	bl	800456c <HAL_GetTick>
 800751c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800751e:	e00a      	b.n	8007536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007520:	f7fd f824 	bl	800456c <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800752e:	4293      	cmp	r3, r2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e04f      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007536:	4b2b      	ldr	r3, [pc, #172]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 020c 	and.w	r2, r3, #12
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	429a      	cmp	r2, r3
 8007546:	d1eb      	bne.n	8007520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007548:	4b25      	ldr	r3, [pc, #148]	@ (80075e0 <HAL_RCC_ClockConfig+0x1b8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d20c      	bcs.n	8007570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007556:	4b22      	ldr	r3, [pc, #136]	@ (80075e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800755e:	4b20      	ldr	r3, [pc, #128]	@ (80075e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	429a      	cmp	r2, r3
 800756a:	d001      	beq.n	8007570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e032      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800757c:	4b19      	ldr	r3, [pc, #100]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	4916      	ldr	r1, [pc, #88]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 800758a:	4313      	orrs	r3, r2
 800758c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800759a:	4b12      	ldr	r3, [pc, #72]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	490e      	ldr	r1, [pc, #56]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075ae:	f000 fb7f 	bl	8007cb0 <HAL_RCC_GetSysClockFreq>
 80075b2:	4602      	mov	r2, r0
 80075b4:	4b0b      	ldr	r3, [pc, #44]	@ (80075e4 <HAL_RCC_ClockConfig+0x1bc>)
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	091b      	lsrs	r3, r3, #4
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	490a      	ldr	r1, [pc, #40]	@ (80075e8 <HAL_RCC_ClockConfig+0x1c0>)
 80075c0:	5ccb      	ldrb	r3, [r1, r3]
 80075c2:	fa22 f303 	lsr.w	r3, r2, r3
 80075c6:	4a09      	ldr	r2, [pc, #36]	@ (80075ec <HAL_RCC_ClockConfig+0x1c4>)
 80075c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075ca:	4b09      	ldr	r3, [pc, #36]	@ (80075f0 <HAL_RCC_ClockConfig+0x1c8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc ff88 	bl	80044e4 <HAL_InitTick>

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40023c00 	.word	0x40023c00
 80075e4:	40023800 	.word	0x40023800
 80075e8:	080153c4 	.word	0x080153c4
 80075ec:	20000004 	.word	0x20000004
 80075f0:	20000008 	.word	0x20000008

080075f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075f8:	4b03      	ldr	r3, [pc, #12]	@ (8007608 <HAL_RCC_GetHCLKFreq+0x14>)
 80075fa:	681b      	ldr	r3, [r3, #0]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20000004 	.word	0x20000004

0800760c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007610:	f7ff fff0 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 8007614:	4602      	mov	r2, r0
 8007616:	4b05      	ldr	r3, [pc, #20]	@ (800762c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	0a9b      	lsrs	r3, r3, #10
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	4903      	ldr	r1, [pc, #12]	@ (8007630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007622:	5ccb      	ldrb	r3, [r1, r3]
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007628:	4618      	mov	r0, r3
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40023800 	.word	0x40023800
 8007630:	080153d4 	.word	0x080153d4

08007634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007638:	f7ff ffdc 	bl	80075f4 <HAL_RCC_GetHCLKFreq>
 800763c:	4602      	mov	r2, r0
 800763e:	4b05      	ldr	r3, [pc, #20]	@ (8007654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	0b5b      	lsrs	r3, r3, #13
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	4903      	ldr	r1, [pc, #12]	@ (8007658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800764a:	5ccb      	ldrb	r3, [r1, r3]
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007650:	4618      	mov	r0, r3
 8007652:	bd80      	pop	{r7, pc}
 8007654:	40023800 	.word	0x40023800
 8007658:	080153d4 	.word	0x080153d4

0800765c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08c      	sub	sp, #48	@ 0x30
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d010      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007694:	4b6f      	ldr	r3, [pc, #444]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800769a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a2:	496c      	ldr	r1, [pc, #432]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80076b2:	2301      	movs	r3, #1
 80076b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d010      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80076c2:	4b64      	ldr	r3, [pc, #400]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076c8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d0:	4960      	ldr	r1, [pc, #384]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80076e0:	2301      	movs	r3, #1
 80076e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d017      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076f0:	4b58      	ldr	r3, [pc, #352]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fe:	4955      	ldr	r1, [pc, #340]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007700:	4313      	orrs	r3, r2
 8007702:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800770e:	d101      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007710:	2301      	movs	r3, #1
 8007712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800771c:	2301      	movs	r3, #1
 800771e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d017      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800772c:	4b49      	ldr	r3, [pc, #292]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800772e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007732:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800773a:	4946      	ldr	r1, [pc, #280]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007746:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800774a:	d101      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800774c:	2301      	movs	r3, #1
 800774e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007758:	2301      	movs	r3, #1
 800775a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 808a 	beq.w	800787e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800776a:	2300      	movs	r3, #0
 800776c:	60bb      	str	r3, [r7, #8]
 800776e:	4b39      	ldr	r3, [pc, #228]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007772:	4a38      	ldr	r2, [pc, #224]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007778:	6413      	str	r3, [r2, #64]	@ 0x40
 800777a:	4b36      	ldr	r3, [pc, #216]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007786:	4b34      	ldr	r3, [pc, #208]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a33      	ldr	r2, [pc, #204]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800778c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007790:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007792:	f7fc feeb 	bl	800456c <HAL_GetTick>
 8007796:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007798:	e008      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800779a:	f7fc fee7 	bl	800456c <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e278      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f0      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077b8:	4b26      	ldr	r3, [pc, #152]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077c0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d02f      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077d0:	6a3a      	ldr	r2, [r7, #32]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d028      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077de:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077e0:	4b1e      	ldr	r3, [pc, #120]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077e6:	4b1d      	ldr	r3, [pc, #116]	@ (800785c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80077ec:	4a19      	ldr	r2, [pc, #100]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80077f2:	4b18      	ldr	r3, [pc, #96]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d114      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80077fe:	f7fc feb5 	bl	800456c <HAL_GetTick>
 8007802:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007804:	e00a      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007806:	f7fc feb1 	bl	800456c <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007814:	4293      	cmp	r3, r2
 8007816:	d901      	bls.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e240      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800781c:	4b0d      	ldr	r3, [pc, #52]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800781e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0ee      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007830:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007834:	d114      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007836:	4b07      	ldr	r3, [pc, #28]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007842:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800784a:	4902      	ldr	r1, [pc, #8]	@ (8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800784c:	4313      	orrs	r3, r2
 800784e:	608b      	str	r3, [r1, #8]
 8007850:	e00c      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007852:	bf00      	nop
 8007854:	40023800 	.word	0x40023800
 8007858:	40007000 	.word	0x40007000
 800785c:	42470e40 	.word	0x42470e40
 8007860:	4b4a      	ldr	r3, [pc, #296]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	4a49      	ldr	r2, [pc, #292]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007866:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800786a:	6093      	str	r3, [r2, #8]
 800786c:	4b47      	ldr	r3, [pc, #284]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800786e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007878:	4944      	ldr	r1, [pc, #272]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800787a:	4313      	orrs	r3, r2
 800787c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0310 	and.w	r3, r3, #16
 8007886:	2b00      	cmp	r3, #0
 8007888:	d004      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8007890:	4b3f      	ldr	r3, [pc, #252]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007892:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80078a0:	4b3a      	ldr	r3, [pc, #232]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ae:	4937      	ldr	r1, [pc, #220]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078c2:	4b32      	ldr	r3, [pc, #200]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078c8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d0:	492e      	ldr	r1, [pc, #184]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d011      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80078e4:	4b29      	ldr	r3, [pc, #164]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ea:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f2:	4926      	ldr	r1, [pc, #152]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007902:	d101      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007904:	2301      	movs	r3, #1
 8007906:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00a      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007914:	4b1d      	ldr	r3, [pc, #116]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800791a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007922:	491a      	ldr	r1, [pc, #104]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007924:	4313      	orrs	r3, r2
 8007926:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007932:	2b00      	cmp	r3, #0
 8007934:	d011      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007936:	4b15      	ldr	r3, [pc, #84]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800793c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007944:	4911      	ldr	r1, [pc, #68]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007946:	4313      	orrs	r3, r2
 8007948:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007954:	d101      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007956:	2301      	movs	r3, #1
 8007958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800795a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795c:	2b01      	cmp	r3, #1
 800795e:	d005      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007968:	f040 80ff 	bne.w	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800796c:	4b09      	ldr	r3, [pc, #36]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007972:	f7fc fdfb 	bl	800456c <HAL_GetTick>
 8007976:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007978:	e00e      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800797a:	f7fc fdf7 	bl	800456c <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d907      	bls.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e188      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800798c:	40023800 	.word	0x40023800
 8007990:	424711e0 	.word	0x424711e0
 8007994:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007998:	4b7e      	ldr	r3, [pc, #504]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1ea      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d028      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d124      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80079cc:	4b71      	ldr	r3, [pc, #452]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079d2:	0c1b      	lsrs	r3, r3, #16
 80079d4:	f003 0303 	and.w	r3, r3, #3
 80079d8:	3301      	adds	r3, #1
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079de:	4b6d      	ldr	r3, [pc, #436]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079e4:	0e1b      	lsrs	r3, r3, #24
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	019b      	lsls	r3, r3, #6
 80079f6:	431a      	orrs	r2, r3
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	085b      	lsrs	r3, r3, #1
 80079fc:	3b01      	subs	r3, #1
 80079fe:	041b      	lsls	r3, r3, #16
 8007a00:	431a      	orrs	r2, r3
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	061b      	lsls	r3, r3, #24
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	071b      	lsls	r3, r3, #28
 8007a0e:	4961      	ldr	r1, [pc, #388]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d004      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a2a:	d00a      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d035      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a40:	d130      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a42:	4b54      	ldr	r3, [pc, #336]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a48:	0c1b      	lsrs	r3, r3, #16
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	3301      	adds	r3, #1
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a54:	4b4f      	ldr	r3, [pc, #316]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a5a:	0f1b      	lsrs	r3, r3, #28
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	019b      	lsls	r3, r3, #6
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	3b01      	subs	r3, #1
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	061b      	lsls	r3, r3, #24
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	071b      	lsls	r3, r3, #28
 8007a84:	4943      	ldr	r1, [pc, #268]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007a8c:	4b41      	ldr	r3, [pc, #260]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a92:	f023 021f 	bic.w	r2, r3, #31
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	493d      	ldr	r1, [pc, #244]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d029      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ab8:	d124      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007aba:	4b36      	ldr	r3, [pc, #216]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007acc:	4b31      	ldr	r3, [pc, #196]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ad2:	0f1b      	lsrs	r3, r3, #28
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	019b      	lsls	r3, r3, #6
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	3b01      	subs	r3, #1
 8007aee:	041b      	lsls	r3, r3, #16
 8007af0:	431a      	orrs	r2, r3
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	061b      	lsls	r3, r3, #24
 8007af6:	431a      	orrs	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	071b      	lsls	r3, r3, #28
 8007afc:	4925      	ldr	r1, [pc, #148]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d016      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	019b      	lsls	r3, r3, #6
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	085b      	lsrs	r3, r3, #1
 8007b22:	3b01      	subs	r3, #1
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	061b      	lsls	r3, r3, #24
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	071b      	lsls	r3, r3, #28
 8007b36:	4917      	ldr	r1, [pc, #92]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b3e:	4b16      	ldr	r3, [pc, #88]	@ (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b44:	f7fc fd12 	bl	800456c <HAL_GetTick>
 8007b48:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b4c:	f7fc fd0e 	bl	800456c <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e09f      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f0      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	f040 8095 	bne.w	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b72:	4b0a      	ldr	r3, [pc, #40]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b78:	f7fc fcf8 	bl	800456c <HAL_GetTick>
 8007b7c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b7e:	e00f      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b80:	f7fc fcf4 	bl	800456c <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d908      	bls.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e085      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007b92:	bf00      	nop
 8007b94:	40023800 	.word	0x40023800
 8007b98:	42470068 	.word	0x42470068
 8007b9c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ba0:	4b41      	ldr	r3, [pc, #260]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bac:	d0e8      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d009      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d02b      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d127      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007bd6:	4b34      	ldr	r3, [pc, #208]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bdc:	0c1b      	lsrs	r3, r3, #16
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	3301      	adds	r3, #1
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699a      	ldr	r2, [r3, #24]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	019b      	lsls	r3, r3, #6
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	085b      	lsrs	r3, r3, #1
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	041b      	lsls	r3, r3, #16
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c02:	061b      	lsls	r3, r3, #24
 8007c04:	4928      	ldr	r1, [pc, #160]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c0c:	4b26      	ldr	r3, [pc, #152]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c12:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	4922      	ldr	r1, [pc, #136]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01d      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c3a:	d118      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c42:	0e1b      	lsrs	r3, r3, #24
 8007c44:	f003 030f 	and.w	r3, r3, #15
 8007c48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	019b      	lsls	r3, r3, #6
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	041b      	lsls	r3, r3, #16
 8007c60:	431a      	orrs	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	061b      	lsls	r3, r3, #24
 8007c66:	4910      	ldr	r1, [pc, #64]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c74:	f7fc fc7a 	bl	800456c <HAL_GetTick>
 8007c78:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c7c:	f7fc fc76 	bl	800456c <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e007      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c9a:	d1ef      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3730      	adds	r7, #48	@ 0x30
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	40023800 	.word	0x40023800
 8007cac:	42470070 	.word	0x42470070

08007cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb4:	b0ae      	sub	sp, #184	@ 0xb8
 8007cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cd6:	4bcb      	ldr	r3, [pc, #812]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 030c 	and.w	r3, r3, #12
 8007cde:	2b0c      	cmp	r3, #12
 8007ce0:	f200 8206 	bhi.w	80080f0 <HAL_RCC_GetSysClockFreq+0x440>
 8007ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cec <HAL_RCC_GetSysClockFreq+0x3c>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007d21 	.word	0x08007d21
 8007cf0:	080080f1 	.word	0x080080f1
 8007cf4:	080080f1 	.word	0x080080f1
 8007cf8:	080080f1 	.word	0x080080f1
 8007cfc:	08007d29 	.word	0x08007d29
 8007d00:	080080f1 	.word	0x080080f1
 8007d04:	080080f1 	.word	0x080080f1
 8007d08:	080080f1 	.word	0x080080f1
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	080080f1 	.word	0x080080f1
 8007d14:	080080f1 	.word	0x080080f1
 8007d18:	080080f1 	.word	0x080080f1
 8007d1c:	08007f21 	.word	0x08007f21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d20:	4bb9      	ldr	r3, [pc, #740]	@ (8008008 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8007d26:	e1e7      	b.n	80080f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d28:	4bb8      	ldr	r3, [pc, #736]	@ (800800c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007d2e:	e1e3      	b.n	80080f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d30:	4bb4      	ldr	r3, [pc, #720]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d3c:	4bb1      	ldr	r3, [pc, #708]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d071      	beq.n	8007e2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d48:	4bae      	ldr	r3, [pc, #696]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	099b      	lsrs	r3, r3, #6
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d54:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d64:	2300      	movs	r3, #0
 8007d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d6e:	4622      	mov	r2, r4
 8007d70:	462b      	mov	r3, r5
 8007d72:	f04f 0000 	mov.w	r0, #0
 8007d76:	f04f 0100 	mov.w	r1, #0
 8007d7a:	0159      	lsls	r1, r3, #5
 8007d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d80:	0150      	lsls	r0, r2, #5
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4621      	mov	r1, r4
 8007d88:	1a51      	subs	r1, r2, r1
 8007d8a:	6439      	str	r1, [r7, #64]	@ 0x40
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8007d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007da0:	4649      	mov	r1, r9
 8007da2:	018b      	lsls	r3, r1, #6
 8007da4:	4641      	mov	r1, r8
 8007da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007daa:	4641      	mov	r1, r8
 8007dac:	018a      	lsls	r2, r1, #6
 8007dae:	4641      	mov	r1, r8
 8007db0:	1a51      	subs	r1, r2, r1
 8007db2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007db4:	4649      	mov	r1, r9
 8007db6:	eb63 0301 	sbc.w	r3, r3, r1
 8007dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	f04f 0300 	mov.w	r3, #0
 8007dc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8007dc8:	4649      	mov	r1, r9
 8007dca:	00cb      	lsls	r3, r1, #3
 8007dcc:	4641      	mov	r1, r8
 8007dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dd2:	4641      	mov	r1, r8
 8007dd4:	00ca      	lsls	r2, r1, #3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4622      	mov	r2, r4
 8007dde:	189b      	adds	r3, r3, r2
 8007de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007de2:	462b      	mov	r3, r5
 8007de4:	460a      	mov	r2, r1
 8007de6:	eb42 0303 	adc.w	r3, r2, r3
 8007dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007df8:	4629      	mov	r1, r5
 8007dfa:	024b      	lsls	r3, r1, #9
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e02:	4621      	mov	r1, r4
 8007e04:	024a      	lsls	r2, r1, #9
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007e1c:	f7f8 ff54 	bl	8000cc8 <__aeabi_uldivmod>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4613      	mov	r3, r2
 8007e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e2a:	e067      	b.n	8007efc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e2c:	4b75      	ldr	r3, [pc, #468]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	099b      	lsrs	r3, r3, #6
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e46:	2300      	movs	r3, #0
 8007e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007e4e:	4622      	mov	r2, r4
 8007e50:	462b      	mov	r3, r5
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	0159      	lsls	r1, r3, #5
 8007e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e60:	0150      	lsls	r0, r2, #5
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4621      	mov	r1, r4
 8007e68:	1a51      	subs	r1, r2, r1
 8007e6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007e80:	4649      	mov	r1, r9
 8007e82:	018b      	lsls	r3, r1, #6
 8007e84:	4641      	mov	r1, r8
 8007e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e8a:	4641      	mov	r1, r8
 8007e8c:	018a      	lsls	r2, r1, #6
 8007e8e:	4641      	mov	r1, r8
 8007e90:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e94:	4649      	mov	r1, r9
 8007e96:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ea6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007eae:	4692      	mov	sl, r2
 8007eb0:	469b      	mov	fp, r3
 8007eb2:	4623      	mov	r3, r4
 8007eb4:	eb1a 0303 	adds.w	r3, sl, r3
 8007eb8:	623b      	str	r3, [r7, #32]
 8007eba:	462b      	mov	r3, r5
 8007ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8007ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007ece:	4629      	mov	r1, r5
 8007ed0:	028b      	lsls	r3, r1, #10
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ed8:	4621      	mov	r1, r4
 8007eda:	028a      	lsls	r2, r1, #10
 8007edc:	4610      	mov	r0, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ee8:	677a      	str	r2, [r7, #116]	@ 0x74
 8007eea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007eee:	f7f8 feeb 	bl	8000cc8 <__aeabi_uldivmod>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007efc:	4b41      	ldr	r3, [pc, #260]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x354>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	3301      	adds	r3, #1
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8007f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007f1e:	e0eb      	b.n	80080f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f20:	4b38      	ldr	r3, [pc, #224]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f2c:	4b35      	ldr	r3, [pc, #212]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d06b      	beq.n	8008010 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f38:	4b32      	ldr	r3, [pc, #200]	@ (8008004 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	099b      	lsrs	r3, r3, #6
 8007f3e:	2200      	movs	r2, #0
 8007f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007f54:	4622      	mov	r2, r4
 8007f56:	462b      	mov	r3, r5
 8007f58:	f04f 0000 	mov.w	r0, #0
 8007f5c:	f04f 0100 	mov.w	r1, #0
 8007f60:	0159      	lsls	r1, r3, #5
 8007f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f66:	0150      	lsls	r0, r2, #5
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	1a51      	subs	r1, r2, r1
 8007f70:	61b9      	str	r1, [r7, #24]
 8007f72:	4629      	mov	r1, r5
 8007f74:	eb63 0301 	sbc.w	r3, r3, r1
 8007f78:	61fb      	str	r3, [r7, #28]
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007f86:	4659      	mov	r1, fp
 8007f88:	018b      	lsls	r3, r1, #6
 8007f8a:	4651      	mov	r1, sl
 8007f8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f90:	4651      	mov	r1, sl
 8007f92:	018a      	lsls	r2, r1, #6
 8007f94:	4651      	mov	r1, sl
 8007f96:	ebb2 0801 	subs.w	r8, r2, r1
 8007f9a:	4659      	mov	r1, fp
 8007f9c:	eb63 0901 	sbc.w	r9, r3, r1
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fb4:	4690      	mov	r8, r2
 8007fb6:	4699      	mov	r9, r3
 8007fb8:	4623      	mov	r3, r4
 8007fba:	eb18 0303 	adds.w	r3, r8, r3
 8007fbe:	613b      	str	r3, [r7, #16]
 8007fc0:	462b      	mov	r3, r5
 8007fc2:	eb49 0303 	adc.w	r3, r9, r3
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	024b      	lsls	r3, r1, #9
 8007fd8:	4621      	mov	r1, r4
 8007fda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fde:	4621      	mov	r1, r4
 8007fe0:	024a      	lsls	r2, r1, #9
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fea:	2200      	movs	r2, #0
 8007fec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007ff0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ff4:	f7f8 fe68 	bl	8000cc8 <__aeabi_uldivmod>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008002:	e065      	b.n	80080d0 <HAL_RCC_GetSysClockFreq+0x420>
 8008004:	40023800 	.word	0x40023800
 8008008:	00f42400 	.word	0x00f42400
 800800c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008010:	4b3d      	ldr	r3, [pc, #244]	@ (8008108 <HAL_RCC_GetSysClockFreq+0x458>)
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	099b      	lsrs	r3, r3, #6
 8008016:	2200      	movs	r2, #0
 8008018:	4618      	mov	r0, r3
 800801a:	4611      	mov	r1, r2
 800801c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008020:	653b      	str	r3, [r7, #80]	@ 0x50
 8008022:	2300      	movs	r3, #0
 8008024:	657b      	str	r3, [r7, #84]	@ 0x54
 8008026:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800802a:	4642      	mov	r2, r8
 800802c:	464b      	mov	r3, r9
 800802e:	f04f 0000 	mov.w	r0, #0
 8008032:	f04f 0100 	mov.w	r1, #0
 8008036:	0159      	lsls	r1, r3, #5
 8008038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800803c:	0150      	lsls	r0, r2, #5
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4641      	mov	r1, r8
 8008044:	1a51      	subs	r1, r2, r1
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	4649      	mov	r1, r9
 800804a:	eb63 0301 	sbc.w	r3, r3, r1
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	f04f 0200 	mov.w	r2, #0
 8008054:	f04f 0300 	mov.w	r3, #0
 8008058:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800805c:	4659      	mov	r1, fp
 800805e:	018b      	lsls	r3, r1, #6
 8008060:	4651      	mov	r1, sl
 8008062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008066:	4651      	mov	r1, sl
 8008068:	018a      	lsls	r2, r1, #6
 800806a:	4651      	mov	r1, sl
 800806c:	1a54      	subs	r4, r2, r1
 800806e:	4659      	mov	r1, fp
 8008070:	eb63 0501 	sbc.w	r5, r3, r1
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	f04f 0300 	mov.w	r3, #0
 800807c:	00eb      	lsls	r3, r5, #3
 800807e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008082:	00e2      	lsls	r2, r4, #3
 8008084:	4614      	mov	r4, r2
 8008086:	461d      	mov	r5, r3
 8008088:	4643      	mov	r3, r8
 800808a:	18e3      	adds	r3, r4, r3
 800808c:	603b      	str	r3, [r7, #0]
 800808e:	464b      	mov	r3, r9
 8008090:	eb45 0303 	adc.w	r3, r5, r3
 8008094:	607b      	str	r3, [r7, #4]
 8008096:	f04f 0200 	mov.w	r2, #0
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080a2:	4629      	mov	r1, r5
 80080a4:	028b      	lsls	r3, r1, #10
 80080a6:	4621      	mov	r1, r4
 80080a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080ac:	4621      	mov	r1, r4
 80080ae:	028a      	lsls	r2, r1, #10
 80080b0:	4610      	mov	r0, r2
 80080b2:	4619      	mov	r1, r3
 80080b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080b8:	2200      	movs	r2, #0
 80080ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80080be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80080c2:	f7f8 fe01 	bl	8000cc8 <__aeabi_uldivmod>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4613      	mov	r3, r2
 80080cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80080d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <HAL_RCC_GetSysClockFreq+0x458>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	0f1b      	lsrs	r3, r3, #28
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80080de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80080ee:	e003      	b.n	80080f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080f0:	4b06      	ldr	r3, [pc, #24]	@ (800810c <HAL_RCC_GetSysClockFreq+0x45c>)
 80080f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80080f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	37b8      	adds	r7, #184	@ 0xb8
 8008100:	46bd      	mov	sp, r7
 8008102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008106:	bf00      	nop
 8008108:	40023800 	.word	0x40023800
 800810c:	00f42400 	.word	0x00f42400

08008110 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e28d      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8083 	beq.w	8008236 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008130:	4b94      	ldr	r3, [pc, #592]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f003 030c 	and.w	r3, r3, #12
 8008138:	2b04      	cmp	r3, #4
 800813a:	d019      	beq.n	8008170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800813c:	4b91      	ldr	r3, [pc, #580]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008144:	2b08      	cmp	r3, #8
 8008146:	d106      	bne.n	8008156 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008148:	4b8e      	ldr	r3, [pc, #568]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008154:	d00c      	beq.n	8008170 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008156:	4b8b      	ldr	r3, [pc, #556]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800815e:	2b0c      	cmp	r3, #12
 8008160:	d112      	bne.n	8008188 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008162:	4b88      	ldr	r3, [pc, #544]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800816a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800816e:	d10b      	bne.n	8008188 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008170:	4b84      	ldr	r3, [pc, #528]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d05b      	beq.n	8008234 <HAL_RCC_OscConfig+0x124>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d157      	bne.n	8008234 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e25a      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008190:	d106      	bne.n	80081a0 <HAL_RCC_OscConfig+0x90>
 8008192:	4b7c      	ldr	r3, [pc, #496]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a7b      	ldr	r2, [pc, #492]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	e01d      	b.n	80081dc <HAL_RCC_OscConfig+0xcc>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081a8:	d10c      	bne.n	80081c4 <HAL_RCC_OscConfig+0xb4>
 80081aa:	4b76      	ldr	r3, [pc, #472]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a75      	ldr	r2, [pc, #468]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80081b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	4b73      	ldr	r3, [pc, #460]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a72      	ldr	r2, [pc, #456]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80081bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	e00b      	b.n	80081dc <HAL_RCC_OscConfig+0xcc>
 80081c4:	4b6f      	ldr	r3, [pc, #444]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a6e      	ldr	r2, [pc, #440]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80081ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	4b6c      	ldr	r3, [pc, #432]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a6b      	ldr	r2, [pc, #428]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80081d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d013      	beq.n	800820c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e4:	f7fc f9c2 	bl	800456c <HAL_GetTick>
 80081e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ea:	e008      	b.n	80081fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081ec:	f7fc f9be 	bl	800456c <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b64      	cmp	r3, #100	@ 0x64
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e21f      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081fe:	4b61      	ldr	r3, [pc, #388]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f0      	beq.n	80081ec <HAL_RCC_OscConfig+0xdc>
 800820a:	e014      	b.n	8008236 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820c:	f7fc f9ae 	bl	800456c <HAL_GetTick>
 8008210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008214:	f7fc f9aa 	bl	800456c <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b64      	cmp	r3, #100	@ 0x64
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e20b      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008226:	4b57      	ldr	r3, [pc, #348]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1f0      	bne.n	8008214 <HAL_RCC_OscConfig+0x104>
 8008232:	e000      	b.n	8008236 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d06f      	beq.n	8008322 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008242:	4b50      	ldr	r3, [pc, #320]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f003 030c 	and.w	r3, r3, #12
 800824a:	2b00      	cmp	r3, #0
 800824c:	d017      	beq.n	800827e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800824e:	4b4d      	ldr	r3, [pc, #308]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008256:	2b08      	cmp	r3, #8
 8008258:	d105      	bne.n	8008266 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800825a:	4b4a      	ldr	r3, [pc, #296]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008266:	4b47      	ldr	r3, [pc, #284]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800826e:	2b0c      	cmp	r3, #12
 8008270:	d11c      	bne.n	80082ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008272:	4b44      	ldr	r3, [pc, #272]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d116      	bne.n	80082ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800827e:	4b41      	ldr	r3, [pc, #260]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <HAL_RCC_OscConfig+0x186>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d001      	beq.n	8008296 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e1d3      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008296:	4b3b      	ldr	r3, [pc, #236]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4937      	ldr	r1, [pc, #220]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082aa:	e03a      	b.n	8008322 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d020      	beq.n	80082f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082b4:	4b34      	ldr	r3, [pc, #208]	@ (8008388 <HAL_RCC_OscConfig+0x278>)
 80082b6:	2201      	movs	r2, #1
 80082b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ba:	f7fc f957 	bl	800456c <HAL_GetTick>
 80082be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082c0:	e008      	b.n	80082d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082c2:	f7fc f953 	bl	800456c <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d901      	bls.n	80082d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e1b4      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0f0      	beq.n	80082c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082e0:	4b28      	ldr	r3, [pc, #160]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	4925      	ldr	r1, [pc, #148]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	600b      	str	r3, [r1, #0]
 80082f4:	e015      	b.n	8008322 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082f6:	4b24      	ldr	r3, [pc, #144]	@ (8008388 <HAL_RCC_OscConfig+0x278>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fc:	f7fc f936 	bl	800456c <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008304:	f7fc f932 	bl	800456c <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e193      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008316:	4b1b      	ldr	r3, [pc, #108]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f0      	bne.n	8008304 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0308 	and.w	r3, r3, #8
 800832a:	2b00      	cmp	r3, #0
 800832c:	d036      	beq.n	800839c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d016      	beq.n	8008364 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008336:	4b15      	ldr	r3, [pc, #84]	@ (800838c <HAL_RCC_OscConfig+0x27c>)
 8008338:	2201      	movs	r2, #1
 800833a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800833c:	f7fc f916 	bl	800456c <HAL_GetTick>
 8008340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008342:	e008      	b.n	8008356 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008344:	f7fc f912 	bl	800456c <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d901      	bls.n	8008356 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e173      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008356:	4b0b      	ldr	r3, [pc, #44]	@ (8008384 <HAL_RCC_OscConfig+0x274>)
 8008358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0f0      	beq.n	8008344 <HAL_RCC_OscConfig+0x234>
 8008362:	e01b      	b.n	800839c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008364:	4b09      	ldr	r3, [pc, #36]	@ (800838c <HAL_RCC_OscConfig+0x27c>)
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836a:	f7fc f8ff 	bl	800456c <HAL_GetTick>
 800836e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008370:	e00e      	b.n	8008390 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008372:	f7fc f8fb 	bl	800456c <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d907      	bls.n	8008390 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e15c      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
 8008384:	40023800 	.word	0x40023800
 8008388:	42470000 	.word	0x42470000
 800838c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008390:	4b8a      	ldr	r3, [pc, #552]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1ea      	bne.n	8008372 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 8097 	beq.w	80084d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083aa:	2300      	movs	r3, #0
 80083ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ae:	4b83      	ldr	r3, [pc, #524]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 80083b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10f      	bne.n	80083da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083ba:	2300      	movs	r3, #0
 80083bc:	60bb      	str	r3, [r7, #8]
 80083be:	4b7f      	ldr	r3, [pc, #508]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 80083c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c2:	4a7e      	ldr	r2, [pc, #504]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 80083c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80083ca:	4b7c      	ldr	r3, [pc, #496]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083d2:	60bb      	str	r3, [r7, #8]
 80083d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083d6:	2301      	movs	r3, #1
 80083d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083da:	4b79      	ldr	r3, [pc, #484]	@ (80085c0 <HAL_RCC_OscConfig+0x4b0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d118      	bne.n	8008418 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083e6:	4b76      	ldr	r3, [pc, #472]	@ (80085c0 <HAL_RCC_OscConfig+0x4b0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a75      	ldr	r2, [pc, #468]	@ (80085c0 <HAL_RCC_OscConfig+0x4b0>)
 80083ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083f2:	f7fc f8bb 	bl	800456c <HAL_GetTick>
 80083f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083fa:	f7fc f8b7 	bl	800456c <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e118      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800840c:	4b6c      	ldr	r3, [pc, #432]	@ (80085c0 <HAL_RCC_OscConfig+0x4b0>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0f0      	beq.n	80083fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d106      	bne.n	800842e <HAL_RCC_OscConfig+0x31e>
 8008420:	4b66      	ldr	r3, [pc, #408]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008424:	4a65      	ldr	r2, [pc, #404]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	6713      	str	r3, [r2, #112]	@ 0x70
 800842c:	e01c      	b.n	8008468 <HAL_RCC_OscConfig+0x358>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b05      	cmp	r3, #5
 8008434:	d10c      	bne.n	8008450 <HAL_RCC_OscConfig+0x340>
 8008436:	4b61      	ldr	r3, [pc, #388]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800843a:	4a60      	ldr	r2, [pc, #384]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 800843c:	f043 0304 	orr.w	r3, r3, #4
 8008440:	6713      	str	r3, [r2, #112]	@ 0x70
 8008442:	4b5e      	ldr	r3, [pc, #376]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008446:	4a5d      	ldr	r2, [pc, #372]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	6713      	str	r3, [r2, #112]	@ 0x70
 800844e:	e00b      	b.n	8008468 <HAL_RCC_OscConfig+0x358>
 8008450:	4b5a      	ldr	r3, [pc, #360]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008454:	4a59      	ldr	r2, [pc, #356]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008456:	f023 0301 	bic.w	r3, r3, #1
 800845a:	6713      	str	r3, [r2, #112]	@ 0x70
 800845c:	4b57      	ldr	r3, [pc, #348]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 800845e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008460:	4a56      	ldr	r2, [pc, #344]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008462:	f023 0304 	bic.w	r3, r3, #4
 8008466:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d015      	beq.n	800849c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fc f87c 	bl	800456c <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008476:	e00a      	b.n	800848e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008478:	f7fc f878 	bl	800456c <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008486:	4293      	cmp	r3, r2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e0d7      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800848e:	4b4b      	ldr	r3, [pc, #300]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0ee      	beq.n	8008478 <HAL_RCC_OscConfig+0x368>
 800849a:	e014      	b.n	80084c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800849c:	f7fc f866 	bl	800456c <HAL_GetTick>
 80084a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084a2:	e00a      	b.n	80084ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084a4:	f7fc f862 	bl	800456c <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e0c1      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084ba:	4b40      	ldr	r3, [pc, #256]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 80084bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1ee      	bne.n	80084a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d105      	bne.n	80084d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084cc:	4b3b      	ldr	r3, [pc, #236]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 80084ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d0:	4a3a      	ldr	r2, [pc, #232]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 80084d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80ad 	beq.w	800863c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084e2:	4b36      	ldr	r3, [pc, #216]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 030c 	and.w	r3, r3, #12
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d060      	beq.n	80085b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d145      	bne.n	8008582 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084f6:	4b33      	ldr	r3, [pc, #204]	@ (80085c4 <HAL_RCC_OscConfig+0x4b4>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fc:	f7fc f836 	bl	800456c <HAL_GetTick>
 8008500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008504:	f7fc f832 	bl	800456c <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e093      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008516:	4b29      	ldr	r3, [pc, #164]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f0      	bne.n	8008504 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	69da      	ldr	r2, [r3, #28]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008530:	019b      	lsls	r3, r3, #6
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	085b      	lsrs	r3, r3, #1
 800853a:	3b01      	subs	r3, #1
 800853c:	041b      	lsls	r3, r3, #16
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	061b      	lsls	r3, r3, #24
 8008546:	431a      	orrs	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854c:	071b      	lsls	r3, r3, #28
 800854e:	491b      	ldr	r1, [pc, #108]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008550:	4313      	orrs	r3, r2
 8008552:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008554:	4b1b      	ldr	r3, [pc, #108]	@ (80085c4 <HAL_RCC_OscConfig+0x4b4>)
 8008556:	2201      	movs	r2, #1
 8008558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855a:	f7fc f807 	bl	800456c <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008562:	f7fc f803 	bl	800456c <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e064      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008574:	4b11      	ldr	r3, [pc, #68]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d0f0      	beq.n	8008562 <HAL_RCC_OscConfig+0x452>
 8008580:	e05c      	b.n	800863c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008582:	4b10      	ldr	r3, [pc, #64]	@ (80085c4 <HAL_RCC_OscConfig+0x4b4>)
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008588:	f7fb fff0 	bl	800456c <HAL_GetTick>
 800858c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800858e:	e008      	b.n	80085a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008590:	f7fb ffec 	bl	800456c <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b02      	cmp	r3, #2
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e04d      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085a2:	4b06      	ldr	r3, [pc, #24]	@ (80085bc <HAL_RCC_OscConfig+0x4ac>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1f0      	bne.n	8008590 <HAL_RCC_OscConfig+0x480>
 80085ae:	e045      	b.n	800863c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d107      	bne.n	80085c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e040      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
 80085bc:	40023800 	.word	0x40023800
 80085c0:	40007000 	.word	0x40007000
 80085c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008648 <HAL_RCC_OscConfig+0x538>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d030      	beq.n	8008638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d129      	bne.n	8008638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d122      	bne.n	8008638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80085f8:	4013      	ands	r3, r2
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80085fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008600:	4293      	cmp	r3, r2
 8008602:	d119      	bne.n	8008638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860e:	085b      	lsrs	r3, r3, #1
 8008610:	3b01      	subs	r3, #1
 8008612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008614:	429a      	cmp	r2, r3
 8008616:	d10f      	bne.n	8008638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008624:	429a      	cmp	r2, r3
 8008626:	d107      	bne.n	8008638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008632:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008634:	429a      	cmp	r2, r3
 8008636:	d001      	beq.n	800863c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e000      	b.n	800863e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	40023800 	.word	0x40023800

0800864c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e07b      	b.n	8008756 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d108      	bne.n	8008678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800866e:	d009      	beq.n	8008684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	61da      	str	r2, [r3, #28]
 8008676:	e005      	b.n	8008684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fb fb64 	bl	8003d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f003 0302 	and.w	r3, r3, #2
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086fe:	431a      	orrs	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008708:	ea42 0103 	orr.w	r1, r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008710:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	0c1b      	lsrs	r3, r3, #16
 8008722:	f003 0104 	and.w	r1, r3, #4
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872a:	f003 0210 	and.w	r2, r3, #16
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69da      	ldr	r2, [r3, #28]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e041      	b.n	80087f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d106      	bne.n	800878a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7fb fb39 	bl	8003dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3304      	adds	r3, #4
 800879a:	4619      	mov	r1, r3
 800879c:	4610      	mov	r0, r2
 800879e:	f000 fa7d 	bl	8008c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b01      	cmp	r3, #1
 800880e:	d001      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e04e      	b.n	80088b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a23      	ldr	r2, [pc, #140]	@ (80088c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d022      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800883e:	d01d      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1f      	ldr	r2, [pc, #124]	@ (80088c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d018      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a1e      	ldr	r2, [pc, #120]	@ (80088c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1c      	ldr	r2, [pc, #112]	@ (80088cc <HAL_TIM_Base_Start_IT+0xd0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00e      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a1b      	ldr	r2, [pc, #108]	@ (80088d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d009      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a19      	ldr	r2, [pc, #100]	@ (80088d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <HAL_TIM_Base_Start_IT+0x80>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a18      	ldr	r2, [pc, #96]	@ (80088d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d111      	bne.n	80088a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b06      	cmp	r3, #6
 800888c:	d010      	beq.n	80088b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0201 	orr.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889e:	e007      	b.n	80088b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f042 0201 	orr.w	r2, r2, #1
 80088ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	40010000 	.word	0x40010000
 80088c4:	40000400 	.word	0x40000400
 80088c8:	40000800 	.word	0x40000800
 80088cc:	40000c00 	.word	0x40000c00
 80088d0:	40010400 	.word	0x40010400
 80088d4:	40014000 	.word	0x40014000
 80088d8:	40001800 	.word	0x40001800

080088dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d020      	beq.n	8008940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01b      	beq.n	8008940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0202 	mvn.w	r2, #2
 8008910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f999 	bl	8008c5e <HAL_TIM_IC_CaptureCallback>
 800892c:	e005      	b.n	800893a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f98b 	bl	8008c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f99c 	bl	8008c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f003 0304 	and.w	r3, r3, #4
 8008946:	2b00      	cmp	r3, #0
 8008948:	d020      	beq.n	800898c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01b      	beq.n	800898c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f06f 0204 	mvn.w	r2, #4
 800895c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2202      	movs	r2, #2
 8008962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f973 	bl	8008c5e <HAL_TIM_IC_CaptureCallback>
 8008978:	e005      	b.n	8008986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f965 	bl	8008c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f976 	bl	8008c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d020      	beq.n	80089d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f003 0308 	and.w	r3, r3, #8
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01b      	beq.n	80089d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0208 	mvn.w	r2, #8
 80089a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2204      	movs	r2, #4
 80089ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f94d 	bl	8008c5e <HAL_TIM_IC_CaptureCallback>
 80089c4:	e005      	b.n	80089d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f93f 	bl	8008c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f950 	bl	8008c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f003 0310 	and.w	r3, r3, #16
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d020      	beq.n	8008a24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01b      	beq.n	8008a24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f06f 0210 	mvn.w	r2, #16
 80089f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2208      	movs	r2, #8
 80089fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d003      	beq.n	8008a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f927 	bl	8008c5e <HAL_TIM_IC_CaptureCallback>
 8008a10:	e005      	b.n	8008a1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f919 	bl	8008c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f92a 	bl	8008c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00c      	beq.n	8008a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f06f 0201 	mvn.w	r2, #1
 8008a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7fa f94e 	bl	8002ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00c      	beq.n	8008a6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fae4 	bl	8009034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00c      	beq.n	8008a90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f8fb 	bl	8008c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00c      	beq.n	8008ab4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d007      	beq.n	8008ab4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f06f 0220 	mvn.w	r2, #32
 8008aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fab6 	bl	8009020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ab4:	bf00      	nop
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e0b4      	b.n	8008c42 <HAL_TIM_ConfigClockSource+0x186>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b10:	d03e      	beq.n	8008b90 <HAL_TIM_ConfigClockSource+0xd4>
 8008b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b16:	f200 8087 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	f000 8086 	beq.w	8008c2e <HAL_TIM_ConfigClockSource+0x172>
 8008b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b26:	d87f      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b28:	2b70      	cmp	r3, #112	@ 0x70
 8008b2a:	d01a      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0xa6>
 8008b2c:	2b70      	cmp	r3, #112	@ 0x70
 8008b2e:	d87b      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b30:	2b60      	cmp	r3, #96	@ 0x60
 8008b32:	d050      	beq.n	8008bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8008b34:	2b60      	cmp	r3, #96	@ 0x60
 8008b36:	d877      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b38:	2b50      	cmp	r3, #80	@ 0x50
 8008b3a:	d03c      	beq.n	8008bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8008b3c:	2b50      	cmp	r3, #80	@ 0x50
 8008b3e:	d873      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b40:	2b40      	cmp	r3, #64	@ 0x40
 8008b42:	d058      	beq.n	8008bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8008b44:	2b40      	cmp	r3, #64	@ 0x40
 8008b46:	d86f      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b48:	2b30      	cmp	r3, #48	@ 0x30
 8008b4a:	d064      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x15a>
 8008b4c:	2b30      	cmp	r3, #48	@ 0x30
 8008b4e:	d86b      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d060      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x15a>
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d867      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d05c      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x15a>
 8008b5c:	2b10      	cmp	r3, #16
 8008b5e:	d05a      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x15a>
 8008b60:	e062      	b.n	8008c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b72:	f000 f9b9 	bl	8008ee8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	609a      	str	r2, [r3, #8]
      break;
 8008b8e:	e04f      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ba0:	f000 f9a2 	bl	8008ee8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bb2:	609a      	str	r2, [r3, #8]
      break;
 8008bb4:	e03c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f000 f916 	bl	8008df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2150      	movs	r1, #80	@ 0x50
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f96f 	bl	8008eb2 <TIM_ITRx_SetConfig>
      break;
 8008bd4:	e02c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008be2:	461a      	mov	r2, r3
 8008be4:	f000 f935 	bl	8008e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2160      	movs	r1, #96	@ 0x60
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 f95f 	bl	8008eb2 <TIM_ITRx_SetConfig>
      break;
 8008bf4:	e01c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c02:	461a      	mov	r2, r3
 8008c04:	f000 f8f6 	bl	8008df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2140      	movs	r1, #64	@ 0x40
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f94f 	bl	8008eb2 <TIM_ITRx_SetConfig>
      break;
 8008c14:	e00c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f000 f946 	bl	8008eb2 <TIM_ITRx_SetConfig>
      break;
 8008c26:	e003      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c2c:	e000      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c8e:	bf00      	nop
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a46      	ldr	r2, [pc, #280]	@ (8008dc8 <TIM_Base_SetConfig+0x12c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d013      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cba:	d00f      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a43      	ldr	r2, [pc, #268]	@ (8008dcc <TIM_Base_SetConfig+0x130>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d00b      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a42      	ldr	r2, [pc, #264]	@ (8008dd0 <TIM_Base_SetConfig+0x134>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d007      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a41      	ldr	r2, [pc, #260]	@ (8008dd4 <TIM_Base_SetConfig+0x138>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d003      	beq.n	8008cdc <TIM_Base_SetConfig+0x40>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a40      	ldr	r2, [pc, #256]	@ (8008dd8 <TIM_Base_SetConfig+0x13c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d108      	bne.n	8008cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a35      	ldr	r2, [pc, #212]	@ (8008dc8 <TIM_Base_SetConfig+0x12c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d02b      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cfc:	d027      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a32      	ldr	r2, [pc, #200]	@ (8008dcc <TIM_Base_SetConfig+0x130>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d023      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a31      	ldr	r2, [pc, #196]	@ (8008dd0 <TIM_Base_SetConfig+0x134>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d01f      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a30      	ldr	r2, [pc, #192]	@ (8008dd4 <TIM_Base_SetConfig+0x138>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d01b      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a2f      	ldr	r2, [pc, #188]	@ (8008dd8 <TIM_Base_SetConfig+0x13c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d017      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a2e      	ldr	r2, [pc, #184]	@ (8008ddc <TIM_Base_SetConfig+0x140>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d013      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a2d      	ldr	r2, [pc, #180]	@ (8008de0 <TIM_Base_SetConfig+0x144>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00f      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a2c      	ldr	r2, [pc, #176]	@ (8008de4 <TIM_Base_SetConfig+0x148>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00b      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a2b      	ldr	r2, [pc, #172]	@ (8008de8 <TIM_Base_SetConfig+0x14c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d007      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a2a      	ldr	r2, [pc, #168]	@ (8008dec <TIM_Base_SetConfig+0x150>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d003      	beq.n	8008d4e <TIM_Base_SetConfig+0xb2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a29      	ldr	r2, [pc, #164]	@ (8008df0 <TIM_Base_SetConfig+0x154>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d108      	bne.n	8008d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a10      	ldr	r2, [pc, #64]	@ (8008dc8 <TIM_Base_SetConfig+0x12c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d003      	beq.n	8008d94 <TIM_Base_SetConfig+0xf8>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a12      	ldr	r2, [pc, #72]	@ (8008dd8 <TIM_Base_SetConfig+0x13c>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d103      	bne.n	8008d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	691a      	ldr	r2, [r3, #16]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d105      	bne.n	8008dba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	f023 0201 	bic.w	r2, r3, #1
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	611a      	str	r2, [r3, #16]
  }
}
 8008dba:	bf00      	nop
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	40010000 	.word	0x40010000
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	40000800 	.word	0x40000800
 8008dd4:	40000c00 	.word	0x40000c00
 8008dd8:	40010400 	.word	0x40010400
 8008ddc:	40014000 	.word	0x40014000
 8008de0:	40014400 	.word	0x40014400
 8008de4:	40014800 	.word	0x40014800
 8008de8:	40001800 	.word	0x40001800
 8008dec:	40001c00 	.word	0x40001c00
 8008df0:	40002000 	.word	0x40002000

08008df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	f023 0201 	bic.w	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f023 030a 	bic.w	r3, r3, #10
 8008e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	621a      	str	r2, [r3, #32]
}
 8008e46:	bf00      	nop
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b087      	sub	sp, #28
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	f023 0210 	bic.w	r2, r3, #16
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	031b      	lsls	r3, r3, #12
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	621a      	str	r2, [r3, #32]
}
 8008ea6:	bf00      	nop
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b085      	sub	sp, #20
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	f043 0307 	orr.w	r3, r3, #7
 8008ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	609a      	str	r2, [r3, #8]
}
 8008edc:	bf00      	nop
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	021a      	lsls	r2, r3, #8
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	609a      	str	r2, [r3, #8]
}
 8008f1c:	bf00      	nop
 8008f1e:	371c      	adds	r7, #28
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d101      	bne.n	8008f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e05a      	b.n	8008ff6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a21      	ldr	r2, [pc, #132]	@ (8009004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d022      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f8c:	d01d      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1d      	ldr	r2, [pc, #116]	@ (8009008 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d018      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800900c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d013      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8009010 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d00e      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a18      	ldr	r2, [pc, #96]	@ (8009014 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d009      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a17      	ldr	r2, [pc, #92]	@ (8009018 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d004      	beq.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a15      	ldr	r2, [pc, #84]	@ (800901c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d10c      	bne.n	8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40010000 	.word	0x40010000
 8009008:	40000400 	.word	0x40000400
 800900c:	40000800 	.word	0x40000800
 8009010:	40000c00 	.word	0x40000c00
 8009014:	40010400 	.word	0x40010400
 8009018:	40014000 	.word	0x40014000
 800901c:	40001800 	.word	0x40001800

08009020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e042      	b.n	80090e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d106      	bne.n	8009074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fa ff26 	bl	8003ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2224      	movs	r2, #36	@ 0x24
 8009078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800908a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f845 	bl	800a11c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	691a      	ldr	r2, [r3, #16]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	695a      	ldr	r2, [r3, #20]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	@ 0x28
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b20      	cmp	r3, #32
 8009106:	d175      	bne.n	80091f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <HAL_UART_Transmit+0x2c>
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e06e      	b.n	80091f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2221      	movs	r2, #33	@ 0x21
 8009122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009126:	f7fb fa21 	bl	800456c <HAL_GetTick>
 800912a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009140:	d108      	bne.n	8009154 <HAL_UART_Transmit+0x6c>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d104      	bne.n	8009154 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800914a:	2300      	movs	r3, #0
 800914c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	e003      	b.n	800915c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009158:	2300      	movs	r3, #0
 800915a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800915c:	e02e      	b.n	80091bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2200      	movs	r2, #0
 8009166:	2180      	movs	r1, #128	@ 0x80
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 fce3 	bl	8009b34 <UART_WaitOnFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2220      	movs	r2, #32
 8009178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e03a      	b.n	80091f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009194:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	3302      	adds	r3, #2
 800919a:	61bb      	str	r3, [r7, #24]
 800919c:	e007      	b.n	80091ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	781a      	ldrb	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	3301      	adds	r3, #1
 80091ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1cb      	bne.n	800915e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2200      	movs	r2, #0
 80091ce:	2140      	movs	r1, #64	@ 0x40
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 fcaf 	bl	8009b34 <UART_WaitOnFlagUntilTimeout>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d005      	beq.n	80091e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2220      	movs	r2, #32
 80091e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e006      	b.n	80091f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e000      	b.n	80091f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80091f4:	2302      	movs	r3, #2
  }
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3720      	adds	r7, #32
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b08a      	sub	sp, #40	@ 0x28
 8009202:	af02      	add	r7, sp, #8
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	60b9      	str	r1, [r7, #8]
 8009208:	603b      	str	r3, [r7, #0]
 800920a:	4613      	mov	r3, r2
 800920c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b20      	cmp	r3, #32
 800921c:	f040 8081 	bne.w	8009322 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_UART_Receive+0x2e>
 8009226:	88fb      	ldrh	r3, [r7, #6]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e079      	b.n	8009324 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2222      	movs	r2, #34	@ 0x22
 800923a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009244:	f7fb f992 	bl	800456c <HAL_GetTick>
 8009248:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	88fa      	ldrh	r2, [r7, #6]
 800924e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	88fa      	ldrh	r2, [r7, #6]
 8009254:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800925e:	d108      	bne.n	8009272 <HAL_UART_Receive+0x74>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d104      	bne.n	8009272 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8009268:	2300      	movs	r3, #0
 800926a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	e003      	b.n	800927a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009276:	2300      	movs	r3, #0
 8009278:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800927a:	e047      	b.n	800930c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2200      	movs	r2, #0
 8009284:	2120      	movs	r1, #32
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fc54 	bl	8009b34 <UART_WaitOnFlagUntilTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2220      	movs	r2, #32
 8009296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e042      	b.n	8009324 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10c      	bne.n	80092be <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	3302      	adds	r3, #2
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	e01f      	b.n	80092fe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092c6:	d007      	beq.n	80092d8 <HAL_UART_Receive+0xda>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <HAL_UART_Receive+0xe8>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d106      	bne.n	80092e6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	701a      	strb	r2, [r3, #0]
 80092e4:	e008      	b.n	80092f8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	3301      	adds	r3, #1
 80092fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009302:	b29b      	uxth	r3, r3
 8009304:	3b01      	subs	r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009310:	b29b      	uxth	r3, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1b2      	bne.n	800927c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2220      	movs	r2, #32
 800931a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	e000      	b.n	8009324 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009322:	2302      	movs	r3, #2
  }
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	4613      	mov	r3, r2
 8009338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b20      	cmp	r3, #32
 8009344:	d112      	bne.n	800936c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <HAL_UART_Receive_IT+0x26>
 800934c:	88fb      	ldrh	r3, [r7, #6]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e00b      	b.n	800936e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800935c:	88fb      	ldrh	r3, [r7, #6]
 800935e:	461a      	mov	r2, r3
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 fc3f 	bl	8009be6 <UART_Start_Receive_IT>
 8009368:	4603      	mov	r3, r0
 800936a:	e000      	b.n	800936e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800936c:	2302      	movs	r3, #2
  }
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	4613      	mov	r3, r2
 8009382:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b20      	cmp	r3, #32
 800938e:	d112      	bne.n	80093b6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <HAL_UART_Receive_DMA+0x26>
 8009396:	88fb      	ldrh	r3, [r7, #6]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e00b      	b.n	80093b8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093a6:	88fb      	ldrh	r3, [r7, #6]
 80093a8:	461a      	mov	r2, r3
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 fc55 	bl	8009c5c <UART_Start_Receive_DMA>
 80093b2:	4603      	mov	r3, r0
 80093b4:	e000      	b.n	80093b8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80093b6:	2302      	movs	r3, #2
  }
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b0ba      	sub	sp, #232	@ 0xe8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80093f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80093fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10f      	bne.n	8009426 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800940a:	f003 0320 	and.w	r3, r3, #32
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <HAL_UART_IRQHandler+0x66>
 8009412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fdbd 	bl	8009f9e <UART_Receive_IT>
      return;
 8009424:	e25b      	b.n	80098de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 80de 	beq.w	80095ec <HAL_UART_IRQHandler+0x22c>
 8009430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800943c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009440:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 80d1 	beq.w	80095ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800944a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00b      	beq.n	800946e <HAL_UART_IRQHandler+0xae>
 8009456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800945a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009466:	f043 0201 	orr.w	r2, r3, #1
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800946e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00b      	beq.n	8009492 <HAL_UART_IRQHandler+0xd2>
 800947a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d005      	beq.n	8009492 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800948a:	f043 0202 	orr.w	r2, r3, #2
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00b      	beq.n	80094b6 <HAL_UART_IRQHandler+0xf6>
 800949e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ae:	f043 0204 	orr.w	r2, r3, #4
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80094b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ba:	f003 0308 	and.w	r3, r3, #8
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d011      	beq.n	80094e6 <HAL_UART_IRQHandler+0x126>
 80094c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80094ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094de:	f043 0208 	orr.w	r2, r3, #8
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 81f2 	beq.w	80098d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d008      	beq.n	800950e <HAL_UART_IRQHandler+0x14e>
 80094fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fd48 	bl	8009f9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009518:	2b40      	cmp	r3, #64	@ 0x40
 800951a:	bf0c      	ite	eq
 800951c:	2301      	moveq	r3, #1
 800951e:	2300      	movne	r3, #0
 8009520:	b2db      	uxtb	r3, r3
 8009522:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800952a:	f003 0308 	and.w	r3, r3, #8
 800952e:	2b00      	cmp	r3, #0
 8009530:	d103      	bne.n	800953a <HAL_UART_IRQHandler+0x17a>
 8009532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009536:	2b00      	cmp	r3, #0
 8009538:	d04f      	beq.n	80095da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fc50 	bl	8009de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800954a:	2b40      	cmp	r3, #64	@ 0x40
 800954c:	d141      	bne.n	80095d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3314      	adds	r3, #20
 8009554:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009564:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800956c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3314      	adds	r3, #20
 8009576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800957a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800957e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1d9      	bne.n	800954e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d013      	beq.n	80095ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a6:	4a7e      	ldr	r2, [pc, #504]	@ (80097a0 <HAL_UART_IRQHandler+0x3e0>)
 80095a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fb ff20 	bl	80053f4 <HAL_DMA_Abort_IT>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d016      	beq.n	80095e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80095c4:	4610      	mov	r0, r2
 80095c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c8:	e00e      	b.n	80095e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f99e 	bl	800990c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d0:	e00a      	b.n	80095e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f99a 	bl	800990c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d8:	e006      	b.n	80095e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f996 	bl	800990c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80095e6:	e175      	b.n	80098d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e8:	bf00      	nop
    return;
 80095ea:	e173      	b.n	80098d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	f040 814f 	bne.w	8009894 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80095f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095fa:	f003 0310 	and.w	r3, r3, #16
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 8148 	beq.w	8009894 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009608:	f003 0310 	and.w	r3, r3, #16
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 8141 	beq.w	8009894 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009612:	2300      	movs	r3, #0
 8009614:	60bb      	str	r3, [r7, #8]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60bb      	str	r3, [r7, #8]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	60bb      	str	r3, [r7, #8]
 8009626:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009632:	2b40      	cmp	r3, #64	@ 0x40
 8009634:	f040 80b6 	bne.w	80097a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009644:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 8145 	beq.w	80098d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009656:	429a      	cmp	r2, r3
 8009658:	f080 813e 	bcs.w	80098d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009662:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800966e:	f000 8088 	beq.w	8009782 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	330c      	adds	r3, #12
 8009678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800968c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	330c      	adds	r3, #12
 800969a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800969e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80096a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80096aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1d9      	bne.n	8009672 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3314      	adds	r3, #20
 80096c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096c8:	e853 3f00 	ldrex	r3, [r3]
 80096cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80096ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096d0:	f023 0301 	bic.w	r3, r3, #1
 80096d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3314      	adds	r3, #20
 80096de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80096e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096ee:	e841 2300 	strex	r3, r2, [r1]
 80096f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1e1      	bne.n	80096be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3314      	adds	r3, #20
 8009700:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800970a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800970c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3314      	adds	r3, #20
 800971a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800971e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009720:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009724:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800972c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e3      	bne.n	80096fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2220      	movs	r2, #32
 8009736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	330c      	adds	r3, #12
 8009746:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009752:	f023 0310 	bic.w	r3, r3, #16
 8009756:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	330c      	adds	r3, #12
 8009760:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009764:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009766:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009768:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800976a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800976c:	e841 2300 	strex	r3, r2, [r1]
 8009770:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1e3      	bne.n	8009740 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800977c:	4618      	mov	r0, r3
 800977e:	f7fb fdc9 	bl	8005314 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2202      	movs	r2, #2
 8009786:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009790:	b29b      	uxth	r3, r3
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	b29b      	uxth	r3, r3
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f8c1 	bl	8009920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800979e:	e09b      	b.n	80098d8 <HAL_UART_IRQHandler+0x518>
 80097a0:	08009ea7 	.word	0x08009ea7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 808e 	beq.w	80098dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80097c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8089 	beq.w	80098dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	330c      	adds	r3, #12
 80097ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80097ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80097f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e3      	bne.n	80097ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3314      	adds	r3, #20
 8009808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	623b      	str	r3, [r7, #32]
   return(result);
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	f023 0301 	bic.w	r3, r3, #1
 8009818:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3314      	adds	r3, #20
 8009822:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009826:	633a      	str	r2, [r7, #48]	@ 0x30
 8009828:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800982c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e3      	bne.n	8009802 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	330c      	adds	r3, #12
 800984e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	e853 3f00 	ldrex	r3, [r3]
 8009856:	60fb      	str	r3, [r7, #12]
   return(result);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f023 0310 	bic.w	r3, r3, #16
 800985e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	330c      	adds	r3, #12
 8009868:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800986c:	61fa      	str	r2, [r7, #28]
 800986e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009870:	69b9      	ldr	r1, [r7, #24]
 8009872:	69fa      	ldr	r2, [r7, #28]
 8009874:	e841 2300 	strex	r3, r2, [r1]
 8009878:	617b      	str	r3, [r7, #20]
   return(result);
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1e3      	bne.n	8009848 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2202      	movs	r2, #2
 8009884:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009886:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f847 	bl	8009920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009892:	e023      	b.n	80098dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800989c:	2b00      	cmp	r3, #0
 800989e:	d009      	beq.n	80098b4 <HAL_UART_IRQHandler+0x4f4>
 80098a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fb0e 	bl	8009ece <UART_Transmit_IT>
    return;
 80098b2:	e014      	b.n	80098de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80098b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00e      	beq.n	80098de <HAL_UART_IRQHandler+0x51e>
 80098c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d008      	beq.n	80098de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fb4e 	bl	8009f6e <UART_EndTransmit_IT>
    return;
 80098d2:	e004      	b.n	80098de <HAL_UART_IRQHandler+0x51e>
    return;
 80098d4:	bf00      	nop
 80098d6:	e002      	b.n	80098de <HAL_UART_IRQHandler+0x51e>
      return;
 80098d8:	bf00      	nop
 80098da:	e000      	b.n	80098de <HAL_UART_IRQHandler+0x51e>
      return;
 80098dc:	bf00      	nop
  }
}
 80098de:	37e8      	adds	r7, #232	@ 0xe8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b09c      	sub	sp, #112	@ 0x70
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009944:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009950:	2b00      	cmp	r3, #0
 8009952:	d172      	bne.n	8009a3a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009956:	2200      	movs	r2, #0
 8009958:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800995a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	330c      	adds	r3, #12
 8009960:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009964:	e853 3f00 	ldrex	r3, [r3]
 8009968:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800996a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800996c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	330c      	adds	r3, #12
 8009978:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800997a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800997c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009980:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009982:	e841 2300 	strex	r3, r2, [r1]
 8009986:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1e5      	bne.n	800995a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3314      	adds	r3, #20
 8009994:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800999e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a0:	f023 0301 	bic.w	r3, r3, #1
 80099a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80099a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3314      	adds	r3, #20
 80099ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80099ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80099b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e5      	bne.n	800998e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3314      	adds	r3, #20
 80099c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	623b      	str	r3, [r7, #32]
   return(result);
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80099da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3314      	adds	r3, #20
 80099e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80099e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80099e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ea:	e841 2300 	strex	r3, r2, [r1]
 80099ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1e5      	bne.n	80099c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80099f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099f8:	2220      	movs	r2, #32
 80099fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d119      	bne.n	8009a3a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	330c      	adds	r3, #12
 8009a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	e853 3f00 	ldrex	r3, [r3]
 8009a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f023 0310 	bic.w	r3, r3, #16
 8009a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	330c      	adds	r3, #12
 8009a24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a26:	61fa      	str	r2, [r7, #28]
 8009a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	69b9      	ldr	r1, [r7, #24]
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	617b      	str	r3, [r7, #20]
   return(result);
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1e5      	bne.n	8009a06 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d106      	bne.n	8009a56 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a50:	f7ff ff66 	bl	8009920 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a54:	e002      	b.n	8009a5c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009a56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a58:	f7f9 f9a2 	bl	8002da0 <HAL_UART_RxCpltCallback>
}
 8009a5c:	bf00      	nop
 8009a5e:	3770      	adds	r7, #112	@ 0x70
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2201      	movs	r2, #1
 8009a76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d108      	bne.n	8009a92 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a84:	085b      	lsrs	r3, r3, #1
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	4619      	mov	r1, r3
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7ff ff48 	bl	8009920 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a90:	e002      	b.n	8009a98 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f7ff ff30 	bl	80098f8 <HAL_UART_RxHalfCpltCallback>
}
 8009a98:	bf00      	nop
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009abc:	2b80      	cmp	r3, #128	@ 0x80
 8009abe:	bf0c      	ite	eq
 8009ac0:	2301      	moveq	r3, #1
 8009ac2:	2300      	movne	r3, #0
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b21      	cmp	r3, #33	@ 0x21
 8009ad2:	d108      	bne.n	8009ae6 <UART_DMAError+0x46>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d005      	beq.n	8009ae6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2200      	movs	r2, #0
 8009ade:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009ae0:	68b8      	ldr	r0, [r7, #8]
 8009ae2:	f000 f955 	bl	8009d90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af0:	2b40      	cmp	r3, #64	@ 0x40
 8009af2:	bf0c      	ite	eq
 8009af4:	2301      	moveq	r3, #1
 8009af6:	2300      	movne	r3, #0
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b22      	cmp	r3, #34	@ 0x22
 8009b06:	d108      	bne.n	8009b1a <UART_DMAError+0x7a>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d005      	beq.n	8009b1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2200      	movs	r2, #0
 8009b12:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009b14:	68b8      	ldr	r0, [r7, #8]
 8009b16:	f000 f963 	bl	8009de0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b1e:	f043 0210 	orr.w	r2, r3, #16
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b26:	68b8      	ldr	r0, [r7, #8]
 8009b28:	f7ff fef0 	bl	800990c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b2c:	bf00      	nop
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	603b      	str	r3, [r7, #0]
 8009b40:	4613      	mov	r3, r2
 8009b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b44:	e03b      	b.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4c:	d037      	beq.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b4e:	f7fa fd0d 	bl	800456c <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	6a3a      	ldr	r2, [r7, #32]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d302      	bcc.n	8009b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e03a      	b.n	8009bde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	f003 0304 	and.w	r3, r3, #4
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d023      	beq.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	2b80      	cmp	r3, #128	@ 0x80
 8009b7a:	d020      	beq.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b40      	cmp	r3, #64	@ 0x40
 8009b80:	d01d      	beq.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0308 	and.w	r3, r3, #8
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d116      	bne.n	8009bbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	617b      	str	r3, [r7, #20]
 8009ba4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 f91a 	bl	8009de0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2208      	movs	r2, #8
 8009bb0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e00f      	b.n	8009bde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	bf0c      	ite	eq
 8009bce:	2301      	moveq	r3, #1
 8009bd0:	2300      	movne	r3, #0
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d0b4      	beq.n	8009b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b085      	sub	sp, #20
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	88fa      	ldrh	r2, [r7, #6]
 8009bfe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	88fa      	ldrh	r2, [r7, #6]
 8009c04:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2222      	movs	r2, #34	@ 0x22
 8009c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d007      	beq.n	8009c2c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c2a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	695a      	ldr	r2, [r3, #20]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f042 0201 	orr.w	r2, r2, #1
 8009c3a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f042 0220 	orr.w	r2, r2, #32
 8009c4a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
	...

08009c5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b098      	sub	sp, #96	@ 0x60
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4613      	mov	r3, r2
 8009c68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	88fa      	ldrh	r2, [r7, #6]
 8009c74:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2222      	movs	r2, #34	@ 0x22
 8009c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c88:	4a3e      	ldr	r2, [pc, #248]	@ (8009d84 <UART_Start_Receive_DMA+0x128>)
 8009c8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c90:	4a3d      	ldr	r2, [pc, #244]	@ (8009d88 <UART_Start_Receive_DMA+0x12c>)
 8009c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c98:	4a3c      	ldr	r2, [pc, #240]	@ (8009d8c <UART_Start_Receive_DMA+0x130>)
 8009c9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009ca4:	f107 0308 	add.w	r3, r7, #8
 8009ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	88fb      	ldrh	r3, [r7, #6]
 8009cbc:	f7fb fad2 	bl	8005264 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	613b      	str	r3, [r7, #16]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	613b      	str	r3, [r7, #16]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	613b      	str	r3, [r7, #16]
 8009cd4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d019      	beq.n	8009d12 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	330c      	adds	r3, #12
 8009ce4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	330c      	adds	r3, #12
 8009cfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cfe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009d00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009d04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e5      	bne.n	8009cde <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3314      	adds	r3, #20
 8009d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d24:	f043 0301 	orr.w	r3, r3, #1
 8009d28:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3314      	adds	r3, #20
 8009d30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009d34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009d38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e5      	bne.n	8009d12 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3314      	adds	r3, #20
 8009d4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	e853 3f00 	ldrex	r3, [r3]
 8009d54:	617b      	str	r3, [r7, #20]
   return(result);
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3314      	adds	r3, #20
 8009d64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009d66:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6a:	6a39      	ldr	r1, [r7, #32]
 8009d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d6e:	e841 2300 	strex	r3, r2, [r1]
 8009d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1e5      	bne.n	8009d46 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3760      	adds	r7, #96	@ 0x60
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	08009939 	.word	0x08009939
 8009d88:	08009a65 	.word	0x08009a65
 8009d8c:	08009aa1 	.word	0x08009aa1

08009d90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b089      	sub	sp, #36	@ 0x24
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	330c      	adds	r3, #12
 8009d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	e853 3f00 	ldrex	r3, [r3]
 8009da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009dae:	61fb      	str	r3, [r7, #28]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	330c      	adds	r3, #12
 8009db6:	69fa      	ldr	r2, [r7, #28]
 8009db8:	61ba      	str	r2, [r7, #24]
 8009dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	6979      	ldr	r1, [r7, #20]
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	e841 2300 	strex	r3, r2, [r1]
 8009dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e5      	bne.n	8009d98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009dd4:	bf00      	nop
 8009dd6:	3724      	adds	r7, #36	@ 0x24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b095      	sub	sp, #84	@ 0x54
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	330c      	adds	r3, #12
 8009dee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df2:	e853 3f00 	ldrex	r3, [r3]
 8009df6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	330c      	adds	r3, #12
 8009e06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e08:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e10:	e841 2300 	strex	r3, r2, [r1]
 8009e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e5      	bne.n	8009de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3314      	adds	r3, #20
 8009e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	e853 3f00 	ldrex	r3, [r3]
 8009e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	f023 0301 	bic.w	r3, r3, #1
 8009e32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	3314      	adds	r3, #20
 8009e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e44:	e841 2300 	strex	r3, r2, [r1]
 8009e48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1e5      	bne.n	8009e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d119      	bne.n	8009e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f023 0310 	bic.w	r3, r3, #16
 8009e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	330c      	adds	r3, #12
 8009e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e78:	61ba      	str	r2, [r7, #24]
 8009e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	6979      	ldr	r1, [r7, #20]
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	e841 2300 	strex	r3, r2, [r1]
 8009e84:	613b      	str	r3, [r7, #16]
   return(result);
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e5      	bne.n	8009e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009e9a:	bf00      	nop
 8009e9c:	3754      	adds	r7, #84	@ 0x54
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7ff fd23 	bl	800990c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b21      	cmp	r3, #33	@ 0x21
 8009ee0:	d13e      	bne.n	8009f60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eea:	d114      	bne.n	8009f16 <UART_Transmit_IT+0x48>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d110      	bne.n	8009f16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a1b      	ldr	r3, [r3, #32]
 8009ef8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	461a      	mov	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	1c9a      	adds	r2, r3, #2
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	621a      	str	r2, [r3, #32]
 8009f14:	e008      	b.n	8009f28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	1c59      	adds	r1, r3, #1
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6211      	str	r1, [r2, #32]
 8009f20:	781a      	ldrb	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	4619      	mov	r1, r3
 8009f36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10f      	bne.n	8009f5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e000      	b.n	8009f62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f60:	2302      	movs	r3, #2
  }
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b082      	sub	sp, #8
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68da      	ldr	r2, [r3, #12]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2220      	movs	r2, #32
 8009f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff fca8 	bl	80098e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b08c      	sub	sp, #48	@ 0x30
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b22      	cmp	r3, #34	@ 0x22
 8009fb0:	f040 80ae 	bne.w	800a110 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fbc:	d117      	bne.n	8009fee <UART_Receive_IT+0x50>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d113      	bne.n	8009fee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe6:	1c9a      	adds	r2, r3, #2
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	629a      	str	r2, [r3, #40]	@ 0x28
 8009fec:	e026      	b.n	800a03c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a000:	d007      	beq.n	800a012 <UART_Receive_IT+0x74>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10a      	bne.n	800a020 <UART_Receive_IT+0x82>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d106      	bne.n	800a020 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	e008      	b.n	800a032 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	b2db      	uxtb	r3, r3
 800a028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a030:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	b29b      	uxth	r3, r3
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	4619      	mov	r1, r3
 800a04a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d15d      	bne.n	800a10c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f022 0220 	bic.w	r2, r2, #32
 800a05e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68da      	ldr	r2, [r3, #12]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a06e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	695a      	ldr	r2, [r3, #20]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f022 0201 	bic.w	r2, r2, #1
 800a07e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2220      	movs	r2, #32
 800a084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a092:	2b01      	cmp	r3, #1
 800a094:	d135      	bne.n	800a102 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	e853 3f00 	ldrex	r3, [r3]
 800a0aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f023 0310 	bic.w	r3, r3, #16
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	330c      	adds	r3, #12
 800a0ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0bc:	623a      	str	r2, [r7, #32]
 800a0be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c0:	69f9      	ldr	r1, [r7, #28]
 800a0c2:	6a3a      	ldr	r2, [r7, #32]
 800a0c4:	e841 2300 	strex	r3, r2, [r1]
 800a0c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1e5      	bne.n	800a09c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 0310 	and.w	r3, r3, #16
 800a0da:	2b10      	cmp	r3, #16
 800a0dc:	d10a      	bne.n	800a0f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	60fb      	str	r3, [r7, #12]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7ff fc10 	bl	8009920 <HAL_UARTEx_RxEventCallback>
 800a100:	e002      	b.n	800a108 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7f8 fe4c 	bl	8002da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	e002      	b.n	800a112 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	e000      	b.n	800a112 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a110:	2302      	movs	r3, #2
  }
}
 800a112:	4618      	mov	r0, r3
 800a114:	3730      	adds	r7, #48	@ 0x30
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
	...

0800a11c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a11c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a120:	b0c0      	sub	sp, #256	@ 0x100
 800a122:	af00      	add	r7, sp, #0
 800a124:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a138:	68d9      	ldr	r1, [r3, #12]
 800a13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	ea40 0301 	orr.w	r3, r0, r1
 800a144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a14a:	689a      	ldr	r2, [r3, #8]
 800a14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	431a      	orrs	r2, r3
 800a154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	431a      	orrs	r2, r3
 800a15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	4313      	orrs	r3, r2
 800a164:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a174:	f021 010c 	bic.w	r1, r1, #12
 800a178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a182:	430b      	orrs	r3, r1
 800a184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a196:	6999      	ldr	r1, [r3, #24]
 800a198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	ea40 0301 	orr.w	r3, r0, r1
 800a1a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	4b8f      	ldr	r3, [pc, #572]	@ (800a3e8 <UART_SetConfig+0x2cc>)
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d005      	beq.n	800a1bc <UART_SetConfig+0xa0>
 800a1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	4b8d      	ldr	r3, [pc, #564]	@ (800a3ec <UART_SetConfig+0x2d0>)
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d104      	bne.n	800a1c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a1bc:	f7fd fa3a 	bl	8007634 <HAL_RCC_GetPCLK2Freq>
 800a1c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a1c4:	e003      	b.n	800a1ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a1c6:	f7fd fa21 	bl	800760c <HAL_RCC_GetPCLK1Freq>
 800a1ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1d2:	69db      	ldr	r3, [r3, #28]
 800a1d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1d8:	f040 810c 	bne.w	800a3f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a1dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a1ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	462b      	mov	r3, r5
 800a1f2:	1891      	adds	r1, r2, r2
 800a1f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a1f6:	415b      	adcs	r3, r3
 800a1f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a1fe:	4621      	mov	r1, r4
 800a200:	eb12 0801 	adds.w	r8, r2, r1
 800a204:	4629      	mov	r1, r5
 800a206:	eb43 0901 	adc.w	r9, r3, r1
 800a20a:	f04f 0200 	mov.w	r2, #0
 800a20e:	f04f 0300 	mov.w	r3, #0
 800a212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a21a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a21e:	4690      	mov	r8, r2
 800a220:	4699      	mov	r9, r3
 800a222:	4623      	mov	r3, r4
 800a224:	eb18 0303 	adds.w	r3, r8, r3
 800a228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a22c:	462b      	mov	r3, r5
 800a22e:	eb49 0303 	adc.w	r3, r9, r3
 800a232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a242:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a24a:	460b      	mov	r3, r1
 800a24c:	18db      	adds	r3, r3, r3
 800a24e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a250:	4613      	mov	r3, r2
 800a252:	eb42 0303 	adc.w	r3, r2, r3
 800a256:	657b      	str	r3, [r7, #84]	@ 0x54
 800a258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a25c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a260:	f7f6 fd32 	bl	8000cc8 <__aeabi_uldivmod>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4b61      	ldr	r3, [pc, #388]	@ (800a3f0 <UART_SetConfig+0x2d4>)
 800a26a:	fba3 2302 	umull	r2, r3, r3, r2
 800a26e:	095b      	lsrs	r3, r3, #5
 800a270:	011c      	lsls	r4, r3, #4
 800a272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a276:	2200      	movs	r2, #0
 800a278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a27c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a284:	4642      	mov	r2, r8
 800a286:	464b      	mov	r3, r9
 800a288:	1891      	adds	r1, r2, r2
 800a28a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a28c:	415b      	adcs	r3, r3
 800a28e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a294:	4641      	mov	r1, r8
 800a296:	eb12 0a01 	adds.w	sl, r2, r1
 800a29a:	4649      	mov	r1, r9
 800a29c:	eb43 0b01 	adc.w	fp, r3, r1
 800a2a0:	f04f 0200 	mov.w	r2, #0
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a2ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a2b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2b4:	4692      	mov	sl, r2
 800a2b6:	469b      	mov	fp, r3
 800a2b8:	4643      	mov	r3, r8
 800a2ba:	eb1a 0303 	adds.w	r3, sl, r3
 800a2be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a2c2:	464b      	mov	r3, r9
 800a2c4:	eb4b 0303 	adc.w	r3, fp, r3
 800a2c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a2d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a2dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	18db      	adds	r3, r3, r3
 800a2e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	eb42 0303 	adc.w	r3, r2, r3
 800a2ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a2f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a2f6:	f7f6 fce7 	bl	8000cc8 <__aeabi_uldivmod>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4611      	mov	r1, r2
 800a300:	4b3b      	ldr	r3, [pc, #236]	@ (800a3f0 <UART_SetConfig+0x2d4>)
 800a302:	fba3 2301 	umull	r2, r3, r3, r1
 800a306:	095b      	lsrs	r3, r3, #5
 800a308:	2264      	movs	r2, #100	@ 0x64
 800a30a:	fb02 f303 	mul.w	r3, r2, r3
 800a30e:	1acb      	subs	r3, r1, r3
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a316:	4b36      	ldr	r3, [pc, #216]	@ (800a3f0 <UART_SetConfig+0x2d4>)
 800a318:	fba3 2302 	umull	r2, r3, r3, r2
 800a31c:	095b      	lsrs	r3, r3, #5
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a324:	441c      	add	r4, r3
 800a326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a330:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a338:	4642      	mov	r2, r8
 800a33a:	464b      	mov	r3, r9
 800a33c:	1891      	adds	r1, r2, r2
 800a33e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a340:	415b      	adcs	r3, r3
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a348:	4641      	mov	r1, r8
 800a34a:	1851      	adds	r1, r2, r1
 800a34c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a34e:	4649      	mov	r1, r9
 800a350:	414b      	adcs	r3, r1
 800a352:	637b      	str	r3, [r7, #52]	@ 0x34
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a360:	4659      	mov	r1, fp
 800a362:	00cb      	lsls	r3, r1, #3
 800a364:	4651      	mov	r1, sl
 800a366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a36a:	4651      	mov	r1, sl
 800a36c:	00ca      	lsls	r2, r1, #3
 800a36e:	4610      	mov	r0, r2
 800a370:	4619      	mov	r1, r3
 800a372:	4603      	mov	r3, r0
 800a374:	4642      	mov	r2, r8
 800a376:	189b      	adds	r3, r3, r2
 800a378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a37c:	464b      	mov	r3, r9
 800a37e:	460a      	mov	r2, r1
 800a380:	eb42 0303 	adc.w	r3, r2, r3
 800a384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a394:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a39c:	460b      	mov	r3, r1
 800a39e:	18db      	adds	r3, r3, r3
 800a3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	eb42 0303 	adc.w	r3, r2, r3
 800a3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a3ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a3b2:	f7f6 fc89 	bl	8000cc8 <__aeabi_uldivmod>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a3f0 <UART_SetConfig+0x2d4>)
 800a3bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a3c0:	095b      	lsrs	r3, r3, #5
 800a3c2:	2164      	movs	r1, #100	@ 0x64
 800a3c4:	fb01 f303 	mul.w	r3, r1, r3
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	3332      	adds	r3, #50	@ 0x32
 800a3ce:	4a08      	ldr	r2, [pc, #32]	@ (800a3f0 <UART_SetConfig+0x2d4>)
 800a3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d4:	095b      	lsrs	r3, r3, #5
 800a3d6:	f003 0207 	and.w	r2, r3, #7
 800a3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4422      	add	r2, r4
 800a3e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a3e4:	e106      	b.n	800a5f4 <UART_SetConfig+0x4d8>
 800a3e6:	bf00      	nop
 800a3e8:	40011000 	.word	0x40011000
 800a3ec:	40011400 	.word	0x40011400
 800a3f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a3f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a3fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a406:	4642      	mov	r2, r8
 800a408:	464b      	mov	r3, r9
 800a40a:	1891      	adds	r1, r2, r2
 800a40c:	6239      	str	r1, [r7, #32]
 800a40e:	415b      	adcs	r3, r3
 800a410:	627b      	str	r3, [r7, #36]	@ 0x24
 800a412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a416:	4641      	mov	r1, r8
 800a418:	1854      	adds	r4, r2, r1
 800a41a:	4649      	mov	r1, r9
 800a41c:	eb43 0501 	adc.w	r5, r3, r1
 800a420:	f04f 0200 	mov.w	r2, #0
 800a424:	f04f 0300 	mov.w	r3, #0
 800a428:	00eb      	lsls	r3, r5, #3
 800a42a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a42e:	00e2      	lsls	r2, r4, #3
 800a430:	4614      	mov	r4, r2
 800a432:	461d      	mov	r5, r3
 800a434:	4643      	mov	r3, r8
 800a436:	18e3      	adds	r3, r4, r3
 800a438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a43c:	464b      	mov	r3, r9
 800a43e:	eb45 0303 	adc.w	r3, r5, r3
 800a442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a456:	f04f 0200 	mov.w	r2, #0
 800a45a:	f04f 0300 	mov.w	r3, #0
 800a45e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a462:	4629      	mov	r1, r5
 800a464:	008b      	lsls	r3, r1, #2
 800a466:	4621      	mov	r1, r4
 800a468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a46c:	4621      	mov	r1, r4
 800a46e:	008a      	lsls	r2, r1, #2
 800a470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a474:	f7f6 fc28 	bl	8000cc8 <__aeabi_uldivmod>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4b60      	ldr	r3, [pc, #384]	@ (800a600 <UART_SetConfig+0x4e4>)
 800a47e:	fba3 2302 	umull	r2, r3, r3, r2
 800a482:	095b      	lsrs	r3, r3, #5
 800a484:	011c      	lsls	r4, r3, #4
 800a486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a498:	4642      	mov	r2, r8
 800a49a:	464b      	mov	r3, r9
 800a49c:	1891      	adds	r1, r2, r2
 800a49e:	61b9      	str	r1, [r7, #24]
 800a4a0:	415b      	adcs	r3, r3
 800a4a2:	61fb      	str	r3, [r7, #28]
 800a4a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a4a8:	4641      	mov	r1, r8
 800a4aa:	1851      	adds	r1, r2, r1
 800a4ac:	6139      	str	r1, [r7, #16]
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	414b      	adcs	r3, r1
 800a4b2:	617b      	str	r3, [r7, #20]
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a4c0:	4659      	mov	r1, fp
 800a4c2:	00cb      	lsls	r3, r1, #3
 800a4c4:	4651      	mov	r1, sl
 800a4c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4ca:	4651      	mov	r1, sl
 800a4cc:	00ca      	lsls	r2, r1, #3
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	4642      	mov	r2, r8
 800a4d6:	189b      	adds	r3, r3, r2
 800a4d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a4dc:	464b      	mov	r3, r9
 800a4de:	460a      	mov	r2, r1
 800a4e0:	eb42 0303 	adc.w	r3, r2, r3
 800a4e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a4f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	f04f 0300 	mov.w	r3, #0
 800a4fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a500:	4649      	mov	r1, r9
 800a502:	008b      	lsls	r3, r1, #2
 800a504:	4641      	mov	r1, r8
 800a506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a50a:	4641      	mov	r1, r8
 800a50c:	008a      	lsls	r2, r1, #2
 800a50e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a512:	f7f6 fbd9 	bl	8000cc8 <__aeabi_uldivmod>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4611      	mov	r1, r2
 800a51c:	4b38      	ldr	r3, [pc, #224]	@ (800a600 <UART_SetConfig+0x4e4>)
 800a51e:	fba3 2301 	umull	r2, r3, r3, r1
 800a522:	095b      	lsrs	r3, r3, #5
 800a524:	2264      	movs	r2, #100	@ 0x64
 800a526:	fb02 f303 	mul.w	r3, r2, r3
 800a52a:	1acb      	subs	r3, r1, r3
 800a52c:	011b      	lsls	r3, r3, #4
 800a52e:	3332      	adds	r3, #50	@ 0x32
 800a530:	4a33      	ldr	r2, [pc, #204]	@ (800a600 <UART_SetConfig+0x4e4>)
 800a532:	fba2 2303 	umull	r2, r3, r2, r3
 800a536:	095b      	lsrs	r3, r3, #5
 800a538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a53c:	441c      	add	r4, r3
 800a53e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a542:	2200      	movs	r2, #0
 800a544:	673b      	str	r3, [r7, #112]	@ 0x70
 800a546:	677a      	str	r2, [r7, #116]	@ 0x74
 800a548:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a54c:	4642      	mov	r2, r8
 800a54e:	464b      	mov	r3, r9
 800a550:	1891      	adds	r1, r2, r2
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	415b      	adcs	r3, r3
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a55c:	4641      	mov	r1, r8
 800a55e:	1851      	adds	r1, r2, r1
 800a560:	6039      	str	r1, [r7, #0]
 800a562:	4649      	mov	r1, r9
 800a564:	414b      	adcs	r3, r1
 800a566:	607b      	str	r3, [r7, #4]
 800a568:	f04f 0200 	mov.w	r2, #0
 800a56c:	f04f 0300 	mov.w	r3, #0
 800a570:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a574:	4659      	mov	r1, fp
 800a576:	00cb      	lsls	r3, r1, #3
 800a578:	4651      	mov	r1, sl
 800a57a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a57e:	4651      	mov	r1, sl
 800a580:	00ca      	lsls	r2, r1, #3
 800a582:	4610      	mov	r0, r2
 800a584:	4619      	mov	r1, r3
 800a586:	4603      	mov	r3, r0
 800a588:	4642      	mov	r2, r8
 800a58a:	189b      	adds	r3, r3, r2
 800a58c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a58e:	464b      	mov	r3, r9
 800a590:	460a      	mov	r2, r1
 800a592:	eb42 0303 	adc.w	r3, r2, r3
 800a596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5a2:	667a      	str	r2, [r7, #100]	@ 0x64
 800a5a4:	f04f 0200 	mov.w	r2, #0
 800a5a8:	f04f 0300 	mov.w	r3, #0
 800a5ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	008b      	lsls	r3, r1, #2
 800a5b4:	4641      	mov	r1, r8
 800a5b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5ba:	4641      	mov	r1, r8
 800a5bc:	008a      	lsls	r2, r1, #2
 800a5be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a5c2:	f7f6 fb81 	bl	8000cc8 <__aeabi_uldivmod>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a600 <UART_SetConfig+0x4e4>)
 800a5cc:	fba3 1302 	umull	r1, r3, r3, r2
 800a5d0:	095b      	lsrs	r3, r3, #5
 800a5d2:	2164      	movs	r1, #100	@ 0x64
 800a5d4:	fb01 f303 	mul.w	r3, r1, r3
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	011b      	lsls	r3, r3, #4
 800a5dc:	3332      	adds	r3, #50	@ 0x32
 800a5de:	4a08      	ldr	r2, [pc, #32]	@ (800a600 <UART_SetConfig+0x4e4>)
 800a5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e4:	095b      	lsrs	r3, r3, #5
 800a5e6:	f003 020f 	and.w	r2, r3, #15
 800a5ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4422      	add	r2, r4
 800a5f2:	609a      	str	r2, [r3, #8]
}
 800a5f4:	bf00      	nop
 800a5f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a600:	51eb851f 	.word	0x51eb851f

0800a604 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a604:	b084      	sub	sp, #16
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	f107 001c 	add.w	r0, r7, #28
 800a612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a616:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d123      	bne.n	800a666 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a622:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a646:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d105      	bne.n	800a65a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f001 fadc 	bl	800bc18 <USB_CoreReset>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]
 800a664:	e01b      	b.n	800a69e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f001 fad0 	bl	800bc18 <USB_CoreReset>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a67c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a680:	2b00      	cmp	r3, #0
 800a682:	d106      	bne.n	800a692 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a688:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a690:	e005      	b.n	800a69e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a696:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a69e:	7fbb      	ldrb	r3, [r7, #30]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d10b      	bne.n	800a6bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f043 0206 	orr.w	r2, r3, #6
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f043 0220 	orr.w	r2, r3, #32
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6c8:	b004      	add	sp, #16
 800a6ca:	4770      	bx	lr

0800a6cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d165      	bne.n	800a7ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	4a41      	ldr	r2, [pc, #260]	@ (800a7e8 <USB_SetTurnaroundTime+0x11c>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d906      	bls.n	800a6f6 <USB_SetTurnaroundTime+0x2a>
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	4a40      	ldr	r2, [pc, #256]	@ (800a7ec <USB_SetTurnaroundTime+0x120>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d202      	bcs.n	800a6f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a6f0:	230f      	movs	r3, #15
 800a6f2:	617b      	str	r3, [r7, #20]
 800a6f4:	e062      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	4a3c      	ldr	r2, [pc, #240]	@ (800a7ec <USB_SetTurnaroundTime+0x120>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d306      	bcc.n	800a70c <USB_SetTurnaroundTime+0x40>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	4a3b      	ldr	r2, [pc, #236]	@ (800a7f0 <USB_SetTurnaroundTime+0x124>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d202      	bcs.n	800a70c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a706:	230e      	movs	r3, #14
 800a708:	617b      	str	r3, [r7, #20]
 800a70a:	e057      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	4a38      	ldr	r2, [pc, #224]	@ (800a7f0 <USB_SetTurnaroundTime+0x124>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d306      	bcc.n	800a722 <USB_SetTurnaroundTime+0x56>
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4a37      	ldr	r2, [pc, #220]	@ (800a7f4 <USB_SetTurnaroundTime+0x128>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d202      	bcs.n	800a722 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a71c:	230d      	movs	r3, #13
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	e04c      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4a33      	ldr	r2, [pc, #204]	@ (800a7f4 <USB_SetTurnaroundTime+0x128>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d306      	bcc.n	800a738 <USB_SetTurnaroundTime+0x6c>
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	4a32      	ldr	r2, [pc, #200]	@ (800a7f8 <USB_SetTurnaroundTime+0x12c>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d802      	bhi.n	800a738 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a732:	230c      	movs	r3, #12
 800a734:	617b      	str	r3, [r7, #20]
 800a736:	e041      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4a2f      	ldr	r2, [pc, #188]	@ (800a7f8 <USB_SetTurnaroundTime+0x12c>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d906      	bls.n	800a74e <USB_SetTurnaroundTime+0x82>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4a2e      	ldr	r2, [pc, #184]	@ (800a7fc <USB_SetTurnaroundTime+0x130>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d802      	bhi.n	800a74e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a748:	230b      	movs	r3, #11
 800a74a:	617b      	str	r3, [r7, #20]
 800a74c:	e036      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	4a2a      	ldr	r2, [pc, #168]	@ (800a7fc <USB_SetTurnaroundTime+0x130>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d906      	bls.n	800a764 <USB_SetTurnaroundTime+0x98>
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	4a29      	ldr	r2, [pc, #164]	@ (800a800 <USB_SetTurnaroundTime+0x134>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d802      	bhi.n	800a764 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a75e:	230a      	movs	r3, #10
 800a760:	617b      	str	r3, [r7, #20]
 800a762:	e02b      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	4a26      	ldr	r2, [pc, #152]	@ (800a800 <USB_SetTurnaroundTime+0x134>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d906      	bls.n	800a77a <USB_SetTurnaroundTime+0xae>
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4a25      	ldr	r2, [pc, #148]	@ (800a804 <USB_SetTurnaroundTime+0x138>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d202      	bcs.n	800a77a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a774:	2309      	movs	r3, #9
 800a776:	617b      	str	r3, [r7, #20]
 800a778:	e020      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4a21      	ldr	r2, [pc, #132]	@ (800a804 <USB_SetTurnaroundTime+0x138>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d306      	bcc.n	800a790 <USB_SetTurnaroundTime+0xc4>
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	4a20      	ldr	r2, [pc, #128]	@ (800a808 <USB_SetTurnaroundTime+0x13c>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d802      	bhi.n	800a790 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a78a:	2308      	movs	r3, #8
 800a78c:	617b      	str	r3, [r7, #20]
 800a78e:	e015      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	4a1d      	ldr	r2, [pc, #116]	@ (800a808 <USB_SetTurnaroundTime+0x13c>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d906      	bls.n	800a7a6 <USB_SetTurnaroundTime+0xda>
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	4a1c      	ldr	r2, [pc, #112]	@ (800a80c <USB_SetTurnaroundTime+0x140>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d202      	bcs.n	800a7a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a7a0:	2307      	movs	r3, #7
 800a7a2:	617b      	str	r3, [r7, #20]
 800a7a4:	e00a      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a7a6:	2306      	movs	r3, #6
 800a7a8:	617b      	str	r3, [r7, #20]
 800a7aa:	e007      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a7ac:	79fb      	ldrb	r3, [r7, #7]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d102      	bne.n	800a7b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a7b2:	2309      	movs	r3, #9
 800a7b4:	617b      	str	r3, [r7, #20]
 800a7b6:	e001      	b.n	800a7bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a7b8:	2309      	movs	r3, #9
 800a7ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	68da      	ldr	r2, [r3, #12]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	029b      	lsls	r3, r3, #10
 800a7d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	371c      	adds	r7, #28
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	00d8acbf 	.word	0x00d8acbf
 800a7ec:	00e4e1c0 	.word	0x00e4e1c0
 800a7f0:	00f42400 	.word	0x00f42400
 800a7f4:	01067380 	.word	0x01067380
 800a7f8:	011a499f 	.word	0x011a499f
 800a7fc:	01312cff 	.word	0x01312cff
 800a800:	014ca43f 	.word	0x014ca43f
 800a804:	016e3600 	.word	0x016e3600
 800a808:	01a6ab1f 	.word	0x01a6ab1f
 800a80c:	01e84800 	.word	0x01e84800

0800a810 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	f043 0201 	orr.w	r2, r3, #1
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	370c      	adds	r7, #12
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a832:	b480      	push	{r7}
 800a834:	b083      	sub	sp, #12
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	f023 0201 	bic.w	r2, r3, #1
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d115      	bne.n	800a8a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a882:	200a      	movs	r0, #10
 800a884:	f7f9 fe7e 	bl	8004584 <HAL_Delay>
      ms += 10U;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	330a      	adds	r3, #10
 800a88c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f001 f933 	bl	800bafa <USB_GetMode>
 800a894:	4603      	mov	r3, r0
 800a896:	2b01      	cmp	r3, #1
 800a898:	d01e      	beq.n	800a8d8 <USB_SetCurrentMode+0x84>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a89e:	d9f0      	bls.n	800a882 <USB_SetCurrentMode+0x2e>
 800a8a0:	e01a      	b.n	800a8d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8a2:	78fb      	ldrb	r3, [r7, #3]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d115      	bne.n	800a8d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a8b4:	200a      	movs	r0, #10
 800a8b6:	f7f9 fe65 	bl	8004584 <HAL_Delay>
      ms += 10U;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	330a      	adds	r3, #10
 800a8be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 f91a 	bl	800bafa <USB_GetMode>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d005      	beq.n	800a8d8 <USB_SetCurrentMode+0x84>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2bc7      	cmp	r3, #199	@ 0xc7
 800a8d0:	d9f0      	bls.n	800a8b4 <USB_SetCurrentMode+0x60>
 800a8d2:	e001      	b.n	800a8d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e005      	b.n	800a8e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2bc8      	cmp	r3, #200	@ 0xc8
 800a8dc:	d101      	bne.n	800a8e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e000      	b.n	800a8e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b086      	sub	sp, #24
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a8fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a906:	2300      	movs	r3, #0
 800a908:	613b      	str	r3, [r7, #16]
 800a90a:	e009      	b.n	800a920 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	3340      	adds	r3, #64	@ 0x40
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	2200      	movs	r2, #0
 800a918:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	3301      	adds	r3, #1
 800a91e:	613b      	str	r3, [r7, #16]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	2b0e      	cmp	r3, #14
 800a924:	d9f2      	bls.n	800a90c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a926:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d11c      	bne.n	800a968 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a93c:	f043 0302 	orr.w	r3, r3, #2
 800a940:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a946:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	e005      	b.n	800a974 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a97a:	461a      	mov	r2, r3
 800a97c:	2300      	movs	r3, #0
 800a97e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a980:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a984:	2b01      	cmp	r3, #1
 800a986:	d10d      	bne.n	800a9a4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a990:	2100      	movs	r1, #0
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f968 	bl	800ac68 <USB_SetDevSpeed>
 800a998:	e008      	b.n	800a9ac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a99a:	2101      	movs	r1, #1
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f963 	bl	800ac68 <USB_SetDevSpeed>
 800a9a2:	e003      	b.n	800a9ac <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9a4:	2103      	movs	r1, #3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f95e 	bl	800ac68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9ac:	2110      	movs	r1, #16
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f8fa 	bl	800aba8 <USB_FlushTxFifo>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f924 	bl	800ac0c <USB_FlushRxFifo>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	613b      	str	r3, [r7, #16]
 800a9f6:	e043      	b.n	800aa80 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa0e:	d118      	bne.n	800aa42 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa22:	461a      	mov	r2, r3
 800aa24:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	e013      	b.n	800aa54 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa38:	461a      	mov	r2, r3
 800aa3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	e008      	b.n	800aa54 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa4e:	461a      	mov	r2, r3
 800aa50:	2300      	movs	r3, #0
 800aa52:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa60:	461a      	mov	r2, r3
 800aa62:	2300      	movs	r3, #0
 800aa64:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa72:	461a      	mov	r2, r3
 800aa74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aa78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	613b      	str	r3, [r7, #16]
 800aa80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aa84:	461a      	mov	r2, r3
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d3b5      	bcc.n	800a9f8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	e043      	b.n	800ab1a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaa8:	d118      	bne.n	800aadc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aabc:	461a      	mov	r2, r3
 800aabe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	e013      	b.n	800aaee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad2:	461a      	mov	r2, r3
 800aad4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aad8:	6013      	str	r3, [r2, #0]
 800aada:	e008      	b.n	800aaee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae8:	461a      	mov	r2, r3
 800aaea:	2300      	movs	r3, #0
 800aaec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aafa:	461a      	mov	r2, r3
 800aafc:	2300      	movs	r3, #0
 800aafe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	015a      	lsls	r2, r3, #5
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4413      	add	r3, r2
 800ab08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ab12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	3301      	adds	r3, #1
 800ab18:	613b      	str	r3, [r7, #16]
 800ab1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ab1e:	461a      	mov	r2, r3
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d3b5      	bcc.n	800aa92 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab38:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ab46:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d105      	bne.n	800ab5c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	f043 0210 	orr.w	r2, r3, #16
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	699a      	ldr	r2, [r3, #24]
 800ab60:	4b10      	ldr	r3, [pc, #64]	@ (800aba4 <USB_DevInit+0x2b8>)
 800ab62:	4313      	orrs	r3, r2
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab68:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	f043 0208 	orr.w	r2, r3, #8
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab7c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d107      	bne.n	800ab94 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab8c:	f043 0304 	orr.w	r3, r3, #4
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3718      	adds	r7, #24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aba0:	b004      	add	sp, #16
 800aba2:	4770      	bx	lr
 800aba4:	803c3800 	.word	0x803c3800

0800aba8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3301      	adds	r3, #1
 800abba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abc2:	d901      	bls.n	800abc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e01b      	b.n	800ac00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	daf2      	bge.n	800abb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	019b      	lsls	r3, r3, #6
 800abd8:	f043 0220 	orr.w	r2, r3, #32
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3301      	adds	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abec:	d901      	bls.n	800abf2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e006      	b.n	800ac00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	f003 0320 	and.w	r3, r3, #32
 800abfa:	2b20      	cmp	r3, #32
 800abfc:	d0f0      	beq.n	800abe0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac14:	2300      	movs	r3, #0
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac24:	d901      	bls.n	800ac2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e018      	b.n	800ac5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	daf2      	bge.n	800ac18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2210      	movs	r2, #16
 800ac3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac48:	d901      	bls.n	800ac4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e006      	b.n	800ac5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	f003 0310 	and.w	r3, r3, #16
 800ac56:	2b10      	cmp	r3, #16
 800ac58:	d0f0      	beq.n	800ac3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	68f9      	ldr	r1, [r7, #12]
 800ac84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b087      	sub	sp, #28
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	f003 0306 	and.w	r3, r3, #6
 800acb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d102      	bne.n	800acc0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800acba:	2300      	movs	r3, #0
 800acbc:	75fb      	strb	r3, [r7, #23]
 800acbe:	e00a      	b.n	800acd6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d002      	beq.n	800accc <USB_GetDevSpeed+0x32>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b06      	cmp	r3, #6
 800acca:	d102      	bne.n	800acd2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800accc:	2302      	movs	r3, #2
 800acce:	75fb      	strb	r3, [r7, #23]
 800acd0:	e001      	b.n	800acd6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800acd2:	230f      	movs	r3, #15
 800acd4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	371c      	adds	r7, #28
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	785b      	ldrb	r3, [r3, #1]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d13a      	bne.n	800ad76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad06:	69da      	ldr	r2, [r3, #28]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	f003 030f 	and.w	r3, r3, #15
 800ad10:	2101      	movs	r1, #1
 800ad12:	fa01 f303 	lsl.w	r3, r1, r3
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	68f9      	ldr	r1, [r7, #12]
 800ad1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	015a      	lsls	r2, r3, #5
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d155      	bne.n	800ade4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	791b      	ldrb	r3, [r3, #4]
 800ad52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	059b      	lsls	r3, r3, #22
 800ad5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	0151      	lsls	r1, r2, #5
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	440a      	add	r2, r1
 800ad66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	e036      	b.n	800ade4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad7c:	69da      	ldr	r2, [r3, #28]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	f003 030f 	and.w	r3, r3, #15
 800ad86:	2101      	movs	r1, #1
 800ad88:	fa01 f303 	lsl.w	r3, r1, r3
 800ad8c:	041b      	lsls	r3, r3, #16
 800ad8e:	68f9      	ldr	r1, [r7, #12]
 800ad90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad94:	4313      	orrs	r3, r2
 800ad96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	015a      	lsls	r2, r3, #5
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d11a      	bne.n	800ade4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	791b      	ldrb	r3, [r3, #4]
 800adc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adca:	430b      	orrs	r3, r1
 800adcc:	4313      	orrs	r3, r2
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	0151      	lsls	r1, r2, #5
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	440a      	add	r2, r1
 800add6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ade2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3714      	adds	r7, #20
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
	...

0800adf4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d161      	bne.n	800aed4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae26:	d11f      	bne.n	800ae68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	0151      	lsls	r1, r2, #5
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	440a      	add	r2, r1
 800ae3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	0151      	lsls	r1, r2, #5
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	440a      	add	r2, r1
 800ae5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	f003 030f 	and.w	r3, r3, #15
 800ae78:	2101      	movs	r1, #1
 800ae7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	43db      	mvns	r3, r3
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae88:	4013      	ands	r3, r2
 800ae8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae92:	69da      	ldr	r2, [r3, #28]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	f003 030f 	and.w	r3, r3, #15
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	fa01 f303 	lsl.w	r3, r1, r3
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	43db      	mvns	r3, r3
 800aea6:	68f9      	ldr	r1, [r7, #12]
 800aea8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aeac:	4013      	ands	r3, r2
 800aeae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	0159      	lsls	r1, r3, #5
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	440b      	add	r3, r1
 800aec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeca:	4619      	mov	r1, r3
 800aecc:	4b35      	ldr	r3, [pc, #212]	@ (800afa4 <USB_DeactivateEndpoint+0x1b0>)
 800aece:	4013      	ands	r3, r2
 800aed0:	600b      	str	r3, [r1, #0]
 800aed2:	e060      	b.n	800af96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aee6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aeea:	d11f      	bne.n	800af2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	440a      	add	r2, r1
 800af02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	0151      	lsls	r1, r2, #5
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	440a      	add	r2, r1
 800af22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	f003 030f 	and.w	r3, r3, #15
 800af3c:	2101      	movs	r1, #1
 800af3e:	fa01 f303 	lsl.w	r3, r1, r3
 800af42:	041b      	lsls	r3, r3, #16
 800af44:	43db      	mvns	r3, r3
 800af46:	68f9      	ldr	r1, [r7, #12]
 800af48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af4c:	4013      	ands	r3, r2
 800af4e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af56:	69da      	ldr	r2, [r3, #28]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	f003 030f 	and.w	r3, r3, #15
 800af60:	2101      	movs	r1, #1
 800af62:	fa01 f303 	lsl.w	r3, r1, r3
 800af66:	041b      	lsls	r3, r3, #16
 800af68:	43db      	mvns	r3, r3
 800af6a:	68f9      	ldr	r1, [r7, #12]
 800af6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af70:	4013      	ands	r3, r2
 800af72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	0159      	lsls	r1, r3, #5
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	440b      	add	r3, r1
 800af8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af8e:	4619      	mov	r1, r3
 800af90:	4b05      	ldr	r3, [pc, #20]	@ (800afa8 <USB_DeactivateEndpoint+0x1b4>)
 800af92:	4013      	ands	r3, r2
 800af94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	ec337800 	.word	0xec337800
 800afa8:	eff37800 	.word	0xeff37800

0800afac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08a      	sub	sp, #40	@ 0x28
 800afb0:	af02      	add	r7, sp, #8
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	f040 817a 	bne.w	800b2c2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d132      	bne.n	800b03c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	0151      	lsls	r1, r2, #5
 800afe8:	69fa      	ldr	r2, [r7, #28]
 800afea:	440a      	add	r2, r1
 800afec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aff0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aff4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	0151      	lsls	r1, r2, #5
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	440a      	add	r2, r1
 800b010:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b014:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	0151      	lsls	r1, r2, #5
 800b02c:	69fa      	ldr	r2, [r7, #28]
 800b02e:	440a      	add	r2, r1
 800b030:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b034:	0cdb      	lsrs	r3, r3, #19
 800b036:	04db      	lsls	r3, r3, #19
 800b038:	6113      	str	r3, [r2, #16]
 800b03a:	e092      	b.n	800b162 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	0151      	lsls	r1, r2, #5
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	440a      	add	r2, r1
 800b052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b056:	0cdb      	lsrs	r3, r3, #19
 800b058:	04db      	lsls	r3, r3, #19
 800b05a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	0151      	lsls	r1, r2, #5
 800b06e:	69fa      	ldr	r2, [r7, #28]
 800b070:	440a      	add	r2, r1
 800b072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b076:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b07a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b07e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d11a      	bne.n	800b0bc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	691a      	ldr	r2, [r3, #16]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d903      	bls.n	800b09a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	015a      	lsls	r2, r3, #5
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	0151      	lsls	r1, r2, #5
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	440a      	add	r2, r1
 800b0b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b0b8:	6113      	str	r3, [r2, #16]
 800b0ba:	e01b      	b.n	800b0f4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	015a      	lsls	r2, r3, #5
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	6919      	ldr	r1, [r3, #16]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	440b      	add	r3, r1
 800b0d4:	1e59      	subs	r1, r3, #1
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0de:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0e0:	4ba2      	ldr	r3, [pc, #648]	@ (800b36c <USB_EPStartXfer+0x3c0>)
 800b0e2:	400b      	ands	r3, r1
 800b0e4:	69b9      	ldr	r1, [r7, #24]
 800b0e6:	0148      	lsls	r0, r1, #5
 800b0e8:	69f9      	ldr	r1, [r7, #28]
 800b0ea:	4401      	add	r1, r0
 800b0ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b100:	691a      	ldr	r2, [r3, #16]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b10a:	69b9      	ldr	r1, [r7, #24]
 800b10c:	0148      	lsls	r0, r1, #5
 800b10e:	69f9      	ldr	r1, [r7, #28]
 800b110:	4401      	add	r1, r0
 800b112:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b116:	4313      	orrs	r3, r2
 800b118:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	791b      	ldrb	r3, [r3, #4]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d11f      	bne.n	800b162 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	0151      	lsls	r1, r2, #5
 800b134:	69fa      	ldr	r2, [r7, #28]
 800b136:	440a      	add	r2, r1
 800b138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b13c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b140:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	015a      	lsls	r2, r3, #5
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	4413      	add	r3, r2
 800b14a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	0151      	lsls	r1, r2, #5
 800b154:	69fa      	ldr	r2, [r7, #28]
 800b156:	440a      	add	r2, r1
 800b158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b15c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b160:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b162:	79fb      	ldrb	r3, [r7, #7]
 800b164:	2b01      	cmp	r3, #1
 800b166:	d14b      	bne.n	800b200 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	69db      	ldr	r3, [r3, #28]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d009      	beq.n	800b184 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b17c:	461a      	mov	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	791b      	ldrb	r3, [r3, #4]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d128      	bne.n	800b1de <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d110      	bne.n	800b1be <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	0151      	lsls	r1, r2, #5
 800b1ae:	69fa      	ldr	r2, [r7, #28]
 800b1b0:	440a      	add	r2, r1
 800b1b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	e00f      	b.n	800b1de <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	0151      	lsls	r1, r2, #5
 800b1f0:	69fa      	ldr	r2, [r7, #28]
 800b1f2:	440a      	add	r2, r1
 800b1f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1f8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	e165      	b.n	800b4cc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	0151      	lsls	r1, r2, #5
 800b212:	69fa      	ldr	r2, [r7, #28]
 800b214:	440a      	add	r2, r1
 800b216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b21a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b21e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	791b      	ldrb	r3, [r3, #4]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d015      	beq.n	800b254 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 814d 	beq.w	800b4cc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	f003 030f 	and.w	r3, r3, #15
 800b242:	2101      	movs	r1, #1
 800b244:	fa01 f303 	lsl.w	r3, r1, r3
 800b248:	69f9      	ldr	r1, [r7, #28]
 800b24a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b24e:	4313      	orrs	r3, r2
 800b250:	634b      	str	r3, [r1, #52]	@ 0x34
 800b252:	e13b      	b.n	800b4cc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b260:	2b00      	cmp	r3, #0
 800b262:	d110      	bne.n	800b286 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	015a      	lsls	r2, r3, #5
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	4413      	add	r3, r2
 800b26c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	0151      	lsls	r1, r2, #5
 800b276:	69fa      	ldr	r2, [r7, #28]
 800b278:	440a      	add	r2, r1
 800b27a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b27e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b282:	6013      	str	r3, [r2, #0]
 800b284:	e00f      	b.n	800b2a6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	0151      	lsls	r1, r2, #5
 800b298:	69fa      	ldr	r2, [r7, #28]
 800b29a:	440a      	add	r2, r1
 800b29c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	68d9      	ldr	r1, [r3, #12]
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	b298      	uxth	r0, r3
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 f9b8 	bl	800b630 <USB_WritePacket>
 800b2c0:	e104      	b.n	800b4cc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	0151      	lsls	r1, r2, #5
 800b2d4:	69fa      	ldr	r2, [r7, #28]
 800b2d6:	440a      	add	r2, r1
 800b2d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2dc:	0cdb      	lsrs	r3, r3, #19
 800b2de:	04db      	lsls	r3, r3, #19
 800b2e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	0151      	lsls	r1, r2, #5
 800b2f4:	69fa      	ldr	r2, [r7, #28]
 800b2f6:	440a      	add	r2, r1
 800b2f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b300:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b304:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d131      	bne.n	800b370 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	689a      	ldr	r2, [r3, #8]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b330:	691a      	ldr	r2, [r3, #16]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b33a:	69b9      	ldr	r1, [r7, #24]
 800b33c:	0148      	lsls	r0, r1, #5
 800b33e:	69f9      	ldr	r1, [r7, #28]
 800b340:	4401      	add	r1, r0
 800b342:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b346:	4313      	orrs	r3, r2
 800b348:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	015a      	lsls	r2, r3, #5
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	0151      	lsls	r1, r2, #5
 800b35c:	69fa      	ldr	r2, [r7, #28]
 800b35e:	440a      	add	r2, r1
 800b360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b364:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b368:	6113      	str	r3, [r2, #16]
 800b36a:	e061      	b.n	800b430 <USB_EPStartXfer+0x484>
 800b36c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d123      	bne.n	800b3c0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	015a      	lsls	r2, r3, #5
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	4413      	add	r3, r2
 800b380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b384:	691a      	ldr	r2, [r3, #16]
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b38e:	69b9      	ldr	r1, [r7, #24]
 800b390:	0148      	lsls	r0, r1, #5
 800b392:	69f9      	ldr	r1, [r7, #28]
 800b394:	4401      	add	r1, r0
 800b396:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b39a:	4313      	orrs	r3, r2
 800b39c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	0151      	lsls	r1, r2, #5
 800b3b0:	69fa      	ldr	r2, [r7, #28]
 800b3b2:	440a      	add	r2, r1
 800b3b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3bc:	6113      	str	r3, [r2, #16]
 800b3be:	e037      	b.n	800b430 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	691a      	ldr	r2, [r3, #16]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	1e5a      	subs	r2, r3, #1
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	689b      	ldr	r3, [r3, #8]
 800b3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	8afa      	ldrh	r2, [r7, #22]
 800b3dc:	fb03 f202 	mul.w	r2, r3, r2
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3f0:	691a      	ldr	r2, [r3, #16]
 800b3f2:	8afb      	ldrh	r3, [r7, #22]
 800b3f4:	04d9      	lsls	r1, r3, #19
 800b3f6:	4b38      	ldr	r3, [pc, #224]	@ (800b4d8 <USB_EPStartXfer+0x52c>)
 800b3f8:	400b      	ands	r3, r1
 800b3fa:	69b9      	ldr	r1, [r7, #24]
 800b3fc:	0148      	lsls	r0, r1, #5
 800b3fe:	69f9      	ldr	r1, [r7, #28]
 800b400:	4401      	add	r1, r0
 800b402:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b406:	4313      	orrs	r3, r2
 800b408:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	4413      	add	r3, r2
 800b412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b416:	691a      	ldr	r2, [r3, #16]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b420:	69b9      	ldr	r1, [r7, #24]
 800b422:	0148      	lsls	r0, r1, #5
 800b424:	69f9      	ldr	r1, [r7, #28]
 800b426:	4401      	add	r1, r0
 800b428:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b42c:	4313      	orrs	r3, r2
 800b42e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b430:	79fb      	ldrb	r3, [r7, #7]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d10d      	bne.n	800b452 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d009      	beq.n	800b452 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	68d9      	ldr	r1, [r3, #12]
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b44e:	460a      	mov	r2, r1
 800b450:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	791b      	ldrb	r3, [r3, #4]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d128      	bne.n	800b4ac <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b466:	2b00      	cmp	r3, #0
 800b468:	d110      	bne.n	800b48c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	69ba      	ldr	r2, [r7, #24]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	69fa      	ldr	r2, [r7, #28]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	e00f      	b.n	800b4ac <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	69ba      	ldr	r2, [r7, #24]
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	69fa      	ldr	r2, [r7, #28]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	0151      	lsls	r1, r2, #5
 800b4be:	69fa      	ldr	r2, [r7, #28]
 800b4c0:	440a      	add	r2, r1
 800b4c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b4ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	1ff80000 	.word	0x1ff80000

0800b4dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	785b      	ldrb	r3, [r3, #1]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d14a      	bne.n	800b590 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	015a      	lsls	r2, r3, #5
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	4413      	add	r3, r2
 800b504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b50e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b512:	f040 8086 	bne.w	800b622 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	7812      	ldrb	r2, [r2, #0]
 800b52a:	0151      	lsls	r1, r2, #5
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	440a      	add	r2, r1
 800b530:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b534:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b538:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	015a      	lsls	r2, r3, #5
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	4413      	add	r3, r2
 800b544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	7812      	ldrb	r2, [r2, #0]
 800b54e:	0151      	lsls	r1, r2, #5
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	440a      	add	r2, r1
 800b554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b558:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b55c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3301      	adds	r3, #1
 800b562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d902      	bls.n	800b574 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	75fb      	strb	r3, [r7, #23]
          break;
 800b572:	e056      	b.n	800b622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	015a      	lsls	r2, r3, #5
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b58c:	d0e7      	beq.n	800b55e <USB_EPStopXfer+0x82>
 800b58e:	e048      	b.n	800b622 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	015a      	lsls	r2, r3, #5
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	4413      	add	r3, r2
 800b59a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5a8:	d13b      	bne.n	800b622 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	015a      	lsls	r2, r3, #5
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	7812      	ldrb	r2, [r2, #0]
 800b5be:	0151      	lsls	r1, r2, #5
 800b5c0:	693a      	ldr	r2, [r7, #16]
 800b5c2:	440a      	add	r2, r1
 800b5c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b5cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	015a      	lsls	r2, r3, #5
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	7812      	ldrb	r2, [r2, #0]
 800b5e2:	0151      	lsls	r1, r2, #5
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	440a      	add	r2, r1
 800b5e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b5f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d902      	bls.n	800b608 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	75fb      	strb	r3, [r7, #23]
          break;
 800b606:	e00c      	b.n	800b622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	015a      	lsls	r2, r3, #5
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	4413      	add	r3, r2
 800b612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b61c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b620:	d0e7      	beq.n	800b5f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b622:	7dfb      	ldrb	r3, [r7, #23]
}
 800b624:	4618      	mov	r0, r3
 800b626:	371c      	adds	r7, #28
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b630:	b480      	push	{r7}
 800b632:	b089      	sub	sp, #36	@ 0x24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	4611      	mov	r1, r2
 800b63c:	461a      	mov	r2, r3
 800b63e:	460b      	mov	r3, r1
 800b640:	71fb      	strb	r3, [r7, #7]
 800b642:	4613      	mov	r3, r2
 800b644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b64e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b652:	2b00      	cmp	r3, #0
 800b654:	d123      	bne.n	800b69e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b656:	88bb      	ldrh	r3, [r7, #4]
 800b658:	3303      	adds	r3, #3
 800b65a:	089b      	lsrs	r3, r3, #2
 800b65c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b65e:	2300      	movs	r3, #0
 800b660:	61bb      	str	r3, [r7, #24]
 800b662:	e018      	b.n	800b696 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b664:	79fb      	ldrb	r3, [r7, #7]
 800b666:	031a      	lsls	r2, r3, #12
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	4413      	add	r3, r2
 800b66c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b670:	461a      	mov	r2, r3
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	3301      	adds	r3, #1
 800b67c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	3301      	adds	r3, #1
 800b682:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	3301      	adds	r3, #1
 800b688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	3301      	adds	r3, #1
 800b68e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	3301      	adds	r3, #1
 800b694:	61bb      	str	r3, [r7, #24]
 800b696:	69ba      	ldr	r2, [r7, #24]
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d3e2      	bcc.n	800b664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3724      	adds	r7, #36	@ 0x24
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b08b      	sub	sp, #44	@ 0x2c
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	089b      	lsrs	r3, r3, #2
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b6ca:	88fb      	ldrh	r3, [r7, #6]
 800b6cc:	f003 0303 	and.w	r3, r3, #3
 800b6d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	623b      	str	r3, [r7, #32]
 800b6d6:	e014      	b.n	800b702 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	3301      	adds	r3, #1
 800b700:	623b      	str	r3, [r7, #32]
 800b702:	6a3a      	ldr	r2, [r7, #32]
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	429a      	cmp	r2, r3
 800b708:	d3e6      	bcc.n	800b6d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b70a:	8bfb      	ldrh	r3, [r7, #30]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d01e      	beq.n	800b74e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b71a:	461a      	mov	r2, r3
 800b71c:	f107 0310 	add.w	r3, r7, #16
 800b720:	6812      	ldr	r2, [r2, #0]
 800b722:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	fa22 f303 	lsr.w	r3, r2, r3
 800b730:	b2da      	uxtb	r2, r3
 800b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b734:	701a      	strb	r2, [r3, #0]
      i++;
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	3301      	adds	r3, #1
 800b73a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	3301      	adds	r3, #1
 800b740:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b742:	8bfb      	ldrh	r3, [r7, #30]
 800b744:	3b01      	subs	r3, #1
 800b746:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b748:	8bfb      	ldrh	r3, [r7, #30]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1ea      	bne.n	800b724 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b750:	4618      	mov	r0, r3
 800b752:	372c      	adds	r7, #44	@ 0x2c
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	785b      	ldrb	r3, [r3, #1]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d12c      	bne.n	800b7d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	db12      	blt.n	800b7b0 <USB_EPSetStall+0x54>
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00f      	beq.n	800b7b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4413      	add	r3, r2
 800b798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	0151      	lsls	r1, r2, #5
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	440a      	add	r2, r1
 800b7a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b7ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	015a      	lsls	r2, r3, #5
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	0151      	lsls	r1, r2, #5
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	440a      	add	r2, r1
 800b7c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	e02b      	b.n	800b82a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	015a      	lsls	r2, r3, #5
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	db12      	blt.n	800b80a <USB_EPSetStall+0xae>
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00f      	beq.n	800b80a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	015a      	lsls	r2, r3, #5
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	0151      	lsls	r1, r2, #5
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	440a      	add	r2, r1
 800b800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b804:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	015a      	lsls	r2, r3, #5
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4413      	add	r3, r2
 800b812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	0151      	lsls	r1, r2, #5
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	440a      	add	r2, r1
 800b820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b824:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	785b      	ldrb	r3, [r3, #1]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d128      	bne.n	800b8a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	015a      	lsls	r2, r3, #5
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	0151      	lsls	r1, r2, #5
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	440a      	add	r2, r1
 800b86a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b86e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	791b      	ldrb	r3, [r3, #4]
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d003      	beq.n	800b884 <USB_EPClearStall+0x4c>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	791b      	ldrb	r3, [r3, #4]
 800b880:	2b02      	cmp	r3, #2
 800b882:	d138      	bne.n	800b8f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	015a      	lsls	r2, r3, #5
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4413      	add	r3, r2
 800b88c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	0151      	lsls	r1, r2, #5
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	440a      	add	r2, r1
 800b89a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b89e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8a2:	6013      	str	r3, [r2, #0]
 800b8a4:	e027      	b.n	800b8f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	0151      	lsls	r1, r2, #5
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	440a      	add	r2, r1
 800b8bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b8c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	791b      	ldrb	r3, [r3, #4]
 800b8ca:	2b03      	cmp	r3, #3
 800b8cc:	d003      	beq.n	800b8d6 <USB_EPClearStall+0x9e>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	791b      	ldrb	r3, [r3, #4]
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d10f      	bne.n	800b8f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	015a      	lsls	r2, r3, #5
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	4413      	add	r3, r2
 800b8de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	0151      	lsls	r1, r2, #5
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	440a      	add	r2, r1
 800b8ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b922:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	011b      	lsls	r3, r3, #4
 800b934:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b938:	68f9      	ldr	r1, [r7, #12]
 800b93a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b93e:	4313      	orrs	r3, r2
 800b940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68fa      	ldr	r2, [r7, #12]
 800b966:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b96a:	f023 0303 	bic.w	r3, r3, #3
 800b96e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b97e:	f023 0302 	bic.w	r3, r3, #2
 800b982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b992:	b480      	push	{r7}
 800b994:	b085      	sub	sp, #20
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b9ac:	f023 0303 	bic.w	r3, r3, #3
 800b9b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9c0:	f043 0302 	orr.w	r3, r3, #2
 800b9c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b085      	sub	sp, #20
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	0c1b      	lsrs	r3, r3, #16
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b085      	sub	sp, #20
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	68ba      	ldr	r2, [r7, #8]
 800ba4e:	4013      	ands	r3, r2
 800ba50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	b29b      	uxth	r3, r3
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b085      	sub	sp, #20
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba72:	78fb      	ldrb	r3, [r7, #3]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba90:	68bb      	ldr	r3, [r7, #8]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b087      	sub	sp, #28
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800babe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bac0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	f003 030f 	and.w	r3, r3, #15
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	fa22 f303 	lsr.w	r3, r2, r3
 800bace:	01db      	lsls	r3, r3, #7
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	693a      	ldr	r2, [r7, #16]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bad8:	78fb      	ldrb	r3, [r7, #3]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	4013      	ands	r3, r2
 800baea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800baec:	68bb      	ldr	r3, [r7, #8]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	371c      	adds	r7, #28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b083      	sub	sp, #12
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	f003 0301 	and.w	r3, r3, #1
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b085      	sub	sp, #20
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bb34:	f023 0307 	bic.w	r3, r3, #7
 800bb38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	460b      	mov	r3, r1
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	333c      	adds	r3, #60	@ 0x3c
 800bb72:	3304      	adds	r3, #4
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	4a26      	ldr	r2, [pc, #152]	@ (800bc14 <USB_EP0_OutStart+0xb8>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d90a      	bls.n	800bb96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb90:	d101      	bne.n	800bb96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	e037      	b.n	800bc06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	2300      	movs	r3, #0
 800bba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bbb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	697a      	ldr	r2, [r7, #20]
 800bbc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbc4:	f043 0318 	orr.w	r3, r3, #24
 800bbc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbd8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bbdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bbde:	7afb      	ldrb	r3, [r7, #11]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d10f      	bne.n	800bc04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbea:	461a      	mov	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbfe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bc02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	371c      	adds	r7, #28
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	4f54300a 	.word	0x4f54300a

0800bc18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	3301      	adds	r3, #1
 800bc28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc30:	d901      	bls.n	800bc36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc32:	2303      	movs	r3, #3
 800bc34:	e01b      	b.n	800bc6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	daf2      	bge.n	800bc24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f043 0201 	orr.w	r2, r3, #1
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3301      	adds	r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc5a:	d901      	bls.n	800bc60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e006      	b.n	800bc6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d0f0      	beq.n	800bc4e <USB_CoreReset+0x36>

  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
	...

0800bc7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bc8c:	f002 fd32 	bl	800e6f4 <USBD_static_malloc>
 800bc90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d109      	bne.n	800bcac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	32b0      	adds	r2, #176	@ 0xb0
 800bca2:	2100      	movs	r1, #0
 800bca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e0d4      	b.n	800be56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bcac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f004 fbbf 	bl	8010436 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	32b0      	adds	r2, #176	@ 0xb0
 800bcc2:	68f9      	ldr	r1, [r7, #12]
 800bcc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	32b0      	adds	r2, #176	@ 0xb0
 800bcd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	7c1b      	ldrb	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d138      	bne.n	800bd56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bce4:	4b5e      	ldr	r3, [pc, #376]	@ (800be60 <USBD_CDC_Init+0x1e4>)
 800bce6:	7819      	ldrb	r1, [r3, #0]
 800bce8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bcec:	2202      	movs	r2, #2
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f002 fb8f 	bl	800e412 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bcf4:	4b5a      	ldr	r3, [pc, #360]	@ (800be60 <USBD_CDC_Init+0x1e4>)
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	f003 020f 	and.w	r2, r3, #15
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	3324      	adds	r3, #36	@ 0x24
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd0e:	4b55      	ldr	r3, [pc, #340]	@ (800be64 <USBD_CDC_Init+0x1e8>)
 800bd10:	7819      	ldrb	r1, [r3, #0]
 800bd12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd16:	2202      	movs	r2, #2
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f002 fb7a 	bl	800e412 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd1e:	4b51      	ldr	r3, [pc, #324]	@ (800be64 <USBD_CDC_Init+0x1e8>)
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	f003 020f 	and.w	r2, r3, #15
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	440b      	add	r3, r1
 800bd32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd36:	2201      	movs	r2, #1
 800bd38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd3a:	4b4b      	ldr	r3, [pc, #300]	@ (800be68 <USBD_CDC_Init+0x1ec>)
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	f003 020f 	and.w	r2, r3, #15
 800bd42:	6879      	ldr	r1, [r7, #4]
 800bd44:	4613      	mov	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	3326      	adds	r3, #38	@ 0x26
 800bd50:	2210      	movs	r2, #16
 800bd52:	801a      	strh	r2, [r3, #0]
 800bd54:	e035      	b.n	800bdc2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd56:	4b42      	ldr	r3, [pc, #264]	@ (800be60 <USBD_CDC_Init+0x1e4>)
 800bd58:	7819      	ldrb	r1, [r3, #0]
 800bd5a:	2340      	movs	r3, #64	@ 0x40
 800bd5c:	2202      	movs	r2, #2
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f002 fb57 	bl	800e412 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd64:	4b3e      	ldr	r3, [pc, #248]	@ (800be60 <USBD_CDC_Init+0x1e4>)
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	f003 020f 	and.w	r2, r3, #15
 800bd6c:	6879      	ldr	r1, [r7, #4]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	4413      	add	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	440b      	add	r3, r1
 800bd78:	3324      	adds	r3, #36	@ 0x24
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd7e:	4b39      	ldr	r3, [pc, #228]	@ (800be64 <USBD_CDC_Init+0x1e8>)
 800bd80:	7819      	ldrb	r1, [r3, #0]
 800bd82:	2340      	movs	r3, #64	@ 0x40
 800bd84:	2202      	movs	r2, #2
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f002 fb43 	bl	800e412 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd8c:	4b35      	ldr	r3, [pc, #212]	@ (800be64 <USBD_CDC_Init+0x1e8>)
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	f003 020f 	and.w	r2, r3, #15
 800bd94:	6879      	ldr	r1, [r7, #4]
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	440b      	add	r3, r1
 800bda0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bda4:	2201      	movs	r2, #1
 800bda6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bda8:	4b2f      	ldr	r3, [pc, #188]	@ (800be68 <USBD_CDC_Init+0x1ec>)
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	f003 020f 	and.w	r2, r3, #15
 800bdb0:	6879      	ldr	r1, [r7, #4]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4413      	add	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	440b      	add	r3, r1
 800bdbc:	3326      	adds	r3, #38	@ 0x26
 800bdbe:	2210      	movs	r2, #16
 800bdc0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bdc2:	4b29      	ldr	r3, [pc, #164]	@ (800be68 <USBD_CDC_Init+0x1ec>)
 800bdc4:	7819      	ldrb	r1, [r3, #0]
 800bdc6:	2308      	movs	r3, #8
 800bdc8:	2203      	movs	r2, #3
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f002 fb21 	bl	800e412 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bdd0:	4b25      	ldr	r3, [pc, #148]	@ (800be68 <USBD_CDC_Init+0x1ec>)
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	f003 020f 	and.w	r2, r3, #15
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	4613      	mov	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	440b      	add	r3, r1
 800bde4:	3324      	adds	r3, #36	@ 0x24
 800bde6:	2201      	movs	r2, #1
 800bde8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	33b0      	adds	r3, #176	@ 0xb0
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800be20:	2302      	movs	r3, #2
 800be22:	e018      	b.n	800be56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7c1b      	ldrb	r3, [r3, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be2c:	4b0d      	ldr	r3, [pc, #52]	@ (800be64 <USBD_CDC_Init+0x1e8>)
 800be2e:	7819      	ldrb	r1, [r3, #0]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f002 fbd8 	bl	800e5f0 <USBD_LL_PrepareReceive>
 800be40:	e008      	b.n	800be54 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be42:	4b08      	ldr	r3, [pc, #32]	@ (800be64 <USBD_CDC_Init+0x1e8>)
 800be44:	7819      	ldrb	r1, [r3, #0]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be4c:	2340      	movs	r3, #64	@ 0x40
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f002 fbce 	bl	800e5f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	20000097 	.word	0x20000097
 800be64:	20000098 	.word	0x20000098
 800be68:	20000099 	.word	0x20000099

0800be6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800be78:	4b3a      	ldr	r3, [pc, #232]	@ (800bf64 <USBD_CDC_DeInit+0xf8>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f002 faed 	bl	800e45e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800be84:	4b37      	ldr	r3, [pc, #220]	@ (800bf64 <USBD_CDC_DeInit+0xf8>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	f003 020f 	and.w	r2, r3, #15
 800be8c:	6879      	ldr	r1, [r7, #4]
 800be8e:	4613      	mov	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	440b      	add	r3, r1
 800be98:	3324      	adds	r3, #36	@ 0x24
 800be9a:	2200      	movs	r2, #0
 800be9c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800be9e:	4b32      	ldr	r3, [pc, #200]	@ (800bf68 <USBD_CDC_DeInit+0xfc>)
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	4619      	mov	r1, r3
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f002 fada 	bl	800e45e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800beaa:	4b2f      	ldr	r3, [pc, #188]	@ (800bf68 <USBD_CDC_DeInit+0xfc>)
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	f003 020f 	and.w	r2, r3, #15
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	4613      	mov	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	440b      	add	r3, r1
 800bebe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bec2:	2200      	movs	r2, #0
 800bec4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bec6:	4b29      	ldr	r3, [pc, #164]	@ (800bf6c <USBD_CDC_DeInit+0x100>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	4619      	mov	r1, r3
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f002 fac6 	bl	800e45e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bed2:	4b26      	ldr	r3, [pc, #152]	@ (800bf6c <USBD_CDC_DeInit+0x100>)
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	f003 020f 	and.w	r2, r3, #15
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	4613      	mov	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	440b      	add	r3, r1
 800bee6:	3324      	adds	r3, #36	@ 0x24
 800bee8:	2200      	movs	r2, #0
 800beea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800beec:	4b1f      	ldr	r3, [pc, #124]	@ (800bf6c <USBD_CDC_DeInit+0x100>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	f003 020f 	and.w	r2, r3, #15
 800bef4:	6879      	ldr	r1, [r7, #4]
 800bef6:	4613      	mov	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	440b      	add	r3, r1
 800bf00:	3326      	adds	r3, #38	@ 0x26
 800bf02:	2200      	movs	r2, #0
 800bf04:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	32b0      	adds	r2, #176	@ 0xb0
 800bf10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d01f      	beq.n	800bf58 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	33b0      	adds	r3, #176	@ 0xb0
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	32b0      	adds	r2, #176	@ 0xb0
 800bf36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f002 fbe8 	bl	800e710 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	32b0      	adds	r2, #176	@ 0xb0
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	20000097 	.word	0x20000097
 800bf68:	20000098 	.word	0x20000098
 800bf6c:	20000099 	.word	0x20000099

0800bf70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	32b0      	adds	r2, #176	@ 0xb0
 800bf84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e0bf      	b.n	800c120 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d050      	beq.n	800c04e <USBD_CDC_Setup+0xde>
 800bfac:	2b20      	cmp	r3, #32
 800bfae:	f040 80af 	bne.w	800c110 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	88db      	ldrh	r3, [r3, #6]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d03a      	beq.n	800c030 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	da1b      	bge.n	800bffc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	33b0      	adds	r3, #176	@ 0xb0
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bfda:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	88d2      	ldrh	r2, [r2, #6]
 800bfe0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	88db      	ldrh	r3, [r3, #6]
 800bfe6:	2b07      	cmp	r3, #7
 800bfe8:	bf28      	it	cs
 800bfea:	2307      	movcs	r3, #7
 800bfec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	89fa      	ldrh	r2, [r7, #14]
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f001 fdb1 	bl	800db5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bffa:	e090      	b.n	800c11e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	785a      	ldrb	r2, [r3, #1]
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	88db      	ldrh	r3, [r3, #6]
 800c00a:	2b3f      	cmp	r3, #63	@ 0x3f
 800c00c:	d803      	bhi.n	800c016 <USBD_CDC_Setup+0xa6>
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	88db      	ldrh	r3, [r3, #6]
 800c012:	b2da      	uxtb	r2, r3
 800c014:	e000      	b.n	800c018 <USBD_CDC_Setup+0xa8>
 800c016:	2240      	movs	r2, #64	@ 0x40
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c01e:	6939      	ldr	r1, [r7, #16]
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c026:	461a      	mov	r2, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f001 fdc3 	bl	800dbb4 <USBD_CtlPrepareRx>
      break;
 800c02e:	e076      	b.n	800c11e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	33b0      	adds	r3, #176	@ 0xb0
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	7850      	ldrb	r0, [r2, #1]
 800c046:	2200      	movs	r2, #0
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	4798      	blx	r3
      break;
 800c04c:	e067      	b.n	800c11e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	785b      	ldrb	r3, [r3, #1]
 800c052:	2b0b      	cmp	r3, #11
 800c054:	d851      	bhi.n	800c0fa <USBD_CDC_Setup+0x18a>
 800c056:	a201      	add	r2, pc, #4	@ (adr r2, 800c05c <USBD_CDC_Setup+0xec>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c08d 	.word	0x0800c08d
 800c060:	0800c109 	.word	0x0800c109
 800c064:	0800c0fb 	.word	0x0800c0fb
 800c068:	0800c0fb 	.word	0x0800c0fb
 800c06c:	0800c0fb 	.word	0x0800c0fb
 800c070:	0800c0fb 	.word	0x0800c0fb
 800c074:	0800c0fb 	.word	0x0800c0fb
 800c078:	0800c0fb 	.word	0x0800c0fb
 800c07c:	0800c0fb 	.word	0x0800c0fb
 800c080:	0800c0fb 	.word	0x0800c0fb
 800c084:	0800c0b7 	.word	0x0800c0b7
 800c088:	0800c0e1 	.word	0x0800c0e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b03      	cmp	r3, #3
 800c096:	d107      	bne.n	800c0a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c098:	f107 030a 	add.w	r3, r7, #10
 800c09c:	2202      	movs	r2, #2
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f001 fd5b 	bl	800db5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0a6:	e032      	b.n	800c10e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f001 fce5 	bl	800da7a <USBD_CtlError>
            ret = USBD_FAIL;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	75fb      	strb	r3, [r7, #23]
          break;
 800c0b4:	e02b      	b.n	800c10e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d107      	bne.n	800c0d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c0c2:	f107 030d 	add.w	r3, r7, #13
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f001 fd46 	bl	800db5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0d0:	e01d      	b.n	800c10e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 fcd0 	bl	800da7a <USBD_CtlError>
            ret = USBD_FAIL;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800c0de:	e016      	b.n	800c10e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d00f      	beq.n	800c10c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c0ec:	6839      	ldr	r1, [r7, #0]
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f001 fcc3 	bl	800da7a <USBD_CtlError>
            ret = USBD_FAIL;
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c0f8:	e008      	b.n	800c10c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f001 fcbc 	bl	800da7a <USBD_CtlError>
          ret = USBD_FAIL;
 800c102:	2303      	movs	r3, #3
 800c104:	75fb      	strb	r3, [r7, #23]
          break;
 800c106:	e002      	b.n	800c10e <USBD_CDC_Setup+0x19e>
          break;
 800c108:	bf00      	nop
 800c10a:	e008      	b.n	800c11e <USBD_CDC_Setup+0x1ae>
          break;
 800c10c:	bf00      	nop
      }
      break;
 800c10e:	e006      	b.n	800c11e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f001 fcb1 	bl	800da7a <USBD_CtlError>
      ret = USBD_FAIL;
 800c118:	2303      	movs	r3, #3
 800c11a:	75fb      	strb	r3, [r7, #23]
      break;
 800c11c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c120:	4618      	mov	r0, r3
 800c122:	3718      	adds	r7, #24
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c13a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	32b0      	adds	r2, #176	@ 0xb0
 800c146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c14e:	2303      	movs	r3, #3
 800c150:	e065      	b.n	800c21e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	32b0      	adds	r2, #176	@ 0xb0
 800c15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c160:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c162:	78fb      	ldrb	r3, [r7, #3]
 800c164:	f003 020f 	and.w	r2, r3, #15
 800c168:	6879      	ldr	r1, [r7, #4]
 800c16a:	4613      	mov	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	440b      	add	r3, r1
 800c174:	3318      	adds	r3, #24
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d02f      	beq.n	800c1dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c17c:	78fb      	ldrb	r3, [r7, #3]
 800c17e:	f003 020f 	and.w	r2, r3, #15
 800c182:	6879      	ldr	r1, [r7, #4]
 800c184:	4613      	mov	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	4413      	add	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	440b      	add	r3, r1
 800c18e:	3318      	adds	r3, #24
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	78fb      	ldrb	r3, [r7, #3]
 800c194:	f003 010f 	and.w	r1, r3, #15
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	460b      	mov	r3, r1
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	440b      	add	r3, r1
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4403      	add	r3, r0
 800c1a4:	331c      	adds	r3, #28
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c1ac:	fb01 f303 	mul.w	r3, r1, r3
 800c1b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d112      	bne.n	800c1dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c1b6:	78fb      	ldrb	r3, [r7, #3]
 800c1b8:	f003 020f 	and.w	r2, r3, #15
 800c1bc:	6879      	ldr	r1, [r7, #4]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4413      	add	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	440b      	add	r3, r1
 800c1c8:	3318      	adds	r3, #24
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c1ce:	78f9      	ldrb	r1, [r7, #3]
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f002 f9ea 	bl	800e5ae <USBD_LL_Transmit>
 800c1da:	e01f      	b.n	800c21c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	33b0      	adds	r3, #176	@ 0xb0
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d010      	beq.n	800c21c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	33b0      	adds	r3, #176	@ 0xb0
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c218:	78fa      	ldrb	r2, [r7, #3]
 800c21a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	460b      	mov	r3, r1
 800c230:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	32b0      	adds	r2, #176	@ 0xb0
 800c23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c240:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	32b0      	adds	r2, #176	@ 0xb0
 800c24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d101      	bne.n	800c258 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c254:	2303      	movs	r3, #3
 800c256:	e01a      	b.n	800c28e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c258:	78fb      	ldrb	r3, [r7, #3]
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f002 f9e8 	bl	800e632 <USBD_LL_GetRxDataSize>
 800c262:	4602      	mov	r2, r0
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	33b0      	adds	r3, #176	@ 0xb0
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	4413      	add	r3, r2
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c288:	4611      	mov	r1, r2
 800c28a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b084      	sub	sp, #16
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	32b0      	adds	r2, #176	@ 0xb0
 800c2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e024      	b.n	800c302 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	33b0      	adds	r3, #176	@ 0xb0
 800c2c2:	009b      	lsls	r3, r3, #2
 800c2c4:	4413      	add	r3, r2
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d019      	beq.n	800c300 <USBD_CDC_EP0_RxReady+0x6a>
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c2d2:	2bff      	cmp	r3, #255	@ 0xff
 800c2d4:	d014      	beq.n	800c300 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	33b0      	adds	r3, #176	@ 0xb0
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c2ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	22ff      	movs	r2, #255	@ 0xff
 800c2fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c314:	2182      	movs	r1, #130	@ 0x82
 800c316:	4818      	ldr	r0, [pc, #96]	@ (800c378 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c318:	f000 fd4f 	bl	800cdba <USBD_GetEpDesc>
 800c31c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c31e:	2101      	movs	r1, #1
 800c320:	4815      	ldr	r0, [pc, #84]	@ (800c378 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c322:	f000 fd4a 	bl	800cdba <USBD_GetEpDesc>
 800c326:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c328:	2181      	movs	r1, #129	@ 0x81
 800c32a:	4813      	ldr	r0, [pc, #76]	@ (800c378 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c32c:	f000 fd45 	bl	800cdba <USBD_GetEpDesc>
 800c330:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d002      	beq.n	800c33e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2210      	movs	r2, #16
 800c33c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d006      	beq.n	800c352 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	2200      	movs	r2, #0
 800c348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c34c:	711a      	strb	r2, [r3, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c360:	711a      	strb	r2, [r3, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2243      	movs	r2, #67	@ 0x43
 800c36a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c36c:	4b02      	ldr	r3, [pc, #8]	@ (800c378 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20000054 	.word	0x20000054

0800c37c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c384:	2182      	movs	r1, #130	@ 0x82
 800c386:	4818      	ldr	r0, [pc, #96]	@ (800c3e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c388:	f000 fd17 	bl	800cdba <USBD_GetEpDesc>
 800c38c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c38e:	2101      	movs	r1, #1
 800c390:	4815      	ldr	r0, [pc, #84]	@ (800c3e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c392:	f000 fd12 	bl	800cdba <USBD_GetEpDesc>
 800c396:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c398:	2181      	movs	r1, #129	@ 0x81
 800c39a:	4813      	ldr	r0, [pc, #76]	@ (800c3e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c39c:	f000 fd0d 	bl	800cdba <USBD_GetEpDesc>
 800c3a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	2210      	movs	r2, #16
 800c3ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d006      	beq.n	800c3c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	711a      	strb	r2, [r3, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f042 0202 	orr.w	r2, r2, #2
 800c3c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d006      	beq.n	800c3d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	711a      	strb	r2, [r3, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f042 0202 	orr.w	r2, r2, #2
 800c3d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2243      	movs	r2, #67	@ 0x43
 800c3da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c3dc:	4b02      	ldr	r3, [pc, #8]	@ (800c3e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3718      	adds	r7, #24
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20000054 	.word	0x20000054

0800c3ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3f4:	2182      	movs	r1, #130	@ 0x82
 800c3f6:	4818      	ldr	r0, [pc, #96]	@ (800c458 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3f8:	f000 fcdf 	bl	800cdba <USBD_GetEpDesc>
 800c3fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c3fe:	2101      	movs	r1, #1
 800c400:	4815      	ldr	r0, [pc, #84]	@ (800c458 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c402:	f000 fcda 	bl	800cdba <USBD_GetEpDesc>
 800c406:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c408:	2181      	movs	r1, #129	@ 0x81
 800c40a:	4813      	ldr	r0, [pc, #76]	@ (800c458 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c40c:	f000 fcd5 	bl	800cdba <USBD_GetEpDesc>
 800c410:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2210      	movs	r2, #16
 800c41c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d006      	beq.n	800c432 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	2200      	movs	r2, #0
 800c428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c42c:	711a      	strb	r2, [r3, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d006      	beq.n	800c446 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c440:	711a      	strb	r2, [r3, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2243      	movs	r2, #67	@ 0x43
 800c44a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c44c:	4b02      	ldr	r3, [pc, #8]	@ (800c458 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	20000054 	.word	0x20000054

0800c45c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	220a      	movs	r2, #10
 800c468:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c46a:	4b03      	ldr	r3, [pc, #12]	@ (800c478 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	20000010 	.word	0x20000010

0800c47c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e009      	b.n	800c4a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	33b0      	adds	r3, #176	@ 0xb0
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	683a      	ldr	r2, [r7, #0]
 800c4a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	32b0      	adds	r2, #176	@ 0xb0
 800c4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d101      	bne.n	800c4d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c4d2:	2303      	movs	r3, #3
 800c4d4:	e008      	b.n	800c4e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	371c      	adds	r7, #28
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	32b0      	adds	r2, #176	@ 0xb0
 800c508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c50c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c514:	2303      	movs	r3, #3
 800c516:	e004      	b.n	800c522 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
	...

0800c530 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	32b0      	adds	r2, #176	@ 0xb0
 800c542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c546:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c548:	2301      	movs	r3, #1
 800c54a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c552:	2303      	movs	r3, #3
 800c554:	e025      	b.n	800c5a2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d11f      	bne.n	800c5a0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2201      	movs	r2, #1
 800c564:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c568:	4b10      	ldr	r3, [pc, #64]	@ (800c5ac <USBD_CDC_TransmitPacket+0x7c>)
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	f003 020f 	and.w	r2, r3, #15
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	4613      	mov	r3, r2
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4413      	add	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4403      	add	r3, r0
 800c582:	3318      	adds	r3, #24
 800c584:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c586:	4b09      	ldr	r3, [pc, #36]	@ (800c5ac <USBD_CDC_TransmitPacket+0x7c>)
 800c588:	7819      	ldrb	r1, [r3, #0]
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f002 f809 	bl	800e5ae <USBD_LL_Transmit>

    ret = USBD_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000097 	.word	0x20000097

0800c5b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	32b0      	adds	r2, #176	@ 0xb0
 800c5c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	32b0      	adds	r2, #176	@ 0xb0
 800c5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	e018      	b.n	800c610 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	7c1b      	ldrb	r3, [r3, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10a      	bne.n	800c5fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c618 <USBD_CDC_ReceivePacket+0x68>)
 800c5e8:	7819      	ldrb	r1, [r3, #0]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f001 fffb 	bl	800e5f0 <USBD_LL_PrepareReceive>
 800c5fa:	e008      	b.n	800c60e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5fc:	4b06      	ldr	r3, [pc, #24]	@ (800c618 <USBD_CDC_ReceivePacket+0x68>)
 800c5fe:	7819      	ldrb	r1, [r3, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c606:	2340      	movs	r3, #64	@ 0x40
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f001 fff1 	bl	800e5f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	20000098 	.word	0x20000098

0800c61c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	4613      	mov	r3, r2
 800c628:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c630:	2303      	movs	r3, #3
 800c632:	e01f      	b.n	800c674 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d003      	beq.n	800c65a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2201      	movs	r2, #1
 800c65e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	79fa      	ldrb	r2, [r7, #7]
 800c666:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f001 fe6b 	bl	800e344 <USBD_LL_Init>
 800c66e:	4603      	mov	r3, r0
 800c670:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c672:	7dfb      	ldrb	r3, [r7, #23]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3718      	adds	r7, #24
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c686:	2300      	movs	r3, #0
 800c688:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c690:	2303      	movs	r3, #3
 800c692:	e025      	b.n	800c6e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	32ae      	adds	r2, #174	@ 0xae
 800c6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00f      	beq.n	800c6d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	32ae      	adds	r2, #174	@ 0xae
 800c6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c0:	f107 020e 	add.w	r2, r7, #14
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	4798      	blx	r3
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c6d6:	1c5a      	adds	r2, r3, #1
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f001 fe73 	bl	800e3dc <USBD_LL_Start>
 800c6f6:	4603      	mov	r3, r0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c708:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	460b      	mov	r3, r1
 800c720:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c722:	2300      	movs	r3, #0
 800c724:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d009      	beq.n	800c744 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	78fa      	ldrb	r2, [r7, #3]
 800c73a:	4611      	mov	r1, r2
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	4798      	blx	r3
 800c740:	4603      	mov	r3, r0
 800c742:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c744:	7bfb      	ldrb	r3, [r7, #15]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	460b      	mov	r3, r1
 800c758:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	78fa      	ldrb	r2, [r7, #3]
 800c768:	4611      	mov	r1, r2
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	4798      	blx	r3
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c774:	2303      	movs	r3, #3
 800c776:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c778:	7bfb      	ldrb	r3, [r7, #15]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b084      	sub	sp, #16
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c792:	6839      	ldr	r1, [r7, #0]
 800c794:	4618      	mov	r0, r3
 800c796:	f001 f936 	bl	800da06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c7b6:	f003 031f 	and.w	r3, r3, #31
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	d01a      	beq.n	800c7f4 <USBD_LL_SetupStage+0x72>
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d822      	bhi.n	800c808 <USBD_LL_SetupStage+0x86>
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <USBD_LL_SetupStage+0x4a>
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d00a      	beq.n	800c7e0 <USBD_LL_SetupStage+0x5e>
 800c7ca:	e01d      	b.n	800c808 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fb63 	bl	800cea0 <USBD_StdDevReq>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c7de:	e020      	b.n	800c822 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fbcb 	bl	800cf84 <USBD_StdItfReq>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7f2:	e016      	b.n	800c822 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fc2d 	bl	800d05c <USBD_StdEPReq>
 800c802:	4603      	mov	r3, r0
 800c804:	73fb      	strb	r3, [r7, #15]
      break;
 800c806:	e00c      	b.n	800c822 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c80e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c812:	b2db      	uxtb	r3, r3
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f001 fe40 	bl	800e49c <USBD_LL_StallEP>
 800c81c:	4603      	mov	r3, r0
 800c81e:	73fb      	strb	r3, [r7, #15]
      break;
 800c820:	bf00      	nop
  }

  return ret;
 800c822:	7bfb      	ldrb	r3, [r7, #15]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	460b      	mov	r3, r1
 800c836:	607a      	str	r2, [r7, #4]
 800c838:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c83e:	7afb      	ldrb	r3, [r7, #11]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d16e      	bne.n	800c922 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c84a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c852:	2b03      	cmp	r3, #3
 800c854:	f040 8098 	bne.w	800c988 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	689a      	ldr	r2, [r3, #8]
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	429a      	cmp	r2, r3
 800c862:	d913      	bls.n	800c88c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	689a      	ldr	r2, [r3, #8]
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	1ad2      	subs	r2, r2, r3
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	68da      	ldr	r2, [r3, #12]
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	4293      	cmp	r3, r2
 800c87c:	bf28      	it	cs
 800c87e:	4613      	movcs	r3, r2
 800c880:	461a      	mov	r2, r3
 800c882:	6879      	ldr	r1, [r7, #4]
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f001 f9b2 	bl	800dbee <USBD_CtlContinueRx>
 800c88a:	e07d      	b.n	800c988 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c892:	f003 031f 	and.w	r3, r3, #31
 800c896:	2b02      	cmp	r3, #2
 800c898:	d014      	beq.n	800c8c4 <USBD_LL_DataOutStage+0x98>
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d81d      	bhi.n	800c8da <USBD_LL_DataOutStage+0xae>
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d002      	beq.n	800c8a8 <USBD_LL_DataOutStage+0x7c>
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d003      	beq.n	800c8ae <USBD_LL_DataOutStage+0x82>
 800c8a6:	e018      	b.n	800c8da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	75bb      	strb	r3, [r7, #22]
            break;
 800c8ac:	e018      	b.n	800c8e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f000 fa64 	bl	800cd86 <USBD_CoreFindIF>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	75bb      	strb	r3, [r7, #22]
            break;
 800c8c2:	e00d      	b.n	800c8e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f000 fa66 	bl	800cda0 <USBD_CoreFindEP>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	75bb      	strb	r3, [r7, #22]
            break;
 800c8d8:	e002      	b.n	800c8e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75bb      	strb	r3, [r7, #22]
            break;
 800c8de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c8e0:	7dbb      	ldrb	r3, [r7, #22]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d119      	bne.n	800c91a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d113      	bne.n	800c91a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c8f2:	7dba      	ldrb	r2, [r7, #22]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	32ae      	adds	r2, #174	@ 0xae
 800c8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00b      	beq.n	800c91a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c902:	7dba      	ldrb	r2, [r7, #22]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c90a:	7dba      	ldrb	r2, [r7, #22]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	32ae      	adds	r2, #174	@ 0xae
 800c910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f001 f978 	bl	800dc10 <USBD_CtlSendStatus>
 800c920:	e032      	b.n	800c988 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c922:	7afb      	ldrb	r3, [r7, #11]
 800c924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	4619      	mov	r1, r3
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f000 fa37 	bl	800cda0 <USBD_CoreFindEP>
 800c932:	4603      	mov	r3, r0
 800c934:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c936:	7dbb      	ldrb	r3, [r7, #22]
 800c938:	2bff      	cmp	r3, #255	@ 0xff
 800c93a:	d025      	beq.n	800c988 <USBD_LL_DataOutStage+0x15c>
 800c93c:	7dbb      	ldrb	r3, [r7, #22]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d122      	bne.n	800c988 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d117      	bne.n	800c97e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c94e:	7dba      	ldrb	r2, [r7, #22]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	32ae      	adds	r2, #174	@ 0xae
 800c954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00f      	beq.n	800c97e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c95e:	7dba      	ldrb	r2, [r7, #22]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c966:	7dba      	ldrb	r2, [r7, #22]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	32ae      	adds	r2, #174	@ 0xae
 800c96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	7afa      	ldrb	r2, [r7, #11]
 800c974:	4611      	mov	r1, r2
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	4798      	blx	r3
 800c97a:	4603      	mov	r3, r0
 800c97c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d001      	beq.n	800c988 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c984:	7dfb      	ldrb	r3, [r7, #23]
 800c986:	e000      	b.n	800c98a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3718      	adds	r7, #24
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b086      	sub	sp, #24
 800c996:	af00      	add	r7, sp, #0
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	460b      	mov	r3, r1
 800c99c:	607a      	str	r2, [r7, #4]
 800c99e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c9a0:	7afb      	ldrb	r3, [r7, #11]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d16f      	bne.n	800ca86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3314      	adds	r3, #20
 800c9aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d15a      	bne.n	800ca6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	689a      	ldr	r2, [r3, #8]
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d914      	bls.n	800c9ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	689a      	ldr	r2, [r3, #8]
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	1ad2      	subs	r2, r2, r3
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	6879      	ldr	r1, [r7, #4]
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f001 f8da 	bl	800db92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9de:	2300      	movs	r3, #0
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f001 fe03 	bl	800e5f0 <USBD_LL_PrepareReceive>
 800c9ea:	e03f      	b.n	800ca6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	68da      	ldr	r2, [r3, #12]
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d11c      	bne.n	800ca32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d316      	bcc.n	800ca32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d20f      	bcs.n	800ca32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ca12:	2200      	movs	r2, #0
 800ca14:	2100      	movs	r1, #0
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f001 f8bb 	bl	800db92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca24:	2300      	movs	r3, #0
 800ca26:	2200      	movs	r2, #0
 800ca28:	2100      	movs	r1, #0
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f001 fde0 	bl	800e5f0 <USBD_LL_PrepareReceive>
 800ca30:	e01c      	b.n	800ca6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	2b03      	cmp	r3, #3
 800ca3c:	d10f      	bne.n	800ca5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d009      	beq.n	800ca5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca5e:	2180      	movs	r1, #128	@ 0x80
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f001 fd1b 	bl	800e49c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f001 f8e5 	bl	800dc36 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d03a      	beq.n	800caec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f7ff fe42 	bl	800c700 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ca84:	e032      	b.n	800caec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ca86:	7afb      	ldrb	r3, [r7, #11]
 800ca88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	4619      	mov	r1, r3
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f000 f985 	bl	800cda0 <USBD_CoreFindEP>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	2bff      	cmp	r3, #255	@ 0xff
 800ca9e:	d025      	beq.n	800caec <USBD_LL_DataInStage+0x15a>
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d122      	bne.n	800caec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caac:	b2db      	uxtb	r3, r3
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d11c      	bne.n	800caec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cab2:	7dfa      	ldrb	r2, [r7, #23]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	32ae      	adds	r2, #174	@ 0xae
 800cab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cabc:	695b      	ldr	r3, [r3, #20]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d014      	beq.n	800caec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cac2:	7dfa      	ldrb	r2, [r7, #23]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800caca:	7dfa      	ldrb	r2, [r7, #23]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	32ae      	adds	r2, #174	@ 0xae
 800cad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad4:	695b      	ldr	r3, [r3, #20]
 800cad6:	7afa      	ldrb	r2, [r7, #11]
 800cad8:	4611      	mov	r1, r2
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	4798      	blx	r3
 800cade:	4603      	mov	r3, r0
 800cae0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cae2:	7dbb      	ldrb	r3, [r7, #22]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cae8:	7dbb      	ldrb	r3, [r7, #22]
 800caea:	e000      	b.n	800caee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3718      	adds	r7, #24
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b084      	sub	sp, #16
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2201      	movs	r2, #1
 800cb06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d014      	beq.n	800cb5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00e      	beq.n	800cb5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	6852      	ldr	r2, [r2, #4]
 800cb4a:	b2d2      	uxtb	r2, r2
 800cb4c:	4611      	mov	r1, r2
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	4798      	blx	r3
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d001      	beq.n	800cb5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cb58:	2303      	movs	r3, #3
 800cb5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb5c:	2340      	movs	r3, #64	@ 0x40
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2100      	movs	r1, #0
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f001 fc55 	bl	800e412 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2240      	movs	r2, #64	@ 0x40
 800cb74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb78:	2340      	movs	r3, #64	@ 0x40
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	2180      	movs	r1, #128	@ 0x80
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f001 fc47 	bl	800e412 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2240      	movs	r2, #64	@ 0x40
 800cb8e:	621a      	str	r2, [r3, #32]

  return ret;
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	460b      	mov	r3, r1
 800cba4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	78fa      	ldrb	r2, [r7, #3]
 800cbaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b083      	sub	sp, #12
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	2b04      	cmp	r3, #4
 800cbcc:	d006      	beq.n	800cbdc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2204      	movs	r2, #4
 800cbe0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	370c      	adds	r7, #12
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr

0800cbf2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cbf2:	b480      	push	{r7}
 800cbf4:	b083      	sub	sp, #12
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	d106      	bne.n	800cc14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	370c      	adds	r7, #12
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b082      	sub	sp, #8
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	2b03      	cmp	r3, #3
 800cc34:	d110      	bne.n	800cc58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d00b      	beq.n	800cc58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc46:	69db      	ldr	r3, [r3, #28]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d005      	beq.n	800cc58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc52:	69db      	ldr	r3, [r3, #28]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b082      	sub	sp, #8
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	32ae      	adds	r2, #174	@ 0xae
 800cc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d101      	bne.n	800cc84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e01c      	b.n	800ccbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b03      	cmp	r3, #3
 800cc8e:	d115      	bne.n	800ccbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	32ae      	adds	r2, #174	@ 0xae
 800cc9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc9e:	6a1b      	ldr	r3, [r3, #32]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00b      	beq.n	800ccbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	32ae      	adds	r2, #174	@ 0xae
 800ccae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb2:	6a1b      	ldr	r3, [r3, #32]
 800ccb4:	78fa      	ldrb	r2, [r7, #3]
 800ccb6:	4611      	mov	r1, r2
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b082      	sub	sp, #8
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
 800ccce:	460b      	mov	r3, r1
 800ccd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	32ae      	adds	r2, #174	@ 0xae
 800ccdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cce4:	2303      	movs	r3, #3
 800cce6:	e01c      	b.n	800cd22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d115      	bne.n	800cd20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	32ae      	adds	r2, #174	@ 0xae
 800ccfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00b      	beq.n	800cd20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	32ae      	adds	r2, #174	@ 0xae
 800cd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd18:	78fa      	ldrb	r2, [r7, #3]
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b083      	sub	sp, #12
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	370c      	adds	r7, #12
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00e      	beq.n	800cd7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	6852      	ldr	r2, [r2, #4]
 800cd6a:	b2d2      	uxtb	r2, r2
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	4798      	blx	r3
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3710      	adds	r7, #16
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd86:	b480      	push	{r7}
 800cd88:	b083      	sub	sp, #12
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	460b      	mov	r3, r1
 800cd90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b086      	sub	sp, #24
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	885b      	ldrh	r3, [r3, #2]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	7812      	ldrb	r2, [r2, #0]
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d91f      	bls.n	800ce20 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cde6:	e013      	b.n	800ce10 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cde8:	f107 030a 	add.w	r3, r7, #10
 800cdec:	4619      	mov	r1, r3
 800cdee:	6978      	ldr	r0, [r7, #20]
 800cdf0:	f000 f81b 	bl	800ce2a <USBD_GetNextDesc>
 800cdf4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	785b      	ldrb	r3, [r3, #1]
 800cdfa:	2b05      	cmp	r3, #5
 800cdfc:	d108      	bne.n	800ce10 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	789b      	ldrb	r3, [r3, #2]
 800ce06:	78fa      	ldrb	r2, [r7, #3]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d008      	beq.n	800ce1e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	885b      	ldrh	r3, [r3, #2]
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	897b      	ldrh	r3, [r7, #10]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d8e5      	bhi.n	800cde8 <USBD_GetEpDesc+0x2e>
 800ce1c:	e000      	b.n	800ce20 <USBD_GetEpDesc+0x66>
          break;
 800ce1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ce20:	693b      	ldr	r3, [r7, #16]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3718      	adds	r7, #24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b085      	sub	sp, #20
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	881b      	ldrh	r3, [r3, #0]
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	7812      	ldrb	r2, [r2, #0]
 800ce40:	4413      	add	r3, r2
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4413      	add	r3, r2
 800ce52:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce54:	68fb      	ldr	r3, [r7, #12]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce62:	b480      	push	{r7}
 800ce64:	b087      	sub	sp, #28
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	3301      	adds	r3, #1
 800ce78:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ce80:	8a3b      	ldrh	r3, [r7, #16]
 800ce82:	021b      	lsls	r3, r3, #8
 800ce84:	b21a      	sxth	r2, r3
 800ce86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	b21b      	sxth	r3, r3
 800ce8e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ce90:	89fb      	ldrh	r3, [r7, #14]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	371c      	adds	r7, #28
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
	...

0800cea0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ceb6:	2b40      	cmp	r3, #64	@ 0x40
 800ceb8:	d005      	beq.n	800cec6 <USBD_StdDevReq+0x26>
 800ceba:	2b40      	cmp	r3, #64	@ 0x40
 800cebc:	d857      	bhi.n	800cf6e <USBD_StdDevReq+0xce>
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00f      	beq.n	800cee2 <USBD_StdDevReq+0x42>
 800cec2:	2b20      	cmp	r3, #32
 800cec4:	d153      	bne.n	800cf6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	32ae      	adds	r2, #174	@ 0xae
 800ced0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	6839      	ldr	r1, [r7, #0]
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	4798      	blx	r3
 800cedc:	4603      	mov	r3, r0
 800cede:	73fb      	strb	r3, [r7, #15]
      break;
 800cee0:	e04a      	b.n	800cf78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	785b      	ldrb	r3, [r3, #1]
 800cee6:	2b09      	cmp	r3, #9
 800cee8:	d83b      	bhi.n	800cf62 <USBD_StdDevReq+0xc2>
 800ceea:	a201      	add	r2, pc, #4	@ (adr r2, 800cef0 <USBD_StdDevReq+0x50>)
 800ceec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef0:	0800cf45 	.word	0x0800cf45
 800cef4:	0800cf59 	.word	0x0800cf59
 800cef8:	0800cf63 	.word	0x0800cf63
 800cefc:	0800cf4f 	.word	0x0800cf4f
 800cf00:	0800cf63 	.word	0x0800cf63
 800cf04:	0800cf23 	.word	0x0800cf23
 800cf08:	0800cf19 	.word	0x0800cf19
 800cf0c:	0800cf63 	.word	0x0800cf63
 800cf10:	0800cf3b 	.word	0x0800cf3b
 800cf14:	0800cf2d 	.word	0x0800cf2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fa3c 	bl	800d398 <USBD_GetDescriptor>
          break;
 800cf20:	e024      	b.n	800cf6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fbcb 	bl	800d6c0 <USBD_SetAddress>
          break;
 800cf2a:	e01f      	b.n	800cf6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fc0a 	bl	800d748 <USBD_SetConfig>
 800cf34:	4603      	mov	r3, r0
 800cf36:	73fb      	strb	r3, [r7, #15]
          break;
 800cf38:	e018      	b.n	800cf6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 fcad 	bl	800d89c <USBD_GetConfig>
          break;
 800cf42:	e013      	b.n	800cf6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fcde 	bl	800d908 <USBD_GetStatus>
          break;
 800cf4c:	e00e      	b.n	800cf6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fd0d 	bl	800d970 <USBD_SetFeature>
          break;
 800cf56:	e009      	b.n	800cf6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fd31 	bl	800d9c2 <USBD_ClrFeature>
          break;
 800cf60:	e004      	b.n	800cf6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cf62:	6839      	ldr	r1, [r7, #0]
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fd88 	bl	800da7a <USBD_CtlError>
          break;
 800cf6a:	bf00      	nop
      }
      break;
 800cf6c:	e004      	b.n	800cf78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fd82 	bl	800da7a <USBD_CtlError>
      break;
 800cf76:	bf00      	nop
  }

  return ret;
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop

0800cf84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf9a:	2b40      	cmp	r3, #64	@ 0x40
 800cf9c:	d005      	beq.n	800cfaa <USBD_StdItfReq+0x26>
 800cf9e:	2b40      	cmp	r3, #64	@ 0x40
 800cfa0:	d852      	bhi.n	800d048 <USBD_StdItfReq+0xc4>
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d001      	beq.n	800cfaa <USBD_StdItfReq+0x26>
 800cfa6:	2b20      	cmp	r3, #32
 800cfa8:	d14e      	bne.n	800d048 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d840      	bhi.n	800d03a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	889b      	ldrh	r3, [r3, #4]
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d836      	bhi.n	800d030 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	889b      	ldrh	r3, [r3, #4]
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	4619      	mov	r1, r3
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff fedb 	bl	800cd86 <USBD_CoreFindIF>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfd4:	7bbb      	ldrb	r3, [r7, #14]
 800cfd6:	2bff      	cmp	r3, #255	@ 0xff
 800cfd8:	d01d      	beq.n	800d016 <USBD_StdItfReq+0x92>
 800cfda:	7bbb      	ldrb	r3, [r7, #14]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d11a      	bne.n	800d016 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cfe0:	7bba      	ldrb	r2, [r7, #14]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	32ae      	adds	r2, #174	@ 0xae
 800cfe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00f      	beq.n	800d010 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cff0:	7bba      	ldrb	r2, [r7, #14]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cff8:	7bba      	ldrb	r2, [r7, #14]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	32ae      	adds	r2, #174	@ 0xae
 800cffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	6839      	ldr	r1, [r7, #0]
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	4798      	blx	r3
 800d00a:	4603      	mov	r3, r0
 800d00c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d00e:	e004      	b.n	800d01a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d010:	2303      	movs	r3, #3
 800d012:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d014:	e001      	b.n	800d01a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d016:	2303      	movs	r3, #3
 800d018:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	88db      	ldrh	r3, [r3, #6]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d110      	bne.n	800d044 <USBD_StdItfReq+0xc0>
 800d022:	7bfb      	ldrb	r3, [r7, #15]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10d      	bne.n	800d044 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fdf1 	bl	800dc10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d02e:	e009      	b.n	800d044 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fd21 	bl	800da7a <USBD_CtlError>
          break;
 800d038:	e004      	b.n	800d044 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d03a:	6839      	ldr	r1, [r7, #0]
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fd1c 	bl	800da7a <USBD_CtlError>
          break;
 800d042:	e000      	b.n	800d046 <USBD_StdItfReq+0xc2>
          break;
 800d044:	bf00      	nop
      }
      break;
 800d046:	e004      	b.n	800d052 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fd15 	bl	800da7a <USBD_CtlError>
      break;
 800d050:	bf00      	nop
  }

  return ret;
 800d052:	7bfb      	ldrb	r3, [r7, #15]
}
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	889b      	ldrh	r3, [r3, #4]
 800d06e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d078:	2b40      	cmp	r3, #64	@ 0x40
 800d07a:	d007      	beq.n	800d08c <USBD_StdEPReq+0x30>
 800d07c:	2b40      	cmp	r3, #64	@ 0x40
 800d07e:	f200 817f 	bhi.w	800d380 <USBD_StdEPReq+0x324>
 800d082:	2b00      	cmp	r3, #0
 800d084:	d02a      	beq.n	800d0dc <USBD_StdEPReq+0x80>
 800d086:	2b20      	cmp	r3, #32
 800d088:	f040 817a 	bne.w	800d380 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d08c:	7bbb      	ldrb	r3, [r7, #14]
 800d08e:	4619      	mov	r1, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff fe85 	bl	800cda0 <USBD_CoreFindEP>
 800d096:	4603      	mov	r3, r0
 800d098:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d09a:	7b7b      	ldrb	r3, [r7, #13]
 800d09c:	2bff      	cmp	r3, #255	@ 0xff
 800d09e:	f000 8174 	beq.w	800d38a <USBD_StdEPReq+0x32e>
 800d0a2:	7b7b      	ldrb	r3, [r7, #13]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f040 8170 	bne.w	800d38a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d0aa:	7b7a      	ldrb	r2, [r7, #13]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d0b2:	7b7a      	ldrb	r2, [r7, #13]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	32ae      	adds	r2, #174	@ 0xae
 800d0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f000 8163 	beq.w	800d38a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d0c4:	7b7a      	ldrb	r2, [r7, #13]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	32ae      	adds	r2, #174	@ 0xae
 800d0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	6839      	ldr	r1, [r7, #0]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	4798      	blx	r3
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d0da:	e156      	b.n	800d38a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	785b      	ldrb	r3, [r3, #1]
 800d0e0:	2b03      	cmp	r3, #3
 800d0e2:	d008      	beq.n	800d0f6 <USBD_StdEPReq+0x9a>
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	f300 8145 	bgt.w	800d374 <USBD_StdEPReq+0x318>
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f000 809b 	beq.w	800d226 <USBD_StdEPReq+0x1ca>
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d03c      	beq.n	800d16e <USBD_StdEPReq+0x112>
 800d0f4:	e13e      	b.n	800d374 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d002      	beq.n	800d108 <USBD_StdEPReq+0xac>
 800d102:	2b03      	cmp	r3, #3
 800d104:	d016      	beq.n	800d134 <USBD_StdEPReq+0xd8>
 800d106:	e02c      	b.n	800d162 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d108:	7bbb      	ldrb	r3, [r7, #14]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00d      	beq.n	800d12a <USBD_StdEPReq+0xce>
 800d10e:	7bbb      	ldrb	r3, [r7, #14]
 800d110:	2b80      	cmp	r3, #128	@ 0x80
 800d112:	d00a      	beq.n	800d12a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d114:	7bbb      	ldrb	r3, [r7, #14]
 800d116:	4619      	mov	r1, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f001 f9bf 	bl	800e49c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d11e:	2180      	movs	r1, #128	@ 0x80
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f001 f9bb 	bl	800e49c <USBD_LL_StallEP>
 800d126:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d128:	e020      	b.n	800d16c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fca4 	bl	800da7a <USBD_CtlError>
              break;
 800d132:	e01b      	b.n	800d16c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	885b      	ldrh	r3, [r3, #2]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10e      	bne.n	800d15a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d13c:	7bbb      	ldrb	r3, [r7, #14]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00b      	beq.n	800d15a <USBD_StdEPReq+0xfe>
 800d142:	7bbb      	ldrb	r3, [r7, #14]
 800d144:	2b80      	cmp	r3, #128	@ 0x80
 800d146:	d008      	beq.n	800d15a <USBD_StdEPReq+0xfe>
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	88db      	ldrh	r3, [r3, #6]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d104      	bne.n	800d15a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d150:	7bbb      	ldrb	r3, [r7, #14]
 800d152:	4619      	mov	r1, r3
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f001 f9a1 	bl	800e49c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fd58 	bl	800dc10 <USBD_CtlSendStatus>

              break;
 800d160:	e004      	b.n	800d16c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fc88 	bl	800da7a <USBD_CtlError>
              break;
 800d16a:	bf00      	nop
          }
          break;
 800d16c:	e107      	b.n	800d37e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b02      	cmp	r3, #2
 800d178:	d002      	beq.n	800d180 <USBD_StdEPReq+0x124>
 800d17a:	2b03      	cmp	r3, #3
 800d17c:	d016      	beq.n	800d1ac <USBD_StdEPReq+0x150>
 800d17e:	e04b      	b.n	800d218 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d180:	7bbb      	ldrb	r3, [r7, #14]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00d      	beq.n	800d1a2 <USBD_StdEPReq+0x146>
 800d186:	7bbb      	ldrb	r3, [r7, #14]
 800d188:	2b80      	cmp	r3, #128	@ 0x80
 800d18a:	d00a      	beq.n	800d1a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d18c:	7bbb      	ldrb	r3, [r7, #14]
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f001 f983 	bl	800e49c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d196:	2180      	movs	r1, #128	@ 0x80
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f001 f97f 	bl	800e49c <USBD_LL_StallEP>
 800d19e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1a0:	e040      	b.n	800d224 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 fc68 	bl	800da7a <USBD_CtlError>
              break;
 800d1aa:	e03b      	b.n	800d224 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	885b      	ldrh	r3, [r3, #2]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d136      	bne.n	800d222 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d004      	beq.n	800d1c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d1be:	7bbb      	ldrb	r3, [r7, #14]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f001 f989 	bl	800e4da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fd21 	bl	800dc10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d1ce:	7bbb      	ldrb	r3, [r7, #14]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff fde4 	bl	800cda0 <USBD_CoreFindEP>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1dc:	7b7b      	ldrb	r3, [r7, #13]
 800d1de:	2bff      	cmp	r3, #255	@ 0xff
 800d1e0:	d01f      	beq.n	800d222 <USBD_StdEPReq+0x1c6>
 800d1e2:	7b7b      	ldrb	r3, [r7, #13]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d11c      	bne.n	800d222 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d1e8:	7b7a      	ldrb	r2, [r7, #13]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d1f0:	7b7a      	ldrb	r2, [r7, #13]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	32ae      	adds	r2, #174	@ 0xae
 800d1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d010      	beq.n	800d222 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d200:	7b7a      	ldrb	r2, [r7, #13]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	32ae      	adds	r2, #174	@ 0xae
 800d206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	4798      	blx	r3
 800d212:	4603      	mov	r3, r0
 800d214:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d216:	e004      	b.n	800d222 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fc2d 	bl	800da7a <USBD_CtlError>
              break;
 800d220:	e000      	b.n	800d224 <USBD_StdEPReq+0x1c8>
              break;
 800d222:	bf00      	nop
          }
          break;
 800d224:	e0ab      	b.n	800d37e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d22c:	b2db      	uxtb	r3, r3
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d002      	beq.n	800d238 <USBD_StdEPReq+0x1dc>
 800d232:	2b03      	cmp	r3, #3
 800d234:	d032      	beq.n	800d29c <USBD_StdEPReq+0x240>
 800d236:	e097      	b.n	800d368 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d238:	7bbb      	ldrb	r3, [r7, #14]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d007      	beq.n	800d24e <USBD_StdEPReq+0x1f2>
 800d23e:	7bbb      	ldrb	r3, [r7, #14]
 800d240:	2b80      	cmp	r3, #128	@ 0x80
 800d242:	d004      	beq.n	800d24e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fc17 	bl	800da7a <USBD_CtlError>
                break;
 800d24c:	e091      	b.n	800d372 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d24e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d252:	2b00      	cmp	r3, #0
 800d254:	da0b      	bge.n	800d26e <USBD_StdEPReq+0x212>
 800d256:	7bbb      	ldrb	r3, [r7, #14]
 800d258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d25c:	4613      	mov	r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	4413      	add	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	3310      	adds	r3, #16
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	4413      	add	r3, r2
 800d26a:	3304      	adds	r3, #4
 800d26c:	e00b      	b.n	800d286 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d26e:	7bbb      	ldrb	r3, [r7, #14]
 800d270:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d274:	4613      	mov	r3, r2
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	4413      	add	r3, r2
 800d284:	3304      	adds	r3, #4
 800d286:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	2200      	movs	r2, #0
 800d28c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	2202      	movs	r2, #2
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fc61 	bl	800db5c <USBD_CtlSendData>
              break;
 800d29a:	e06a      	b.n	800d372 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d29c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	da11      	bge.n	800d2c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
 800d2a6:	f003 020f 	and.w	r2, r3, #15
 800d2aa:	6879      	ldr	r1, [r7, #4]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	440b      	add	r3, r1
 800d2b6:	3324      	adds	r3, #36	@ 0x24
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d117      	bne.n	800d2ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fbda 	bl	800da7a <USBD_CtlError>
                  break;
 800d2c6:	e054      	b.n	800d372 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d2c8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ca:	f003 020f 	and.w	r2, r3, #15
 800d2ce:	6879      	ldr	r1, [r7, #4]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	440b      	add	r3, r1
 800d2da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d104      	bne.n	800d2ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fbc7 	bl	800da7a <USBD_CtlError>
                  break;
 800d2ec:	e041      	b.n	800d372 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	da0b      	bge.n	800d30e <USBD_StdEPReq+0x2b2>
 800d2f6:	7bbb      	ldrb	r3, [r7, #14]
 800d2f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	3310      	adds	r3, #16
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	4413      	add	r3, r2
 800d30a:	3304      	adds	r3, #4
 800d30c:	e00b      	b.n	800d326 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d30e:	7bbb      	ldrb	r3, [r7, #14]
 800d310:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d314:	4613      	mov	r3, r2
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	4413      	add	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	4413      	add	r3, r2
 800d324:	3304      	adds	r3, #4
 800d326:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d328:	7bbb      	ldrb	r3, [r7, #14]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <USBD_StdEPReq+0x2d8>
 800d32e:	7bbb      	ldrb	r3, [r7, #14]
 800d330:	2b80      	cmp	r3, #128	@ 0x80
 800d332:	d103      	bne.n	800d33c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	2200      	movs	r2, #0
 800d338:	601a      	str	r2, [r3, #0]
 800d33a:	e00e      	b.n	800d35a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d33c:	7bbb      	ldrb	r3, [r7, #14]
 800d33e:	4619      	mov	r1, r3
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f001 f8e9 	bl	800e518 <USBD_LL_IsStallEP>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d003      	beq.n	800d354 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2201      	movs	r2, #1
 800d350:	601a      	str	r2, [r3, #0]
 800d352:	e002      	b.n	800d35a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	2200      	movs	r2, #0
 800d358:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2202      	movs	r2, #2
 800d35e:	4619      	mov	r1, r3
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f000 fbfb 	bl	800db5c <USBD_CtlSendData>
              break;
 800d366:	e004      	b.n	800d372 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d368:	6839      	ldr	r1, [r7, #0]
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fb85 	bl	800da7a <USBD_CtlError>
              break;
 800d370:	bf00      	nop
          }
          break;
 800d372:	e004      	b.n	800d37e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d374:	6839      	ldr	r1, [r7, #0]
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 fb7f 	bl	800da7a <USBD_CtlError>
          break;
 800d37c:	bf00      	nop
      }
      break;
 800d37e:	e005      	b.n	800d38c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d380:	6839      	ldr	r1, [r7, #0]
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 fb79 	bl	800da7a <USBD_CtlError>
      break;
 800d388:	e000      	b.n	800d38c <USBD_StdEPReq+0x330>
      break;
 800d38a:	bf00      	nop
  }

  return ret;
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
	...

0800d398 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	885b      	ldrh	r3, [r3, #2]
 800d3b2:	0a1b      	lsrs	r3, r3, #8
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	2b0e      	cmp	r3, #14
 800d3ba:	f200 8152 	bhi.w	800d662 <USBD_GetDescriptor+0x2ca>
 800d3be:	a201      	add	r2, pc, #4	@ (adr r2, 800d3c4 <USBD_GetDescriptor+0x2c>)
 800d3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c4:	0800d435 	.word	0x0800d435
 800d3c8:	0800d44d 	.word	0x0800d44d
 800d3cc:	0800d48d 	.word	0x0800d48d
 800d3d0:	0800d663 	.word	0x0800d663
 800d3d4:	0800d663 	.word	0x0800d663
 800d3d8:	0800d603 	.word	0x0800d603
 800d3dc:	0800d62f 	.word	0x0800d62f
 800d3e0:	0800d663 	.word	0x0800d663
 800d3e4:	0800d663 	.word	0x0800d663
 800d3e8:	0800d663 	.word	0x0800d663
 800d3ec:	0800d663 	.word	0x0800d663
 800d3f0:	0800d663 	.word	0x0800d663
 800d3f4:	0800d663 	.word	0x0800d663
 800d3f8:	0800d663 	.word	0x0800d663
 800d3fc:	0800d401 	.word	0x0800d401
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d406:	69db      	ldr	r3, [r3, #28]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00b      	beq.n	800d424 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d412:	69db      	ldr	r3, [r3, #28]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	7c12      	ldrb	r2, [r2, #16]
 800d418:	f107 0108 	add.w	r1, r7, #8
 800d41c:	4610      	mov	r0, r2
 800d41e:	4798      	blx	r3
 800d420:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d422:	e126      	b.n	800d672 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fb27 	bl	800da7a <USBD_CtlError>
        err++;
 800d42c:	7afb      	ldrb	r3, [r7, #11]
 800d42e:	3301      	adds	r3, #1
 800d430:	72fb      	strb	r3, [r7, #11]
      break;
 800d432:	e11e      	b.n	800d672 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	7c12      	ldrb	r2, [r2, #16]
 800d440:	f107 0108 	add.w	r1, r7, #8
 800d444:	4610      	mov	r0, r2
 800d446:	4798      	blx	r3
 800d448:	60f8      	str	r0, [r7, #12]
      break;
 800d44a:	e112      	b.n	800d672 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7c1b      	ldrb	r3, [r3, #16]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10d      	bne.n	800d470 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45c:	f107 0208 	add.w	r2, r7, #8
 800d460:	4610      	mov	r0, r2
 800d462:	4798      	blx	r3
 800d464:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3301      	adds	r3, #1
 800d46a:	2202      	movs	r2, #2
 800d46c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d46e:	e100      	b.n	800d672 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d478:	f107 0208 	add.w	r2, r7, #8
 800d47c:	4610      	mov	r0, r2
 800d47e:	4798      	blx	r3
 800d480:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	3301      	adds	r3, #1
 800d486:	2202      	movs	r2, #2
 800d488:	701a      	strb	r2, [r3, #0]
      break;
 800d48a:	e0f2      	b.n	800d672 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	885b      	ldrh	r3, [r3, #2]
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b05      	cmp	r3, #5
 800d494:	f200 80ac 	bhi.w	800d5f0 <USBD_GetDescriptor+0x258>
 800d498:	a201      	add	r2, pc, #4	@ (adr r2, 800d4a0 <USBD_GetDescriptor+0x108>)
 800d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49e:	bf00      	nop
 800d4a0:	0800d4b9 	.word	0x0800d4b9
 800d4a4:	0800d4ed 	.word	0x0800d4ed
 800d4a8:	0800d521 	.word	0x0800d521
 800d4ac:	0800d555 	.word	0x0800d555
 800d4b0:	0800d589 	.word	0x0800d589
 800d4b4:	0800d5bd 	.word	0x0800d5bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00b      	beq.n	800d4dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	7c12      	ldrb	r2, [r2, #16]
 800d4d0:	f107 0108 	add.w	r1, r7, #8
 800d4d4:	4610      	mov	r0, r2
 800d4d6:	4798      	blx	r3
 800d4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4da:	e091      	b.n	800d600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 facb 	bl	800da7a <USBD_CtlError>
            err++;
 800d4e4:	7afb      	ldrb	r3, [r7, #11]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4ea:	e089      	b.n	800d600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00b      	beq.n	800d510 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	7c12      	ldrb	r2, [r2, #16]
 800d504:	f107 0108 	add.w	r1, r7, #8
 800d508:	4610      	mov	r0, r2
 800d50a:	4798      	blx	r3
 800d50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d50e:	e077      	b.n	800d600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d510:	6839      	ldr	r1, [r7, #0]
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fab1 	bl	800da7a <USBD_CtlError>
            err++;
 800d518:	7afb      	ldrb	r3, [r7, #11]
 800d51a:	3301      	adds	r3, #1
 800d51c:	72fb      	strb	r3, [r7, #11]
          break;
 800d51e:	e06f      	b.n	800d600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00b      	beq.n	800d544 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	7c12      	ldrb	r2, [r2, #16]
 800d538:	f107 0108 	add.w	r1, r7, #8
 800d53c:	4610      	mov	r0, r2
 800d53e:	4798      	blx	r3
 800d540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d542:	e05d      	b.n	800d600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d544:	6839      	ldr	r1, [r7, #0]
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 fa97 	bl	800da7a <USBD_CtlError>
            err++;
 800d54c:	7afb      	ldrb	r3, [r7, #11]
 800d54e:	3301      	adds	r3, #1
 800d550:	72fb      	strb	r3, [r7, #11]
          break;
 800d552:	e055      	b.n	800d600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d55a:	691b      	ldr	r3, [r3, #16]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00b      	beq.n	800d578 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d566:	691b      	ldr	r3, [r3, #16]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	7c12      	ldrb	r2, [r2, #16]
 800d56c:	f107 0108 	add.w	r1, r7, #8
 800d570:	4610      	mov	r0, r2
 800d572:	4798      	blx	r3
 800d574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d576:	e043      	b.n	800d600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d578:	6839      	ldr	r1, [r7, #0]
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 fa7d 	bl	800da7a <USBD_CtlError>
            err++;
 800d580:	7afb      	ldrb	r3, [r7, #11]
 800d582:	3301      	adds	r3, #1
 800d584:	72fb      	strb	r3, [r7, #11]
          break;
 800d586:	e03b      	b.n	800d600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00b      	beq.n	800d5ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	7c12      	ldrb	r2, [r2, #16]
 800d5a0:	f107 0108 	add.w	r1, r7, #8
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	4798      	blx	r3
 800d5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5aa:	e029      	b.n	800d600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5ac:	6839      	ldr	r1, [r7, #0]
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fa63 	bl	800da7a <USBD_CtlError>
            err++;
 800d5b4:	7afb      	ldrb	r3, [r7, #11]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ba:	e021      	b.n	800d600 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5c2:	699b      	ldr	r3, [r3, #24]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00b      	beq.n	800d5e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	7c12      	ldrb	r2, [r2, #16]
 800d5d4:	f107 0108 	add.w	r1, r7, #8
 800d5d8:	4610      	mov	r0, r2
 800d5da:	4798      	blx	r3
 800d5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5de:	e00f      	b.n	800d600 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fa49 	bl	800da7a <USBD_CtlError>
            err++;
 800d5e8:	7afb      	ldrb	r3, [r7, #11]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ee:	e007      	b.n	800d600 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d5f0:	6839      	ldr	r1, [r7, #0]
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 fa41 	bl	800da7a <USBD_CtlError>
          err++;
 800d5f8:	7afb      	ldrb	r3, [r7, #11]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d5fe:	bf00      	nop
      }
      break;
 800d600:	e037      	b.n	800d672 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	7c1b      	ldrb	r3, [r3, #16]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d109      	bne.n	800d61e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d612:	f107 0208 	add.w	r2, r7, #8
 800d616:	4610      	mov	r0, r2
 800d618:	4798      	blx	r3
 800d61a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d61c:	e029      	b.n	800d672 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d61e:	6839      	ldr	r1, [r7, #0]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 fa2a 	bl	800da7a <USBD_CtlError>
        err++;
 800d626:	7afb      	ldrb	r3, [r7, #11]
 800d628:	3301      	adds	r3, #1
 800d62a:	72fb      	strb	r3, [r7, #11]
      break;
 800d62c:	e021      	b.n	800d672 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	7c1b      	ldrb	r3, [r3, #16]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d10d      	bne.n	800d652 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d63e:	f107 0208 	add.w	r2, r7, #8
 800d642:	4610      	mov	r0, r2
 800d644:	4798      	blx	r3
 800d646:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	3301      	adds	r3, #1
 800d64c:	2207      	movs	r2, #7
 800d64e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d650:	e00f      	b.n	800d672 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d652:	6839      	ldr	r1, [r7, #0]
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 fa10 	bl	800da7a <USBD_CtlError>
        err++;
 800d65a:	7afb      	ldrb	r3, [r7, #11]
 800d65c:	3301      	adds	r3, #1
 800d65e:	72fb      	strb	r3, [r7, #11]
      break;
 800d660:	e007      	b.n	800d672 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fa08 	bl	800da7a <USBD_CtlError>
      err++;
 800d66a:	7afb      	ldrb	r3, [r7, #11]
 800d66c:	3301      	adds	r3, #1
 800d66e:	72fb      	strb	r3, [r7, #11]
      break;
 800d670:	bf00      	nop
  }

  if (err != 0U)
 800d672:	7afb      	ldrb	r3, [r7, #11]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d11e      	bne.n	800d6b6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	88db      	ldrh	r3, [r3, #6]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d016      	beq.n	800d6ae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d680:	893b      	ldrh	r3, [r7, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00e      	beq.n	800d6a4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	88da      	ldrh	r2, [r3, #6]
 800d68a:	893b      	ldrh	r3, [r7, #8]
 800d68c:	4293      	cmp	r3, r2
 800d68e:	bf28      	it	cs
 800d690:	4613      	movcs	r3, r2
 800d692:	b29b      	uxth	r3, r3
 800d694:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d696:	893b      	ldrh	r3, [r7, #8]
 800d698:	461a      	mov	r2, r3
 800d69a:	68f9      	ldr	r1, [r7, #12]
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 fa5d 	bl	800db5c <USBD_CtlSendData>
 800d6a2:	e009      	b.n	800d6b8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d6a4:	6839      	ldr	r1, [r7, #0]
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f9e7 	bl	800da7a <USBD_CtlError>
 800d6ac:	e004      	b.n	800d6b8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 faae 	bl	800dc10 <USBD_CtlSendStatus>
 800d6b4:	e000      	b.n	800d6b8 <USBD_GetDescriptor+0x320>
    return;
 800d6b6:	bf00      	nop
  }
}
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop

0800d6c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	889b      	ldrh	r3, [r3, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d131      	bne.n	800d736 <USBD_SetAddress+0x76>
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	88db      	ldrh	r3, [r3, #6]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d12d      	bne.n	800d736 <USBD_SetAddress+0x76>
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	885b      	ldrh	r3, [r3, #2]
 800d6de:	2b7f      	cmp	r3, #127	@ 0x7f
 800d6e0:	d829      	bhi.n	800d736 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	885b      	ldrh	r3, [r3, #2]
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	d104      	bne.n	800d704 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 f9bc 	bl	800da7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d702:	e01d      	b.n	800d740 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	7bfa      	ldrb	r2, [r7, #15]
 800d708:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
 800d70e:	4619      	mov	r1, r3
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 ff2d 	bl	800e570 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 fa7a 	bl	800dc10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d004      	beq.n	800d72c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2202      	movs	r2, #2
 800d726:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d72a:	e009      	b.n	800d740 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d734:	e004      	b.n	800d740 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 f99e 	bl	800da7a <USBD_CtlError>
  }
}
 800d73e:	bf00      	nop
 800d740:	bf00      	nop
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d752:	2300      	movs	r3, #0
 800d754:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	885b      	ldrh	r3, [r3, #2]
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	4b4e      	ldr	r3, [pc, #312]	@ (800d898 <USBD_SetConfig+0x150>)
 800d75e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d760:	4b4d      	ldr	r3, [pc, #308]	@ (800d898 <USBD_SetConfig+0x150>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d905      	bls.n	800d774 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f985 	bl	800da7a <USBD_CtlError>
    return USBD_FAIL;
 800d770:	2303      	movs	r3, #3
 800d772:	e08c      	b.n	800d88e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d002      	beq.n	800d786 <USBD_SetConfig+0x3e>
 800d780:	2b03      	cmp	r3, #3
 800d782:	d029      	beq.n	800d7d8 <USBD_SetConfig+0x90>
 800d784:	e075      	b.n	800d872 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d786:	4b44      	ldr	r3, [pc, #272]	@ (800d898 <USBD_SetConfig+0x150>)
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d020      	beq.n	800d7d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d78e:	4b42      	ldr	r3, [pc, #264]	@ (800d898 <USBD_SetConfig+0x150>)
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	461a      	mov	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d798:	4b3f      	ldr	r3, [pc, #252]	@ (800d898 <USBD_SetConfig+0x150>)
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	4619      	mov	r1, r3
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7fe ffb9 	bl	800c716 <USBD_SetClassConfig>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d008      	beq.n	800d7c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d7ae:	6839      	ldr	r1, [r7, #0]
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 f962 	bl	800da7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2202      	movs	r2, #2
 800d7ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d7be:	e065      	b.n	800d88c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fa25 	bl	800dc10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2203      	movs	r2, #3
 800d7ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d7ce:	e05d      	b.n	800d88c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 fa1d 	bl	800dc10 <USBD_CtlSendStatus>
      break;
 800d7d6:	e059      	b.n	800d88c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d7d8:	4b2f      	ldr	r3, [pc, #188]	@ (800d898 <USBD_SetConfig+0x150>)
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d112      	bne.n	800d806 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d7e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d898 <USBD_SetConfig+0x150>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7f2:	4b29      	ldr	r3, [pc, #164]	@ (800d898 <USBD_SetConfig+0x150>)
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f7fe ffa8 	bl	800c74e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 fa06 	bl	800dc10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d804:	e042      	b.n	800d88c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d806:	4b24      	ldr	r3, [pc, #144]	@ (800d898 <USBD_SetConfig+0x150>)
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	461a      	mov	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	429a      	cmp	r2, r3
 800d812:	d02a      	beq.n	800d86a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	4619      	mov	r1, r3
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f7fe ff96 	bl	800c74e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d822:	4b1d      	ldr	r3, [pc, #116]	@ (800d898 <USBD_SetConfig+0x150>)
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	461a      	mov	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d82c:	4b1a      	ldr	r3, [pc, #104]	@ (800d898 <USBD_SetConfig+0x150>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	4619      	mov	r1, r3
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f7fe ff6f 	bl	800c716 <USBD_SetClassConfig>
 800d838:	4603      	mov	r3, r0
 800d83a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00f      	beq.n	800d862 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 f918 	bl	800da7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	4619      	mov	r1, r3
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7fe ff7b 	bl	800c74e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2202      	movs	r2, #2
 800d85c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d860:	e014      	b.n	800d88c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f9d4 	bl	800dc10 <USBD_CtlSendStatus>
      break;
 800d868:	e010      	b.n	800d88c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f9d0 	bl	800dc10 <USBD_CtlSendStatus>
      break;
 800d870:	e00c      	b.n	800d88c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 f900 	bl	800da7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d87a:	4b07      	ldr	r3, [pc, #28]	@ (800d898 <USBD_SetConfig+0x150>)
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7fe ff64 	bl	800c74e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d886:	2303      	movs	r3, #3
 800d888:	73fb      	strb	r3, [r7, #15]
      break;
 800d88a:	bf00      	nop
  }

  return ret;
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	20000a3c 	.word	0x20000a3c

0800d89c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	88db      	ldrh	r3, [r3, #6]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d004      	beq.n	800d8b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d8ae:	6839      	ldr	r1, [r7, #0]
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f000 f8e2 	bl	800da7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d8b6:	e023      	b.n	800d900 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	dc02      	bgt.n	800d8ca <USBD_GetConfig+0x2e>
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	dc03      	bgt.n	800d8d0 <USBD_GetConfig+0x34>
 800d8c8:	e015      	b.n	800d8f6 <USBD_GetConfig+0x5a>
 800d8ca:	2b03      	cmp	r3, #3
 800d8cc:	d00b      	beq.n	800d8e6 <USBD_GetConfig+0x4a>
 800d8ce:	e012      	b.n	800d8f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	3308      	adds	r3, #8
 800d8da:	2201      	movs	r2, #1
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 f93c 	bl	800db5c <USBD_CtlSendData>
        break;
 800d8e4:	e00c      	b.n	800d900 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f934 	bl	800db5c <USBD_CtlSendData>
        break;
 800d8f4:	e004      	b.n	800d900 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f8be 	bl	800da7a <USBD_CtlError>
        break;
 800d8fe:	bf00      	nop
}
 800d900:	bf00      	nop
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	3b01      	subs	r3, #1
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	d81e      	bhi.n	800d95e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	88db      	ldrh	r3, [r3, #6]
 800d924:	2b02      	cmp	r3, #2
 800d926:	d004      	beq.n	800d932 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 f8a5 	bl	800da7a <USBD_CtlError>
        break;
 800d930:	e01a      	b.n	800d968 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2201      	movs	r2, #1
 800d936:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d005      	beq.n	800d94e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	f043 0202 	orr.w	r2, r3, #2
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	330c      	adds	r3, #12
 800d952:	2202      	movs	r2, #2
 800d954:	4619      	mov	r1, r3
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f900 	bl	800db5c <USBD_CtlSendData>
      break;
 800d95c:	e004      	b.n	800d968 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d95e:	6839      	ldr	r1, [r7, #0]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 f88a 	bl	800da7a <USBD_CtlError>
      break;
 800d966:	bf00      	nop
  }
}
 800d968:	bf00      	nop
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	885b      	ldrh	r3, [r3, #2]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d107      	bne.n	800d992 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 f940 	bl	800dc10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d990:	e013      	b.n	800d9ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	885b      	ldrh	r3, [r3, #2]
 800d996:	2b02      	cmp	r3, #2
 800d998:	d10b      	bne.n	800d9b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	889b      	ldrh	r3, [r3, #4]
 800d99e:	0a1b      	lsrs	r3, r3, #8
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f930 	bl	800dc10 <USBD_CtlSendStatus>
}
 800d9b0:	e003      	b.n	800d9ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 f860 	bl	800da7a <USBD_CtlError>
}
 800d9ba:	bf00      	nop
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b082      	sub	sp, #8
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
 800d9ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	d80b      	bhi.n	800d9f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	885b      	ldrh	r3, [r3, #2]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d10c      	bne.n	800d9fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 f910 	bl	800dc10 <USBD_CtlSendStatus>
      }
      break;
 800d9f0:	e004      	b.n	800d9fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d9f2:	6839      	ldr	r1, [r7, #0]
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 f840 	bl	800da7a <USBD_CtlError>
      break;
 800d9fa:	e000      	b.n	800d9fe <USBD_ClrFeature+0x3c>
      break;
 800d9fc:	bf00      	nop
  }
}
 800d9fe:	bf00      	nop
 800da00:	3708      	adds	r7, #8
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b084      	sub	sp, #16
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	781a      	ldrb	r2, [r3, #0]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	3301      	adds	r3, #1
 800da20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	781a      	ldrb	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	3301      	adds	r3, #1
 800da2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f7ff fa16 	bl	800ce62 <SWAPBYTE>
 800da36:	4603      	mov	r3, r0
 800da38:	461a      	mov	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	3301      	adds	r3, #1
 800da42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	3301      	adds	r3, #1
 800da48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800da4a:	68f8      	ldr	r0, [r7, #12]
 800da4c:	f7ff fa09 	bl	800ce62 <SWAPBYTE>
 800da50:	4603      	mov	r3, r0
 800da52:	461a      	mov	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	3301      	adds	r3, #1
 800da5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3301      	adds	r3, #1
 800da62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7ff f9fc 	bl	800ce62 <SWAPBYTE>
 800da6a:	4603      	mov	r3, r0
 800da6c:	461a      	mov	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	80da      	strh	r2, [r3, #6]
}
 800da72:	bf00      	nop
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b082      	sub	sp, #8
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800da84:	2180      	movs	r1, #128	@ 0x80
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 fd08 	bl	800e49c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800da8c:	2100      	movs	r1, #0
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fd04 	bl	800e49c <USBD_LL_StallEP>
}
 800da94:	bf00      	nop
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800daa8:	2300      	movs	r3, #0
 800daaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d036      	beq.n	800db20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dab6:	6938      	ldr	r0, [r7, #16]
 800dab8:	f000 f836 	bl	800db28 <USBD_GetLen>
 800dabc:	4603      	mov	r3, r0
 800dabe:	3301      	adds	r3, #1
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	005b      	lsls	r3, r3, #1
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800daca:	7dfb      	ldrb	r3, [r7, #23]
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	4413      	add	r3, r2
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	7812      	ldrb	r2, [r2, #0]
 800dad4:	701a      	strb	r2, [r3, #0]
  idx++;
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
 800dad8:	3301      	adds	r3, #1
 800dada:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	68ba      	ldr	r2, [r7, #8]
 800dae0:	4413      	add	r3, r2
 800dae2:	2203      	movs	r2, #3
 800dae4:	701a      	strb	r2, [r3, #0]
  idx++;
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
 800dae8:	3301      	adds	r3, #1
 800daea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800daec:	e013      	b.n	800db16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800daee:	7dfb      	ldrb	r3, [r7, #23]
 800daf0:	68ba      	ldr	r2, [r7, #8]
 800daf2:	4413      	add	r3, r2
 800daf4:	693a      	ldr	r2, [r7, #16]
 800daf6:	7812      	ldrb	r2, [r2, #0]
 800daf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	3301      	adds	r3, #1
 800dafe:	613b      	str	r3, [r7, #16]
    idx++;
 800db00:	7dfb      	ldrb	r3, [r7, #23]
 800db02:	3301      	adds	r3, #1
 800db04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800db06:	7dfb      	ldrb	r3, [r7, #23]
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	4413      	add	r3, r2
 800db0c:	2200      	movs	r2, #0
 800db0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800db10:	7dfb      	ldrb	r3, [r7, #23]
 800db12:	3301      	adds	r3, #1
 800db14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1e7      	bne.n	800daee <USBD_GetString+0x52>
 800db1e:	e000      	b.n	800db22 <USBD_GetString+0x86>
    return;
 800db20:	bf00      	nop
  }
}
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db28:	b480      	push	{r7}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800db30:	2300      	movs	r3, #0
 800db32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800db38:	e005      	b.n	800db46 <USBD_GetLen+0x1e>
  {
    len++;
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
 800db3c:	3301      	adds	r3, #1
 800db3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	3301      	adds	r3, #1
 800db44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d1f5      	bne.n	800db3a <USBD_GetLen+0x12>
  }

  return len;
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3714      	adds	r7, #20
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2202      	movs	r2, #2
 800db6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	68ba      	ldr	r2, [r7, #8]
 800db80:	2100      	movs	r1, #0
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f000 fd13 	bl	800e5ae <USBD_LL_Transmit>

  return USBD_OK;
 800db88:	2300      	movs	r3, #0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	60f8      	str	r0, [r7, #12]
 800db9a:	60b9      	str	r1, [r7, #8]
 800db9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	2100      	movs	r1, #0
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f000 fd02 	bl	800e5ae <USBD_LL_Transmit>

  return USBD_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2203      	movs	r2, #3
 800dbc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	2100      	movs	r1, #0
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f000 fd06 	bl	800e5f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbe4:	2300      	movs	r3, #0
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	60f8      	str	r0, [r7, #12]
 800dbf6:	60b9      	str	r1, [r7, #8]
 800dbf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	2100      	movs	r1, #0
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f000 fcf5 	bl	800e5f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2204      	movs	r2, #4
 800dc1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc20:	2300      	movs	r3, #0
 800dc22:	2200      	movs	r2, #0
 800dc24:	2100      	movs	r1, #0
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 fcc1 	bl	800e5ae <USBD_LL_Transmit>

  return USBD_OK;
 800dc2c:	2300      	movs	r3, #0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3708      	adds	r7, #8
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b082      	sub	sp, #8
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2205      	movs	r2, #5
 800dc42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc46:	2300      	movs	r3, #0
 800dc48:	2200      	movs	r2, #0
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fccf 	bl	800e5f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc60:	2200      	movs	r2, #0
 800dc62:	4912      	ldr	r1, [pc, #72]	@ (800dcac <MX_USB_DEVICE_Init+0x50>)
 800dc64:	4812      	ldr	r0, [pc, #72]	@ (800dcb0 <MX_USB_DEVICE_Init+0x54>)
 800dc66:	f7fe fcd9 	bl	800c61c <USBD_Init>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d001      	beq.n	800dc74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dc70:	f7f5 ffba 	bl	8003be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dc74:	490f      	ldr	r1, [pc, #60]	@ (800dcb4 <MX_USB_DEVICE_Init+0x58>)
 800dc76:	480e      	ldr	r0, [pc, #56]	@ (800dcb0 <MX_USB_DEVICE_Init+0x54>)
 800dc78:	f7fe fd00 	bl	800c67c <USBD_RegisterClass>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dc82:	f7f5 ffb1 	bl	8003be8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dc86:	490c      	ldr	r1, [pc, #48]	@ (800dcb8 <MX_USB_DEVICE_Init+0x5c>)
 800dc88:	4809      	ldr	r0, [pc, #36]	@ (800dcb0 <MX_USB_DEVICE_Init+0x54>)
 800dc8a:	f7fe fbf7 	bl	800c47c <USBD_CDC_RegisterInterface>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dc94:	f7f5 ffa8 	bl	8003be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dc98:	4805      	ldr	r0, [pc, #20]	@ (800dcb0 <MX_USB_DEVICE_Init+0x54>)
 800dc9a:	f7fe fd25 	bl	800c6e8 <USBD_Start>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d001      	beq.n	800dca8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dca4:	f7f5 ffa0 	bl	8003be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dca8:	bf00      	nop
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	200000b0 	.word	0x200000b0
 800dcb0:	20000a40 	.word	0x20000a40
 800dcb4:	2000001c 	.word	0x2000001c
 800dcb8:	2000009c 	.word	0x2000009c

0800dcbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	4905      	ldr	r1, [pc, #20]	@ (800dcd8 <CDC_Init_FS+0x1c>)
 800dcc4:	4805      	ldr	r0, [pc, #20]	@ (800dcdc <CDC_Init_FS+0x20>)
 800dcc6:	f7fe fbf3 	bl	800c4b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dcca:	4905      	ldr	r1, [pc, #20]	@ (800dce0 <CDC_Init_FS+0x24>)
 800dccc:	4803      	ldr	r0, [pc, #12]	@ (800dcdc <CDC_Init_FS+0x20>)
 800dcce:	f7fe fc11 	bl	800c4f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dcd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	2000151c 	.word	0x2000151c
 800dcdc:	20000a40 	.word	0x20000a40
 800dce0:	20000d1c 	.word	0x20000d1c

0800dce4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dce4:	b480      	push	{r7}
 800dce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dce8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	6039      	str	r1, [r7, #0]
 800dcfe:	71fb      	strb	r3, [r7, #7]
 800dd00:	4613      	mov	r3, r2
 800dd02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dd04:	79fb      	ldrb	r3, [r7, #7]
 800dd06:	2b23      	cmp	r3, #35	@ 0x23
 800dd08:	d84a      	bhi.n	800dda0 <CDC_Control_FS+0xac>
 800dd0a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd10 <CDC_Control_FS+0x1c>)
 800dd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd10:	0800dda1 	.word	0x0800dda1
 800dd14:	0800dda1 	.word	0x0800dda1
 800dd18:	0800dda1 	.word	0x0800dda1
 800dd1c:	0800dda1 	.word	0x0800dda1
 800dd20:	0800dda1 	.word	0x0800dda1
 800dd24:	0800dda1 	.word	0x0800dda1
 800dd28:	0800dda1 	.word	0x0800dda1
 800dd2c:	0800dda1 	.word	0x0800dda1
 800dd30:	0800dda1 	.word	0x0800dda1
 800dd34:	0800dda1 	.word	0x0800dda1
 800dd38:	0800dda1 	.word	0x0800dda1
 800dd3c:	0800dda1 	.word	0x0800dda1
 800dd40:	0800dda1 	.word	0x0800dda1
 800dd44:	0800dda1 	.word	0x0800dda1
 800dd48:	0800dda1 	.word	0x0800dda1
 800dd4c:	0800dda1 	.word	0x0800dda1
 800dd50:	0800dda1 	.word	0x0800dda1
 800dd54:	0800dda1 	.word	0x0800dda1
 800dd58:	0800dda1 	.word	0x0800dda1
 800dd5c:	0800dda1 	.word	0x0800dda1
 800dd60:	0800dda1 	.word	0x0800dda1
 800dd64:	0800dda1 	.word	0x0800dda1
 800dd68:	0800dda1 	.word	0x0800dda1
 800dd6c:	0800dda1 	.word	0x0800dda1
 800dd70:	0800dda1 	.word	0x0800dda1
 800dd74:	0800dda1 	.word	0x0800dda1
 800dd78:	0800dda1 	.word	0x0800dda1
 800dd7c:	0800dda1 	.word	0x0800dda1
 800dd80:	0800dda1 	.word	0x0800dda1
 800dd84:	0800dda1 	.word	0x0800dda1
 800dd88:	0800dda1 	.word	0x0800dda1
 800dd8c:	0800dda1 	.word	0x0800dda1
 800dd90:	0800dda1 	.word	0x0800dda1
 800dd94:	0800dda1 	.word	0x0800dda1
 800dd98:	0800dda1 	.word	0x0800dda1
 800dd9c:	0800dda1 	.word	0x0800dda1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dda0:	bf00      	nop
  }

  return (USBD_OK);
 800dda2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ddba:	6879      	ldr	r1, [r7, #4]
 800ddbc:	4805      	ldr	r0, [pc, #20]	@ (800ddd4 <CDC_Receive_FS+0x24>)
 800ddbe:	f7fe fb99 	bl	800c4f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ddc2:	4804      	ldr	r0, [pc, #16]	@ (800ddd4 <CDC_Receive_FS+0x24>)
 800ddc4:	f7fe fbf4 	bl	800c5b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ddc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	20000a40 	.word	0x20000a40

0800ddd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dde4:	2300      	movs	r3, #0
 800dde6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dde8:	4b0d      	ldr	r3, [pc, #52]	@ (800de20 <CDC_Transmit_FS+0x48>)
 800ddea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ddee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e00b      	b.n	800de16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ddfe:	887b      	ldrh	r3, [r7, #2]
 800de00:	461a      	mov	r2, r3
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	4806      	ldr	r0, [pc, #24]	@ (800de20 <CDC_Transmit_FS+0x48>)
 800de06:	f7fe fb53 	bl	800c4b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800de0a:	4805      	ldr	r0, [pc, #20]	@ (800de20 <CDC_Transmit_FS+0x48>)
 800de0c:	f7fe fb90 	bl	800c530 <USBD_CDC_TransmitPacket>
 800de10:	4603      	mov	r3, r0
 800de12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	20000a40 	.word	0x20000a40

0800de24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800de24:	b480      	push	{r7}
 800de26:	b087      	sub	sp, #28
 800de28:	af00      	add	r7, sp, #0
 800de2a:	60f8      	str	r0, [r7, #12]
 800de2c:	60b9      	str	r1, [r7, #8]
 800de2e:	4613      	mov	r3, r2
 800de30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800de36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	371c      	adds	r7, #28
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
	...

0800de48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	4603      	mov	r3, r0
 800de50:	6039      	str	r1, [r7, #0]
 800de52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	2212      	movs	r2, #18
 800de58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800de5a:	4b03      	ldr	r3, [pc, #12]	@ (800de68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr
 800de68:	200000d0 	.word	0x200000d0

0800de6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	4603      	mov	r3, r0
 800de74:	6039      	str	r1, [r7, #0]
 800de76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	2204      	movs	r2, #4
 800de7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800de7e:	4b03      	ldr	r3, [pc, #12]	@ (800de8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800de80:	4618      	mov	r0, r3
 800de82:	370c      	adds	r7, #12
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr
 800de8c:	200000f0 	.word	0x200000f0

0800de90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	4603      	mov	r3, r0
 800de98:	6039      	str	r1, [r7, #0]
 800de9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de9c:	79fb      	ldrb	r3, [r7, #7]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d105      	bne.n	800deae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dea2:	683a      	ldr	r2, [r7, #0]
 800dea4:	4907      	ldr	r1, [pc, #28]	@ (800dec4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dea6:	4808      	ldr	r0, [pc, #32]	@ (800dec8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dea8:	f7ff fdf8 	bl	800da9c <USBD_GetString>
 800deac:	e004      	b.n	800deb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800deae:	683a      	ldr	r2, [r7, #0]
 800deb0:	4904      	ldr	r1, [pc, #16]	@ (800dec4 <USBD_FS_ProductStrDescriptor+0x34>)
 800deb2:	4805      	ldr	r0, [pc, #20]	@ (800dec8 <USBD_FS_ProductStrDescriptor+0x38>)
 800deb4:	f7ff fdf2 	bl	800da9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800deb8:	4b02      	ldr	r3, [pc, #8]	@ (800dec4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	20001d1c 	.word	0x20001d1c
 800dec8:	0801537c 	.word	0x0801537c

0800decc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	6039      	str	r1, [r7, #0]
 800ded6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	4904      	ldr	r1, [pc, #16]	@ (800deec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dedc:	4804      	ldr	r0, [pc, #16]	@ (800def0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dede:	f7ff fddd 	bl	800da9c <USBD_GetString>
  return USBD_StrDesc;
 800dee2:	4b02      	ldr	r3, [pc, #8]	@ (800deec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3708      	adds	r7, #8
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	20001d1c 	.word	0x20001d1c
 800def0:	08015394 	.word	0x08015394

0800def4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	4603      	mov	r3, r0
 800defc:	6039      	str	r1, [r7, #0]
 800defe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	221a      	movs	r2, #26
 800df04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800df06:	f000 f855 	bl	800dfb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800df0a:	4b02      	ldr	r3, [pc, #8]	@ (800df14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3708      	adds	r7, #8
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	200000f4 	.word	0x200000f4

0800df18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	4603      	mov	r3, r0
 800df20:	6039      	str	r1, [r7, #0]
 800df22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800df24:	79fb      	ldrb	r3, [r7, #7]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d105      	bne.n	800df36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800df2a:	683a      	ldr	r2, [r7, #0]
 800df2c:	4907      	ldr	r1, [pc, #28]	@ (800df4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800df2e:	4808      	ldr	r0, [pc, #32]	@ (800df50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800df30:	f7ff fdb4 	bl	800da9c <USBD_GetString>
 800df34:	e004      	b.n	800df40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800df36:	683a      	ldr	r2, [r7, #0]
 800df38:	4904      	ldr	r1, [pc, #16]	@ (800df4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800df3a:	4805      	ldr	r0, [pc, #20]	@ (800df50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800df3c:	f7ff fdae 	bl	800da9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800df40:	4b02      	ldr	r3, [pc, #8]	@ (800df4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800df42:	4618      	mov	r0, r3
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	20001d1c 	.word	0x20001d1c
 800df50:	080153a8 	.word	0x080153a8

0800df54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	4603      	mov	r3, r0
 800df5c:	6039      	str	r1, [r7, #0]
 800df5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df60:	79fb      	ldrb	r3, [r7, #7]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d105      	bne.n	800df72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df66:	683a      	ldr	r2, [r7, #0]
 800df68:	4907      	ldr	r1, [pc, #28]	@ (800df88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df6a:	4808      	ldr	r0, [pc, #32]	@ (800df8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df6c:	f7ff fd96 	bl	800da9c <USBD_GetString>
 800df70:	e004      	b.n	800df7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df72:	683a      	ldr	r2, [r7, #0]
 800df74:	4904      	ldr	r1, [pc, #16]	@ (800df88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df76:	4805      	ldr	r0, [pc, #20]	@ (800df8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df78:	f7ff fd90 	bl	800da9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800df7c:	4b02      	ldr	r3, [pc, #8]	@ (800df88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	20001d1c 	.word	0x20001d1c
 800df8c:	080153b4 	.word	0x080153b4

0800df90 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	4603      	mov	r3, r0
 800df98:	6039      	str	r1, [r7, #0]
 800df9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	220c      	movs	r2, #12
 800dfa0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800dfa2:	4b03      	ldr	r3, [pc, #12]	@ (800dfb0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	370c      	adds	r7, #12
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr
 800dfb0:	200000e4 	.word	0x200000e4

0800dfb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dfba:	4b0f      	ldr	r3, [pc, #60]	@ (800dff8 <Get_SerialNum+0x44>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dfc0:	4b0e      	ldr	r3, [pc, #56]	@ (800dffc <Get_SerialNum+0x48>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dfc6:	4b0e      	ldr	r3, [pc, #56]	@ (800e000 <Get_SerialNum+0x4c>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d009      	beq.n	800dfee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dfda:	2208      	movs	r2, #8
 800dfdc:	4909      	ldr	r1, [pc, #36]	@ (800e004 <Get_SerialNum+0x50>)
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f000 f814 	bl	800e00c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dfe4:	2204      	movs	r2, #4
 800dfe6:	4908      	ldr	r1, [pc, #32]	@ (800e008 <Get_SerialNum+0x54>)
 800dfe8:	68b8      	ldr	r0, [r7, #8]
 800dfea:	f000 f80f 	bl	800e00c <IntToUnicode>
  }
}
 800dfee:	bf00      	nop
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	1fff7a10 	.word	0x1fff7a10
 800dffc:	1fff7a14 	.word	0x1fff7a14
 800e000:	1fff7a18 	.word	0x1fff7a18
 800e004:	200000f6 	.word	0x200000f6
 800e008:	20000106 	.word	0x20000106

0800e00c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b087      	sub	sp, #28
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	4613      	mov	r3, r2
 800e018:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e01a:	2300      	movs	r3, #0
 800e01c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e01e:	2300      	movs	r3, #0
 800e020:	75fb      	strb	r3, [r7, #23]
 800e022:	e027      	b.n	800e074 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	0f1b      	lsrs	r3, r3, #28
 800e028:	2b09      	cmp	r3, #9
 800e02a:	d80b      	bhi.n	800e044 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	0f1b      	lsrs	r3, r3, #28
 800e030:	b2da      	uxtb	r2, r3
 800e032:	7dfb      	ldrb	r3, [r7, #23]
 800e034:	005b      	lsls	r3, r3, #1
 800e036:	4619      	mov	r1, r3
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	440b      	add	r3, r1
 800e03c:	3230      	adds	r2, #48	@ 0x30
 800e03e:	b2d2      	uxtb	r2, r2
 800e040:	701a      	strb	r2, [r3, #0]
 800e042:	e00a      	b.n	800e05a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	0f1b      	lsrs	r3, r3, #28
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	7dfb      	ldrb	r3, [r7, #23]
 800e04c:	005b      	lsls	r3, r3, #1
 800e04e:	4619      	mov	r1, r3
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	440b      	add	r3, r1
 800e054:	3237      	adds	r2, #55	@ 0x37
 800e056:	b2d2      	uxtb	r2, r2
 800e058:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	011b      	lsls	r3, r3, #4
 800e05e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e060:	7dfb      	ldrb	r3, [r7, #23]
 800e062:	005b      	lsls	r3, r3, #1
 800e064:	3301      	adds	r3, #1
 800e066:	68ba      	ldr	r2, [r7, #8]
 800e068:	4413      	add	r3, r2
 800e06a:	2200      	movs	r2, #0
 800e06c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e06e:	7dfb      	ldrb	r3, [r7, #23]
 800e070:	3301      	adds	r3, #1
 800e072:	75fb      	strb	r3, [r7, #23]
 800e074:	7dfa      	ldrb	r2, [r7, #23]
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d3d3      	bcc.n	800e024 <IntToUnicode+0x18>
  }
}
 800e07c:	bf00      	nop
 800e07e:	bf00      	nop
 800e080:	371c      	adds	r7, #28
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
	...

0800e08c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b0a0      	sub	sp, #128	@ 0x80
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e094:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800e098:	2200      	movs	r2, #0
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	605a      	str	r2, [r3, #4]
 800e09e:	609a      	str	r2, [r3, #8]
 800e0a0:	60da      	str	r2, [r3, #12]
 800e0a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e0a4:	f107 0310 	add.w	r3, r7, #16
 800e0a8:	225c      	movs	r2, #92	@ 0x5c
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f002 f9c2 	bl	8010436 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e0ba:	d149      	bne.n	800e150 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e0bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e0c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e0c6:	f107 0310 	add.w	r3, r7, #16
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7f9 fac6 	bl	800765c <HAL_RCCEx_PeriphCLKConfig>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800e0d6:	f7f5 fd87 	bl	8003be8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0da:	2300      	movs	r3, #0
 800e0dc:	60fb      	str	r3, [r7, #12]
 800e0de:	4b1e      	ldr	r3, [pc, #120]	@ (800e158 <HAL_PCD_MspInit+0xcc>)
 800e0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0e2:	4a1d      	ldr	r2, [pc, #116]	@ (800e158 <HAL_PCD_MspInit+0xcc>)
 800e0e4:	f043 0301 	orr.w	r3, r3, #1
 800e0e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800e0ea:	4b1b      	ldr	r3, [pc, #108]	@ (800e158 <HAL_PCD_MspInit+0xcc>)
 800e0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e0f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e0fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e100:	2300      	movs	r3, #0
 800e102:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e104:	2303      	movs	r3, #3
 800e106:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e108:	230a      	movs	r3, #10
 800e10a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e10c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800e110:	4619      	mov	r1, r3
 800e112:	4812      	ldr	r0, [pc, #72]	@ (800e15c <HAL_PCD_MspInit+0xd0>)
 800e114:	f7f7 fbfa 	bl	800590c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e118:	4b0f      	ldr	r3, [pc, #60]	@ (800e158 <HAL_PCD_MspInit+0xcc>)
 800e11a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e11c:	4a0e      	ldr	r2, [pc, #56]	@ (800e158 <HAL_PCD_MspInit+0xcc>)
 800e11e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e122:	6353      	str	r3, [r2, #52]	@ 0x34
 800e124:	2300      	movs	r3, #0
 800e126:	60bb      	str	r3, [r7, #8]
 800e128:	4b0b      	ldr	r3, [pc, #44]	@ (800e158 <HAL_PCD_MspInit+0xcc>)
 800e12a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e12c:	4a0a      	ldr	r2, [pc, #40]	@ (800e158 <HAL_PCD_MspInit+0xcc>)
 800e12e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e132:	6453      	str	r3, [r2, #68]	@ 0x44
 800e134:	4b08      	ldr	r3, [pc, #32]	@ (800e158 <HAL_PCD_MspInit+0xcc>)
 800e136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e13c:	60bb      	str	r3, [r7, #8]
 800e13e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e140:	2200      	movs	r2, #0
 800e142:	2100      	movs	r1, #0
 800e144:	2043      	movs	r0, #67	@ 0x43
 800e146:	f7f6 ffa8 	bl	800509a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e14a:	2043      	movs	r0, #67	@ 0x43
 800e14c:	f7f6 ffc1 	bl	80050d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e150:	bf00      	nop
 800e152:	3780      	adds	r7, #128	@ 0x80
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}
 800e158:	40023800 	.word	0x40023800
 800e15c:	40020000 	.word	0x40020000

0800e160 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e174:	4619      	mov	r1, r3
 800e176:	4610      	mov	r0, r2
 800e178:	f7fe fb03 	bl	800c782 <USBD_LL_SetupStage>
}
 800e17c:	bf00      	nop
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	460b      	mov	r3, r1
 800e18e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e196:	78fa      	ldrb	r2, [r7, #3]
 800e198:	6879      	ldr	r1, [r7, #4]
 800e19a:	4613      	mov	r3, r2
 800e19c:	00db      	lsls	r3, r3, #3
 800e19e:	4413      	add	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	440b      	add	r3, r1
 800e1a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	78fb      	ldrb	r3, [r7, #3]
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	f7fe fb3d 	bl	800c82c <USBD_LL_DataOutStage>
}
 800e1b2:	bf00      	nop
 800e1b4:	3708      	adds	r7, #8
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b082      	sub	sp, #8
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e1cc:	78fa      	ldrb	r2, [r7, #3]
 800e1ce:	6879      	ldr	r1, [r7, #4]
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	00db      	lsls	r3, r3, #3
 800e1d4:	4413      	add	r3, r2
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	440b      	add	r3, r1
 800e1da:	3320      	adds	r3, #32
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	78fb      	ldrb	r3, [r7, #3]
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	f7fe fbd6 	bl	800c992 <USBD_LL_DataInStage>
}
 800e1e6:	bf00      	nop
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b082      	sub	sp, #8
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fe fd10 	bl	800cc22 <USBD_LL_SOF>
}
 800e202:	bf00      	nop
 800e204:	3708      	adds	r7, #8
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b084      	sub	sp, #16
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e212:	2301      	movs	r3, #1
 800e214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	79db      	ldrb	r3, [r3, #7]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d102      	bne.n	800e224 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e21e:	2300      	movs	r3, #0
 800e220:	73fb      	strb	r3, [r7, #15]
 800e222:	e008      	b.n	800e236 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	79db      	ldrb	r3, [r3, #7]
 800e228:	2b02      	cmp	r3, #2
 800e22a:	d102      	bne.n	800e232 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e22c:	2301      	movs	r3, #1
 800e22e:	73fb      	strb	r3, [r7, #15]
 800e230:	e001      	b.n	800e236 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e232:	f7f5 fcd9 	bl	8003be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e23c:	7bfa      	ldrb	r2, [r7, #15]
 800e23e:	4611      	mov	r1, r2
 800e240:	4618      	mov	r0, r3
 800e242:	f7fe fcaa 	bl	800cb9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fe fc52 	bl	800caf6 <USBD_LL_Reset>
}
 800e252:	bf00      	nop
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
	...

0800e25c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fe fca5 	bl	800cbba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	6812      	ldr	r2, [r2, #0]
 800e27e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e282:	f043 0301 	orr.w	r3, r3, #1
 800e286:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	7adb      	ldrb	r3, [r3, #11]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d005      	beq.n	800e29c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e290:	4b04      	ldr	r3, [pc, #16]	@ (800e2a4 <HAL_PCD_SuspendCallback+0x48>)
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	4a03      	ldr	r2, [pc, #12]	@ (800e2a4 <HAL_PCD_SuspendCallback+0x48>)
 800e296:	f043 0306 	orr.w	r3, r3, #6
 800e29a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e29c:	bf00      	nop
 800e29e:	3708      	adds	r7, #8
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	e000ed00 	.word	0xe000ed00

0800e2a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fe fc9b 	bl	800cbf2 <USBD_LL_Resume>
}
 800e2bc:	bf00      	nop
 800e2be:	3708      	adds	r7, #8
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2d6:	78fa      	ldrb	r2, [r7, #3]
 800e2d8:	4611      	mov	r1, r2
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe fcf3 	bl	800ccc6 <USBD_LL_IsoOUTIncomplete>
}
 800e2e0:	bf00      	nop
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2fa:	78fa      	ldrb	r2, [r7, #3]
 800e2fc:	4611      	mov	r1, r2
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fe fcaf 	bl	800cc62 <USBD_LL_IsoINIncomplete>
}
 800e304:	bf00      	nop
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fe fd05 	bl	800cd2a <USBD_LL_DevConnected>
}
 800e320:	bf00      	nop
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe fd02 	bl	800cd40 <USBD_LL_DevDisconnected>
}
 800e33c:	bf00      	nop
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d13c      	bne.n	800e3ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e354:	4a20      	ldr	r2, [pc, #128]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4a1e      	ldr	r2, [pc, #120]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e360:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e364:	4b1c      	ldr	r3, [pc, #112]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e366:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e36a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e36c:	4b1a      	ldr	r3, [pc, #104]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e36e:	2206      	movs	r2, #6
 800e370:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e372:	4b19      	ldr	r3, [pc, #100]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e374:	2202      	movs	r2, #2
 800e376:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e378:	4b17      	ldr	r3, [pc, #92]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e37e:	4b16      	ldr	r3, [pc, #88]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e380:	2202      	movs	r2, #2
 800e382:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e384:	4b14      	ldr	r3, [pc, #80]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e386:	2200      	movs	r2, #0
 800e388:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e38a:	4b13      	ldr	r3, [pc, #76]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e390:	4b11      	ldr	r3, [pc, #68]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e392:	2200      	movs	r2, #0
 800e394:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e396:	4b10      	ldr	r3, [pc, #64]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e398:	2200      	movs	r2, #0
 800e39a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e39c:	4b0e      	ldr	r3, [pc, #56]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e39e:	2200      	movs	r2, #0
 800e3a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e3a2:	480d      	ldr	r0, [pc, #52]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e3a4:	f7f7 fda4 	bl	8005ef0 <HAL_PCD_Init>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e3ae:	f7f5 fc1b 	bl	8003be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e3b2:	2180      	movs	r1, #128	@ 0x80
 800e3b4:	4808      	ldr	r0, [pc, #32]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e3b6:	f7f9 f802 	bl	80073be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e3ba:	2240      	movs	r2, #64	@ 0x40
 800e3bc:	2100      	movs	r1, #0
 800e3be:	4806      	ldr	r0, [pc, #24]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e3c0:	f7f8 ffb6 	bl	8007330 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e3c4:	2280      	movs	r2, #128	@ 0x80
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	4803      	ldr	r0, [pc, #12]	@ (800e3d8 <USBD_LL_Init+0x94>)
 800e3ca:	f7f8 ffb1 	bl	8007330 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	20001f1c 	.word	0x20001f1c

0800e3dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7f7 fe92 	bl	800611c <HAL_PCD_Start>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 f990 	bl	800e724 <USBD_Get_USB_Status>
 800e404:	4603      	mov	r3, r0
 800e406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e408:	7bbb      	ldrb	r3, [r7, #14]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b084      	sub	sp, #16
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	4608      	mov	r0, r1
 800e41c:	4611      	mov	r1, r2
 800e41e:	461a      	mov	r2, r3
 800e420:	4603      	mov	r3, r0
 800e422:	70fb      	strb	r3, [r7, #3]
 800e424:	460b      	mov	r3, r1
 800e426:	70bb      	strb	r3, [r7, #2]
 800e428:	4613      	mov	r3, r2
 800e42a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e42c:	2300      	movs	r3, #0
 800e42e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e430:	2300      	movs	r3, #0
 800e432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e43a:	78bb      	ldrb	r3, [r7, #2]
 800e43c:	883a      	ldrh	r2, [r7, #0]
 800e43e:	78f9      	ldrb	r1, [r7, #3]
 800e440:	f7f8 fb93 	bl	8006b6a <HAL_PCD_EP_Open>
 800e444:	4603      	mov	r3, r0
 800e446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e448:	7bfb      	ldrb	r3, [r7, #15]
 800e44a:	4618      	mov	r0, r3
 800e44c:	f000 f96a 	bl	800e724 <USBD_Get_USB_Status>
 800e450:	4603      	mov	r3, r0
 800e452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e454:	7bbb      	ldrb	r3, [r7, #14]
}
 800e456:	4618      	mov	r0, r3
 800e458:	3710      	adds	r7, #16
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b084      	sub	sp, #16
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
 800e466:	460b      	mov	r3, r1
 800e468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e46a:	2300      	movs	r3, #0
 800e46c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e46e:	2300      	movs	r3, #0
 800e470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e478:	78fa      	ldrb	r2, [r7, #3]
 800e47a:	4611      	mov	r1, r2
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7f8 fbdc 	bl	8006c3a <HAL_PCD_EP_Close>
 800e482:	4603      	mov	r3, r0
 800e484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e486:	7bfb      	ldrb	r3, [r7, #15]
 800e488:	4618      	mov	r0, r3
 800e48a:	f000 f94b 	bl	800e724 <USBD_Get_USB_Status>
 800e48e:	4603      	mov	r3, r0
 800e490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e492:	7bbb      	ldrb	r3, [r7, #14]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4b6:	78fa      	ldrb	r2, [r7, #3]
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7f8 fc94 	bl	8006de8 <HAL_PCD_EP_SetStall>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 f92c 	bl	800e724 <USBD_Get_USB_Status>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b084      	sub	sp, #16
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4f4:	78fa      	ldrb	r2, [r7, #3]
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7f8 fcd8 	bl	8006eae <HAL_PCD_EP_ClrStall>
 800e4fe:	4603      	mov	r3, r0
 800e500:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e502:	7bfb      	ldrb	r3, [r7, #15]
 800e504:	4618      	mov	r0, r3
 800e506:	f000 f90d 	bl	800e724 <USBD_Get_USB_Status>
 800e50a:	4603      	mov	r3, r0
 800e50c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e50e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	460b      	mov	r3, r1
 800e522:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e52a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e52c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e530:	2b00      	cmp	r3, #0
 800e532:	da0b      	bge.n	800e54c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e534:	78fb      	ldrb	r3, [r7, #3]
 800e536:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e53a:	68f9      	ldr	r1, [r7, #12]
 800e53c:	4613      	mov	r3, r2
 800e53e:	00db      	lsls	r3, r3, #3
 800e540:	4413      	add	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	440b      	add	r3, r1
 800e546:	3316      	adds	r3, #22
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	e00b      	b.n	800e564 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e54c:	78fb      	ldrb	r3, [r7, #3]
 800e54e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e552:	68f9      	ldr	r1, [r7, #12]
 800e554:	4613      	mov	r3, r2
 800e556:	00db      	lsls	r3, r3, #3
 800e558:	4413      	add	r3, r2
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	440b      	add	r3, r1
 800e55e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e562:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	460b      	mov	r3, r1
 800e57a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e580:	2300      	movs	r3, #0
 800e582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e58a:	78fa      	ldrb	r2, [r7, #3]
 800e58c:	4611      	mov	r1, r2
 800e58e:	4618      	mov	r0, r3
 800e590:	f7f8 fac7 	bl	8006b22 <HAL_PCD_SetAddress>
 800e594:	4603      	mov	r3, r0
 800e596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e598:	7bfb      	ldrb	r3, [r7, #15]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f000 f8c2 	bl	800e724 <USBD_Get_USB_Status>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b086      	sub	sp, #24
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	607a      	str	r2, [r7, #4]
 800e5b8:	603b      	str	r3, [r7, #0]
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e5cc:	7af9      	ldrb	r1, [r7, #11]
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	f7f8 fbcf 	bl	8006d74 <HAL_PCD_EP_Transmit>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5da:	7dfb      	ldrb	r3, [r7, #23]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f000 f8a1 	bl	800e724 <USBD_Get_USB_Status>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3718      	adds	r7, #24
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	607a      	str	r2, [r7, #4]
 800e5fa:	603b      	str	r3, [r7, #0]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e600:	2300      	movs	r3, #0
 800e602:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e604:	2300      	movs	r3, #0
 800e606:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e60e:	7af9      	ldrb	r1, [r7, #11]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	f7f8 fb5b 	bl	8006cce <HAL_PCD_EP_Receive>
 800e618:	4603      	mov	r3, r0
 800e61a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e61c:	7dfb      	ldrb	r3, [r7, #23]
 800e61e:	4618      	mov	r0, r3
 800e620:	f000 f880 	bl	800e724 <USBD_Get_USB_Status>
 800e624:	4603      	mov	r3, r0
 800e626:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e628:	7dbb      	ldrb	r3, [r7, #22]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3718      	adds	r7, #24
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e632:	b580      	push	{r7, lr}
 800e634:	b082      	sub	sp, #8
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
 800e63a:	460b      	mov	r3, r1
 800e63c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e644:	78fa      	ldrb	r2, [r7, #3]
 800e646:	4611      	mov	r1, r2
 800e648:	4618      	mov	r0, r3
 800e64a:	f7f8 fb7b 	bl	8006d44 <HAL_PCD_EP_GetRxCount>
 800e64e:	4603      	mov	r3, r0
}
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	460b      	mov	r3, r1
 800e662:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e664:	78fb      	ldrb	r3, [r7, #3]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <HAL_PCDEx_LPM_Callback+0x18>
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d01f      	beq.n	800e6ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e66e:	e03b      	b.n	800e6e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7adb      	ldrb	r3, [r3, #11]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d007      	beq.n	800e688 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e678:	f7f3 ffdc 	bl	8002634 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e67c:	4b1c      	ldr	r3, [pc, #112]	@ (800e6f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e67e:	691b      	ldr	r3, [r3, #16]
 800e680:	4a1b      	ldr	r2, [pc, #108]	@ (800e6f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e682:	f023 0306 	bic.w	r3, r3, #6
 800e686:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	6812      	ldr	r2, [r2, #0]
 800e696:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e69a:	f023 0301 	bic.w	r3, r3, #1
 800e69e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fe faa3 	bl	800cbf2 <USBD_LL_Resume>
    break;
 800e6ac:	e01c      	b.n	800e6e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	6812      	ldr	r2, [r2, #0]
 800e6bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e6c0:	f043 0301 	orr.w	r3, r3, #1
 800e6c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fe fa74 	bl	800cbba <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	7adb      	ldrb	r3, [r3, #11]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d005      	beq.n	800e6e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6da:	4b05      	ldr	r3, [pc, #20]	@ (800e6f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	4a04      	ldr	r2, [pc, #16]	@ (800e6f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e6e0:	f043 0306 	orr.w	r3, r3, #6
 800e6e4:	6113      	str	r3, [r2, #16]
    break;
 800e6e6:	bf00      	nop
}
 800e6e8:	bf00      	nop
 800e6ea:	3708      	adds	r7, #8
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	e000ed00 	.word	0xe000ed00

0800e6f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e6fc:	4b03      	ldr	r3, [pc, #12]	@ (800e70c <USBD_static_malloc+0x18>)
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	370c      	adds	r7, #12
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	20002400 	.word	0x20002400

0800e710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]

}
 800e718:	bf00      	nop
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
 800e72a:	4603      	mov	r3, r0
 800e72c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e732:	79fb      	ldrb	r3, [r7, #7]
 800e734:	2b03      	cmp	r3, #3
 800e736:	d817      	bhi.n	800e768 <USBD_Get_USB_Status+0x44>
 800e738:	a201      	add	r2, pc, #4	@ (adr r2, 800e740 <USBD_Get_USB_Status+0x1c>)
 800e73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e73e:	bf00      	nop
 800e740:	0800e751 	.word	0x0800e751
 800e744:	0800e757 	.word	0x0800e757
 800e748:	0800e75d 	.word	0x0800e75d
 800e74c:	0800e763 	.word	0x0800e763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	73fb      	strb	r3, [r7, #15]
    break;
 800e754:	e00b      	b.n	800e76e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e756:	2303      	movs	r3, #3
 800e758:	73fb      	strb	r3, [r7, #15]
    break;
 800e75a:	e008      	b.n	800e76e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e75c:	2301      	movs	r3, #1
 800e75e:	73fb      	strb	r3, [r7, #15]
    break;
 800e760:	e005      	b.n	800e76e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e762:	2303      	movs	r3, #3
 800e764:	73fb      	strb	r3, [r7, #15]
    break;
 800e766:	e002      	b.n	800e76e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e768:	2303      	movs	r3, #3
 800e76a:	73fb      	strb	r3, [r7, #15]
    break;
 800e76c:	bf00      	nop
  }
  return usb_status;
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3714      	adds	r7, #20
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <malloc>:
 800e77c:	4b02      	ldr	r3, [pc, #8]	@ (800e788 <malloc+0xc>)
 800e77e:	4601      	mov	r1, r0
 800e780:	6818      	ldr	r0, [r3, #0]
 800e782:	f000 b825 	b.w	800e7d0 <_malloc_r>
 800e786:	bf00      	nop
 800e788:	20000288 	.word	0x20000288

0800e78c <sbrk_aligned>:
 800e78c:	b570      	push	{r4, r5, r6, lr}
 800e78e:	4e0f      	ldr	r6, [pc, #60]	@ (800e7cc <sbrk_aligned+0x40>)
 800e790:	460c      	mov	r4, r1
 800e792:	6831      	ldr	r1, [r6, #0]
 800e794:	4605      	mov	r5, r0
 800e796:	b911      	cbnz	r1, 800e79e <sbrk_aligned+0x12>
 800e798:	f001 fea0 	bl	80104dc <_sbrk_r>
 800e79c:	6030      	str	r0, [r6, #0]
 800e79e:	4621      	mov	r1, r4
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f001 fe9b 	bl	80104dc <_sbrk_r>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	d103      	bne.n	800e7b2 <sbrk_aligned+0x26>
 800e7aa:	f04f 34ff 	mov.w	r4, #4294967295
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	bd70      	pop	{r4, r5, r6, pc}
 800e7b2:	1cc4      	adds	r4, r0, #3
 800e7b4:	f024 0403 	bic.w	r4, r4, #3
 800e7b8:	42a0      	cmp	r0, r4
 800e7ba:	d0f8      	beq.n	800e7ae <sbrk_aligned+0x22>
 800e7bc:	1a21      	subs	r1, r4, r0
 800e7be:	4628      	mov	r0, r5
 800e7c0:	f001 fe8c 	bl	80104dc <_sbrk_r>
 800e7c4:	3001      	adds	r0, #1
 800e7c6:	d1f2      	bne.n	800e7ae <sbrk_aligned+0x22>
 800e7c8:	e7ef      	b.n	800e7aa <sbrk_aligned+0x1e>
 800e7ca:	bf00      	nop
 800e7cc:	20002620 	.word	0x20002620

0800e7d0 <_malloc_r>:
 800e7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7d4:	1ccd      	adds	r5, r1, #3
 800e7d6:	f025 0503 	bic.w	r5, r5, #3
 800e7da:	3508      	adds	r5, #8
 800e7dc:	2d0c      	cmp	r5, #12
 800e7de:	bf38      	it	cc
 800e7e0:	250c      	movcc	r5, #12
 800e7e2:	2d00      	cmp	r5, #0
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	db01      	blt.n	800e7ec <_malloc_r+0x1c>
 800e7e8:	42a9      	cmp	r1, r5
 800e7ea:	d904      	bls.n	800e7f6 <_malloc_r+0x26>
 800e7ec:	230c      	movs	r3, #12
 800e7ee:	6033      	str	r3, [r6, #0]
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e8cc <_malloc_r+0xfc>
 800e7fa:	f000 f869 	bl	800e8d0 <__malloc_lock>
 800e7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800e802:	461c      	mov	r4, r3
 800e804:	bb44      	cbnz	r4, 800e858 <_malloc_r+0x88>
 800e806:	4629      	mov	r1, r5
 800e808:	4630      	mov	r0, r6
 800e80a:	f7ff ffbf 	bl	800e78c <sbrk_aligned>
 800e80e:	1c43      	adds	r3, r0, #1
 800e810:	4604      	mov	r4, r0
 800e812:	d158      	bne.n	800e8c6 <_malloc_r+0xf6>
 800e814:	f8d8 4000 	ldr.w	r4, [r8]
 800e818:	4627      	mov	r7, r4
 800e81a:	2f00      	cmp	r7, #0
 800e81c:	d143      	bne.n	800e8a6 <_malloc_r+0xd6>
 800e81e:	2c00      	cmp	r4, #0
 800e820:	d04b      	beq.n	800e8ba <_malloc_r+0xea>
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	4639      	mov	r1, r7
 800e826:	4630      	mov	r0, r6
 800e828:	eb04 0903 	add.w	r9, r4, r3
 800e82c:	f001 fe56 	bl	80104dc <_sbrk_r>
 800e830:	4581      	cmp	r9, r0
 800e832:	d142      	bne.n	800e8ba <_malloc_r+0xea>
 800e834:	6821      	ldr	r1, [r4, #0]
 800e836:	1a6d      	subs	r5, r5, r1
 800e838:	4629      	mov	r1, r5
 800e83a:	4630      	mov	r0, r6
 800e83c:	f7ff ffa6 	bl	800e78c <sbrk_aligned>
 800e840:	3001      	adds	r0, #1
 800e842:	d03a      	beq.n	800e8ba <_malloc_r+0xea>
 800e844:	6823      	ldr	r3, [r4, #0]
 800e846:	442b      	add	r3, r5
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	f8d8 3000 	ldr.w	r3, [r8]
 800e84e:	685a      	ldr	r2, [r3, #4]
 800e850:	bb62      	cbnz	r2, 800e8ac <_malloc_r+0xdc>
 800e852:	f8c8 7000 	str.w	r7, [r8]
 800e856:	e00f      	b.n	800e878 <_malloc_r+0xa8>
 800e858:	6822      	ldr	r2, [r4, #0]
 800e85a:	1b52      	subs	r2, r2, r5
 800e85c:	d420      	bmi.n	800e8a0 <_malloc_r+0xd0>
 800e85e:	2a0b      	cmp	r2, #11
 800e860:	d917      	bls.n	800e892 <_malloc_r+0xc2>
 800e862:	1961      	adds	r1, r4, r5
 800e864:	42a3      	cmp	r3, r4
 800e866:	6025      	str	r5, [r4, #0]
 800e868:	bf18      	it	ne
 800e86a:	6059      	strne	r1, [r3, #4]
 800e86c:	6863      	ldr	r3, [r4, #4]
 800e86e:	bf08      	it	eq
 800e870:	f8c8 1000 	streq.w	r1, [r8]
 800e874:	5162      	str	r2, [r4, r5]
 800e876:	604b      	str	r3, [r1, #4]
 800e878:	4630      	mov	r0, r6
 800e87a:	f000 f82f 	bl	800e8dc <__malloc_unlock>
 800e87e:	f104 000b 	add.w	r0, r4, #11
 800e882:	1d23      	adds	r3, r4, #4
 800e884:	f020 0007 	bic.w	r0, r0, #7
 800e888:	1ac2      	subs	r2, r0, r3
 800e88a:	bf1c      	itt	ne
 800e88c:	1a1b      	subne	r3, r3, r0
 800e88e:	50a3      	strne	r3, [r4, r2]
 800e890:	e7af      	b.n	800e7f2 <_malloc_r+0x22>
 800e892:	6862      	ldr	r2, [r4, #4]
 800e894:	42a3      	cmp	r3, r4
 800e896:	bf0c      	ite	eq
 800e898:	f8c8 2000 	streq.w	r2, [r8]
 800e89c:	605a      	strne	r2, [r3, #4]
 800e89e:	e7eb      	b.n	800e878 <_malloc_r+0xa8>
 800e8a0:	4623      	mov	r3, r4
 800e8a2:	6864      	ldr	r4, [r4, #4]
 800e8a4:	e7ae      	b.n	800e804 <_malloc_r+0x34>
 800e8a6:	463c      	mov	r4, r7
 800e8a8:	687f      	ldr	r7, [r7, #4]
 800e8aa:	e7b6      	b.n	800e81a <_malloc_r+0x4a>
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	42a3      	cmp	r3, r4
 800e8b2:	d1fb      	bne.n	800e8ac <_malloc_r+0xdc>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	6053      	str	r3, [r2, #4]
 800e8b8:	e7de      	b.n	800e878 <_malloc_r+0xa8>
 800e8ba:	230c      	movs	r3, #12
 800e8bc:	6033      	str	r3, [r6, #0]
 800e8be:	4630      	mov	r0, r6
 800e8c0:	f000 f80c 	bl	800e8dc <__malloc_unlock>
 800e8c4:	e794      	b.n	800e7f0 <_malloc_r+0x20>
 800e8c6:	6005      	str	r5, [r0, #0]
 800e8c8:	e7d6      	b.n	800e878 <_malloc_r+0xa8>
 800e8ca:	bf00      	nop
 800e8cc:	20002624 	.word	0x20002624

0800e8d0 <__malloc_lock>:
 800e8d0:	4801      	ldr	r0, [pc, #4]	@ (800e8d8 <__malloc_lock+0x8>)
 800e8d2:	f001 be50 	b.w	8010576 <__retarget_lock_acquire_recursive>
 800e8d6:	bf00      	nop
 800e8d8:	20002768 	.word	0x20002768

0800e8dc <__malloc_unlock>:
 800e8dc:	4801      	ldr	r0, [pc, #4]	@ (800e8e4 <__malloc_unlock+0x8>)
 800e8de:	f001 be4b 	b.w	8010578 <__retarget_lock_release_recursive>
 800e8e2:	bf00      	nop
 800e8e4:	20002768 	.word	0x20002768

0800e8e8 <sulp>:
 800e8e8:	b570      	push	{r4, r5, r6, lr}
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	460d      	mov	r5, r1
 800e8ee:	ec45 4b10 	vmov	d0, r4, r5
 800e8f2:	4616      	mov	r6, r2
 800e8f4:	f003 fbb6 	bl	8012064 <__ulp>
 800e8f8:	ec51 0b10 	vmov	r0, r1, d0
 800e8fc:	b17e      	cbz	r6, 800e91e <sulp+0x36>
 800e8fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e902:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e906:	2b00      	cmp	r3, #0
 800e908:	dd09      	ble.n	800e91e <sulp+0x36>
 800e90a:	051b      	lsls	r3, r3, #20
 800e90c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e910:	2400      	movs	r4, #0
 800e912:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e916:	4622      	mov	r2, r4
 800e918:	462b      	mov	r3, r5
 800e91a:	f7f1 fe8d 	bl	8000638 <__aeabi_dmul>
 800e91e:	ec41 0b10 	vmov	d0, r0, r1
 800e922:	bd70      	pop	{r4, r5, r6, pc}
 800e924:	0000      	movs	r0, r0
	...

0800e928 <_strtod_l>:
 800e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e92c:	b09f      	sub	sp, #124	@ 0x7c
 800e92e:	460c      	mov	r4, r1
 800e930:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e932:	2200      	movs	r2, #0
 800e934:	921a      	str	r2, [sp, #104]	@ 0x68
 800e936:	9005      	str	r0, [sp, #20]
 800e938:	f04f 0a00 	mov.w	sl, #0
 800e93c:	f04f 0b00 	mov.w	fp, #0
 800e940:	460a      	mov	r2, r1
 800e942:	9219      	str	r2, [sp, #100]	@ 0x64
 800e944:	7811      	ldrb	r1, [r2, #0]
 800e946:	292b      	cmp	r1, #43	@ 0x2b
 800e948:	d04a      	beq.n	800e9e0 <_strtod_l+0xb8>
 800e94a:	d838      	bhi.n	800e9be <_strtod_l+0x96>
 800e94c:	290d      	cmp	r1, #13
 800e94e:	d832      	bhi.n	800e9b6 <_strtod_l+0x8e>
 800e950:	2908      	cmp	r1, #8
 800e952:	d832      	bhi.n	800e9ba <_strtod_l+0x92>
 800e954:	2900      	cmp	r1, #0
 800e956:	d03b      	beq.n	800e9d0 <_strtod_l+0xa8>
 800e958:	2200      	movs	r2, #0
 800e95a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e95c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e95e:	782a      	ldrb	r2, [r5, #0]
 800e960:	2a30      	cmp	r2, #48	@ 0x30
 800e962:	f040 80b3 	bne.w	800eacc <_strtod_l+0x1a4>
 800e966:	786a      	ldrb	r2, [r5, #1]
 800e968:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e96c:	2a58      	cmp	r2, #88	@ 0x58
 800e96e:	d16e      	bne.n	800ea4e <_strtod_l+0x126>
 800e970:	9302      	str	r3, [sp, #8]
 800e972:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e974:	9301      	str	r3, [sp, #4]
 800e976:	ab1a      	add	r3, sp, #104	@ 0x68
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	4a8e      	ldr	r2, [pc, #568]	@ (800ebb4 <_strtod_l+0x28c>)
 800e97c:	9805      	ldr	r0, [sp, #20]
 800e97e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e980:	a919      	add	r1, sp, #100	@ 0x64
 800e982:	f002 fd17 	bl	80113b4 <__gethex>
 800e986:	f010 060f 	ands.w	r6, r0, #15
 800e98a:	4604      	mov	r4, r0
 800e98c:	d005      	beq.n	800e99a <_strtod_l+0x72>
 800e98e:	2e06      	cmp	r6, #6
 800e990:	d128      	bne.n	800e9e4 <_strtod_l+0xbc>
 800e992:	3501      	adds	r5, #1
 800e994:	2300      	movs	r3, #0
 800e996:	9519      	str	r5, [sp, #100]	@ 0x64
 800e998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e99a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f040 858e 	bne.w	800f4be <_strtod_l+0xb96>
 800e9a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9a4:	b1cb      	cbz	r3, 800e9da <_strtod_l+0xb2>
 800e9a6:	4652      	mov	r2, sl
 800e9a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e9ac:	ec43 2b10 	vmov	d0, r2, r3
 800e9b0:	b01f      	add	sp, #124	@ 0x7c
 800e9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b6:	2920      	cmp	r1, #32
 800e9b8:	d1ce      	bne.n	800e958 <_strtod_l+0x30>
 800e9ba:	3201      	adds	r2, #1
 800e9bc:	e7c1      	b.n	800e942 <_strtod_l+0x1a>
 800e9be:	292d      	cmp	r1, #45	@ 0x2d
 800e9c0:	d1ca      	bne.n	800e958 <_strtod_l+0x30>
 800e9c2:	2101      	movs	r1, #1
 800e9c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e9c6:	1c51      	adds	r1, r2, #1
 800e9c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e9ca:	7852      	ldrb	r2, [r2, #1]
 800e9cc:	2a00      	cmp	r2, #0
 800e9ce:	d1c5      	bne.n	800e95c <_strtod_l+0x34>
 800e9d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e9d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f040 8570 	bne.w	800f4ba <_strtod_l+0xb92>
 800e9da:	4652      	mov	r2, sl
 800e9dc:	465b      	mov	r3, fp
 800e9de:	e7e5      	b.n	800e9ac <_strtod_l+0x84>
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	e7ef      	b.n	800e9c4 <_strtod_l+0x9c>
 800e9e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e9e6:	b13a      	cbz	r2, 800e9f8 <_strtod_l+0xd0>
 800e9e8:	2135      	movs	r1, #53	@ 0x35
 800e9ea:	a81c      	add	r0, sp, #112	@ 0x70
 800e9ec:	f003 fc34 	bl	8012258 <__copybits>
 800e9f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e9f2:	9805      	ldr	r0, [sp, #20]
 800e9f4:	f003 f802 	bl	80119fc <_Bfree>
 800e9f8:	3e01      	subs	r6, #1
 800e9fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e9fc:	2e04      	cmp	r6, #4
 800e9fe:	d806      	bhi.n	800ea0e <_strtod_l+0xe6>
 800ea00:	e8df f006 	tbb	[pc, r6]
 800ea04:	201d0314 	.word	0x201d0314
 800ea08:	14          	.byte	0x14
 800ea09:	00          	.byte	0x00
 800ea0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ea0e:	05e1      	lsls	r1, r4, #23
 800ea10:	bf48      	it	mi
 800ea12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ea16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea1a:	0d1b      	lsrs	r3, r3, #20
 800ea1c:	051b      	lsls	r3, r3, #20
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1bb      	bne.n	800e99a <_strtod_l+0x72>
 800ea22:	f001 fd7d 	bl	8010520 <__errno>
 800ea26:	2322      	movs	r3, #34	@ 0x22
 800ea28:	6003      	str	r3, [r0, #0]
 800ea2a:	e7b6      	b.n	800e99a <_strtod_l+0x72>
 800ea2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ea30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ea34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ea38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ea3c:	e7e7      	b.n	800ea0e <_strtod_l+0xe6>
 800ea3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ebbc <_strtod_l+0x294>
 800ea42:	e7e4      	b.n	800ea0e <_strtod_l+0xe6>
 800ea44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ea48:	f04f 3aff 	mov.w	sl, #4294967295
 800ea4c:	e7df      	b.n	800ea0e <_strtod_l+0xe6>
 800ea4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea50:	1c5a      	adds	r2, r3, #1
 800ea52:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea54:	785b      	ldrb	r3, [r3, #1]
 800ea56:	2b30      	cmp	r3, #48	@ 0x30
 800ea58:	d0f9      	beq.n	800ea4e <_strtod_l+0x126>
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d09d      	beq.n	800e99a <_strtod_l+0x72>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea64:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea66:	2300      	movs	r3, #0
 800ea68:	9308      	str	r3, [sp, #32]
 800ea6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea6c:	461f      	mov	r7, r3
 800ea6e:	220a      	movs	r2, #10
 800ea70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ea72:	7805      	ldrb	r5, [r0, #0]
 800ea74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ea78:	b2d9      	uxtb	r1, r3
 800ea7a:	2909      	cmp	r1, #9
 800ea7c:	d928      	bls.n	800ead0 <_strtod_l+0x1a8>
 800ea7e:	494e      	ldr	r1, [pc, #312]	@ (800ebb8 <_strtod_l+0x290>)
 800ea80:	2201      	movs	r2, #1
 800ea82:	f001 fce0 	bl	8010446 <strncmp>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d032      	beq.n	800eaf0 <_strtod_l+0x1c8>
 800ea8a:	2000      	movs	r0, #0
 800ea8c:	462a      	mov	r2, r5
 800ea8e:	4681      	mov	r9, r0
 800ea90:	463d      	mov	r5, r7
 800ea92:	4603      	mov	r3, r0
 800ea94:	2a65      	cmp	r2, #101	@ 0x65
 800ea96:	d001      	beq.n	800ea9c <_strtod_l+0x174>
 800ea98:	2a45      	cmp	r2, #69	@ 0x45
 800ea9a:	d114      	bne.n	800eac6 <_strtod_l+0x19e>
 800ea9c:	b91d      	cbnz	r5, 800eaa6 <_strtod_l+0x17e>
 800ea9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eaa0:	4302      	orrs	r2, r0
 800eaa2:	d095      	beq.n	800e9d0 <_strtod_l+0xa8>
 800eaa4:	2500      	movs	r5, #0
 800eaa6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800eaa8:	1c62      	adds	r2, r4, #1
 800eaaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800eaac:	7862      	ldrb	r2, [r4, #1]
 800eaae:	2a2b      	cmp	r2, #43	@ 0x2b
 800eab0:	d077      	beq.n	800eba2 <_strtod_l+0x27a>
 800eab2:	2a2d      	cmp	r2, #45	@ 0x2d
 800eab4:	d07b      	beq.n	800ebae <_strtod_l+0x286>
 800eab6:	f04f 0c00 	mov.w	ip, #0
 800eaba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800eabe:	2909      	cmp	r1, #9
 800eac0:	f240 8082 	bls.w	800ebc8 <_strtod_l+0x2a0>
 800eac4:	9419      	str	r4, [sp, #100]	@ 0x64
 800eac6:	f04f 0800 	mov.w	r8, #0
 800eaca:	e0a2      	b.n	800ec12 <_strtod_l+0x2ea>
 800eacc:	2300      	movs	r3, #0
 800eace:	e7c7      	b.n	800ea60 <_strtod_l+0x138>
 800ead0:	2f08      	cmp	r7, #8
 800ead2:	bfd5      	itete	le
 800ead4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ead6:	9908      	ldrgt	r1, [sp, #32]
 800ead8:	fb02 3301 	mlale	r3, r2, r1, r3
 800eadc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eae0:	f100 0001 	add.w	r0, r0, #1
 800eae4:	bfd4      	ite	le
 800eae6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800eae8:	9308      	strgt	r3, [sp, #32]
 800eaea:	3701      	adds	r7, #1
 800eaec:	9019      	str	r0, [sp, #100]	@ 0x64
 800eaee:	e7bf      	b.n	800ea70 <_strtod_l+0x148>
 800eaf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eaf2:	1c5a      	adds	r2, r3, #1
 800eaf4:	9219      	str	r2, [sp, #100]	@ 0x64
 800eaf6:	785a      	ldrb	r2, [r3, #1]
 800eaf8:	b37f      	cbz	r7, 800eb5a <_strtod_l+0x232>
 800eafa:	4681      	mov	r9, r0
 800eafc:	463d      	mov	r5, r7
 800eafe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800eb02:	2b09      	cmp	r3, #9
 800eb04:	d912      	bls.n	800eb2c <_strtod_l+0x204>
 800eb06:	2301      	movs	r3, #1
 800eb08:	e7c4      	b.n	800ea94 <_strtod_l+0x16c>
 800eb0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb0c:	1c5a      	adds	r2, r3, #1
 800eb0e:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb10:	785a      	ldrb	r2, [r3, #1]
 800eb12:	3001      	adds	r0, #1
 800eb14:	2a30      	cmp	r2, #48	@ 0x30
 800eb16:	d0f8      	beq.n	800eb0a <_strtod_l+0x1e2>
 800eb18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eb1c:	2b08      	cmp	r3, #8
 800eb1e:	f200 84d3 	bhi.w	800f4c8 <_strtod_l+0xba0>
 800eb22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb24:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb26:	4681      	mov	r9, r0
 800eb28:	2000      	movs	r0, #0
 800eb2a:	4605      	mov	r5, r0
 800eb2c:	3a30      	subs	r2, #48	@ 0x30
 800eb2e:	f100 0301 	add.w	r3, r0, #1
 800eb32:	d02a      	beq.n	800eb8a <_strtod_l+0x262>
 800eb34:	4499      	add	r9, r3
 800eb36:	eb00 0c05 	add.w	ip, r0, r5
 800eb3a:	462b      	mov	r3, r5
 800eb3c:	210a      	movs	r1, #10
 800eb3e:	4563      	cmp	r3, ip
 800eb40:	d10d      	bne.n	800eb5e <_strtod_l+0x236>
 800eb42:	1c69      	adds	r1, r5, #1
 800eb44:	4401      	add	r1, r0
 800eb46:	4428      	add	r0, r5
 800eb48:	2808      	cmp	r0, #8
 800eb4a:	dc16      	bgt.n	800eb7a <_strtod_l+0x252>
 800eb4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800eb4e:	230a      	movs	r3, #10
 800eb50:	fb03 2300 	mla	r3, r3, r0, r2
 800eb54:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb56:	2300      	movs	r3, #0
 800eb58:	e018      	b.n	800eb8c <_strtod_l+0x264>
 800eb5a:	4638      	mov	r0, r7
 800eb5c:	e7da      	b.n	800eb14 <_strtod_l+0x1ec>
 800eb5e:	2b08      	cmp	r3, #8
 800eb60:	f103 0301 	add.w	r3, r3, #1
 800eb64:	dc03      	bgt.n	800eb6e <_strtod_l+0x246>
 800eb66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800eb68:	434e      	muls	r6, r1
 800eb6a:	960a      	str	r6, [sp, #40]	@ 0x28
 800eb6c:	e7e7      	b.n	800eb3e <_strtod_l+0x216>
 800eb6e:	2b10      	cmp	r3, #16
 800eb70:	bfde      	ittt	le
 800eb72:	9e08      	ldrle	r6, [sp, #32]
 800eb74:	434e      	mulle	r6, r1
 800eb76:	9608      	strle	r6, [sp, #32]
 800eb78:	e7e1      	b.n	800eb3e <_strtod_l+0x216>
 800eb7a:	280f      	cmp	r0, #15
 800eb7c:	dceb      	bgt.n	800eb56 <_strtod_l+0x22e>
 800eb7e:	9808      	ldr	r0, [sp, #32]
 800eb80:	230a      	movs	r3, #10
 800eb82:	fb03 2300 	mla	r3, r3, r0, r2
 800eb86:	9308      	str	r3, [sp, #32]
 800eb88:	e7e5      	b.n	800eb56 <_strtod_l+0x22e>
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb8e:	1c50      	adds	r0, r2, #1
 800eb90:	9019      	str	r0, [sp, #100]	@ 0x64
 800eb92:	7852      	ldrb	r2, [r2, #1]
 800eb94:	4618      	mov	r0, r3
 800eb96:	460d      	mov	r5, r1
 800eb98:	e7b1      	b.n	800eafe <_strtod_l+0x1d6>
 800eb9a:	f04f 0900 	mov.w	r9, #0
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e77d      	b.n	800ea9e <_strtod_l+0x176>
 800eba2:	f04f 0c00 	mov.w	ip, #0
 800eba6:	1ca2      	adds	r2, r4, #2
 800eba8:	9219      	str	r2, [sp, #100]	@ 0x64
 800ebaa:	78a2      	ldrb	r2, [r4, #2]
 800ebac:	e785      	b.n	800eaba <_strtod_l+0x192>
 800ebae:	f04f 0c01 	mov.w	ip, #1
 800ebb2:	e7f8      	b.n	800eba6 <_strtod_l+0x27e>
 800ebb4:	080153fc 	.word	0x080153fc
 800ebb8:	080153e4 	.word	0x080153e4
 800ebbc:	7ff00000 	.word	0x7ff00000
 800ebc0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ebc2:	1c51      	adds	r1, r2, #1
 800ebc4:	9119      	str	r1, [sp, #100]	@ 0x64
 800ebc6:	7852      	ldrb	r2, [r2, #1]
 800ebc8:	2a30      	cmp	r2, #48	@ 0x30
 800ebca:	d0f9      	beq.n	800ebc0 <_strtod_l+0x298>
 800ebcc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ebd0:	2908      	cmp	r1, #8
 800ebd2:	f63f af78 	bhi.w	800eac6 <_strtod_l+0x19e>
 800ebd6:	3a30      	subs	r2, #48	@ 0x30
 800ebd8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ebda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ebdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ebde:	f04f 080a 	mov.w	r8, #10
 800ebe2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ebe4:	1c56      	adds	r6, r2, #1
 800ebe6:	9619      	str	r6, [sp, #100]	@ 0x64
 800ebe8:	7852      	ldrb	r2, [r2, #1]
 800ebea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ebee:	f1be 0f09 	cmp.w	lr, #9
 800ebf2:	d939      	bls.n	800ec68 <_strtod_l+0x340>
 800ebf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ebf6:	1a76      	subs	r6, r6, r1
 800ebf8:	2e08      	cmp	r6, #8
 800ebfa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ebfe:	dc03      	bgt.n	800ec08 <_strtod_l+0x2e0>
 800ec00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ec02:	4588      	cmp	r8, r1
 800ec04:	bfa8      	it	ge
 800ec06:	4688      	movge	r8, r1
 800ec08:	f1bc 0f00 	cmp.w	ip, #0
 800ec0c:	d001      	beq.n	800ec12 <_strtod_l+0x2ea>
 800ec0e:	f1c8 0800 	rsb	r8, r8, #0
 800ec12:	2d00      	cmp	r5, #0
 800ec14:	d14e      	bne.n	800ecb4 <_strtod_l+0x38c>
 800ec16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec18:	4308      	orrs	r0, r1
 800ec1a:	f47f aebe 	bne.w	800e99a <_strtod_l+0x72>
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f47f aed6 	bne.w	800e9d0 <_strtod_l+0xa8>
 800ec24:	2a69      	cmp	r2, #105	@ 0x69
 800ec26:	d028      	beq.n	800ec7a <_strtod_l+0x352>
 800ec28:	dc25      	bgt.n	800ec76 <_strtod_l+0x34e>
 800ec2a:	2a49      	cmp	r2, #73	@ 0x49
 800ec2c:	d025      	beq.n	800ec7a <_strtod_l+0x352>
 800ec2e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ec30:	f47f aece 	bne.w	800e9d0 <_strtod_l+0xa8>
 800ec34:	499b      	ldr	r1, [pc, #620]	@ (800eea4 <_strtod_l+0x57c>)
 800ec36:	a819      	add	r0, sp, #100	@ 0x64
 800ec38:	f002 fdde 	bl	80117f8 <__match>
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	f43f aec7 	beq.w	800e9d0 <_strtod_l+0xa8>
 800ec42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	2b28      	cmp	r3, #40	@ 0x28
 800ec48:	d12e      	bne.n	800eca8 <_strtod_l+0x380>
 800ec4a:	4997      	ldr	r1, [pc, #604]	@ (800eea8 <_strtod_l+0x580>)
 800ec4c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ec4e:	a819      	add	r0, sp, #100	@ 0x64
 800ec50:	f002 fde6 	bl	8011820 <__hexnan>
 800ec54:	2805      	cmp	r0, #5
 800ec56:	d127      	bne.n	800eca8 <_strtod_l+0x380>
 800ec58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ec5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ec5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ec62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ec66:	e698      	b.n	800e99a <_strtod_l+0x72>
 800ec68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ec6a:	fb08 2101 	mla	r1, r8, r1, r2
 800ec6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ec72:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec74:	e7b5      	b.n	800ebe2 <_strtod_l+0x2ba>
 800ec76:	2a6e      	cmp	r2, #110	@ 0x6e
 800ec78:	e7da      	b.n	800ec30 <_strtod_l+0x308>
 800ec7a:	498c      	ldr	r1, [pc, #560]	@ (800eeac <_strtod_l+0x584>)
 800ec7c:	a819      	add	r0, sp, #100	@ 0x64
 800ec7e:	f002 fdbb 	bl	80117f8 <__match>
 800ec82:	2800      	cmp	r0, #0
 800ec84:	f43f aea4 	beq.w	800e9d0 <_strtod_l+0xa8>
 800ec88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec8a:	4989      	ldr	r1, [pc, #548]	@ (800eeb0 <_strtod_l+0x588>)
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	a819      	add	r0, sp, #100	@ 0x64
 800ec90:	9319      	str	r3, [sp, #100]	@ 0x64
 800ec92:	f002 fdb1 	bl	80117f8 <__match>
 800ec96:	b910      	cbnz	r0, 800ec9e <_strtod_l+0x376>
 800ec98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ec9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800eec0 <_strtod_l+0x598>
 800eca2:	f04f 0a00 	mov.w	sl, #0
 800eca6:	e678      	b.n	800e99a <_strtod_l+0x72>
 800eca8:	4882      	ldr	r0, [pc, #520]	@ (800eeb4 <_strtod_l+0x58c>)
 800ecaa:	f001 fc75 	bl	8010598 <nan>
 800ecae:	ec5b ab10 	vmov	sl, fp, d0
 800ecb2:	e672      	b.n	800e99a <_strtod_l+0x72>
 800ecb4:	eba8 0309 	sub.w	r3, r8, r9
 800ecb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ecba:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecbc:	2f00      	cmp	r7, #0
 800ecbe:	bf08      	it	eq
 800ecc0:	462f      	moveq	r7, r5
 800ecc2:	2d10      	cmp	r5, #16
 800ecc4:	462c      	mov	r4, r5
 800ecc6:	bfa8      	it	ge
 800ecc8:	2410      	movge	r4, #16
 800ecca:	f7f1 fc3b 	bl	8000544 <__aeabi_ui2d>
 800ecce:	2d09      	cmp	r5, #9
 800ecd0:	4682      	mov	sl, r0
 800ecd2:	468b      	mov	fp, r1
 800ecd4:	dc13      	bgt.n	800ecfe <_strtod_l+0x3d6>
 800ecd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f43f ae5e 	beq.w	800e99a <_strtod_l+0x72>
 800ecde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ece0:	dd78      	ble.n	800edd4 <_strtod_l+0x4ac>
 800ece2:	2b16      	cmp	r3, #22
 800ece4:	dc5f      	bgt.n	800eda6 <_strtod_l+0x47e>
 800ece6:	4974      	ldr	r1, [pc, #464]	@ (800eeb8 <_strtod_l+0x590>)
 800ece8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ecec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecf0:	4652      	mov	r2, sl
 800ecf2:	465b      	mov	r3, fp
 800ecf4:	f7f1 fca0 	bl	8000638 <__aeabi_dmul>
 800ecf8:	4682      	mov	sl, r0
 800ecfa:	468b      	mov	fp, r1
 800ecfc:	e64d      	b.n	800e99a <_strtod_l+0x72>
 800ecfe:	4b6e      	ldr	r3, [pc, #440]	@ (800eeb8 <_strtod_l+0x590>)
 800ed00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ed08:	f7f1 fc96 	bl	8000638 <__aeabi_dmul>
 800ed0c:	4682      	mov	sl, r0
 800ed0e:	9808      	ldr	r0, [sp, #32]
 800ed10:	468b      	mov	fp, r1
 800ed12:	f7f1 fc17 	bl	8000544 <__aeabi_ui2d>
 800ed16:	4602      	mov	r2, r0
 800ed18:	460b      	mov	r3, r1
 800ed1a:	4650      	mov	r0, sl
 800ed1c:	4659      	mov	r1, fp
 800ed1e:	f7f1 fad5 	bl	80002cc <__adddf3>
 800ed22:	2d0f      	cmp	r5, #15
 800ed24:	4682      	mov	sl, r0
 800ed26:	468b      	mov	fp, r1
 800ed28:	ddd5      	ble.n	800ecd6 <_strtod_l+0x3ae>
 800ed2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed2c:	1b2c      	subs	r4, r5, r4
 800ed2e:	441c      	add	r4, r3
 800ed30:	2c00      	cmp	r4, #0
 800ed32:	f340 8096 	ble.w	800ee62 <_strtod_l+0x53a>
 800ed36:	f014 030f 	ands.w	r3, r4, #15
 800ed3a:	d00a      	beq.n	800ed52 <_strtod_l+0x42a>
 800ed3c:	495e      	ldr	r1, [pc, #376]	@ (800eeb8 <_strtod_l+0x590>)
 800ed3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed42:	4652      	mov	r2, sl
 800ed44:	465b      	mov	r3, fp
 800ed46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed4a:	f7f1 fc75 	bl	8000638 <__aeabi_dmul>
 800ed4e:	4682      	mov	sl, r0
 800ed50:	468b      	mov	fp, r1
 800ed52:	f034 040f 	bics.w	r4, r4, #15
 800ed56:	d073      	beq.n	800ee40 <_strtod_l+0x518>
 800ed58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ed5c:	dd48      	ble.n	800edf0 <_strtod_l+0x4c8>
 800ed5e:	2400      	movs	r4, #0
 800ed60:	46a0      	mov	r8, r4
 800ed62:	940a      	str	r4, [sp, #40]	@ 0x28
 800ed64:	46a1      	mov	r9, r4
 800ed66:	9a05      	ldr	r2, [sp, #20]
 800ed68:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800eec0 <_strtod_l+0x598>
 800ed6c:	2322      	movs	r3, #34	@ 0x22
 800ed6e:	6013      	str	r3, [r2, #0]
 800ed70:	f04f 0a00 	mov.w	sl, #0
 800ed74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f43f ae0f 	beq.w	800e99a <_strtod_l+0x72>
 800ed7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed7e:	9805      	ldr	r0, [sp, #20]
 800ed80:	f002 fe3c 	bl	80119fc <_Bfree>
 800ed84:	9805      	ldr	r0, [sp, #20]
 800ed86:	4649      	mov	r1, r9
 800ed88:	f002 fe38 	bl	80119fc <_Bfree>
 800ed8c:	9805      	ldr	r0, [sp, #20]
 800ed8e:	4641      	mov	r1, r8
 800ed90:	f002 fe34 	bl	80119fc <_Bfree>
 800ed94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed96:	9805      	ldr	r0, [sp, #20]
 800ed98:	f002 fe30 	bl	80119fc <_Bfree>
 800ed9c:	9805      	ldr	r0, [sp, #20]
 800ed9e:	4621      	mov	r1, r4
 800eda0:	f002 fe2c 	bl	80119fc <_Bfree>
 800eda4:	e5f9      	b.n	800e99a <_strtod_l+0x72>
 800eda6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eda8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800edac:	4293      	cmp	r3, r2
 800edae:	dbbc      	blt.n	800ed2a <_strtod_l+0x402>
 800edb0:	4c41      	ldr	r4, [pc, #260]	@ (800eeb8 <_strtod_l+0x590>)
 800edb2:	f1c5 050f 	rsb	r5, r5, #15
 800edb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800edba:	4652      	mov	r2, sl
 800edbc:	465b      	mov	r3, fp
 800edbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edc2:	f7f1 fc39 	bl	8000638 <__aeabi_dmul>
 800edc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edc8:	1b5d      	subs	r5, r3, r5
 800edca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800edce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800edd2:	e78f      	b.n	800ecf4 <_strtod_l+0x3cc>
 800edd4:	3316      	adds	r3, #22
 800edd6:	dba8      	blt.n	800ed2a <_strtod_l+0x402>
 800edd8:	4b37      	ldr	r3, [pc, #220]	@ (800eeb8 <_strtod_l+0x590>)
 800edda:	eba9 0808 	sub.w	r8, r9, r8
 800edde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ede2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ede6:	4650      	mov	r0, sl
 800ede8:	4659      	mov	r1, fp
 800edea:	f7f1 fd4f 	bl	800088c <__aeabi_ddiv>
 800edee:	e783      	b.n	800ecf8 <_strtod_l+0x3d0>
 800edf0:	4b32      	ldr	r3, [pc, #200]	@ (800eebc <_strtod_l+0x594>)
 800edf2:	9308      	str	r3, [sp, #32]
 800edf4:	2300      	movs	r3, #0
 800edf6:	1124      	asrs	r4, r4, #4
 800edf8:	4650      	mov	r0, sl
 800edfa:	4659      	mov	r1, fp
 800edfc:	461e      	mov	r6, r3
 800edfe:	2c01      	cmp	r4, #1
 800ee00:	dc21      	bgt.n	800ee46 <_strtod_l+0x51e>
 800ee02:	b10b      	cbz	r3, 800ee08 <_strtod_l+0x4e0>
 800ee04:	4682      	mov	sl, r0
 800ee06:	468b      	mov	fp, r1
 800ee08:	492c      	ldr	r1, [pc, #176]	@ (800eebc <_strtod_l+0x594>)
 800ee0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ee0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ee12:	4652      	mov	r2, sl
 800ee14:	465b      	mov	r3, fp
 800ee16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee1a:	f7f1 fc0d 	bl	8000638 <__aeabi_dmul>
 800ee1e:	4b28      	ldr	r3, [pc, #160]	@ (800eec0 <_strtod_l+0x598>)
 800ee20:	460a      	mov	r2, r1
 800ee22:	400b      	ands	r3, r1
 800ee24:	4927      	ldr	r1, [pc, #156]	@ (800eec4 <_strtod_l+0x59c>)
 800ee26:	428b      	cmp	r3, r1
 800ee28:	4682      	mov	sl, r0
 800ee2a:	d898      	bhi.n	800ed5e <_strtod_l+0x436>
 800ee2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ee30:	428b      	cmp	r3, r1
 800ee32:	bf86      	itte	hi
 800ee34:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800eec8 <_strtod_l+0x5a0>
 800ee38:	f04f 3aff 	movhi.w	sl, #4294967295
 800ee3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ee40:	2300      	movs	r3, #0
 800ee42:	9308      	str	r3, [sp, #32]
 800ee44:	e07a      	b.n	800ef3c <_strtod_l+0x614>
 800ee46:	07e2      	lsls	r2, r4, #31
 800ee48:	d505      	bpl.n	800ee56 <_strtod_l+0x52e>
 800ee4a:	9b08      	ldr	r3, [sp, #32]
 800ee4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee50:	f7f1 fbf2 	bl	8000638 <__aeabi_dmul>
 800ee54:	2301      	movs	r3, #1
 800ee56:	9a08      	ldr	r2, [sp, #32]
 800ee58:	3208      	adds	r2, #8
 800ee5a:	3601      	adds	r6, #1
 800ee5c:	1064      	asrs	r4, r4, #1
 800ee5e:	9208      	str	r2, [sp, #32]
 800ee60:	e7cd      	b.n	800edfe <_strtod_l+0x4d6>
 800ee62:	d0ed      	beq.n	800ee40 <_strtod_l+0x518>
 800ee64:	4264      	negs	r4, r4
 800ee66:	f014 020f 	ands.w	r2, r4, #15
 800ee6a:	d00a      	beq.n	800ee82 <_strtod_l+0x55a>
 800ee6c:	4b12      	ldr	r3, [pc, #72]	@ (800eeb8 <_strtod_l+0x590>)
 800ee6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee72:	4650      	mov	r0, sl
 800ee74:	4659      	mov	r1, fp
 800ee76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7a:	f7f1 fd07 	bl	800088c <__aeabi_ddiv>
 800ee7e:	4682      	mov	sl, r0
 800ee80:	468b      	mov	fp, r1
 800ee82:	1124      	asrs	r4, r4, #4
 800ee84:	d0dc      	beq.n	800ee40 <_strtod_l+0x518>
 800ee86:	2c1f      	cmp	r4, #31
 800ee88:	dd20      	ble.n	800eecc <_strtod_l+0x5a4>
 800ee8a:	2400      	movs	r4, #0
 800ee8c:	46a0      	mov	r8, r4
 800ee8e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ee90:	46a1      	mov	r9, r4
 800ee92:	9a05      	ldr	r2, [sp, #20]
 800ee94:	2322      	movs	r3, #34	@ 0x22
 800ee96:	f04f 0a00 	mov.w	sl, #0
 800ee9a:	f04f 0b00 	mov.w	fp, #0
 800ee9e:	6013      	str	r3, [r2, #0]
 800eea0:	e768      	b.n	800ed74 <_strtod_l+0x44c>
 800eea2:	bf00      	nop
 800eea4:	08015445 	.word	0x08015445
 800eea8:	080153e8 	.word	0x080153e8
 800eeac:	0801543d 	.word	0x0801543d
 800eeb0:	0801547c 	.word	0x0801547c
 800eeb4:	0801580d 	.word	0x0801580d
 800eeb8:	080155f8 	.word	0x080155f8
 800eebc:	080155d0 	.word	0x080155d0
 800eec0:	7ff00000 	.word	0x7ff00000
 800eec4:	7ca00000 	.word	0x7ca00000
 800eec8:	7fefffff 	.word	0x7fefffff
 800eecc:	f014 0310 	ands.w	r3, r4, #16
 800eed0:	bf18      	it	ne
 800eed2:	236a      	movne	r3, #106	@ 0x6a
 800eed4:	4ea9      	ldr	r6, [pc, #676]	@ (800f17c <_strtod_l+0x854>)
 800eed6:	9308      	str	r3, [sp, #32]
 800eed8:	4650      	mov	r0, sl
 800eeda:	4659      	mov	r1, fp
 800eedc:	2300      	movs	r3, #0
 800eede:	07e2      	lsls	r2, r4, #31
 800eee0:	d504      	bpl.n	800eeec <_strtod_l+0x5c4>
 800eee2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eee6:	f7f1 fba7 	bl	8000638 <__aeabi_dmul>
 800eeea:	2301      	movs	r3, #1
 800eeec:	1064      	asrs	r4, r4, #1
 800eeee:	f106 0608 	add.w	r6, r6, #8
 800eef2:	d1f4      	bne.n	800eede <_strtod_l+0x5b6>
 800eef4:	b10b      	cbz	r3, 800eefa <_strtod_l+0x5d2>
 800eef6:	4682      	mov	sl, r0
 800eef8:	468b      	mov	fp, r1
 800eefa:	9b08      	ldr	r3, [sp, #32]
 800eefc:	b1b3      	cbz	r3, 800ef2c <_strtod_l+0x604>
 800eefe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ef02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	4659      	mov	r1, fp
 800ef0a:	dd0f      	ble.n	800ef2c <_strtod_l+0x604>
 800ef0c:	2b1f      	cmp	r3, #31
 800ef0e:	dd55      	ble.n	800efbc <_strtod_l+0x694>
 800ef10:	2b34      	cmp	r3, #52	@ 0x34
 800ef12:	bfde      	ittt	le
 800ef14:	f04f 33ff 	movle.w	r3, #4294967295
 800ef18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ef1c:	4093      	lslle	r3, r2
 800ef1e:	f04f 0a00 	mov.w	sl, #0
 800ef22:	bfcc      	ite	gt
 800ef24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ef28:	ea03 0b01 	andle.w	fp, r3, r1
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	2300      	movs	r3, #0
 800ef30:	4650      	mov	r0, sl
 800ef32:	4659      	mov	r1, fp
 800ef34:	f7f1 fde8 	bl	8000b08 <__aeabi_dcmpeq>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d1a6      	bne.n	800ee8a <_strtod_l+0x562>
 800ef3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ef42:	9805      	ldr	r0, [sp, #20]
 800ef44:	462b      	mov	r3, r5
 800ef46:	463a      	mov	r2, r7
 800ef48:	f002 fdc0 	bl	8011acc <__s2b>
 800ef4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	f43f af05 	beq.w	800ed5e <_strtod_l+0x436>
 800ef54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef56:	2a00      	cmp	r2, #0
 800ef58:	eba9 0308 	sub.w	r3, r9, r8
 800ef5c:	bfa8      	it	ge
 800ef5e:	2300      	movge	r3, #0
 800ef60:	9312      	str	r3, [sp, #72]	@ 0x48
 800ef62:	2400      	movs	r4, #0
 800ef64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ef68:	9316      	str	r3, [sp, #88]	@ 0x58
 800ef6a:	46a0      	mov	r8, r4
 800ef6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef6e:	9805      	ldr	r0, [sp, #20]
 800ef70:	6859      	ldr	r1, [r3, #4]
 800ef72:	f002 fd03 	bl	801197c <_Balloc>
 800ef76:	4681      	mov	r9, r0
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	f43f aef4 	beq.w	800ed66 <_strtod_l+0x43e>
 800ef7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef80:	691a      	ldr	r2, [r3, #16]
 800ef82:	3202      	adds	r2, #2
 800ef84:	f103 010c 	add.w	r1, r3, #12
 800ef88:	0092      	lsls	r2, r2, #2
 800ef8a:	300c      	adds	r0, #12
 800ef8c:	f001 faf5 	bl	801057a <memcpy>
 800ef90:	ec4b ab10 	vmov	d0, sl, fp
 800ef94:	9805      	ldr	r0, [sp, #20]
 800ef96:	aa1c      	add	r2, sp, #112	@ 0x70
 800ef98:	a91b      	add	r1, sp, #108	@ 0x6c
 800ef9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ef9e:	f003 f8d1 	bl	8012144 <__d2b>
 800efa2:	901a      	str	r0, [sp, #104]	@ 0x68
 800efa4:	2800      	cmp	r0, #0
 800efa6:	f43f aede 	beq.w	800ed66 <_strtod_l+0x43e>
 800efaa:	9805      	ldr	r0, [sp, #20]
 800efac:	2101      	movs	r1, #1
 800efae:	f002 fe23 	bl	8011bf8 <__i2b>
 800efb2:	4680      	mov	r8, r0
 800efb4:	b948      	cbnz	r0, 800efca <_strtod_l+0x6a2>
 800efb6:	f04f 0800 	mov.w	r8, #0
 800efba:	e6d4      	b.n	800ed66 <_strtod_l+0x43e>
 800efbc:	f04f 32ff 	mov.w	r2, #4294967295
 800efc0:	fa02 f303 	lsl.w	r3, r2, r3
 800efc4:	ea03 0a0a 	and.w	sl, r3, sl
 800efc8:	e7b0      	b.n	800ef2c <_strtod_l+0x604>
 800efca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800efcc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800efce:	2d00      	cmp	r5, #0
 800efd0:	bfab      	itete	ge
 800efd2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800efd4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800efd6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800efd8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800efda:	bfac      	ite	ge
 800efdc:	18ef      	addge	r7, r5, r3
 800efde:	1b5e      	sublt	r6, r3, r5
 800efe0:	9b08      	ldr	r3, [sp, #32]
 800efe2:	1aed      	subs	r5, r5, r3
 800efe4:	4415      	add	r5, r2
 800efe6:	4b66      	ldr	r3, [pc, #408]	@ (800f180 <_strtod_l+0x858>)
 800efe8:	3d01      	subs	r5, #1
 800efea:	429d      	cmp	r5, r3
 800efec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800eff0:	da50      	bge.n	800f094 <_strtod_l+0x76c>
 800eff2:	1b5b      	subs	r3, r3, r5
 800eff4:	2b1f      	cmp	r3, #31
 800eff6:	eba2 0203 	sub.w	r2, r2, r3
 800effa:	f04f 0101 	mov.w	r1, #1
 800effe:	dc3d      	bgt.n	800f07c <_strtod_l+0x754>
 800f000:	fa01 f303 	lsl.w	r3, r1, r3
 800f004:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f006:	2300      	movs	r3, #0
 800f008:	9310      	str	r3, [sp, #64]	@ 0x40
 800f00a:	18bd      	adds	r5, r7, r2
 800f00c:	9b08      	ldr	r3, [sp, #32]
 800f00e:	42af      	cmp	r7, r5
 800f010:	4416      	add	r6, r2
 800f012:	441e      	add	r6, r3
 800f014:	463b      	mov	r3, r7
 800f016:	bfa8      	it	ge
 800f018:	462b      	movge	r3, r5
 800f01a:	42b3      	cmp	r3, r6
 800f01c:	bfa8      	it	ge
 800f01e:	4633      	movge	r3, r6
 800f020:	2b00      	cmp	r3, #0
 800f022:	bfc2      	ittt	gt
 800f024:	1aed      	subgt	r5, r5, r3
 800f026:	1af6      	subgt	r6, r6, r3
 800f028:	1aff      	subgt	r7, r7, r3
 800f02a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	dd16      	ble.n	800f05e <_strtod_l+0x736>
 800f030:	4641      	mov	r1, r8
 800f032:	9805      	ldr	r0, [sp, #20]
 800f034:	461a      	mov	r2, r3
 800f036:	f002 fe9f 	bl	8011d78 <__pow5mult>
 800f03a:	4680      	mov	r8, r0
 800f03c:	2800      	cmp	r0, #0
 800f03e:	d0ba      	beq.n	800efb6 <_strtod_l+0x68e>
 800f040:	4601      	mov	r1, r0
 800f042:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f044:	9805      	ldr	r0, [sp, #20]
 800f046:	f002 fded 	bl	8011c24 <__multiply>
 800f04a:	900e      	str	r0, [sp, #56]	@ 0x38
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f43f ae8a 	beq.w	800ed66 <_strtod_l+0x43e>
 800f052:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f054:	9805      	ldr	r0, [sp, #20]
 800f056:	f002 fcd1 	bl	80119fc <_Bfree>
 800f05a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f05c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f05e:	2d00      	cmp	r5, #0
 800f060:	dc1d      	bgt.n	800f09e <_strtod_l+0x776>
 800f062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f064:	2b00      	cmp	r3, #0
 800f066:	dd23      	ble.n	800f0b0 <_strtod_l+0x788>
 800f068:	4649      	mov	r1, r9
 800f06a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f06c:	9805      	ldr	r0, [sp, #20]
 800f06e:	f002 fe83 	bl	8011d78 <__pow5mult>
 800f072:	4681      	mov	r9, r0
 800f074:	b9e0      	cbnz	r0, 800f0b0 <_strtod_l+0x788>
 800f076:	f04f 0900 	mov.w	r9, #0
 800f07a:	e674      	b.n	800ed66 <_strtod_l+0x43e>
 800f07c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f080:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f084:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f088:	35e2      	adds	r5, #226	@ 0xe2
 800f08a:	fa01 f305 	lsl.w	r3, r1, r5
 800f08e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f090:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f092:	e7ba      	b.n	800f00a <_strtod_l+0x6e2>
 800f094:	2300      	movs	r3, #0
 800f096:	9310      	str	r3, [sp, #64]	@ 0x40
 800f098:	2301      	movs	r3, #1
 800f09a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f09c:	e7b5      	b.n	800f00a <_strtod_l+0x6e2>
 800f09e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0a0:	9805      	ldr	r0, [sp, #20]
 800f0a2:	462a      	mov	r2, r5
 800f0a4:	f002 fec2 	bl	8011e2c <__lshift>
 800f0a8:	901a      	str	r0, [sp, #104]	@ 0x68
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d1d9      	bne.n	800f062 <_strtod_l+0x73a>
 800f0ae:	e65a      	b.n	800ed66 <_strtod_l+0x43e>
 800f0b0:	2e00      	cmp	r6, #0
 800f0b2:	dd07      	ble.n	800f0c4 <_strtod_l+0x79c>
 800f0b4:	4649      	mov	r1, r9
 800f0b6:	9805      	ldr	r0, [sp, #20]
 800f0b8:	4632      	mov	r2, r6
 800f0ba:	f002 feb7 	bl	8011e2c <__lshift>
 800f0be:	4681      	mov	r9, r0
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d0d8      	beq.n	800f076 <_strtod_l+0x74e>
 800f0c4:	2f00      	cmp	r7, #0
 800f0c6:	dd08      	ble.n	800f0da <_strtod_l+0x7b2>
 800f0c8:	4641      	mov	r1, r8
 800f0ca:	9805      	ldr	r0, [sp, #20]
 800f0cc:	463a      	mov	r2, r7
 800f0ce:	f002 fead 	bl	8011e2c <__lshift>
 800f0d2:	4680      	mov	r8, r0
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	f43f ae46 	beq.w	800ed66 <_strtod_l+0x43e>
 800f0da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0dc:	9805      	ldr	r0, [sp, #20]
 800f0de:	464a      	mov	r2, r9
 800f0e0:	f002 ff2c 	bl	8011f3c <__mdiff>
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	f43f ae3d 	beq.w	800ed66 <_strtod_l+0x43e>
 800f0ec:	68c3      	ldr	r3, [r0, #12]
 800f0ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	60c3      	str	r3, [r0, #12]
 800f0f4:	4641      	mov	r1, r8
 800f0f6:	f002 ff05 	bl	8011f04 <__mcmp>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	da46      	bge.n	800f18c <_strtod_l+0x864>
 800f0fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f100:	ea53 030a 	orrs.w	r3, r3, sl
 800f104:	d16c      	bne.n	800f1e0 <_strtod_l+0x8b8>
 800f106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d168      	bne.n	800f1e0 <_strtod_l+0x8b8>
 800f10e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f112:	0d1b      	lsrs	r3, r3, #20
 800f114:	051b      	lsls	r3, r3, #20
 800f116:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f11a:	d961      	bls.n	800f1e0 <_strtod_l+0x8b8>
 800f11c:	6963      	ldr	r3, [r4, #20]
 800f11e:	b913      	cbnz	r3, 800f126 <_strtod_l+0x7fe>
 800f120:	6923      	ldr	r3, [r4, #16]
 800f122:	2b01      	cmp	r3, #1
 800f124:	dd5c      	ble.n	800f1e0 <_strtod_l+0x8b8>
 800f126:	4621      	mov	r1, r4
 800f128:	2201      	movs	r2, #1
 800f12a:	9805      	ldr	r0, [sp, #20]
 800f12c:	f002 fe7e 	bl	8011e2c <__lshift>
 800f130:	4641      	mov	r1, r8
 800f132:	4604      	mov	r4, r0
 800f134:	f002 fee6 	bl	8011f04 <__mcmp>
 800f138:	2800      	cmp	r0, #0
 800f13a:	dd51      	ble.n	800f1e0 <_strtod_l+0x8b8>
 800f13c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f140:	9a08      	ldr	r2, [sp, #32]
 800f142:	0d1b      	lsrs	r3, r3, #20
 800f144:	051b      	lsls	r3, r3, #20
 800f146:	2a00      	cmp	r2, #0
 800f148:	d06b      	beq.n	800f222 <_strtod_l+0x8fa>
 800f14a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f14e:	d868      	bhi.n	800f222 <_strtod_l+0x8fa>
 800f150:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f154:	f67f ae9d 	bls.w	800ee92 <_strtod_l+0x56a>
 800f158:	4b0a      	ldr	r3, [pc, #40]	@ (800f184 <_strtod_l+0x85c>)
 800f15a:	4650      	mov	r0, sl
 800f15c:	4659      	mov	r1, fp
 800f15e:	2200      	movs	r2, #0
 800f160:	f7f1 fa6a 	bl	8000638 <__aeabi_dmul>
 800f164:	4b08      	ldr	r3, [pc, #32]	@ (800f188 <_strtod_l+0x860>)
 800f166:	400b      	ands	r3, r1
 800f168:	4682      	mov	sl, r0
 800f16a:	468b      	mov	fp, r1
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f47f ae05 	bne.w	800ed7c <_strtod_l+0x454>
 800f172:	9a05      	ldr	r2, [sp, #20]
 800f174:	2322      	movs	r3, #34	@ 0x22
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	e600      	b.n	800ed7c <_strtod_l+0x454>
 800f17a:	bf00      	nop
 800f17c:	08015410 	.word	0x08015410
 800f180:	fffffc02 	.word	0xfffffc02
 800f184:	39500000 	.word	0x39500000
 800f188:	7ff00000 	.word	0x7ff00000
 800f18c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f190:	d165      	bne.n	800f25e <_strtod_l+0x936>
 800f192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f198:	b35a      	cbz	r2, 800f1f2 <_strtod_l+0x8ca>
 800f19a:	4a9f      	ldr	r2, [pc, #636]	@ (800f418 <_strtod_l+0xaf0>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d12b      	bne.n	800f1f8 <_strtod_l+0x8d0>
 800f1a0:	9b08      	ldr	r3, [sp, #32]
 800f1a2:	4651      	mov	r1, sl
 800f1a4:	b303      	cbz	r3, 800f1e8 <_strtod_l+0x8c0>
 800f1a6:	4b9d      	ldr	r3, [pc, #628]	@ (800f41c <_strtod_l+0xaf4>)
 800f1a8:	465a      	mov	r2, fp
 800f1aa:	4013      	ands	r3, r2
 800f1ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b4:	d81b      	bhi.n	800f1ee <_strtod_l+0x8c6>
 800f1b6:	0d1b      	lsrs	r3, r3, #20
 800f1b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f1c0:	4299      	cmp	r1, r3
 800f1c2:	d119      	bne.n	800f1f8 <_strtod_l+0x8d0>
 800f1c4:	4b96      	ldr	r3, [pc, #600]	@ (800f420 <_strtod_l+0xaf8>)
 800f1c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d102      	bne.n	800f1d2 <_strtod_l+0x8aa>
 800f1cc:	3101      	adds	r1, #1
 800f1ce:	f43f adca 	beq.w	800ed66 <_strtod_l+0x43e>
 800f1d2:	4b92      	ldr	r3, [pc, #584]	@ (800f41c <_strtod_l+0xaf4>)
 800f1d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1d6:	401a      	ands	r2, r3
 800f1d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f1dc:	f04f 0a00 	mov.w	sl, #0
 800f1e0:	9b08      	ldr	r3, [sp, #32]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1b8      	bne.n	800f158 <_strtod_l+0x830>
 800f1e6:	e5c9      	b.n	800ed7c <_strtod_l+0x454>
 800f1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ec:	e7e8      	b.n	800f1c0 <_strtod_l+0x898>
 800f1ee:	4613      	mov	r3, r2
 800f1f0:	e7e6      	b.n	800f1c0 <_strtod_l+0x898>
 800f1f2:	ea53 030a 	orrs.w	r3, r3, sl
 800f1f6:	d0a1      	beq.n	800f13c <_strtod_l+0x814>
 800f1f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f1fa:	b1db      	cbz	r3, 800f234 <_strtod_l+0x90c>
 800f1fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1fe:	4213      	tst	r3, r2
 800f200:	d0ee      	beq.n	800f1e0 <_strtod_l+0x8b8>
 800f202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f204:	9a08      	ldr	r2, [sp, #32]
 800f206:	4650      	mov	r0, sl
 800f208:	4659      	mov	r1, fp
 800f20a:	b1bb      	cbz	r3, 800f23c <_strtod_l+0x914>
 800f20c:	f7ff fb6c 	bl	800e8e8 <sulp>
 800f210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f214:	ec53 2b10 	vmov	r2, r3, d0
 800f218:	f7f1 f858 	bl	80002cc <__adddf3>
 800f21c:	4682      	mov	sl, r0
 800f21e:	468b      	mov	fp, r1
 800f220:	e7de      	b.n	800f1e0 <_strtod_l+0x8b8>
 800f222:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f226:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f22a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f22e:	f04f 3aff 	mov.w	sl, #4294967295
 800f232:	e7d5      	b.n	800f1e0 <_strtod_l+0x8b8>
 800f234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f236:	ea13 0f0a 	tst.w	r3, sl
 800f23a:	e7e1      	b.n	800f200 <_strtod_l+0x8d8>
 800f23c:	f7ff fb54 	bl	800e8e8 <sulp>
 800f240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f244:	ec53 2b10 	vmov	r2, r3, d0
 800f248:	f7f1 f83e 	bl	80002c8 <__aeabi_dsub>
 800f24c:	2200      	movs	r2, #0
 800f24e:	2300      	movs	r3, #0
 800f250:	4682      	mov	sl, r0
 800f252:	468b      	mov	fp, r1
 800f254:	f7f1 fc58 	bl	8000b08 <__aeabi_dcmpeq>
 800f258:	2800      	cmp	r0, #0
 800f25a:	d0c1      	beq.n	800f1e0 <_strtod_l+0x8b8>
 800f25c:	e619      	b.n	800ee92 <_strtod_l+0x56a>
 800f25e:	4641      	mov	r1, r8
 800f260:	4620      	mov	r0, r4
 800f262:	f002 ffc7 	bl	80121f4 <__ratio>
 800f266:	ec57 6b10 	vmov	r6, r7, d0
 800f26a:	2200      	movs	r2, #0
 800f26c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f270:	4630      	mov	r0, r6
 800f272:	4639      	mov	r1, r7
 800f274:	f7f1 fc5c 	bl	8000b30 <__aeabi_dcmple>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d06f      	beq.n	800f35c <_strtod_l+0xa34>
 800f27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d17a      	bne.n	800f378 <_strtod_l+0xa50>
 800f282:	f1ba 0f00 	cmp.w	sl, #0
 800f286:	d158      	bne.n	800f33a <_strtod_l+0xa12>
 800f288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f28a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d15a      	bne.n	800f348 <_strtod_l+0xa20>
 800f292:	4b64      	ldr	r3, [pc, #400]	@ (800f424 <_strtod_l+0xafc>)
 800f294:	2200      	movs	r2, #0
 800f296:	4630      	mov	r0, r6
 800f298:	4639      	mov	r1, r7
 800f29a:	f7f1 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d159      	bne.n	800f356 <_strtod_l+0xa2e>
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	4639      	mov	r1, r7
 800f2a6:	4b60      	ldr	r3, [pc, #384]	@ (800f428 <_strtod_l+0xb00>)
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	f7f1 f9c5 	bl	8000638 <__aeabi_dmul>
 800f2ae:	4606      	mov	r6, r0
 800f2b0:	460f      	mov	r7, r1
 800f2b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f2b6:	9606      	str	r6, [sp, #24]
 800f2b8:	9307      	str	r3, [sp, #28]
 800f2ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f2be:	4d57      	ldr	r5, [pc, #348]	@ (800f41c <_strtod_l+0xaf4>)
 800f2c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f2c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2c6:	401d      	ands	r5, r3
 800f2c8:	4b58      	ldr	r3, [pc, #352]	@ (800f42c <_strtod_l+0xb04>)
 800f2ca:	429d      	cmp	r5, r3
 800f2cc:	f040 80b2 	bne.w	800f434 <_strtod_l+0xb0c>
 800f2d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f2d6:	ec4b ab10 	vmov	d0, sl, fp
 800f2da:	f002 fec3 	bl	8012064 <__ulp>
 800f2de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f2e2:	ec51 0b10 	vmov	r0, r1, d0
 800f2e6:	f7f1 f9a7 	bl	8000638 <__aeabi_dmul>
 800f2ea:	4652      	mov	r2, sl
 800f2ec:	465b      	mov	r3, fp
 800f2ee:	f7f0 ffed 	bl	80002cc <__adddf3>
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	4949      	ldr	r1, [pc, #292]	@ (800f41c <_strtod_l+0xaf4>)
 800f2f6:	4a4e      	ldr	r2, [pc, #312]	@ (800f430 <_strtod_l+0xb08>)
 800f2f8:	4019      	ands	r1, r3
 800f2fa:	4291      	cmp	r1, r2
 800f2fc:	4682      	mov	sl, r0
 800f2fe:	d942      	bls.n	800f386 <_strtod_l+0xa5e>
 800f300:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f302:	4b47      	ldr	r3, [pc, #284]	@ (800f420 <_strtod_l+0xaf8>)
 800f304:	429a      	cmp	r2, r3
 800f306:	d103      	bne.n	800f310 <_strtod_l+0x9e8>
 800f308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f30a:	3301      	adds	r3, #1
 800f30c:	f43f ad2b 	beq.w	800ed66 <_strtod_l+0x43e>
 800f310:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f420 <_strtod_l+0xaf8>
 800f314:	f04f 3aff 	mov.w	sl, #4294967295
 800f318:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f31a:	9805      	ldr	r0, [sp, #20]
 800f31c:	f002 fb6e 	bl	80119fc <_Bfree>
 800f320:	9805      	ldr	r0, [sp, #20]
 800f322:	4649      	mov	r1, r9
 800f324:	f002 fb6a 	bl	80119fc <_Bfree>
 800f328:	9805      	ldr	r0, [sp, #20]
 800f32a:	4641      	mov	r1, r8
 800f32c:	f002 fb66 	bl	80119fc <_Bfree>
 800f330:	9805      	ldr	r0, [sp, #20]
 800f332:	4621      	mov	r1, r4
 800f334:	f002 fb62 	bl	80119fc <_Bfree>
 800f338:	e618      	b.n	800ef6c <_strtod_l+0x644>
 800f33a:	f1ba 0f01 	cmp.w	sl, #1
 800f33e:	d103      	bne.n	800f348 <_strtod_l+0xa20>
 800f340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f342:	2b00      	cmp	r3, #0
 800f344:	f43f ada5 	beq.w	800ee92 <_strtod_l+0x56a>
 800f348:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f3f8 <_strtod_l+0xad0>
 800f34c:	4f35      	ldr	r7, [pc, #212]	@ (800f424 <_strtod_l+0xafc>)
 800f34e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f352:	2600      	movs	r6, #0
 800f354:	e7b1      	b.n	800f2ba <_strtod_l+0x992>
 800f356:	4f34      	ldr	r7, [pc, #208]	@ (800f428 <_strtod_l+0xb00>)
 800f358:	2600      	movs	r6, #0
 800f35a:	e7aa      	b.n	800f2b2 <_strtod_l+0x98a>
 800f35c:	4b32      	ldr	r3, [pc, #200]	@ (800f428 <_strtod_l+0xb00>)
 800f35e:	4630      	mov	r0, r6
 800f360:	4639      	mov	r1, r7
 800f362:	2200      	movs	r2, #0
 800f364:	f7f1 f968 	bl	8000638 <__aeabi_dmul>
 800f368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f36a:	4606      	mov	r6, r0
 800f36c:	460f      	mov	r7, r1
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d09f      	beq.n	800f2b2 <_strtod_l+0x98a>
 800f372:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f376:	e7a0      	b.n	800f2ba <_strtod_l+0x992>
 800f378:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f400 <_strtod_l+0xad8>
 800f37c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f380:	ec57 6b17 	vmov	r6, r7, d7
 800f384:	e799      	b.n	800f2ba <_strtod_l+0x992>
 800f386:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f38a:	9b08      	ldr	r3, [sp, #32]
 800f38c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1c1      	bne.n	800f318 <_strtod_l+0x9f0>
 800f394:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f398:	0d1b      	lsrs	r3, r3, #20
 800f39a:	051b      	lsls	r3, r3, #20
 800f39c:	429d      	cmp	r5, r3
 800f39e:	d1bb      	bne.n	800f318 <_strtod_l+0x9f0>
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	f7f1 fca8 	bl	8000cf8 <__aeabi_d2lz>
 800f3a8:	f7f1 f918 	bl	80005dc <__aeabi_l2d>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	4639      	mov	r1, r7
 800f3b4:	f7f0 ff88 	bl	80002c8 <__aeabi_dsub>
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f3c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3c6:	ea46 060a 	orr.w	r6, r6, sl
 800f3ca:	431e      	orrs	r6, r3
 800f3cc:	d06f      	beq.n	800f4ae <_strtod_l+0xb86>
 800f3ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800f408 <_strtod_l+0xae0>)
 800f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d4:	f7f1 fba2 	bl	8000b1c <__aeabi_dcmplt>
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	f47f accf 	bne.w	800ed7c <_strtod_l+0x454>
 800f3de:	a30c      	add	r3, pc, #48	@ (adr r3, 800f410 <_strtod_l+0xae8>)
 800f3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3e8:	f7f1 fbb6 	bl	8000b58 <__aeabi_dcmpgt>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d093      	beq.n	800f318 <_strtod_l+0x9f0>
 800f3f0:	e4c4      	b.n	800ed7c <_strtod_l+0x454>
 800f3f2:	bf00      	nop
 800f3f4:	f3af 8000 	nop.w
 800f3f8:	00000000 	.word	0x00000000
 800f3fc:	bff00000 	.word	0xbff00000
 800f400:	00000000 	.word	0x00000000
 800f404:	3ff00000 	.word	0x3ff00000
 800f408:	94a03595 	.word	0x94a03595
 800f40c:	3fdfffff 	.word	0x3fdfffff
 800f410:	35afe535 	.word	0x35afe535
 800f414:	3fe00000 	.word	0x3fe00000
 800f418:	000fffff 	.word	0x000fffff
 800f41c:	7ff00000 	.word	0x7ff00000
 800f420:	7fefffff 	.word	0x7fefffff
 800f424:	3ff00000 	.word	0x3ff00000
 800f428:	3fe00000 	.word	0x3fe00000
 800f42c:	7fe00000 	.word	0x7fe00000
 800f430:	7c9fffff 	.word	0x7c9fffff
 800f434:	9b08      	ldr	r3, [sp, #32]
 800f436:	b323      	cbz	r3, 800f482 <_strtod_l+0xb5a>
 800f438:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f43c:	d821      	bhi.n	800f482 <_strtod_l+0xb5a>
 800f43e:	a328      	add	r3, pc, #160	@ (adr r3, 800f4e0 <_strtod_l+0xbb8>)
 800f440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f444:	4630      	mov	r0, r6
 800f446:	4639      	mov	r1, r7
 800f448:	f7f1 fb72 	bl	8000b30 <__aeabi_dcmple>
 800f44c:	b1a0      	cbz	r0, 800f478 <_strtod_l+0xb50>
 800f44e:	4639      	mov	r1, r7
 800f450:	4630      	mov	r0, r6
 800f452:	f7f1 fbc9 	bl	8000be8 <__aeabi_d2uiz>
 800f456:	2801      	cmp	r0, #1
 800f458:	bf38      	it	cc
 800f45a:	2001      	movcc	r0, #1
 800f45c:	f7f1 f872 	bl	8000544 <__aeabi_ui2d>
 800f460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f462:	4606      	mov	r6, r0
 800f464:	460f      	mov	r7, r1
 800f466:	b9fb      	cbnz	r3, 800f4a8 <_strtod_l+0xb80>
 800f468:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f46c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f46e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f470:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f474:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f478:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f47a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f47e:	1b5b      	subs	r3, r3, r5
 800f480:	9311      	str	r3, [sp, #68]	@ 0x44
 800f482:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f486:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f48a:	f002 fdeb 	bl	8012064 <__ulp>
 800f48e:	4650      	mov	r0, sl
 800f490:	ec53 2b10 	vmov	r2, r3, d0
 800f494:	4659      	mov	r1, fp
 800f496:	f7f1 f8cf 	bl	8000638 <__aeabi_dmul>
 800f49a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f49e:	f7f0 ff15 	bl	80002cc <__adddf3>
 800f4a2:	4682      	mov	sl, r0
 800f4a4:	468b      	mov	fp, r1
 800f4a6:	e770      	b.n	800f38a <_strtod_l+0xa62>
 800f4a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f4ac:	e7e0      	b.n	800f470 <_strtod_l+0xb48>
 800f4ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800f4e8 <_strtod_l+0xbc0>)
 800f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b4:	f7f1 fb32 	bl	8000b1c <__aeabi_dcmplt>
 800f4b8:	e798      	b.n	800f3ec <_strtod_l+0xac4>
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f4c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4c2:	6013      	str	r3, [r2, #0]
 800f4c4:	f7ff ba6d 	b.w	800e9a2 <_strtod_l+0x7a>
 800f4c8:	2a65      	cmp	r2, #101	@ 0x65
 800f4ca:	f43f ab66 	beq.w	800eb9a <_strtod_l+0x272>
 800f4ce:	2a45      	cmp	r2, #69	@ 0x45
 800f4d0:	f43f ab63 	beq.w	800eb9a <_strtod_l+0x272>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	f7ff bb9e 	b.w	800ec16 <_strtod_l+0x2ee>
 800f4da:	bf00      	nop
 800f4dc:	f3af 8000 	nop.w
 800f4e0:	ffc00000 	.word	0xffc00000
 800f4e4:	41dfffff 	.word	0x41dfffff
 800f4e8:	94a03595 	.word	0x94a03595
 800f4ec:	3fcfffff 	.word	0x3fcfffff

0800f4f0 <_strtod_r>:
 800f4f0:	4b01      	ldr	r3, [pc, #4]	@ (800f4f8 <_strtod_r+0x8>)
 800f4f2:	f7ff ba19 	b.w	800e928 <_strtod_l>
 800f4f6:	bf00      	nop
 800f4f8:	2000011c 	.word	0x2000011c

0800f4fc <strtod>:
 800f4fc:	460a      	mov	r2, r1
 800f4fe:	4601      	mov	r1, r0
 800f500:	4802      	ldr	r0, [pc, #8]	@ (800f50c <strtod+0x10>)
 800f502:	4b03      	ldr	r3, [pc, #12]	@ (800f510 <strtod+0x14>)
 800f504:	6800      	ldr	r0, [r0, #0]
 800f506:	f7ff ba0f 	b.w	800e928 <_strtod_l>
 800f50a:	bf00      	nop
 800f50c:	20000288 	.word	0x20000288
 800f510:	2000011c 	.word	0x2000011c

0800f514 <__cvt>:
 800f514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f518:	ec57 6b10 	vmov	r6, r7, d0
 800f51c:	2f00      	cmp	r7, #0
 800f51e:	460c      	mov	r4, r1
 800f520:	4619      	mov	r1, r3
 800f522:	463b      	mov	r3, r7
 800f524:	bfbb      	ittet	lt
 800f526:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f52a:	461f      	movlt	r7, r3
 800f52c:	2300      	movge	r3, #0
 800f52e:	232d      	movlt	r3, #45	@ 0x2d
 800f530:	700b      	strb	r3, [r1, #0]
 800f532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f534:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f538:	4691      	mov	r9, r2
 800f53a:	f023 0820 	bic.w	r8, r3, #32
 800f53e:	bfbc      	itt	lt
 800f540:	4632      	movlt	r2, r6
 800f542:	4616      	movlt	r6, r2
 800f544:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f548:	d005      	beq.n	800f556 <__cvt+0x42>
 800f54a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f54e:	d100      	bne.n	800f552 <__cvt+0x3e>
 800f550:	3401      	adds	r4, #1
 800f552:	2102      	movs	r1, #2
 800f554:	e000      	b.n	800f558 <__cvt+0x44>
 800f556:	2103      	movs	r1, #3
 800f558:	ab03      	add	r3, sp, #12
 800f55a:	9301      	str	r3, [sp, #4]
 800f55c:	ab02      	add	r3, sp, #8
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	ec47 6b10 	vmov	d0, r6, r7
 800f564:	4653      	mov	r3, sl
 800f566:	4622      	mov	r2, r4
 800f568:	f001 f8ae 	bl	80106c8 <_dtoa_r>
 800f56c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f570:	4605      	mov	r5, r0
 800f572:	d119      	bne.n	800f5a8 <__cvt+0x94>
 800f574:	f019 0f01 	tst.w	r9, #1
 800f578:	d00e      	beq.n	800f598 <__cvt+0x84>
 800f57a:	eb00 0904 	add.w	r9, r0, r4
 800f57e:	2200      	movs	r2, #0
 800f580:	2300      	movs	r3, #0
 800f582:	4630      	mov	r0, r6
 800f584:	4639      	mov	r1, r7
 800f586:	f7f1 fabf 	bl	8000b08 <__aeabi_dcmpeq>
 800f58a:	b108      	cbz	r0, 800f590 <__cvt+0x7c>
 800f58c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f590:	2230      	movs	r2, #48	@ 0x30
 800f592:	9b03      	ldr	r3, [sp, #12]
 800f594:	454b      	cmp	r3, r9
 800f596:	d31e      	bcc.n	800f5d6 <__cvt+0xc2>
 800f598:	9b03      	ldr	r3, [sp, #12]
 800f59a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f59c:	1b5b      	subs	r3, r3, r5
 800f59e:	4628      	mov	r0, r5
 800f5a0:	6013      	str	r3, [r2, #0]
 800f5a2:	b004      	add	sp, #16
 800f5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f5ac:	eb00 0904 	add.w	r9, r0, r4
 800f5b0:	d1e5      	bne.n	800f57e <__cvt+0x6a>
 800f5b2:	7803      	ldrb	r3, [r0, #0]
 800f5b4:	2b30      	cmp	r3, #48	@ 0x30
 800f5b6:	d10a      	bne.n	800f5ce <__cvt+0xba>
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	4630      	mov	r0, r6
 800f5be:	4639      	mov	r1, r7
 800f5c0:	f7f1 faa2 	bl	8000b08 <__aeabi_dcmpeq>
 800f5c4:	b918      	cbnz	r0, 800f5ce <__cvt+0xba>
 800f5c6:	f1c4 0401 	rsb	r4, r4, #1
 800f5ca:	f8ca 4000 	str.w	r4, [sl]
 800f5ce:	f8da 3000 	ldr.w	r3, [sl]
 800f5d2:	4499      	add	r9, r3
 800f5d4:	e7d3      	b.n	800f57e <__cvt+0x6a>
 800f5d6:	1c59      	adds	r1, r3, #1
 800f5d8:	9103      	str	r1, [sp, #12]
 800f5da:	701a      	strb	r2, [r3, #0]
 800f5dc:	e7d9      	b.n	800f592 <__cvt+0x7e>

0800f5de <__exponent>:
 800f5de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5e0:	2900      	cmp	r1, #0
 800f5e2:	bfba      	itte	lt
 800f5e4:	4249      	neglt	r1, r1
 800f5e6:	232d      	movlt	r3, #45	@ 0x2d
 800f5e8:	232b      	movge	r3, #43	@ 0x2b
 800f5ea:	2909      	cmp	r1, #9
 800f5ec:	7002      	strb	r2, [r0, #0]
 800f5ee:	7043      	strb	r3, [r0, #1]
 800f5f0:	dd29      	ble.n	800f646 <__exponent+0x68>
 800f5f2:	f10d 0307 	add.w	r3, sp, #7
 800f5f6:	461d      	mov	r5, r3
 800f5f8:	270a      	movs	r7, #10
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	fbb1 f6f7 	udiv	r6, r1, r7
 800f600:	fb07 1416 	mls	r4, r7, r6, r1
 800f604:	3430      	adds	r4, #48	@ 0x30
 800f606:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f60a:	460c      	mov	r4, r1
 800f60c:	2c63      	cmp	r4, #99	@ 0x63
 800f60e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f612:	4631      	mov	r1, r6
 800f614:	dcf1      	bgt.n	800f5fa <__exponent+0x1c>
 800f616:	3130      	adds	r1, #48	@ 0x30
 800f618:	1e94      	subs	r4, r2, #2
 800f61a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f61e:	1c41      	adds	r1, r0, #1
 800f620:	4623      	mov	r3, r4
 800f622:	42ab      	cmp	r3, r5
 800f624:	d30a      	bcc.n	800f63c <__exponent+0x5e>
 800f626:	f10d 0309 	add.w	r3, sp, #9
 800f62a:	1a9b      	subs	r3, r3, r2
 800f62c:	42ac      	cmp	r4, r5
 800f62e:	bf88      	it	hi
 800f630:	2300      	movhi	r3, #0
 800f632:	3302      	adds	r3, #2
 800f634:	4403      	add	r3, r0
 800f636:	1a18      	subs	r0, r3, r0
 800f638:	b003      	add	sp, #12
 800f63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f63c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f640:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f644:	e7ed      	b.n	800f622 <__exponent+0x44>
 800f646:	2330      	movs	r3, #48	@ 0x30
 800f648:	3130      	adds	r1, #48	@ 0x30
 800f64a:	7083      	strb	r3, [r0, #2]
 800f64c:	70c1      	strb	r1, [r0, #3]
 800f64e:	1d03      	adds	r3, r0, #4
 800f650:	e7f1      	b.n	800f636 <__exponent+0x58>
	...

0800f654 <_printf_float>:
 800f654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f658:	b08d      	sub	sp, #52	@ 0x34
 800f65a:	460c      	mov	r4, r1
 800f65c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f660:	4616      	mov	r6, r2
 800f662:	461f      	mov	r7, r3
 800f664:	4605      	mov	r5, r0
 800f666:	f000 ff01 	bl	801046c <_localeconv_r>
 800f66a:	6803      	ldr	r3, [r0, #0]
 800f66c:	9304      	str	r3, [sp, #16]
 800f66e:	4618      	mov	r0, r3
 800f670:	f7f0 fe1e 	bl	80002b0 <strlen>
 800f674:	2300      	movs	r3, #0
 800f676:	930a      	str	r3, [sp, #40]	@ 0x28
 800f678:	f8d8 3000 	ldr.w	r3, [r8]
 800f67c:	9005      	str	r0, [sp, #20]
 800f67e:	3307      	adds	r3, #7
 800f680:	f023 0307 	bic.w	r3, r3, #7
 800f684:	f103 0208 	add.w	r2, r3, #8
 800f688:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f68c:	f8d4 b000 	ldr.w	fp, [r4]
 800f690:	f8c8 2000 	str.w	r2, [r8]
 800f694:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f698:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f69c:	9307      	str	r3, [sp, #28]
 800f69e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f6a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f6a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6aa:	4b9c      	ldr	r3, [pc, #624]	@ (800f91c <_printf_float+0x2c8>)
 800f6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f6b0:	f7f1 fa5c 	bl	8000b6c <__aeabi_dcmpun>
 800f6b4:	bb70      	cbnz	r0, 800f714 <_printf_float+0xc0>
 800f6b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6ba:	4b98      	ldr	r3, [pc, #608]	@ (800f91c <_printf_float+0x2c8>)
 800f6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f6c0:	f7f1 fa36 	bl	8000b30 <__aeabi_dcmple>
 800f6c4:	bb30      	cbnz	r0, 800f714 <_printf_float+0xc0>
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	4640      	mov	r0, r8
 800f6cc:	4649      	mov	r1, r9
 800f6ce:	f7f1 fa25 	bl	8000b1c <__aeabi_dcmplt>
 800f6d2:	b110      	cbz	r0, 800f6da <_printf_float+0x86>
 800f6d4:	232d      	movs	r3, #45	@ 0x2d
 800f6d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6da:	4a91      	ldr	r2, [pc, #580]	@ (800f920 <_printf_float+0x2cc>)
 800f6dc:	4b91      	ldr	r3, [pc, #580]	@ (800f924 <_printf_float+0x2d0>)
 800f6de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f6e2:	bf94      	ite	ls
 800f6e4:	4690      	movls	r8, r2
 800f6e6:	4698      	movhi	r8, r3
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	6123      	str	r3, [r4, #16]
 800f6ec:	f02b 0304 	bic.w	r3, fp, #4
 800f6f0:	6023      	str	r3, [r4, #0]
 800f6f2:	f04f 0900 	mov.w	r9, #0
 800f6f6:	9700      	str	r7, [sp, #0]
 800f6f8:	4633      	mov	r3, r6
 800f6fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f6fc:	4621      	mov	r1, r4
 800f6fe:	4628      	mov	r0, r5
 800f700:	f000 f9d2 	bl	800faa8 <_printf_common>
 800f704:	3001      	adds	r0, #1
 800f706:	f040 808d 	bne.w	800f824 <_printf_float+0x1d0>
 800f70a:	f04f 30ff 	mov.w	r0, #4294967295
 800f70e:	b00d      	add	sp, #52	@ 0x34
 800f710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f714:	4642      	mov	r2, r8
 800f716:	464b      	mov	r3, r9
 800f718:	4640      	mov	r0, r8
 800f71a:	4649      	mov	r1, r9
 800f71c:	f7f1 fa26 	bl	8000b6c <__aeabi_dcmpun>
 800f720:	b140      	cbz	r0, 800f734 <_printf_float+0xe0>
 800f722:	464b      	mov	r3, r9
 800f724:	2b00      	cmp	r3, #0
 800f726:	bfbc      	itt	lt
 800f728:	232d      	movlt	r3, #45	@ 0x2d
 800f72a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f72e:	4a7e      	ldr	r2, [pc, #504]	@ (800f928 <_printf_float+0x2d4>)
 800f730:	4b7e      	ldr	r3, [pc, #504]	@ (800f92c <_printf_float+0x2d8>)
 800f732:	e7d4      	b.n	800f6de <_printf_float+0x8a>
 800f734:	6863      	ldr	r3, [r4, #4]
 800f736:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f73a:	9206      	str	r2, [sp, #24]
 800f73c:	1c5a      	adds	r2, r3, #1
 800f73e:	d13b      	bne.n	800f7b8 <_printf_float+0x164>
 800f740:	2306      	movs	r3, #6
 800f742:	6063      	str	r3, [r4, #4]
 800f744:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f748:	2300      	movs	r3, #0
 800f74a:	6022      	str	r2, [r4, #0]
 800f74c:	9303      	str	r3, [sp, #12]
 800f74e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f750:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f754:	ab09      	add	r3, sp, #36	@ 0x24
 800f756:	9300      	str	r3, [sp, #0]
 800f758:	6861      	ldr	r1, [r4, #4]
 800f75a:	ec49 8b10 	vmov	d0, r8, r9
 800f75e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f762:	4628      	mov	r0, r5
 800f764:	f7ff fed6 	bl	800f514 <__cvt>
 800f768:	9b06      	ldr	r3, [sp, #24]
 800f76a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f76c:	2b47      	cmp	r3, #71	@ 0x47
 800f76e:	4680      	mov	r8, r0
 800f770:	d129      	bne.n	800f7c6 <_printf_float+0x172>
 800f772:	1cc8      	adds	r0, r1, #3
 800f774:	db02      	blt.n	800f77c <_printf_float+0x128>
 800f776:	6863      	ldr	r3, [r4, #4]
 800f778:	4299      	cmp	r1, r3
 800f77a:	dd41      	ble.n	800f800 <_printf_float+0x1ac>
 800f77c:	f1aa 0a02 	sub.w	sl, sl, #2
 800f780:	fa5f fa8a 	uxtb.w	sl, sl
 800f784:	3901      	subs	r1, #1
 800f786:	4652      	mov	r2, sl
 800f788:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f78c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f78e:	f7ff ff26 	bl	800f5de <__exponent>
 800f792:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f794:	1813      	adds	r3, r2, r0
 800f796:	2a01      	cmp	r2, #1
 800f798:	4681      	mov	r9, r0
 800f79a:	6123      	str	r3, [r4, #16]
 800f79c:	dc02      	bgt.n	800f7a4 <_printf_float+0x150>
 800f79e:	6822      	ldr	r2, [r4, #0]
 800f7a0:	07d2      	lsls	r2, r2, #31
 800f7a2:	d501      	bpl.n	800f7a8 <_printf_float+0x154>
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	6123      	str	r3, [r4, #16]
 800f7a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d0a2      	beq.n	800f6f6 <_printf_float+0xa2>
 800f7b0:	232d      	movs	r3, #45	@ 0x2d
 800f7b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7b6:	e79e      	b.n	800f6f6 <_printf_float+0xa2>
 800f7b8:	9a06      	ldr	r2, [sp, #24]
 800f7ba:	2a47      	cmp	r2, #71	@ 0x47
 800f7bc:	d1c2      	bne.n	800f744 <_printf_float+0xf0>
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d1c0      	bne.n	800f744 <_printf_float+0xf0>
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	e7bd      	b.n	800f742 <_printf_float+0xee>
 800f7c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f7ca:	d9db      	bls.n	800f784 <_printf_float+0x130>
 800f7cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f7d0:	d118      	bne.n	800f804 <_printf_float+0x1b0>
 800f7d2:	2900      	cmp	r1, #0
 800f7d4:	6863      	ldr	r3, [r4, #4]
 800f7d6:	dd0b      	ble.n	800f7f0 <_printf_float+0x19c>
 800f7d8:	6121      	str	r1, [r4, #16]
 800f7da:	b913      	cbnz	r3, 800f7e2 <_printf_float+0x18e>
 800f7dc:	6822      	ldr	r2, [r4, #0]
 800f7de:	07d0      	lsls	r0, r2, #31
 800f7e0:	d502      	bpl.n	800f7e8 <_printf_float+0x194>
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	440b      	add	r3, r1
 800f7e6:	6123      	str	r3, [r4, #16]
 800f7e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f7ea:	f04f 0900 	mov.w	r9, #0
 800f7ee:	e7db      	b.n	800f7a8 <_printf_float+0x154>
 800f7f0:	b913      	cbnz	r3, 800f7f8 <_printf_float+0x1a4>
 800f7f2:	6822      	ldr	r2, [r4, #0]
 800f7f4:	07d2      	lsls	r2, r2, #31
 800f7f6:	d501      	bpl.n	800f7fc <_printf_float+0x1a8>
 800f7f8:	3302      	adds	r3, #2
 800f7fa:	e7f4      	b.n	800f7e6 <_printf_float+0x192>
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	e7f2      	b.n	800f7e6 <_printf_float+0x192>
 800f800:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f806:	4299      	cmp	r1, r3
 800f808:	db05      	blt.n	800f816 <_printf_float+0x1c2>
 800f80a:	6823      	ldr	r3, [r4, #0]
 800f80c:	6121      	str	r1, [r4, #16]
 800f80e:	07d8      	lsls	r0, r3, #31
 800f810:	d5ea      	bpl.n	800f7e8 <_printf_float+0x194>
 800f812:	1c4b      	adds	r3, r1, #1
 800f814:	e7e7      	b.n	800f7e6 <_printf_float+0x192>
 800f816:	2900      	cmp	r1, #0
 800f818:	bfd4      	ite	le
 800f81a:	f1c1 0202 	rsble	r2, r1, #2
 800f81e:	2201      	movgt	r2, #1
 800f820:	4413      	add	r3, r2
 800f822:	e7e0      	b.n	800f7e6 <_printf_float+0x192>
 800f824:	6823      	ldr	r3, [r4, #0]
 800f826:	055a      	lsls	r2, r3, #21
 800f828:	d407      	bmi.n	800f83a <_printf_float+0x1e6>
 800f82a:	6923      	ldr	r3, [r4, #16]
 800f82c:	4642      	mov	r2, r8
 800f82e:	4631      	mov	r1, r6
 800f830:	4628      	mov	r0, r5
 800f832:	47b8      	blx	r7
 800f834:	3001      	adds	r0, #1
 800f836:	d12b      	bne.n	800f890 <_printf_float+0x23c>
 800f838:	e767      	b.n	800f70a <_printf_float+0xb6>
 800f83a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f83e:	f240 80dd 	bls.w	800f9fc <_printf_float+0x3a8>
 800f842:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f846:	2200      	movs	r2, #0
 800f848:	2300      	movs	r3, #0
 800f84a:	f7f1 f95d 	bl	8000b08 <__aeabi_dcmpeq>
 800f84e:	2800      	cmp	r0, #0
 800f850:	d033      	beq.n	800f8ba <_printf_float+0x266>
 800f852:	4a37      	ldr	r2, [pc, #220]	@ (800f930 <_printf_float+0x2dc>)
 800f854:	2301      	movs	r3, #1
 800f856:	4631      	mov	r1, r6
 800f858:	4628      	mov	r0, r5
 800f85a:	47b8      	blx	r7
 800f85c:	3001      	adds	r0, #1
 800f85e:	f43f af54 	beq.w	800f70a <_printf_float+0xb6>
 800f862:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f866:	4543      	cmp	r3, r8
 800f868:	db02      	blt.n	800f870 <_printf_float+0x21c>
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	07d8      	lsls	r0, r3, #31
 800f86e:	d50f      	bpl.n	800f890 <_printf_float+0x23c>
 800f870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f874:	4631      	mov	r1, r6
 800f876:	4628      	mov	r0, r5
 800f878:	47b8      	blx	r7
 800f87a:	3001      	adds	r0, #1
 800f87c:	f43f af45 	beq.w	800f70a <_printf_float+0xb6>
 800f880:	f04f 0900 	mov.w	r9, #0
 800f884:	f108 38ff 	add.w	r8, r8, #4294967295
 800f888:	f104 0a1a 	add.w	sl, r4, #26
 800f88c:	45c8      	cmp	r8, r9
 800f88e:	dc09      	bgt.n	800f8a4 <_printf_float+0x250>
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	079b      	lsls	r3, r3, #30
 800f894:	f100 8103 	bmi.w	800fa9e <_printf_float+0x44a>
 800f898:	68e0      	ldr	r0, [r4, #12]
 800f89a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f89c:	4298      	cmp	r0, r3
 800f89e:	bfb8      	it	lt
 800f8a0:	4618      	movlt	r0, r3
 800f8a2:	e734      	b.n	800f70e <_printf_float+0xba>
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	4652      	mov	r2, sl
 800f8a8:	4631      	mov	r1, r6
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	47b8      	blx	r7
 800f8ae:	3001      	adds	r0, #1
 800f8b0:	f43f af2b 	beq.w	800f70a <_printf_float+0xb6>
 800f8b4:	f109 0901 	add.w	r9, r9, #1
 800f8b8:	e7e8      	b.n	800f88c <_printf_float+0x238>
 800f8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	dc39      	bgt.n	800f934 <_printf_float+0x2e0>
 800f8c0:	4a1b      	ldr	r2, [pc, #108]	@ (800f930 <_printf_float+0x2dc>)
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	4631      	mov	r1, r6
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	47b8      	blx	r7
 800f8ca:	3001      	adds	r0, #1
 800f8cc:	f43f af1d 	beq.w	800f70a <_printf_float+0xb6>
 800f8d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f8d4:	ea59 0303 	orrs.w	r3, r9, r3
 800f8d8:	d102      	bne.n	800f8e0 <_printf_float+0x28c>
 800f8da:	6823      	ldr	r3, [r4, #0]
 800f8dc:	07d9      	lsls	r1, r3, #31
 800f8de:	d5d7      	bpl.n	800f890 <_printf_float+0x23c>
 800f8e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8e4:	4631      	mov	r1, r6
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	47b8      	blx	r7
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	f43f af0d 	beq.w	800f70a <_printf_float+0xb6>
 800f8f0:	f04f 0a00 	mov.w	sl, #0
 800f8f4:	f104 0b1a 	add.w	fp, r4, #26
 800f8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8fa:	425b      	negs	r3, r3
 800f8fc:	4553      	cmp	r3, sl
 800f8fe:	dc01      	bgt.n	800f904 <_printf_float+0x2b0>
 800f900:	464b      	mov	r3, r9
 800f902:	e793      	b.n	800f82c <_printf_float+0x1d8>
 800f904:	2301      	movs	r3, #1
 800f906:	465a      	mov	r2, fp
 800f908:	4631      	mov	r1, r6
 800f90a:	4628      	mov	r0, r5
 800f90c:	47b8      	blx	r7
 800f90e:	3001      	adds	r0, #1
 800f910:	f43f aefb 	beq.w	800f70a <_printf_float+0xb6>
 800f914:	f10a 0a01 	add.w	sl, sl, #1
 800f918:	e7ee      	b.n	800f8f8 <_printf_float+0x2a4>
 800f91a:	bf00      	nop
 800f91c:	7fefffff 	.word	0x7fefffff
 800f920:	08015438 	.word	0x08015438
 800f924:	0801543c 	.word	0x0801543c
 800f928:	08015440 	.word	0x08015440
 800f92c:	08015444 	.word	0x08015444
 800f930:	08015448 	.word	0x08015448
 800f934:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f936:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f93a:	4553      	cmp	r3, sl
 800f93c:	bfa8      	it	ge
 800f93e:	4653      	movge	r3, sl
 800f940:	2b00      	cmp	r3, #0
 800f942:	4699      	mov	r9, r3
 800f944:	dc36      	bgt.n	800f9b4 <_printf_float+0x360>
 800f946:	f04f 0b00 	mov.w	fp, #0
 800f94a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f94e:	f104 021a 	add.w	r2, r4, #26
 800f952:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f954:	9306      	str	r3, [sp, #24]
 800f956:	eba3 0309 	sub.w	r3, r3, r9
 800f95a:	455b      	cmp	r3, fp
 800f95c:	dc31      	bgt.n	800f9c2 <_printf_float+0x36e>
 800f95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f960:	459a      	cmp	sl, r3
 800f962:	dc3a      	bgt.n	800f9da <_printf_float+0x386>
 800f964:	6823      	ldr	r3, [r4, #0]
 800f966:	07da      	lsls	r2, r3, #31
 800f968:	d437      	bmi.n	800f9da <_printf_float+0x386>
 800f96a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f96c:	ebaa 0903 	sub.w	r9, sl, r3
 800f970:	9b06      	ldr	r3, [sp, #24]
 800f972:	ebaa 0303 	sub.w	r3, sl, r3
 800f976:	4599      	cmp	r9, r3
 800f978:	bfa8      	it	ge
 800f97a:	4699      	movge	r9, r3
 800f97c:	f1b9 0f00 	cmp.w	r9, #0
 800f980:	dc33      	bgt.n	800f9ea <_printf_float+0x396>
 800f982:	f04f 0800 	mov.w	r8, #0
 800f986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f98a:	f104 0b1a 	add.w	fp, r4, #26
 800f98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f990:	ebaa 0303 	sub.w	r3, sl, r3
 800f994:	eba3 0309 	sub.w	r3, r3, r9
 800f998:	4543      	cmp	r3, r8
 800f99a:	f77f af79 	ble.w	800f890 <_printf_float+0x23c>
 800f99e:	2301      	movs	r3, #1
 800f9a0:	465a      	mov	r2, fp
 800f9a2:	4631      	mov	r1, r6
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	47b8      	blx	r7
 800f9a8:	3001      	adds	r0, #1
 800f9aa:	f43f aeae 	beq.w	800f70a <_printf_float+0xb6>
 800f9ae:	f108 0801 	add.w	r8, r8, #1
 800f9b2:	e7ec      	b.n	800f98e <_printf_float+0x33a>
 800f9b4:	4642      	mov	r2, r8
 800f9b6:	4631      	mov	r1, r6
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	47b8      	blx	r7
 800f9bc:	3001      	adds	r0, #1
 800f9be:	d1c2      	bne.n	800f946 <_printf_float+0x2f2>
 800f9c0:	e6a3      	b.n	800f70a <_printf_float+0xb6>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	4631      	mov	r1, r6
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	9206      	str	r2, [sp, #24]
 800f9ca:	47b8      	blx	r7
 800f9cc:	3001      	adds	r0, #1
 800f9ce:	f43f ae9c 	beq.w	800f70a <_printf_float+0xb6>
 800f9d2:	9a06      	ldr	r2, [sp, #24]
 800f9d4:	f10b 0b01 	add.w	fp, fp, #1
 800f9d8:	e7bb      	b.n	800f952 <_printf_float+0x2fe>
 800f9da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9de:	4631      	mov	r1, r6
 800f9e0:	4628      	mov	r0, r5
 800f9e2:	47b8      	blx	r7
 800f9e4:	3001      	adds	r0, #1
 800f9e6:	d1c0      	bne.n	800f96a <_printf_float+0x316>
 800f9e8:	e68f      	b.n	800f70a <_printf_float+0xb6>
 800f9ea:	9a06      	ldr	r2, [sp, #24]
 800f9ec:	464b      	mov	r3, r9
 800f9ee:	4442      	add	r2, r8
 800f9f0:	4631      	mov	r1, r6
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	47b8      	blx	r7
 800f9f6:	3001      	adds	r0, #1
 800f9f8:	d1c3      	bne.n	800f982 <_printf_float+0x32e>
 800f9fa:	e686      	b.n	800f70a <_printf_float+0xb6>
 800f9fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fa00:	f1ba 0f01 	cmp.w	sl, #1
 800fa04:	dc01      	bgt.n	800fa0a <_printf_float+0x3b6>
 800fa06:	07db      	lsls	r3, r3, #31
 800fa08:	d536      	bpl.n	800fa78 <_printf_float+0x424>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	4642      	mov	r2, r8
 800fa0e:	4631      	mov	r1, r6
 800fa10:	4628      	mov	r0, r5
 800fa12:	47b8      	blx	r7
 800fa14:	3001      	adds	r0, #1
 800fa16:	f43f ae78 	beq.w	800f70a <_printf_float+0xb6>
 800fa1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa1e:	4631      	mov	r1, r6
 800fa20:	4628      	mov	r0, r5
 800fa22:	47b8      	blx	r7
 800fa24:	3001      	adds	r0, #1
 800fa26:	f43f ae70 	beq.w	800f70a <_printf_float+0xb6>
 800fa2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fa2e:	2200      	movs	r2, #0
 800fa30:	2300      	movs	r3, #0
 800fa32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa36:	f7f1 f867 	bl	8000b08 <__aeabi_dcmpeq>
 800fa3a:	b9c0      	cbnz	r0, 800fa6e <_printf_float+0x41a>
 800fa3c:	4653      	mov	r3, sl
 800fa3e:	f108 0201 	add.w	r2, r8, #1
 800fa42:	4631      	mov	r1, r6
 800fa44:	4628      	mov	r0, r5
 800fa46:	47b8      	blx	r7
 800fa48:	3001      	adds	r0, #1
 800fa4a:	d10c      	bne.n	800fa66 <_printf_float+0x412>
 800fa4c:	e65d      	b.n	800f70a <_printf_float+0xb6>
 800fa4e:	2301      	movs	r3, #1
 800fa50:	465a      	mov	r2, fp
 800fa52:	4631      	mov	r1, r6
 800fa54:	4628      	mov	r0, r5
 800fa56:	47b8      	blx	r7
 800fa58:	3001      	adds	r0, #1
 800fa5a:	f43f ae56 	beq.w	800f70a <_printf_float+0xb6>
 800fa5e:	f108 0801 	add.w	r8, r8, #1
 800fa62:	45d0      	cmp	r8, sl
 800fa64:	dbf3      	blt.n	800fa4e <_printf_float+0x3fa>
 800fa66:	464b      	mov	r3, r9
 800fa68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fa6c:	e6df      	b.n	800f82e <_printf_float+0x1da>
 800fa6e:	f04f 0800 	mov.w	r8, #0
 800fa72:	f104 0b1a 	add.w	fp, r4, #26
 800fa76:	e7f4      	b.n	800fa62 <_printf_float+0x40e>
 800fa78:	2301      	movs	r3, #1
 800fa7a:	4642      	mov	r2, r8
 800fa7c:	e7e1      	b.n	800fa42 <_printf_float+0x3ee>
 800fa7e:	2301      	movs	r3, #1
 800fa80:	464a      	mov	r2, r9
 800fa82:	4631      	mov	r1, r6
 800fa84:	4628      	mov	r0, r5
 800fa86:	47b8      	blx	r7
 800fa88:	3001      	adds	r0, #1
 800fa8a:	f43f ae3e 	beq.w	800f70a <_printf_float+0xb6>
 800fa8e:	f108 0801 	add.w	r8, r8, #1
 800fa92:	68e3      	ldr	r3, [r4, #12]
 800fa94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fa96:	1a5b      	subs	r3, r3, r1
 800fa98:	4543      	cmp	r3, r8
 800fa9a:	dcf0      	bgt.n	800fa7e <_printf_float+0x42a>
 800fa9c:	e6fc      	b.n	800f898 <_printf_float+0x244>
 800fa9e:	f04f 0800 	mov.w	r8, #0
 800faa2:	f104 0919 	add.w	r9, r4, #25
 800faa6:	e7f4      	b.n	800fa92 <_printf_float+0x43e>

0800faa8 <_printf_common>:
 800faa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faac:	4616      	mov	r6, r2
 800faae:	4698      	mov	r8, r3
 800fab0:	688a      	ldr	r2, [r1, #8]
 800fab2:	690b      	ldr	r3, [r1, #16]
 800fab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fab8:	4293      	cmp	r3, r2
 800faba:	bfb8      	it	lt
 800fabc:	4613      	movlt	r3, r2
 800fabe:	6033      	str	r3, [r6, #0]
 800fac0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fac4:	4607      	mov	r7, r0
 800fac6:	460c      	mov	r4, r1
 800fac8:	b10a      	cbz	r2, 800face <_printf_common+0x26>
 800faca:	3301      	adds	r3, #1
 800facc:	6033      	str	r3, [r6, #0]
 800face:	6823      	ldr	r3, [r4, #0]
 800fad0:	0699      	lsls	r1, r3, #26
 800fad2:	bf42      	ittt	mi
 800fad4:	6833      	ldrmi	r3, [r6, #0]
 800fad6:	3302      	addmi	r3, #2
 800fad8:	6033      	strmi	r3, [r6, #0]
 800fada:	6825      	ldr	r5, [r4, #0]
 800fadc:	f015 0506 	ands.w	r5, r5, #6
 800fae0:	d106      	bne.n	800faf0 <_printf_common+0x48>
 800fae2:	f104 0a19 	add.w	sl, r4, #25
 800fae6:	68e3      	ldr	r3, [r4, #12]
 800fae8:	6832      	ldr	r2, [r6, #0]
 800faea:	1a9b      	subs	r3, r3, r2
 800faec:	42ab      	cmp	r3, r5
 800faee:	dc26      	bgt.n	800fb3e <_printf_common+0x96>
 800faf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800faf4:	6822      	ldr	r2, [r4, #0]
 800faf6:	3b00      	subs	r3, #0
 800faf8:	bf18      	it	ne
 800fafa:	2301      	movne	r3, #1
 800fafc:	0692      	lsls	r2, r2, #26
 800fafe:	d42b      	bmi.n	800fb58 <_printf_common+0xb0>
 800fb00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fb04:	4641      	mov	r1, r8
 800fb06:	4638      	mov	r0, r7
 800fb08:	47c8      	blx	r9
 800fb0a:	3001      	adds	r0, #1
 800fb0c:	d01e      	beq.n	800fb4c <_printf_common+0xa4>
 800fb0e:	6823      	ldr	r3, [r4, #0]
 800fb10:	6922      	ldr	r2, [r4, #16]
 800fb12:	f003 0306 	and.w	r3, r3, #6
 800fb16:	2b04      	cmp	r3, #4
 800fb18:	bf02      	ittt	eq
 800fb1a:	68e5      	ldreq	r5, [r4, #12]
 800fb1c:	6833      	ldreq	r3, [r6, #0]
 800fb1e:	1aed      	subeq	r5, r5, r3
 800fb20:	68a3      	ldr	r3, [r4, #8]
 800fb22:	bf0c      	ite	eq
 800fb24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb28:	2500      	movne	r5, #0
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	bfc4      	itt	gt
 800fb2e:	1a9b      	subgt	r3, r3, r2
 800fb30:	18ed      	addgt	r5, r5, r3
 800fb32:	2600      	movs	r6, #0
 800fb34:	341a      	adds	r4, #26
 800fb36:	42b5      	cmp	r5, r6
 800fb38:	d11a      	bne.n	800fb70 <_printf_common+0xc8>
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	e008      	b.n	800fb50 <_printf_common+0xa8>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	4652      	mov	r2, sl
 800fb42:	4641      	mov	r1, r8
 800fb44:	4638      	mov	r0, r7
 800fb46:	47c8      	blx	r9
 800fb48:	3001      	adds	r0, #1
 800fb4a:	d103      	bne.n	800fb54 <_printf_common+0xac>
 800fb4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb54:	3501      	adds	r5, #1
 800fb56:	e7c6      	b.n	800fae6 <_printf_common+0x3e>
 800fb58:	18e1      	adds	r1, r4, r3
 800fb5a:	1c5a      	adds	r2, r3, #1
 800fb5c:	2030      	movs	r0, #48	@ 0x30
 800fb5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fb62:	4422      	add	r2, r4
 800fb64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fb68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fb6c:	3302      	adds	r3, #2
 800fb6e:	e7c7      	b.n	800fb00 <_printf_common+0x58>
 800fb70:	2301      	movs	r3, #1
 800fb72:	4622      	mov	r2, r4
 800fb74:	4641      	mov	r1, r8
 800fb76:	4638      	mov	r0, r7
 800fb78:	47c8      	blx	r9
 800fb7a:	3001      	adds	r0, #1
 800fb7c:	d0e6      	beq.n	800fb4c <_printf_common+0xa4>
 800fb7e:	3601      	adds	r6, #1
 800fb80:	e7d9      	b.n	800fb36 <_printf_common+0x8e>
	...

0800fb84 <_printf_i>:
 800fb84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb88:	7e0f      	ldrb	r7, [r1, #24]
 800fb8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb8c:	2f78      	cmp	r7, #120	@ 0x78
 800fb8e:	4691      	mov	r9, r2
 800fb90:	4680      	mov	r8, r0
 800fb92:	460c      	mov	r4, r1
 800fb94:	469a      	mov	sl, r3
 800fb96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fb9a:	d807      	bhi.n	800fbac <_printf_i+0x28>
 800fb9c:	2f62      	cmp	r7, #98	@ 0x62
 800fb9e:	d80a      	bhi.n	800fbb6 <_printf_i+0x32>
 800fba0:	2f00      	cmp	r7, #0
 800fba2:	f000 80d2 	beq.w	800fd4a <_printf_i+0x1c6>
 800fba6:	2f58      	cmp	r7, #88	@ 0x58
 800fba8:	f000 80b9 	beq.w	800fd1e <_printf_i+0x19a>
 800fbac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fbb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fbb4:	e03a      	b.n	800fc2c <_printf_i+0xa8>
 800fbb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fbba:	2b15      	cmp	r3, #21
 800fbbc:	d8f6      	bhi.n	800fbac <_printf_i+0x28>
 800fbbe:	a101      	add	r1, pc, #4	@ (adr r1, 800fbc4 <_printf_i+0x40>)
 800fbc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbc4:	0800fc1d 	.word	0x0800fc1d
 800fbc8:	0800fc31 	.word	0x0800fc31
 800fbcc:	0800fbad 	.word	0x0800fbad
 800fbd0:	0800fbad 	.word	0x0800fbad
 800fbd4:	0800fbad 	.word	0x0800fbad
 800fbd8:	0800fbad 	.word	0x0800fbad
 800fbdc:	0800fc31 	.word	0x0800fc31
 800fbe0:	0800fbad 	.word	0x0800fbad
 800fbe4:	0800fbad 	.word	0x0800fbad
 800fbe8:	0800fbad 	.word	0x0800fbad
 800fbec:	0800fbad 	.word	0x0800fbad
 800fbf0:	0800fd31 	.word	0x0800fd31
 800fbf4:	0800fc5b 	.word	0x0800fc5b
 800fbf8:	0800fceb 	.word	0x0800fceb
 800fbfc:	0800fbad 	.word	0x0800fbad
 800fc00:	0800fbad 	.word	0x0800fbad
 800fc04:	0800fd53 	.word	0x0800fd53
 800fc08:	0800fbad 	.word	0x0800fbad
 800fc0c:	0800fc5b 	.word	0x0800fc5b
 800fc10:	0800fbad 	.word	0x0800fbad
 800fc14:	0800fbad 	.word	0x0800fbad
 800fc18:	0800fcf3 	.word	0x0800fcf3
 800fc1c:	6833      	ldr	r3, [r6, #0]
 800fc1e:	1d1a      	adds	r2, r3, #4
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	6032      	str	r2, [r6, #0]
 800fc24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e09d      	b.n	800fd6c <_printf_i+0x1e8>
 800fc30:	6833      	ldr	r3, [r6, #0]
 800fc32:	6820      	ldr	r0, [r4, #0]
 800fc34:	1d19      	adds	r1, r3, #4
 800fc36:	6031      	str	r1, [r6, #0]
 800fc38:	0606      	lsls	r6, r0, #24
 800fc3a:	d501      	bpl.n	800fc40 <_printf_i+0xbc>
 800fc3c:	681d      	ldr	r5, [r3, #0]
 800fc3e:	e003      	b.n	800fc48 <_printf_i+0xc4>
 800fc40:	0645      	lsls	r5, r0, #25
 800fc42:	d5fb      	bpl.n	800fc3c <_printf_i+0xb8>
 800fc44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fc48:	2d00      	cmp	r5, #0
 800fc4a:	da03      	bge.n	800fc54 <_printf_i+0xd0>
 800fc4c:	232d      	movs	r3, #45	@ 0x2d
 800fc4e:	426d      	negs	r5, r5
 800fc50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc54:	4859      	ldr	r0, [pc, #356]	@ (800fdbc <_printf_i+0x238>)
 800fc56:	230a      	movs	r3, #10
 800fc58:	e011      	b.n	800fc7e <_printf_i+0xfa>
 800fc5a:	6821      	ldr	r1, [r4, #0]
 800fc5c:	6833      	ldr	r3, [r6, #0]
 800fc5e:	0608      	lsls	r0, r1, #24
 800fc60:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc64:	d402      	bmi.n	800fc6c <_printf_i+0xe8>
 800fc66:	0649      	lsls	r1, r1, #25
 800fc68:	bf48      	it	mi
 800fc6a:	b2ad      	uxthmi	r5, r5
 800fc6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fc6e:	4853      	ldr	r0, [pc, #332]	@ (800fdbc <_printf_i+0x238>)
 800fc70:	6033      	str	r3, [r6, #0]
 800fc72:	bf14      	ite	ne
 800fc74:	230a      	movne	r3, #10
 800fc76:	2308      	moveq	r3, #8
 800fc78:	2100      	movs	r1, #0
 800fc7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fc7e:	6866      	ldr	r6, [r4, #4]
 800fc80:	60a6      	str	r6, [r4, #8]
 800fc82:	2e00      	cmp	r6, #0
 800fc84:	bfa2      	ittt	ge
 800fc86:	6821      	ldrge	r1, [r4, #0]
 800fc88:	f021 0104 	bicge.w	r1, r1, #4
 800fc8c:	6021      	strge	r1, [r4, #0]
 800fc8e:	b90d      	cbnz	r5, 800fc94 <_printf_i+0x110>
 800fc90:	2e00      	cmp	r6, #0
 800fc92:	d04b      	beq.n	800fd2c <_printf_i+0x1a8>
 800fc94:	4616      	mov	r6, r2
 800fc96:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc9a:	fb03 5711 	mls	r7, r3, r1, r5
 800fc9e:	5dc7      	ldrb	r7, [r0, r7]
 800fca0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fca4:	462f      	mov	r7, r5
 800fca6:	42bb      	cmp	r3, r7
 800fca8:	460d      	mov	r5, r1
 800fcaa:	d9f4      	bls.n	800fc96 <_printf_i+0x112>
 800fcac:	2b08      	cmp	r3, #8
 800fcae:	d10b      	bne.n	800fcc8 <_printf_i+0x144>
 800fcb0:	6823      	ldr	r3, [r4, #0]
 800fcb2:	07df      	lsls	r7, r3, #31
 800fcb4:	d508      	bpl.n	800fcc8 <_printf_i+0x144>
 800fcb6:	6923      	ldr	r3, [r4, #16]
 800fcb8:	6861      	ldr	r1, [r4, #4]
 800fcba:	4299      	cmp	r1, r3
 800fcbc:	bfde      	ittt	le
 800fcbe:	2330      	movle	r3, #48	@ 0x30
 800fcc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fcc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fcc8:	1b92      	subs	r2, r2, r6
 800fcca:	6122      	str	r2, [r4, #16]
 800fccc:	f8cd a000 	str.w	sl, [sp]
 800fcd0:	464b      	mov	r3, r9
 800fcd2:	aa03      	add	r2, sp, #12
 800fcd4:	4621      	mov	r1, r4
 800fcd6:	4640      	mov	r0, r8
 800fcd8:	f7ff fee6 	bl	800faa8 <_printf_common>
 800fcdc:	3001      	adds	r0, #1
 800fcde:	d14a      	bne.n	800fd76 <_printf_i+0x1f2>
 800fce0:	f04f 30ff 	mov.w	r0, #4294967295
 800fce4:	b004      	add	sp, #16
 800fce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	f043 0320 	orr.w	r3, r3, #32
 800fcf0:	6023      	str	r3, [r4, #0]
 800fcf2:	4833      	ldr	r0, [pc, #204]	@ (800fdc0 <_printf_i+0x23c>)
 800fcf4:	2778      	movs	r7, #120	@ 0x78
 800fcf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fcfa:	6823      	ldr	r3, [r4, #0]
 800fcfc:	6831      	ldr	r1, [r6, #0]
 800fcfe:	061f      	lsls	r7, r3, #24
 800fd00:	f851 5b04 	ldr.w	r5, [r1], #4
 800fd04:	d402      	bmi.n	800fd0c <_printf_i+0x188>
 800fd06:	065f      	lsls	r7, r3, #25
 800fd08:	bf48      	it	mi
 800fd0a:	b2ad      	uxthmi	r5, r5
 800fd0c:	6031      	str	r1, [r6, #0]
 800fd0e:	07d9      	lsls	r1, r3, #31
 800fd10:	bf44      	itt	mi
 800fd12:	f043 0320 	orrmi.w	r3, r3, #32
 800fd16:	6023      	strmi	r3, [r4, #0]
 800fd18:	b11d      	cbz	r5, 800fd22 <_printf_i+0x19e>
 800fd1a:	2310      	movs	r3, #16
 800fd1c:	e7ac      	b.n	800fc78 <_printf_i+0xf4>
 800fd1e:	4827      	ldr	r0, [pc, #156]	@ (800fdbc <_printf_i+0x238>)
 800fd20:	e7e9      	b.n	800fcf6 <_printf_i+0x172>
 800fd22:	6823      	ldr	r3, [r4, #0]
 800fd24:	f023 0320 	bic.w	r3, r3, #32
 800fd28:	6023      	str	r3, [r4, #0]
 800fd2a:	e7f6      	b.n	800fd1a <_printf_i+0x196>
 800fd2c:	4616      	mov	r6, r2
 800fd2e:	e7bd      	b.n	800fcac <_printf_i+0x128>
 800fd30:	6833      	ldr	r3, [r6, #0]
 800fd32:	6825      	ldr	r5, [r4, #0]
 800fd34:	6961      	ldr	r1, [r4, #20]
 800fd36:	1d18      	adds	r0, r3, #4
 800fd38:	6030      	str	r0, [r6, #0]
 800fd3a:	062e      	lsls	r6, r5, #24
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	d501      	bpl.n	800fd44 <_printf_i+0x1c0>
 800fd40:	6019      	str	r1, [r3, #0]
 800fd42:	e002      	b.n	800fd4a <_printf_i+0x1c6>
 800fd44:	0668      	lsls	r0, r5, #25
 800fd46:	d5fb      	bpl.n	800fd40 <_printf_i+0x1bc>
 800fd48:	8019      	strh	r1, [r3, #0]
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	6123      	str	r3, [r4, #16]
 800fd4e:	4616      	mov	r6, r2
 800fd50:	e7bc      	b.n	800fccc <_printf_i+0x148>
 800fd52:	6833      	ldr	r3, [r6, #0]
 800fd54:	1d1a      	adds	r2, r3, #4
 800fd56:	6032      	str	r2, [r6, #0]
 800fd58:	681e      	ldr	r6, [r3, #0]
 800fd5a:	6862      	ldr	r2, [r4, #4]
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	4630      	mov	r0, r6
 800fd60:	f7f0 fa56 	bl	8000210 <memchr>
 800fd64:	b108      	cbz	r0, 800fd6a <_printf_i+0x1e6>
 800fd66:	1b80      	subs	r0, r0, r6
 800fd68:	6060      	str	r0, [r4, #4]
 800fd6a:	6863      	ldr	r3, [r4, #4]
 800fd6c:	6123      	str	r3, [r4, #16]
 800fd6e:	2300      	movs	r3, #0
 800fd70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd74:	e7aa      	b.n	800fccc <_printf_i+0x148>
 800fd76:	6923      	ldr	r3, [r4, #16]
 800fd78:	4632      	mov	r2, r6
 800fd7a:	4649      	mov	r1, r9
 800fd7c:	4640      	mov	r0, r8
 800fd7e:	47d0      	blx	sl
 800fd80:	3001      	adds	r0, #1
 800fd82:	d0ad      	beq.n	800fce0 <_printf_i+0x15c>
 800fd84:	6823      	ldr	r3, [r4, #0]
 800fd86:	079b      	lsls	r3, r3, #30
 800fd88:	d413      	bmi.n	800fdb2 <_printf_i+0x22e>
 800fd8a:	68e0      	ldr	r0, [r4, #12]
 800fd8c:	9b03      	ldr	r3, [sp, #12]
 800fd8e:	4298      	cmp	r0, r3
 800fd90:	bfb8      	it	lt
 800fd92:	4618      	movlt	r0, r3
 800fd94:	e7a6      	b.n	800fce4 <_printf_i+0x160>
 800fd96:	2301      	movs	r3, #1
 800fd98:	4632      	mov	r2, r6
 800fd9a:	4649      	mov	r1, r9
 800fd9c:	4640      	mov	r0, r8
 800fd9e:	47d0      	blx	sl
 800fda0:	3001      	adds	r0, #1
 800fda2:	d09d      	beq.n	800fce0 <_printf_i+0x15c>
 800fda4:	3501      	adds	r5, #1
 800fda6:	68e3      	ldr	r3, [r4, #12]
 800fda8:	9903      	ldr	r1, [sp, #12]
 800fdaa:	1a5b      	subs	r3, r3, r1
 800fdac:	42ab      	cmp	r3, r5
 800fdae:	dcf2      	bgt.n	800fd96 <_printf_i+0x212>
 800fdb0:	e7eb      	b.n	800fd8a <_printf_i+0x206>
 800fdb2:	2500      	movs	r5, #0
 800fdb4:	f104 0619 	add.w	r6, r4, #25
 800fdb8:	e7f5      	b.n	800fda6 <_printf_i+0x222>
 800fdba:	bf00      	nop
 800fdbc:	0801544a 	.word	0x0801544a
 800fdc0:	0801545b 	.word	0x0801545b

0800fdc4 <_scanf_float>:
 800fdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc8:	b087      	sub	sp, #28
 800fdca:	4617      	mov	r7, r2
 800fdcc:	9303      	str	r3, [sp, #12]
 800fdce:	688b      	ldr	r3, [r1, #8]
 800fdd0:	1e5a      	subs	r2, r3, #1
 800fdd2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fdd6:	bf81      	itttt	hi
 800fdd8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fddc:	eb03 0b05 	addhi.w	fp, r3, r5
 800fde0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fde4:	608b      	strhi	r3, [r1, #8]
 800fde6:	680b      	ldr	r3, [r1, #0]
 800fde8:	460a      	mov	r2, r1
 800fdea:	f04f 0500 	mov.w	r5, #0
 800fdee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800fdf2:	f842 3b1c 	str.w	r3, [r2], #28
 800fdf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fdfa:	4680      	mov	r8, r0
 800fdfc:	460c      	mov	r4, r1
 800fdfe:	bf98      	it	ls
 800fe00:	f04f 0b00 	movls.w	fp, #0
 800fe04:	9201      	str	r2, [sp, #4]
 800fe06:	4616      	mov	r6, r2
 800fe08:	46aa      	mov	sl, r5
 800fe0a:	46a9      	mov	r9, r5
 800fe0c:	9502      	str	r5, [sp, #8]
 800fe0e:	68a2      	ldr	r2, [r4, #8]
 800fe10:	b152      	cbz	r2, 800fe28 <_scanf_float+0x64>
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	2b4e      	cmp	r3, #78	@ 0x4e
 800fe18:	d864      	bhi.n	800fee4 <_scanf_float+0x120>
 800fe1a:	2b40      	cmp	r3, #64	@ 0x40
 800fe1c:	d83c      	bhi.n	800fe98 <_scanf_float+0xd4>
 800fe1e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fe22:	b2c8      	uxtb	r0, r1
 800fe24:	280e      	cmp	r0, #14
 800fe26:	d93a      	bls.n	800fe9e <_scanf_float+0xda>
 800fe28:	f1b9 0f00 	cmp.w	r9, #0
 800fe2c:	d003      	beq.n	800fe36 <_scanf_float+0x72>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe3a:	f1ba 0f01 	cmp.w	sl, #1
 800fe3e:	f200 8117 	bhi.w	8010070 <_scanf_float+0x2ac>
 800fe42:	9b01      	ldr	r3, [sp, #4]
 800fe44:	429e      	cmp	r6, r3
 800fe46:	f200 8108 	bhi.w	801005a <_scanf_float+0x296>
 800fe4a:	2001      	movs	r0, #1
 800fe4c:	b007      	add	sp, #28
 800fe4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe52:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fe56:	2a0d      	cmp	r2, #13
 800fe58:	d8e6      	bhi.n	800fe28 <_scanf_float+0x64>
 800fe5a:	a101      	add	r1, pc, #4	@ (adr r1, 800fe60 <_scanf_float+0x9c>)
 800fe5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fe60:	0800ffa7 	.word	0x0800ffa7
 800fe64:	0800fe29 	.word	0x0800fe29
 800fe68:	0800fe29 	.word	0x0800fe29
 800fe6c:	0800fe29 	.word	0x0800fe29
 800fe70:	08010007 	.word	0x08010007
 800fe74:	0800ffdf 	.word	0x0800ffdf
 800fe78:	0800fe29 	.word	0x0800fe29
 800fe7c:	0800fe29 	.word	0x0800fe29
 800fe80:	0800ffb5 	.word	0x0800ffb5
 800fe84:	0800fe29 	.word	0x0800fe29
 800fe88:	0800fe29 	.word	0x0800fe29
 800fe8c:	0800fe29 	.word	0x0800fe29
 800fe90:	0800fe29 	.word	0x0800fe29
 800fe94:	0800ff6d 	.word	0x0800ff6d
 800fe98:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fe9c:	e7db      	b.n	800fe56 <_scanf_float+0x92>
 800fe9e:	290e      	cmp	r1, #14
 800fea0:	d8c2      	bhi.n	800fe28 <_scanf_float+0x64>
 800fea2:	a001      	add	r0, pc, #4	@ (adr r0, 800fea8 <_scanf_float+0xe4>)
 800fea4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fea8:	0800ff5d 	.word	0x0800ff5d
 800feac:	0800fe29 	.word	0x0800fe29
 800feb0:	0800ff5d 	.word	0x0800ff5d
 800feb4:	0800fff3 	.word	0x0800fff3
 800feb8:	0800fe29 	.word	0x0800fe29
 800febc:	0800ff05 	.word	0x0800ff05
 800fec0:	0800ff43 	.word	0x0800ff43
 800fec4:	0800ff43 	.word	0x0800ff43
 800fec8:	0800ff43 	.word	0x0800ff43
 800fecc:	0800ff43 	.word	0x0800ff43
 800fed0:	0800ff43 	.word	0x0800ff43
 800fed4:	0800ff43 	.word	0x0800ff43
 800fed8:	0800ff43 	.word	0x0800ff43
 800fedc:	0800ff43 	.word	0x0800ff43
 800fee0:	0800ff43 	.word	0x0800ff43
 800fee4:	2b6e      	cmp	r3, #110	@ 0x6e
 800fee6:	d809      	bhi.n	800fefc <_scanf_float+0x138>
 800fee8:	2b60      	cmp	r3, #96	@ 0x60
 800feea:	d8b2      	bhi.n	800fe52 <_scanf_float+0x8e>
 800feec:	2b54      	cmp	r3, #84	@ 0x54
 800feee:	d07b      	beq.n	800ffe8 <_scanf_float+0x224>
 800fef0:	2b59      	cmp	r3, #89	@ 0x59
 800fef2:	d199      	bne.n	800fe28 <_scanf_float+0x64>
 800fef4:	2d07      	cmp	r5, #7
 800fef6:	d197      	bne.n	800fe28 <_scanf_float+0x64>
 800fef8:	2508      	movs	r5, #8
 800fefa:	e02c      	b.n	800ff56 <_scanf_float+0x192>
 800fefc:	2b74      	cmp	r3, #116	@ 0x74
 800fefe:	d073      	beq.n	800ffe8 <_scanf_float+0x224>
 800ff00:	2b79      	cmp	r3, #121	@ 0x79
 800ff02:	e7f6      	b.n	800fef2 <_scanf_float+0x12e>
 800ff04:	6821      	ldr	r1, [r4, #0]
 800ff06:	05c8      	lsls	r0, r1, #23
 800ff08:	d51b      	bpl.n	800ff42 <_scanf_float+0x17e>
 800ff0a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ff0e:	6021      	str	r1, [r4, #0]
 800ff10:	f109 0901 	add.w	r9, r9, #1
 800ff14:	f1bb 0f00 	cmp.w	fp, #0
 800ff18:	d003      	beq.n	800ff22 <_scanf_float+0x15e>
 800ff1a:	3201      	adds	r2, #1
 800ff1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff20:	60a2      	str	r2, [r4, #8]
 800ff22:	68a3      	ldr	r3, [r4, #8]
 800ff24:	3b01      	subs	r3, #1
 800ff26:	60a3      	str	r3, [r4, #8]
 800ff28:	6923      	ldr	r3, [r4, #16]
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	6123      	str	r3, [r4, #16]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	3b01      	subs	r3, #1
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	607b      	str	r3, [r7, #4]
 800ff36:	f340 8087 	ble.w	8010048 <_scanf_float+0x284>
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	603b      	str	r3, [r7, #0]
 800ff40:	e765      	b.n	800fe0e <_scanf_float+0x4a>
 800ff42:	eb1a 0105 	adds.w	r1, sl, r5
 800ff46:	f47f af6f 	bne.w	800fe28 <_scanf_float+0x64>
 800ff4a:	6822      	ldr	r2, [r4, #0]
 800ff4c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ff50:	6022      	str	r2, [r4, #0]
 800ff52:	460d      	mov	r5, r1
 800ff54:	468a      	mov	sl, r1
 800ff56:	f806 3b01 	strb.w	r3, [r6], #1
 800ff5a:	e7e2      	b.n	800ff22 <_scanf_float+0x15e>
 800ff5c:	6822      	ldr	r2, [r4, #0]
 800ff5e:	0610      	lsls	r0, r2, #24
 800ff60:	f57f af62 	bpl.w	800fe28 <_scanf_float+0x64>
 800ff64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ff68:	6022      	str	r2, [r4, #0]
 800ff6a:	e7f4      	b.n	800ff56 <_scanf_float+0x192>
 800ff6c:	f1ba 0f00 	cmp.w	sl, #0
 800ff70:	d10e      	bne.n	800ff90 <_scanf_float+0x1cc>
 800ff72:	f1b9 0f00 	cmp.w	r9, #0
 800ff76:	d10e      	bne.n	800ff96 <_scanf_float+0x1d2>
 800ff78:	6822      	ldr	r2, [r4, #0]
 800ff7a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ff7e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ff82:	d108      	bne.n	800ff96 <_scanf_float+0x1d2>
 800ff84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ff88:	6022      	str	r2, [r4, #0]
 800ff8a:	f04f 0a01 	mov.w	sl, #1
 800ff8e:	e7e2      	b.n	800ff56 <_scanf_float+0x192>
 800ff90:	f1ba 0f02 	cmp.w	sl, #2
 800ff94:	d055      	beq.n	8010042 <_scanf_float+0x27e>
 800ff96:	2d01      	cmp	r5, #1
 800ff98:	d002      	beq.n	800ffa0 <_scanf_float+0x1dc>
 800ff9a:	2d04      	cmp	r5, #4
 800ff9c:	f47f af44 	bne.w	800fe28 <_scanf_float+0x64>
 800ffa0:	3501      	adds	r5, #1
 800ffa2:	b2ed      	uxtb	r5, r5
 800ffa4:	e7d7      	b.n	800ff56 <_scanf_float+0x192>
 800ffa6:	f1ba 0f01 	cmp.w	sl, #1
 800ffaa:	f47f af3d 	bne.w	800fe28 <_scanf_float+0x64>
 800ffae:	f04f 0a02 	mov.w	sl, #2
 800ffb2:	e7d0      	b.n	800ff56 <_scanf_float+0x192>
 800ffb4:	b97d      	cbnz	r5, 800ffd6 <_scanf_float+0x212>
 800ffb6:	f1b9 0f00 	cmp.w	r9, #0
 800ffba:	f47f af38 	bne.w	800fe2e <_scanf_float+0x6a>
 800ffbe:	6822      	ldr	r2, [r4, #0]
 800ffc0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ffc4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ffc8:	f040 8108 	bne.w	80101dc <_scanf_float+0x418>
 800ffcc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ffd0:	6022      	str	r2, [r4, #0]
 800ffd2:	2501      	movs	r5, #1
 800ffd4:	e7bf      	b.n	800ff56 <_scanf_float+0x192>
 800ffd6:	2d03      	cmp	r5, #3
 800ffd8:	d0e2      	beq.n	800ffa0 <_scanf_float+0x1dc>
 800ffda:	2d05      	cmp	r5, #5
 800ffdc:	e7de      	b.n	800ff9c <_scanf_float+0x1d8>
 800ffde:	2d02      	cmp	r5, #2
 800ffe0:	f47f af22 	bne.w	800fe28 <_scanf_float+0x64>
 800ffe4:	2503      	movs	r5, #3
 800ffe6:	e7b6      	b.n	800ff56 <_scanf_float+0x192>
 800ffe8:	2d06      	cmp	r5, #6
 800ffea:	f47f af1d 	bne.w	800fe28 <_scanf_float+0x64>
 800ffee:	2507      	movs	r5, #7
 800fff0:	e7b1      	b.n	800ff56 <_scanf_float+0x192>
 800fff2:	6822      	ldr	r2, [r4, #0]
 800fff4:	0591      	lsls	r1, r2, #22
 800fff6:	f57f af17 	bpl.w	800fe28 <_scanf_float+0x64>
 800fffa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fffe:	6022      	str	r2, [r4, #0]
 8010000:	f8cd 9008 	str.w	r9, [sp, #8]
 8010004:	e7a7      	b.n	800ff56 <_scanf_float+0x192>
 8010006:	6822      	ldr	r2, [r4, #0]
 8010008:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801000c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010010:	d006      	beq.n	8010020 <_scanf_float+0x25c>
 8010012:	0550      	lsls	r0, r2, #21
 8010014:	f57f af08 	bpl.w	800fe28 <_scanf_float+0x64>
 8010018:	f1b9 0f00 	cmp.w	r9, #0
 801001c:	f000 80de 	beq.w	80101dc <_scanf_float+0x418>
 8010020:	0591      	lsls	r1, r2, #22
 8010022:	bf58      	it	pl
 8010024:	9902      	ldrpl	r1, [sp, #8]
 8010026:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801002a:	bf58      	it	pl
 801002c:	eba9 0101 	subpl.w	r1, r9, r1
 8010030:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8010034:	bf58      	it	pl
 8010036:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801003a:	6022      	str	r2, [r4, #0]
 801003c:	f04f 0900 	mov.w	r9, #0
 8010040:	e789      	b.n	800ff56 <_scanf_float+0x192>
 8010042:	f04f 0a03 	mov.w	sl, #3
 8010046:	e786      	b.n	800ff56 <_scanf_float+0x192>
 8010048:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801004c:	4639      	mov	r1, r7
 801004e:	4640      	mov	r0, r8
 8010050:	4798      	blx	r3
 8010052:	2800      	cmp	r0, #0
 8010054:	f43f aedb 	beq.w	800fe0e <_scanf_float+0x4a>
 8010058:	e6e6      	b.n	800fe28 <_scanf_float+0x64>
 801005a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801005e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010062:	463a      	mov	r2, r7
 8010064:	4640      	mov	r0, r8
 8010066:	4798      	blx	r3
 8010068:	6923      	ldr	r3, [r4, #16]
 801006a:	3b01      	subs	r3, #1
 801006c:	6123      	str	r3, [r4, #16]
 801006e:	e6e8      	b.n	800fe42 <_scanf_float+0x7e>
 8010070:	1e6b      	subs	r3, r5, #1
 8010072:	2b06      	cmp	r3, #6
 8010074:	d824      	bhi.n	80100c0 <_scanf_float+0x2fc>
 8010076:	2d02      	cmp	r5, #2
 8010078:	d836      	bhi.n	80100e8 <_scanf_float+0x324>
 801007a:	9b01      	ldr	r3, [sp, #4]
 801007c:	429e      	cmp	r6, r3
 801007e:	f67f aee4 	bls.w	800fe4a <_scanf_float+0x86>
 8010082:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010086:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801008a:	463a      	mov	r2, r7
 801008c:	4640      	mov	r0, r8
 801008e:	4798      	blx	r3
 8010090:	6923      	ldr	r3, [r4, #16]
 8010092:	3b01      	subs	r3, #1
 8010094:	6123      	str	r3, [r4, #16]
 8010096:	e7f0      	b.n	801007a <_scanf_float+0x2b6>
 8010098:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801009c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80100a0:	463a      	mov	r2, r7
 80100a2:	4640      	mov	r0, r8
 80100a4:	4798      	blx	r3
 80100a6:	6923      	ldr	r3, [r4, #16]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	6123      	str	r3, [r4, #16]
 80100ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100b0:	fa5f fa8a 	uxtb.w	sl, sl
 80100b4:	f1ba 0f02 	cmp.w	sl, #2
 80100b8:	d1ee      	bne.n	8010098 <_scanf_float+0x2d4>
 80100ba:	3d03      	subs	r5, #3
 80100bc:	b2ed      	uxtb	r5, r5
 80100be:	1b76      	subs	r6, r6, r5
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	05da      	lsls	r2, r3, #23
 80100c4:	d530      	bpl.n	8010128 <_scanf_float+0x364>
 80100c6:	055b      	lsls	r3, r3, #21
 80100c8:	d511      	bpl.n	80100ee <_scanf_float+0x32a>
 80100ca:	9b01      	ldr	r3, [sp, #4]
 80100cc:	429e      	cmp	r6, r3
 80100ce:	f67f aebc 	bls.w	800fe4a <_scanf_float+0x86>
 80100d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80100d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80100da:	463a      	mov	r2, r7
 80100dc:	4640      	mov	r0, r8
 80100de:	4798      	blx	r3
 80100e0:	6923      	ldr	r3, [r4, #16]
 80100e2:	3b01      	subs	r3, #1
 80100e4:	6123      	str	r3, [r4, #16]
 80100e6:	e7f0      	b.n	80100ca <_scanf_float+0x306>
 80100e8:	46aa      	mov	sl, r5
 80100ea:	46b3      	mov	fp, r6
 80100ec:	e7de      	b.n	80100ac <_scanf_float+0x2e8>
 80100ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80100f2:	6923      	ldr	r3, [r4, #16]
 80100f4:	2965      	cmp	r1, #101	@ 0x65
 80100f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80100fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80100fe:	6123      	str	r3, [r4, #16]
 8010100:	d00c      	beq.n	801011c <_scanf_float+0x358>
 8010102:	2945      	cmp	r1, #69	@ 0x45
 8010104:	d00a      	beq.n	801011c <_scanf_float+0x358>
 8010106:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801010a:	463a      	mov	r2, r7
 801010c:	4640      	mov	r0, r8
 801010e:	4798      	blx	r3
 8010110:	6923      	ldr	r3, [r4, #16]
 8010112:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010116:	3b01      	subs	r3, #1
 8010118:	1eb5      	subs	r5, r6, #2
 801011a:	6123      	str	r3, [r4, #16]
 801011c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010120:	463a      	mov	r2, r7
 8010122:	4640      	mov	r0, r8
 8010124:	4798      	blx	r3
 8010126:	462e      	mov	r6, r5
 8010128:	6822      	ldr	r2, [r4, #0]
 801012a:	f012 0210 	ands.w	r2, r2, #16
 801012e:	d001      	beq.n	8010134 <_scanf_float+0x370>
 8010130:	2000      	movs	r0, #0
 8010132:	e68b      	b.n	800fe4c <_scanf_float+0x88>
 8010134:	7032      	strb	r2, [r6, #0]
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801013c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010140:	d11c      	bne.n	801017c <_scanf_float+0x3b8>
 8010142:	9b02      	ldr	r3, [sp, #8]
 8010144:	454b      	cmp	r3, r9
 8010146:	eba3 0209 	sub.w	r2, r3, r9
 801014a:	d123      	bne.n	8010194 <_scanf_float+0x3d0>
 801014c:	9901      	ldr	r1, [sp, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	4640      	mov	r0, r8
 8010152:	f7ff f9cd 	bl	800f4f0 <_strtod_r>
 8010156:	9b03      	ldr	r3, [sp, #12]
 8010158:	6821      	ldr	r1, [r4, #0]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f011 0f02 	tst.w	r1, #2
 8010160:	ec57 6b10 	vmov	r6, r7, d0
 8010164:	f103 0204 	add.w	r2, r3, #4
 8010168:	d01f      	beq.n	80101aa <_scanf_float+0x3e6>
 801016a:	9903      	ldr	r1, [sp, #12]
 801016c:	600a      	str	r2, [r1, #0]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	e9c3 6700 	strd	r6, r7, [r3]
 8010174:	68e3      	ldr	r3, [r4, #12]
 8010176:	3301      	adds	r3, #1
 8010178:	60e3      	str	r3, [r4, #12]
 801017a:	e7d9      	b.n	8010130 <_scanf_float+0x36c>
 801017c:	9b04      	ldr	r3, [sp, #16]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d0e4      	beq.n	801014c <_scanf_float+0x388>
 8010182:	9905      	ldr	r1, [sp, #20]
 8010184:	230a      	movs	r3, #10
 8010186:	3101      	adds	r1, #1
 8010188:	4640      	mov	r0, r8
 801018a:	f002 f923 	bl	80123d4 <_strtol_r>
 801018e:	9b04      	ldr	r3, [sp, #16]
 8010190:	9e05      	ldr	r6, [sp, #20]
 8010192:	1ac2      	subs	r2, r0, r3
 8010194:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010198:	429e      	cmp	r6, r3
 801019a:	bf28      	it	cs
 801019c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80101a0:	4910      	ldr	r1, [pc, #64]	@ (80101e4 <_scanf_float+0x420>)
 80101a2:	4630      	mov	r0, r6
 80101a4:	f000 f8e4 	bl	8010370 <siprintf>
 80101a8:	e7d0      	b.n	801014c <_scanf_float+0x388>
 80101aa:	f011 0f04 	tst.w	r1, #4
 80101ae:	9903      	ldr	r1, [sp, #12]
 80101b0:	600a      	str	r2, [r1, #0]
 80101b2:	d1dc      	bne.n	801016e <_scanf_float+0x3aa>
 80101b4:	681d      	ldr	r5, [r3, #0]
 80101b6:	4632      	mov	r2, r6
 80101b8:	463b      	mov	r3, r7
 80101ba:	4630      	mov	r0, r6
 80101bc:	4639      	mov	r1, r7
 80101be:	f7f0 fcd5 	bl	8000b6c <__aeabi_dcmpun>
 80101c2:	b128      	cbz	r0, 80101d0 <_scanf_float+0x40c>
 80101c4:	4808      	ldr	r0, [pc, #32]	@ (80101e8 <_scanf_float+0x424>)
 80101c6:	f000 f9ef 	bl	80105a8 <nanf>
 80101ca:	ed85 0a00 	vstr	s0, [r5]
 80101ce:	e7d1      	b.n	8010174 <_scanf_float+0x3b0>
 80101d0:	4630      	mov	r0, r6
 80101d2:	4639      	mov	r1, r7
 80101d4:	f7f0 fd28 	bl	8000c28 <__aeabi_d2f>
 80101d8:	6028      	str	r0, [r5, #0]
 80101da:	e7cb      	b.n	8010174 <_scanf_float+0x3b0>
 80101dc:	f04f 0900 	mov.w	r9, #0
 80101e0:	e629      	b.n	800fe36 <_scanf_float+0x72>
 80101e2:	bf00      	nop
 80101e4:	0801546c 	.word	0x0801546c
 80101e8:	0801580d 	.word	0x0801580d

080101ec <std>:
 80101ec:	2300      	movs	r3, #0
 80101ee:	b510      	push	{r4, lr}
 80101f0:	4604      	mov	r4, r0
 80101f2:	e9c0 3300 	strd	r3, r3, [r0]
 80101f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101fa:	6083      	str	r3, [r0, #8]
 80101fc:	8181      	strh	r1, [r0, #12]
 80101fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8010200:	81c2      	strh	r2, [r0, #14]
 8010202:	6183      	str	r3, [r0, #24]
 8010204:	4619      	mov	r1, r3
 8010206:	2208      	movs	r2, #8
 8010208:	305c      	adds	r0, #92	@ 0x5c
 801020a:	f000 f914 	bl	8010436 <memset>
 801020e:	4b0d      	ldr	r3, [pc, #52]	@ (8010244 <std+0x58>)
 8010210:	6263      	str	r3, [r4, #36]	@ 0x24
 8010212:	4b0d      	ldr	r3, [pc, #52]	@ (8010248 <std+0x5c>)
 8010214:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010216:	4b0d      	ldr	r3, [pc, #52]	@ (801024c <std+0x60>)
 8010218:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801021a:	4b0d      	ldr	r3, [pc, #52]	@ (8010250 <std+0x64>)
 801021c:	6323      	str	r3, [r4, #48]	@ 0x30
 801021e:	4b0d      	ldr	r3, [pc, #52]	@ (8010254 <std+0x68>)
 8010220:	6224      	str	r4, [r4, #32]
 8010222:	429c      	cmp	r4, r3
 8010224:	d006      	beq.n	8010234 <std+0x48>
 8010226:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801022a:	4294      	cmp	r4, r2
 801022c:	d002      	beq.n	8010234 <std+0x48>
 801022e:	33d0      	adds	r3, #208	@ 0xd0
 8010230:	429c      	cmp	r4, r3
 8010232:	d105      	bne.n	8010240 <std+0x54>
 8010234:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801023c:	f000 b99a 	b.w	8010574 <__retarget_lock_init_recursive>
 8010240:	bd10      	pop	{r4, pc}
 8010242:	bf00      	nop
 8010244:	080103b1 	.word	0x080103b1
 8010248:	080103d3 	.word	0x080103d3
 801024c:	0801040b 	.word	0x0801040b
 8010250:	0801042f 	.word	0x0801042f
 8010254:	20002628 	.word	0x20002628

08010258 <stdio_exit_handler>:
 8010258:	4a02      	ldr	r2, [pc, #8]	@ (8010264 <stdio_exit_handler+0xc>)
 801025a:	4903      	ldr	r1, [pc, #12]	@ (8010268 <stdio_exit_handler+0x10>)
 801025c:	4803      	ldr	r0, [pc, #12]	@ (801026c <stdio_exit_handler+0x14>)
 801025e:	f000 b869 	b.w	8010334 <_fwalk_sglue>
 8010262:	bf00      	nop
 8010264:	20000110 	.word	0x20000110
 8010268:	080127a9 	.word	0x080127a9
 801026c:	2000028c 	.word	0x2000028c

08010270 <cleanup_stdio>:
 8010270:	6841      	ldr	r1, [r0, #4]
 8010272:	4b0c      	ldr	r3, [pc, #48]	@ (80102a4 <cleanup_stdio+0x34>)
 8010274:	4299      	cmp	r1, r3
 8010276:	b510      	push	{r4, lr}
 8010278:	4604      	mov	r4, r0
 801027a:	d001      	beq.n	8010280 <cleanup_stdio+0x10>
 801027c:	f002 fa94 	bl	80127a8 <_fflush_r>
 8010280:	68a1      	ldr	r1, [r4, #8]
 8010282:	4b09      	ldr	r3, [pc, #36]	@ (80102a8 <cleanup_stdio+0x38>)
 8010284:	4299      	cmp	r1, r3
 8010286:	d002      	beq.n	801028e <cleanup_stdio+0x1e>
 8010288:	4620      	mov	r0, r4
 801028a:	f002 fa8d 	bl	80127a8 <_fflush_r>
 801028e:	68e1      	ldr	r1, [r4, #12]
 8010290:	4b06      	ldr	r3, [pc, #24]	@ (80102ac <cleanup_stdio+0x3c>)
 8010292:	4299      	cmp	r1, r3
 8010294:	d004      	beq.n	80102a0 <cleanup_stdio+0x30>
 8010296:	4620      	mov	r0, r4
 8010298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801029c:	f002 ba84 	b.w	80127a8 <_fflush_r>
 80102a0:	bd10      	pop	{r4, pc}
 80102a2:	bf00      	nop
 80102a4:	20002628 	.word	0x20002628
 80102a8:	20002690 	.word	0x20002690
 80102ac:	200026f8 	.word	0x200026f8

080102b0 <global_stdio_init.part.0>:
 80102b0:	b510      	push	{r4, lr}
 80102b2:	4b0b      	ldr	r3, [pc, #44]	@ (80102e0 <global_stdio_init.part.0+0x30>)
 80102b4:	4c0b      	ldr	r4, [pc, #44]	@ (80102e4 <global_stdio_init.part.0+0x34>)
 80102b6:	4a0c      	ldr	r2, [pc, #48]	@ (80102e8 <global_stdio_init.part.0+0x38>)
 80102b8:	601a      	str	r2, [r3, #0]
 80102ba:	4620      	mov	r0, r4
 80102bc:	2200      	movs	r2, #0
 80102be:	2104      	movs	r1, #4
 80102c0:	f7ff ff94 	bl	80101ec <std>
 80102c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80102c8:	2201      	movs	r2, #1
 80102ca:	2109      	movs	r1, #9
 80102cc:	f7ff ff8e 	bl	80101ec <std>
 80102d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80102d4:	2202      	movs	r2, #2
 80102d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102da:	2112      	movs	r1, #18
 80102dc:	f7ff bf86 	b.w	80101ec <std>
 80102e0:	20002760 	.word	0x20002760
 80102e4:	20002628 	.word	0x20002628
 80102e8:	08010259 	.word	0x08010259

080102ec <__sfp_lock_acquire>:
 80102ec:	4801      	ldr	r0, [pc, #4]	@ (80102f4 <__sfp_lock_acquire+0x8>)
 80102ee:	f000 b942 	b.w	8010576 <__retarget_lock_acquire_recursive>
 80102f2:	bf00      	nop
 80102f4:	20002769 	.word	0x20002769

080102f8 <__sfp_lock_release>:
 80102f8:	4801      	ldr	r0, [pc, #4]	@ (8010300 <__sfp_lock_release+0x8>)
 80102fa:	f000 b93d 	b.w	8010578 <__retarget_lock_release_recursive>
 80102fe:	bf00      	nop
 8010300:	20002769 	.word	0x20002769

08010304 <__sinit>:
 8010304:	b510      	push	{r4, lr}
 8010306:	4604      	mov	r4, r0
 8010308:	f7ff fff0 	bl	80102ec <__sfp_lock_acquire>
 801030c:	6a23      	ldr	r3, [r4, #32]
 801030e:	b11b      	cbz	r3, 8010318 <__sinit+0x14>
 8010310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010314:	f7ff bff0 	b.w	80102f8 <__sfp_lock_release>
 8010318:	4b04      	ldr	r3, [pc, #16]	@ (801032c <__sinit+0x28>)
 801031a:	6223      	str	r3, [r4, #32]
 801031c:	4b04      	ldr	r3, [pc, #16]	@ (8010330 <__sinit+0x2c>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1f5      	bne.n	8010310 <__sinit+0xc>
 8010324:	f7ff ffc4 	bl	80102b0 <global_stdio_init.part.0>
 8010328:	e7f2      	b.n	8010310 <__sinit+0xc>
 801032a:	bf00      	nop
 801032c:	08010271 	.word	0x08010271
 8010330:	20002760 	.word	0x20002760

08010334 <_fwalk_sglue>:
 8010334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010338:	4607      	mov	r7, r0
 801033a:	4688      	mov	r8, r1
 801033c:	4614      	mov	r4, r2
 801033e:	2600      	movs	r6, #0
 8010340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010344:	f1b9 0901 	subs.w	r9, r9, #1
 8010348:	d505      	bpl.n	8010356 <_fwalk_sglue+0x22>
 801034a:	6824      	ldr	r4, [r4, #0]
 801034c:	2c00      	cmp	r4, #0
 801034e:	d1f7      	bne.n	8010340 <_fwalk_sglue+0xc>
 8010350:	4630      	mov	r0, r6
 8010352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010356:	89ab      	ldrh	r3, [r5, #12]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d907      	bls.n	801036c <_fwalk_sglue+0x38>
 801035c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010360:	3301      	adds	r3, #1
 8010362:	d003      	beq.n	801036c <_fwalk_sglue+0x38>
 8010364:	4629      	mov	r1, r5
 8010366:	4638      	mov	r0, r7
 8010368:	47c0      	blx	r8
 801036a:	4306      	orrs	r6, r0
 801036c:	3568      	adds	r5, #104	@ 0x68
 801036e:	e7e9      	b.n	8010344 <_fwalk_sglue+0x10>

08010370 <siprintf>:
 8010370:	b40e      	push	{r1, r2, r3}
 8010372:	b500      	push	{lr}
 8010374:	b09c      	sub	sp, #112	@ 0x70
 8010376:	ab1d      	add	r3, sp, #116	@ 0x74
 8010378:	9002      	str	r0, [sp, #8]
 801037a:	9006      	str	r0, [sp, #24]
 801037c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010380:	4809      	ldr	r0, [pc, #36]	@ (80103a8 <siprintf+0x38>)
 8010382:	9107      	str	r1, [sp, #28]
 8010384:	9104      	str	r1, [sp, #16]
 8010386:	4909      	ldr	r1, [pc, #36]	@ (80103ac <siprintf+0x3c>)
 8010388:	f853 2b04 	ldr.w	r2, [r3], #4
 801038c:	9105      	str	r1, [sp, #20]
 801038e:	6800      	ldr	r0, [r0, #0]
 8010390:	9301      	str	r3, [sp, #4]
 8010392:	a902      	add	r1, sp, #8
 8010394:	f002 f888 	bl	80124a8 <_svfiprintf_r>
 8010398:	9b02      	ldr	r3, [sp, #8]
 801039a:	2200      	movs	r2, #0
 801039c:	701a      	strb	r2, [r3, #0]
 801039e:	b01c      	add	sp, #112	@ 0x70
 80103a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80103a4:	b003      	add	sp, #12
 80103a6:	4770      	bx	lr
 80103a8:	20000288 	.word	0x20000288
 80103ac:	ffff0208 	.word	0xffff0208

080103b0 <__sread>:
 80103b0:	b510      	push	{r4, lr}
 80103b2:	460c      	mov	r4, r1
 80103b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103b8:	f000 f87e 	bl	80104b8 <_read_r>
 80103bc:	2800      	cmp	r0, #0
 80103be:	bfab      	itete	ge
 80103c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80103c2:	89a3      	ldrhlt	r3, [r4, #12]
 80103c4:	181b      	addge	r3, r3, r0
 80103c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80103ca:	bfac      	ite	ge
 80103cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80103ce:	81a3      	strhlt	r3, [r4, #12]
 80103d0:	bd10      	pop	{r4, pc}

080103d2 <__swrite>:
 80103d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d6:	461f      	mov	r7, r3
 80103d8:	898b      	ldrh	r3, [r1, #12]
 80103da:	05db      	lsls	r3, r3, #23
 80103dc:	4605      	mov	r5, r0
 80103de:	460c      	mov	r4, r1
 80103e0:	4616      	mov	r6, r2
 80103e2:	d505      	bpl.n	80103f0 <__swrite+0x1e>
 80103e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e8:	2302      	movs	r3, #2
 80103ea:	2200      	movs	r2, #0
 80103ec:	f000 f852 	bl	8010494 <_lseek_r>
 80103f0:	89a3      	ldrh	r3, [r4, #12]
 80103f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80103fa:	81a3      	strh	r3, [r4, #12]
 80103fc:	4632      	mov	r2, r6
 80103fe:	463b      	mov	r3, r7
 8010400:	4628      	mov	r0, r5
 8010402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010406:	f000 b879 	b.w	80104fc <_write_r>

0801040a <__sseek>:
 801040a:	b510      	push	{r4, lr}
 801040c:	460c      	mov	r4, r1
 801040e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010412:	f000 f83f 	bl	8010494 <_lseek_r>
 8010416:	1c43      	adds	r3, r0, #1
 8010418:	89a3      	ldrh	r3, [r4, #12]
 801041a:	bf15      	itete	ne
 801041c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801041e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010426:	81a3      	strheq	r3, [r4, #12]
 8010428:	bf18      	it	ne
 801042a:	81a3      	strhne	r3, [r4, #12]
 801042c:	bd10      	pop	{r4, pc}

0801042e <__sclose>:
 801042e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010432:	f000 b81f 	b.w	8010474 <_close_r>

08010436 <memset>:
 8010436:	4402      	add	r2, r0
 8010438:	4603      	mov	r3, r0
 801043a:	4293      	cmp	r3, r2
 801043c:	d100      	bne.n	8010440 <memset+0xa>
 801043e:	4770      	bx	lr
 8010440:	f803 1b01 	strb.w	r1, [r3], #1
 8010444:	e7f9      	b.n	801043a <memset+0x4>

08010446 <strncmp>:
 8010446:	b510      	push	{r4, lr}
 8010448:	b16a      	cbz	r2, 8010466 <strncmp+0x20>
 801044a:	3901      	subs	r1, #1
 801044c:	1884      	adds	r4, r0, r2
 801044e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010452:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010456:	429a      	cmp	r2, r3
 8010458:	d103      	bne.n	8010462 <strncmp+0x1c>
 801045a:	42a0      	cmp	r0, r4
 801045c:	d001      	beq.n	8010462 <strncmp+0x1c>
 801045e:	2a00      	cmp	r2, #0
 8010460:	d1f5      	bne.n	801044e <strncmp+0x8>
 8010462:	1ad0      	subs	r0, r2, r3
 8010464:	bd10      	pop	{r4, pc}
 8010466:	4610      	mov	r0, r2
 8010468:	e7fc      	b.n	8010464 <strncmp+0x1e>
	...

0801046c <_localeconv_r>:
 801046c:	4800      	ldr	r0, [pc, #0]	@ (8010470 <_localeconv_r+0x4>)
 801046e:	4770      	bx	lr
 8010470:	2000020c 	.word	0x2000020c

08010474 <_close_r>:
 8010474:	b538      	push	{r3, r4, r5, lr}
 8010476:	4d06      	ldr	r5, [pc, #24]	@ (8010490 <_close_r+0x1c>)
 8010478:	2300      	movs	r3, #0
 801047a:	4604      	mov	r4, r0
 801047c:	4608      	mov	r0, r1
 801047e:	602b      	str	r3, [r5, #0]
 8010480:	f7f3 ff68 	bl	8004354 <_close>
 8010484:	1c43      	adds	r3, r0, #1
 8010486:	d102      	bne.n	801048e <_close_r+0x1a>
 8010488:	682b      	ldr	r3, [r5, #0]
 801048a:	b103      	cbz	r3, 801048e <_close_r+0x1a>
 801048c:	6023      	str	r3, [r4, #0]
 801048e:	bd38      	pop	{r3, r4, r5, pc}
 8010490:	20002764 	.word	0x20002764

08010494 <_lseek_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4d07      	ldr	r5, [pc, #28]	@ (80104b4 <_lseek_r+0x20>)
 8010498:	4604      	mov	r4, r0
 801049a:	4608      	mov	r0, r1
 801049c:	4611      	mov	r1, r2
 801049e:	2200      	movs	r2, #0
 80104a0:	602a      	str	r2, [r5, #0]
 80104a2:	461a      	mov	r2, r3
 80104a4:	f7f3 ff7d 	bl	80043a2 <_lseek>
 80104a8:	1c43      	adds	r3, r0, #1
 80104aa:	d102      	bne.n	80104b2 <_lseek_r+0x1e>
 80104ac:	682b      	ldr	r3, [r5, #0]
 80104ae:	b103      	cbz	r3, 80104b2 <_lseek_r+0x1e>
 80104b0:	6023      	str	r3, [r4, #0]
 80104b2:	bd38      	pop	{r3, r4, r5, pc}
 80104b4:	20002764 	.word	0x20002764

080104b8 <_read_r>:
 80104b8:	b538      	push	{r3, r4, r5, lr}
 80104ba:	4d07      	ldr	r5, [pc, #28]	@ (80104d8 <_read_r+0x20>)
 80104bc:	4604      	mov	r4, r0
 80104be:	4608      	mov	r0, r1
 80104c0:	4611      	mov	r1, r2
 80104c2:	2200      	movs	r2, #0
 80104c4:	602a      	str	r2, [r5, #0]
 80104c6:	461a      	mov	r2, r3
 80104c8:	f7f3 ff0b 	bl	80042e2 <_read>
 80104cc:	1c43      	adds	r3, r0, #1
 80104ce:	d102      	bne.n	80104d6 <_read_r+0x1e>
 80104d0:	682b      	ldr	r3, [r5, #0]
 80104d2:	b103      	cbz	r3, 80104d6 <_read_r+0x1e>
 80104d4:	6023      	str	r3, [r4, #0]
 80104d6:	bd38      	pop	{r3, r4, r5, pc}
 80104d8:	20002764 	.word	0x20002764

080104dc <_sbrk_r>:
 80104dc:	b538      	push	{r3, r4, r5, lr}
 80104de:	4d06      	ldr	r5, [pc, #24]	@ (80104f8 <_sbrk_r+0x1c>)
 80104e0:	2300      	movs	r3, #0
 80104e2:	4604      	mov	r4, r0
 80104e4:	4608      	mov	r0, r1
 80104e6:	602b      	str	r3, [r5, #0]
 80104e8:	f7f3 ff68 	bl	80043bc <_sbrk>
 80104ec:	1c43      	adds	r3, r0, #1
 80104ee:	d102      	bne.n	80104f6 <_sbrk_r+0x1a>
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	b103      	cbz	r3, 80104f6 <_sbrk_r+0x1a>
 80104f4:	6023      	str	r3, [r4, #0]
 80104f6:	bd38      	pop	{r3, r4, r5, pc}
 80104f8:	20002764 	.word	0x20002764

080104fc <_write_r>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	4d07      	ldr	r5, [pc, #28]	@ (801051c <_write_r+0x20>)
 8010500:	4604      	mov	r4, r0
 8010502:	4608      	mov	r0, r1
 8010504:	4611      	mov	r1, r2
 8010506:	2200      	movs	r2, #0
 8010508:	602a      	str	r2, [r5, #0]
 801050a:	461a      	mov	r2, r3
 801050c:	f7f3 ff06 	bl	800431c <_write>
 8010510:	1c43      	adds	r3, r0, #1
 8010512:	d102      	bne.n	801051a <_write_r+0x1e>
 8010514:	682b      	ldr	r3, [r5, #0]
 8010516:	b103      	cbz	r3, 801051a <_write_r+0x1e>
 8010518:	6023      	str	r3, [r4, #0]
 801051a:	bd38      	pop	{r3, r4, r5, pc}
 801051c:	20002764 	.word	0x20002764

08010520 <__errno>:
 8010520:	4b01      	ldr	r3, [pc, #4]	@ (8010528 <__errno+0x8>)
 8010522:	6818      	ldr	r0, [r3, #0]
 8010524:	4770      	bx	lr
 8010526:	bf00      	nop
 8010528:	20000288 	.word	0x20000288

0801052c <__libc_init_array>:
 801052c:	b570      	push	{r4, r5, r6, lr}
 801052e:	4d0d      	ldr	r5, [pc, #52]	@ (8010564 <__libc_init_array+0x38>)
 8010530:	4c0d      	ldr	r4, [pc, #52]	@ (8010568 <__libc_init_array+0x3c>)
 8010532:	1b64      	subs	r4, r4, r5
 8010534:	10a4      	asrs	r4, r4, #2
 8010536:	2600      	movs	r6, #0
 8010538:	42a6      	cmp	r6, r4
 801053a:	d109      	bne.n	8010550 <__libc_init_array+0x24>
 801053c:	4d0b      	ldr	r5, [pc, #44]	@ (801056c <__libc_init_array+0x40>)
 801053e:	4c0c      	ldr	r4, [pc, #48]	@ (8010570 <__libc_init_array+0x44>)
 8010540:	f004 fe7e 	bl	8015240 <_init>
 8010544:	1b64      	subs	r4, r4, r5
 8010546:	10a4      	asrs	r4, r4, #2
 8010548:	2600      	movs	r6, #0
 801054a:	42a6      	cmp	r6, r4
 801054c:	d105      	bne.n	801055a <__libc_init_array+0x2e>
 801054e:	bd70      	pop	{r4, r5, r6, pc}
 8010550:	f855 3b04 	ldr.w	r3, [r5], #4
 8010554:	4798      	blx	r3
 8010556:	3601      	adds	r6, #1
 8010558:	e7ee      	b.n	8010538 <__libc_init_array+0xc>
 801055a:	f855 3b04 	ldr.w	r3, [r5], #4
 801055e:	4798      	blx	r3
 8010560:	3601      	adds	r6, #1
 8010562:	e7f2      	b.n	801054a <__libc_init_array+0x1e>
 8010564:	08015a90 	.word	0x08015a90
 8010568:	08015a90 	.word	0x08015a90
 801056c:	08015a90 	.word	0x08015a90
 8010570:	08015a94 	.word	0x08015a94

08010574 <__retarget_lock_init_recursive>:
 8010574:	4770      	bx	lr

08010576 <__retarget_lock_acquire_recursive>:
 8010576:	4770      	bx	lr

08010578 <__retarget_lock_release_recursive>:
 8010578:	4770      	bx	lr

0801057a <memcpy>:
 801057a:	440a      	add	r2, r1
 801057c:	4291      	cmp	r1, r2
 801057e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010582:	d100      	bne.n	8010586 <memcpy+0xc>
 8010584:	4770      	bx	lr
 8010586:	b510      	push	{r4, lr}
 8010588:	f811 4b01 	ldrb.w	r4, [r1], #1
 801058c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010590:	4291      	cmp	r1, r2
 8010592:	d1f9      	bne.n	8010588 <memcpy+0xe>
 8010594:	bd10      	pop	{r4, pc}
	...

08010598 <nan>:
 8010598:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80105a0 <nan+0x8>
 801059c:	4770      	bx	lr
 801059e:	bf00      	nop
 80105a0:	00000000 	.word	0x00000000
 80105a4:	7ff80000 	.word	0x7ff80000

080105a8 <nanf>:
 80105a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80105b0 <nanf+0x8>
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	7fc00000 	.word	0x7fc00000

080105b4 <quorem>:
 80105b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b8:	6903      	ldr	r3, [r0, #16]
 80105ba:	690c      	ldr	r4, [r1, #16]
 80105bc:	42a3      	cmp	r3, r4
 80105be:	4607      	mov	r7, r0
 80105c0:	db7e      	blt.n	80106c0 <quorem+0x10c>
 80105c2:	3c01      	subs	r4, #1
 80105c4:	f101 0814 	add.w	r8, r1, #20
 80105c8:	00a3      	lsls	r3, r4, #2
 80105ca:	f100 0514 	add.w	r5, r0, #20
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105d4:	9301      	str	r3, [sp, #4]
 80105d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80105da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105de:	3301      	adds	r3, #1
 80105e0:	429a      	cmp	r2, r3
 80105e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80105ea:	d32e      	bcc.n	801064a <quorem+0x96>
 80105ec:	f04f 0a00 	mov.w	sl, #0
 80105f0:	46c4      	mov	ip, r8
 80105f2:	46ae      	mov	lr, r5
 80105f4:	46d3      	mov	fp, sl
 80105f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80105fa:	b298      	uxth	r0, r3
 80105fc:	fb06 a000 	mla	r0, r6, r0, sl
 8010600:	0c02      	lsrs	r2, r0, #16
 8010602:	0c1b      	lsrs	r3, r3, #16
 8010604:	fb06 2303 	mla	r3, r6, r3, r2
 8010608:	f8de 2000 	ldr.w	r2, [lr]
 801060c:	b280      	uxth	r0, r0
 801060e:	b292      	uxth	r2, r2
 8010610:	1a12      	subs	r2, r2, r0
 8010612:	445a      	add	r2, fp
 8010614:	f8de 0000 	ldr.w	r0, [lr]
 8010618:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801061c:	b29b      	uxth	r3, r3
 801061e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010622:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010626:	b292      	uxth	r2, r2
 8010628:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801062c:	45e1      	cmp	r9, ip
 801062e:	f84e 2b04 	str.w	r2, [lr], #4
 8010632:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010636:	d2de      	bcs.n	80105f6 <quorem+0x42>
 8010638:	9b00      	ldr	r3, [sp, #0]
 801063a:	58eb      	ldr	r3, [r5, r3]
 801063c:	b92b      	cbnz	r3, 801064a <quorem+0x96>
 801063e:	9b01      	ldr	r3, [sp, #4]
 8010640:	3b04      	subs	r3, #4
 8010642:	429d      	cmp	r5, r3
 8010644:	461a      	mov	r2, r3
 8010646:	d32f      	bcc.n	80106a8 <quorem+0xf4>
 8010648:	613c      	str	r4, [r7, #16]
 801064a:	4638      	mov	r0, r7
 801064c:	f001 fc5a 	bl	8011f04 <__mcmp>
 8010650:	2800      	cmp	r0, #0
 8010652:	db25      	blt.n	80106a0 <quorem+0xec>
 8010654:	4629      	mov	r1, r5
 8010656:	2000      	movs	r0, #0
 8010658:	f858 2b04 	ldr.w	r2, [r8], #4
 801065c:	f8d1 c000 	ldr.w	ip, [r1]
 8010660:	fa1f fe82 	uxth.w	lr, r2
 8010664:	fa1f f38c 	uxth.w	r3, ip
 8010668:	eba3 030e 	sub.w	r3, r3, lr
 801066c:	4403      	add	r3, r0
 801066e:	0c12      	lsrs	r2, r2, #16
 8010670:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010674:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010678:	b29b      	uxth	r3, r3
 801067a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801067e:	45c1      	cmp	r9, r8
 8010680:	f841 3b04 	str.w	r3, [r1], #4
 8010684:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010688:	d2e6      	bcs.n	8010658 <quorem+0xa4>
 801068a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801068e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010692:	b922      	cbnz	r2, 801069e <quorem+0xea>
 8010694:	3b04      	subs	r3, #4
 8010696:	429d      	cmp	r5, r3
 8010698:	461a      	mov	r2, r3
 801069a:	d30b      	bcc.n	80106b4 <quorem+0x100>
 801069c:	613c      	str	r4, [r7, #16]
 801069e:	3601      	adds	r6, #1
 80106a0:	4630      	mov	r0, r6
 80106a2:	b003      	add	sp, #12
 80106a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a8:	6812      	ldr	r2, [r2, #0]
 80106aa:	3b04      	subs	r3, #4
 80106ac:	2a00      	cmp	r2, #0
 80106ae:	d1cb      	bne.n	8010648 <quorem+0x94>
 80106b0:	3c01      	subs	r4, #1
 80106b2:	e7c6      	b.n	8010642 <quorem+0x8e>
 80106b4:	6812      	ldr	r2, [r2, #0]
 80106b6:	3b04      	subs	r3, #4
 80106b8:	2a00      	cmp	r2, #0
 80106ba:	d1ef      	bne.n	801069c <quorem+0xe8>
 80106bc:	3c01      	subs	r4, #1
 80106be:	e7ea      	b.n	8010696 <quorem+0xe2>
 80106c0:	2000      	movs	r0, #0
 80106c2:	e7ee      	b.n	80106a2 <quorem+0xee>
 80106c4:	0000      	movs	r0, r0
	...

080106c8 <_dtoa_r>:
 80106c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106cc:	69c7      	ldr	r7, [r0, #28]
 80106ce:	b099      	sub	sp, #100	@ 0x64
 80106d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80106d4:	ec55 4b10 	vmov	r4, r5, d0
 80106d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80106da:	9109      	str	r1, [sp, #36]	@ 0x24
 80106dc:	4683      	mov	fp, r0
 80106de:	920e      	str	r2, [sp, #56]	@ 0x38
 80106e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80106e2:	b97f      	cbnz	r7, 8010704 <_dtoa_r+0x3c>
 80106e4:	2010      	movs	r0, #16
 80106e6:	f7fe f849 	bl	800e77c <malloc>
 80106ea:	4602      	mov	r2, r0
 80106ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80106f0:	b920      	cbnz	r0, 80106fc <_dtoa_r+0x34>
 80106f2:	4ba7      	ldr	r3, [pc, #668]	@ (8010990 <_dtoa_r+0x2c8>)
 80106f4:	21ef      	movs	r1, #239	@ 0xef
 80106f6:	48a7      	ldr	r0, [pc, #668]	@ (8010994 <_dtoa_r+0x2cc>)
 80106f8:	f002 f898 	bl	801282c <__assert_func>
 80106fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010700:	6007      	str	r7, [r0, #0]
 8010702:	60c7      	str	r7, [r0, #12]
 8010704:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010708:	6819      	ldr	r1, [r3, #0]
 801070a:	b159      	cbz	r1, 8010724 <_dtoa_r+0x5c>
 801070c:	685a      	ldr	r2, [r3, #4]
 801070e:	604a      	str	r2, [r1, #4]
 8010710:	2301      	movs	r3, #1
 8010712:	4093      	lsls	r3, r2
 8010714:	608b      	str	r3, [r1, #8]
 8010716:	4658      	mov	r0, fp
 8010718:	f001 f970 	bl	80119fc <_Bfree>
 801071c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010720:	2200      	movs	r2, #0
 8010722:	601a      	str	r2, [r3, #0]
 8010724:	1e2b      	subs	r3, r5, #0
 8010726:	bfb9      	ittee	lt
 8010728:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801072c:	9303      	strlt	r3, [sp, #12]
 801072e:	2300      	movge	r3, #0
 8010730:	6033      	strge	r3, [r6, #0]
 8010732:	9f03      	ldr	r7, [sp, #12]
 8010734:	4b98      	ldr	r3, [pc, #608]	@ (8010998 <_dtoa_r+0x2d0>)
 8010736:	bfbc      	itt	lt
 8010738:	2201      	movlt	r2, #1
 801073a:	6032      	strlt	r2, [r6, #0]
 801073c:	43bb      	bics	r3, r7
 801073e:	d112      	bne.n	8010766 <_dtoa_r+0x9e>
 8010740:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010742:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010746:	6013      	str	r3, [r2, #0]
 8010748:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801074c:	4323      	orrs	r3, r4
 801074e:	f000 854d 	beq.w	80111ec <_dtoa_r+0xb24>
 8010752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010754:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80109ac <_dtoa_r+0x2e4>
 8010758:	2b00      	cmp	r3, #0
 801075a:	f000 854f 	beq.w	80111fc <_dtoa_r+0xb34>
 801075e:	f10a 0303 	add.w	r3, sl, #3
 8010762:	f000 bd49 	b.w	80111f8 <_dtoa_r+0xb30>
 8010766:	ed9d 7b02 	vldr	d7, [sp, #8]
 801076a:	2200      	movs	r2, #0
 801076c:	ec51 0b17 	vmov	r0, r1, d7
 8010770:	2300      	movs	r3, #0
 8010772:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010776:	f7f0 f9c7 	bl	8000b08 <__aeabi_dcmpeq>
 801077a:	4680      	mov	r8, r0
 801077c:	b158      	cbz	r0, 8010796 <_dtoa_r+0xce>
 801077e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010780:	2301      	movs	r3, #1
 8010782:	6013      	str	r3, [r2, #0]
 8010784:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010786:	b113      	cbz	r3, 801078e <_dtoa_r+0xc6>
 8010788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801078a:	4b84      	ldr	r3, [pc, #528]	@ (801099c <_dtoa_r+0x2d4>)
 801078c:	6013      	str	r3, [r2, #0]
 801078e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80109b0 <_dtoa_r+0x2e8>
 8010792:	f000 bd33 	b.w	80111fc <_dtoa_r+0xb34>
 8010796:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801079a:	aa16      	add	r2, sp, #88	@ 0x58
 801079c:	a917      	add	r1, sp, #92	@ 0x5c
 801079e:	4658      	mov	r0, fp
 80107a0:	f001 fcd0 	bl	8012144 <__d2b>
 80107a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80107a8:	4681      	mov	r9, r0
 80107aa:	2e00      	cmp	r6, #0
 80107ac:	d077      	beq.n	801089e <_dtoa_r+0x1d6>
 80107ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80107b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80107bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80107c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80107c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80107c8:	4619      	mov	r1, r3
 80107ca:	2200      	movs	r2, #0
 80107cc:	4b74      	ldr	r3, [pc, #464]	@ (80109a0 <_dtoa_r+0x2d8>)
 80107ce:	f7ef fd7b 	bl	80002c8 <__aeabi_dsub>
 80107d2:	a369      	add	r3, pc, #420	@ (adr r3, 8010978 <_dtoa_r+0x2b0>)
 80107d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d8:	f7ef ff2e 	bl	8000638 <__aeabi_dmul>
 80107dc:	a368      	add	r3, pc, #416	@ (adr r3, 8010980 <_dtoa_r+0x2b8>)
 80107de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e2:	f7ef fd73 	bl	80002cc <__adddf3>
 80107e6:	4604      	mov	r4, r0
 80107e8:	4630      	mov	r0, r6
 80107ea:	460d      	mov	r5, r1
 80107ec:	f7ef feba 	bl	8000564 <__aeabi_i2d>
 80107f0:	a365      	add	r3, pc, #404	@ (adr r3, 8010988 <_dtoa_r+0x2c0>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	f7ef ff1f 	bl	8000638 <__aeabi_dmul>
 80107fa:	4602      	mov	r2, r0
 80107fc:	460b      	mov	r3, r1
 80107fe:	4620      	mov	r0, r4
 8010800:	4629      	mov	r1, r5
 8010802:	f7ef fd63 	bl	80002cc <__adddf3>
 8010806:	4604      	mov	r4, r0
 8010808:	460d      	mov	r5, r1
 801080a:	f7f0 f9c5 	bl	8000b98 <__aeabi_d2iz>
 801080e:	2200      	movs	r2, #0
 8010810:	4607      	mov	r7, r0
 8010812:	2300      	movs	r3, #0
 8010814:	4620      	mov	r0, r4
 8010816:	4629      	mov	r1, r5
 8010818:	f7f0 f980 	bl	8000b1c <__aeabi_dcmplt>
 801081c:	b140      	cbz	r0, 8010830 <_dtoa_r+0x168>
 801081e:	4638      	mov	r0, r7
 8010820:	f7ef fea0 	bl	8000564 <__aeabi_i2d>
 8010824:	4622      	mov	r2, r4
 8010826:	462b      	mov	r3, r5
 8010828:	f7f0 f96e 	bl	8000b08 <__aeabi_dcmpeq>
 801082c:	b900      	cbnz	r0, 8010830 <_dtoa_r+0x168>
 801082e:	3f01      	subs	r7, #1
 8010830:	2f16      	cmp	r7, #22
 8010832:	d851      	bhi.n	80108d8 <_dtoa_r+0x210>
 8010834:	4b5b      	ldr	r3, [pc, #364]	@ (80109a4 <_dtoa_r+0x2dc>)
 8010836:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801083a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010842:	f7f0 f96b 	bl	8000b1c <__aeabi_dcmplt>
 8010846:	2800      	cmp	r0, #0
 8010848:	d048      	beq.n	80108dc <_dtoa_r+0x214>
 801084a:	3f01      	subs	r7, #1
 801084c:	2300      	movs	r3, #0
 801084e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010850:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010852:	1b9b      	subs	r3, r3, r6
 8010854:	1e5a      	subs	r2, r3, #1
 8010856:	bf44      	itt	mi
 8010858:	f1c3 0801 	rsbmi	r8, r3, #1
 801085c:	2300      	movmi	r3, #0
 801085e:	9208      	str	r2, [sp, #32]
 8010860:	bf54      	ite	pl
 8010862:	f04f 0800 	movpl.w	r8, #0
 8010866:	9308      	strmi	r3, [sp, #32]
 8010868:	2f00      	cmp	r7, #0
 801086a:	db39      	blt.n	80108e0 <_dtoa_r+0x218>
 801086c:	9b08      	ldr	r3, [sp, #32]
 801086e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010870:	443b      	add	r3, r7
 8010872:	9308      	str	r3, [sp, #32]
 8010874:	2300      	movs	r3, #0
 8010876:	930a      	str	r3, [sp, #40]	@ 0x28
 8010878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801087a:	2b09      	cmp	r3, #9
 801087c:	d864      	bhi.n	8010948 <_dtoa_r+0x280>
 801087e:	2b05      	cmp	r3, #5
 8010880:	bfc4      	itt	gt
 8010882:	3b04      	subgt	r3, #4
 8010884:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010888:	f1a3 0302 	sub.w	r3, r3, #2
 801088c:	bfcc      	ite	gt
 801088e:	2400      	movgt	r4, #0
 8010890:	2401      	movle	r4, #1
 8010892:	2b03      	cmp	r3, #3
 8010894:	d863      	bhi.n	801095e <_dtoa_r+0x296>
 8010896:	e8df f003 	tbb	[pc, r3]
 801089a:	372a      	.short	0x372a
 801089c:	5535      	.short	0x5535
 801089e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80108a2:	441e      	add	r6, r3
 80108a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80108a8:	2b20      	cmp	r3, #32
 80108aa:	bfc1      	itttt	gt
 80108ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80108b0:	409f      	lslgt	r7, r3
 80108b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80108b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80108ba:	bfd6      	itet	le
 80108bc:	f1c3 0320 	rsble	r3, r3, #32
 80108c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80108c4:	fa04 f003 	lslle.w	r0, r4, r3
 80108c8:	f7ef fe3c 	bl	8000544 <__aeabi_ui2d>
 80108cc:	2201      	movs	r2, #1
 80108ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80108d2:	3e01      	subs	r6, #1
 80108d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80108d6:	e777      	b.n	80107c8 <_dtoa_r+0x100>
 80108d8:	2301      	movs	r3, #1
 80108da:	e7b8      	b.n	801084e <_dtoa_r+0x186>
 80108dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80108de:	e7b7      	b.n	8010850 <_dtoa_r+0x188>
 80108e0:	427b      	negs	r3, r7
 80108e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80108e4:	2300      	movs	r3, #0
 80108e6:	eba8 0807 	sub.w	r8, r8, r7
 80108ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80108ec:	e7c4      	b.n	8010878 <_dtoa_r+0x1b0>
 80108ee:	2300      	movs	r3, #0
 80108f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	dc35      	bgt.n	8010964 <_dtoa_r+0x29c>
 80108f8:	2301      	movs	r3, #1
 80108fa:	9300      	str	r3, [sp, #0]
 80108fc:	9307      	str	r3, [sp, #28]
 80108fe:	461a      	mov	r2, r3
 8010900:	920e      	str	r2, [sp, #56]	@ 0x38
 8010902:	e00b      	b.n	801091c <_dtoa_r+0x254>
 8010904:	2301      	movs	r3, #1
 8010906:	e7f3      	b.n	80108f0 <_dtoa_r+0x228>
 8010908:	2300      	movs	r3, #0
 801090a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801090c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801090e:	18fb      	adds	r3, r7, r3
 8010910:	9300      	str	r3, [sp, #0]
 8010912:	3301      	adds	r3, #1
 8010914:	2b01      	cmp	r3, #1
 8010916:	9307      	str	r3, [sp, #28]
 8010918:	bfb8      	it	lt
 801091a:	2301      	movlt	r3, #1
 801091c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010920:	2100      	movs	r1, #0
 8010922:	2204      	movs	r2, #4
 8010924:	f102 0514 	add.w	r5, r2, #20
 8010928:	429d      	cmp	r5, r3
 801092a:	d91f      	bls.n	801096c <_dtoa_r+0x2a4>
 801092c:	6041      	str	r1, [r0, #4]
 801092e:	4658      	mov	r0, fp
 8010930:	f001 f824 	bl	801197c <_Balloc>
 8010934:	4682      	mov	sl, r0
 8010936:	2800      	cmp	r0, #0
 8010938:	d13c      	bne.n	80109b4 <_dtoa_r+0x2ec>
 801093a:	4b1b      	ldr	r3, [pc, #108]	@ (80109a8 <_dtoa_r+0x2e0>)
 801093c:	4602      	mov	r2, r0
 801093e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010942:	e6d8      	b.n	80106f6 <_dtoa_r+0x2e>
 8010944:	2301      	movs	r3, #1
 8010946:	e7e0      	b.n	801090a <_dtoa_r+0x242>
 8010948:	2401      	movs	r4, #1
 801094a:	2300      	movs	r3, #0
 801094c:	9309      	str	r3, [sp, #36]	@ 0x24
 801094e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010950:	f04f 33ff 	mov.w	r3, #4294967295
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	9307      	str	r3, [sp, #28]
 8010958:	2200      	movs	r2, #0
 801095a:	2312      	movs	r3, #18
 801095c:	e7d0      	b.n	8010900 <_dtoa_r+0x238>
 801095e:	2301      	movs	r3, #1
 8010960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010962:	e7f5      	b.n	8010950 <_dtoa_r+0x288>
 8010964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	9307      	str	r3, [sp, #28]
 801096a:	e7d7      	b.n	801091c <_dtoa_r+0x254>
 801096c:	3101      	adds	r1, #1
 801096e:	0052      	lsls	r2, r2, #1
 8010970:	e7d8      	b.n	8010924 <_dtoa_r+0x25c>
 8010972:	bf00      	nop
 8010974:	f3af 8000 	nop.w
 8010978:	636f4361 	.word	0x636f4361
 801097c:	3fd287a7 	.word	0x3fd287a7
 8010980:	8b60c8b3 	.word	0x8b60c8b3
 8010984:	3fc68a28 	.word	0x3fc68a28
 8010988:	509f79fb 	.word	0x509f79fb
 801098c:	3fd34413 	.word	0x3fd34413
 8010990:	08015486 	.word	0x08015486
 8010994:	0801549d 	.word	0x0801549d
 8010998:	7ff00000 	.word	0x7ff00000
 801099c:	08015449 	.word	0x08015449
 80109a0:	3ff80000 	.word	0x3ff80000
 80109a4:	080155f8 	.word	0x080155f8
 80109a8:	080154f5 	.word	0x080154f5
 80109ac:	08015482 	.word	0x08015482
 80109b0:	08015448 	.word	0x08015448
 80109b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80109b8:	6018      	str	r0, [r3, #0]
 80109ba:	9b07      	ldr	r3, [sp, #28]
 80109bc:	2b0e      	cmp	r3, #14
 80109be:	f200 80a4 	bhi.w	8010b0a <_dtoa_r+0x442>
 80109c2:	2c00      	cmp	r4, #0
 80109c4:	f000 80a1 	beq.w	8010b0a <_dtoa_r+0x442>
 80109c8:	2f00      	cmp	r7, #0
 80109ca:	dd33      	ble.n	8010a34 <_dtoa_r+0x36c>
 80109cc:	4bad      	ldr	r3, [pc, #692]	@ (8010c84 <_dtoa_r+0x5bc>)
 80109ce:	f007 020f 	and.w	r2, r7, #15
 80109d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109d6:	ed93 7b00 	vldr	d7, [r3]
 80109da:	05f8      	lsls	r0, r7, #23
 80109dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80109e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80109e4:	d516      	bpl.n	8010a14 <_dtoa_r+0x34c>
 80109e6:	4ba8      	ldr	r3, [pc, #672]	@ (8010c88 <_dtoa_r+0x5c0>)
 80109e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80109ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80109f0:	f7ef ff4c 	bl	800088c <__aeabi_ddiv>
 80109f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109f8:	f004 040f 	and.w	r4, r4, #15
 80109fc:	2603      	movs	r6, #3
 80109fe:	4da2      	ldr	r5, [pc, #648]	@ (8010c88 <_dtoa_r+0x5c0>)
 8010a00:	b954      	cbnz	r4, 8010a18 <_dtoa_r+0x350>
 8010a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a0a:	f7ef ff3f 	bl	800088c <__aeabi_ddiv>
 8010a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a12:	e028      	b.n	8010a66 <_dtoa_r+0x39e>
 8010a14:	2602      	movs	r6, #2
 8010a16:	e7f2      	b.n	80109fe <_dtoa_r+0x336>
 8010a18:	07e1      	lsls	r1, r4, #31
 8010a1a:	d508      	bpl.n	8010a2e <_dtoa_r+0x366>
 8010a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a24:	f7ef fe08 	bl	8000638 <__aeabi_dmul>
 8010a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a2c:	3601      	adds	r6, #1
 8010a2e:	1064      	asrs	r4, r4, #1
 8010a30:	3508      	adds	r5, #8
 8010a32:	e7e5      	b.n	8010a00 <_dtoa_r+0x338>
 8010a34:	f000 80d2 	beq.w	8010bdc <_dtoa_r+0x514>
 8010a38:	427c      	negs	r4, r7
 8010a3a:	4b92      	ldr	r3, [pc, #584]	@ (8010c84 <_dtoa_r+0x5bc>)
 8010a3c:	4d92      	ldr	r5, [pc, #584]	@ (8010c88 <_dtoa_r+0x5c0>)
 8010a3e:	f004 020f 	and.w	r2, r4, #15
 8010a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010a4e:	f7ef fdf3 	bl	8000638 <__aeabi_dmul>
 8010a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a56:	1124      	asrs	r4, r4, #4
 8010a58:	2300      	movs	r3, #0
 8010a5a:	2602      	movs	r6, #2
 8010a5c:	2c00      	cmp	r4, #0
 8010a5e:	f040 80b2 	bne.w	8010bc6 <_dtoa_r+0x4fe>
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1d3      	bne.n	8010a0e <_dtoa_r+0x346>
 8010a66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f000 80b7 	beq.w	8010be0 <_dtoa_r+0x518>
 8010a72:	4b86      	ldr	r3, [pc, #536]	@ (8010c8c <_dtoa_r+0x5c4>)
 8010a74:	2200      	movs	r2, #0
 8010a76:	4620      	mov	r0, r4
 8010a78:	4629      	mov	r1, r5
 8010a7a:	f7f0 f84f 	bl	8000b1c <__aeabi_dcmplt>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	f000 80ae 	beq.w	8010be0 <_dtoa_r+0x518>
 8010a84:	9b07      	ldr	r3, [sp, #28]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f000 80aa 	beq.w	8010be0 <_dtoa_r+0x518>
 8010a8c:	9b00      	ldr	r3, [sp, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	dd37      	ble.n	8010b02 <_dtoa_r+0x43a>
 8010a92:	1e7b      	subs	r3, r7, #1
 8010a94:	9304      	str	r3, [sp, #16]
 8010a96:	4620      	mov	r0, r4
 8010a98:	4b7d      	ldr	r3, [pc, #500]	@ (8010c90 <_dtoa_r+0x5c8>)
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	f7ef fdcb 	bl	8000638 <__aeabi_dmul>
 8010aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010aa6:	9c00      	ldr	r4, [sp, #0]
 8010aa8:	3601      	adds	r6, #1
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f7ef fd5a 	bl	8000564 <__aeabi_i2d>
 8010ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ab4:	f7ef fdc0 	bl	8000638 <__aeabi_dmul>
 8010ab8:	4b76      	ldr	r3, [pc, #472]	@ (8010c94 <_dtoa_r+0x5cc>)
 8010aba:	2200      	movs	r2, #0
 8010abc:	f7ef fc06 	bl	80002cc <__adddf3>
 8010ac0:	4605      	mov	r5, r0
 8010ac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010ac6:	2c00      	cmp	r4, #0
 8010ac8:	f040 808d 	bne.w	8010be6 <_dtoa_r+0x51e>
 8010acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ad0:	4b71      	ldr	r3, [pc, #452]	@ (8010c98 <_dtoa_r+0x5d0>)
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f7ef fbf8 	bl	80002c8 <__aeabi_dsub>
 8010ad8:	4602      	mov	r2, r0
 8010ada:	460b      	mov	r3, r1
 8010adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ae0:	462a      	mov	r2, r5
 8010ae2:	4633      	mov	r3, r6
 8010ae4:	f7f0 f838 	bl	8000b58 <__aeabi_dcmpgt>
 8010ae8:	2800      	cmp	r0, #0
 8010aea:	f040 828b 	bne.w	8011004 <_dtoa_r+0x93c>
 8010aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010af2:	462a      	mov	r2, r5
 8010af4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010af8:	f7f0 f810 	bl	8000b1c <__aeabi_dcmplt>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	f040 8128 	bne.w	8010d52 <_dtoa_r+0x68a>
 8010b02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010b0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	f2c0 815a 	blt.w	8010dc6 <_dtoa_r+0x6fe>
 8010b12:	2f0e      	cmp	r7, #14
 8010b14:	f300 8157 	bgt.w	8010dc6 <_dtoa_r+0x6fe>
 8010b18:	4b5a      	ldr	r3, [pc, #360]	@ (8010c84 <_dtoa_r+0x5bc>)
 8010b1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010b1e:	ed93 7b00 	vldr	d7, [r3]
 8010b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	ed8d 7b00 	vstr	d7, [sp]
 8010b2a:	da03      	bge.n	8010b34 <_dtoa_r+0x46c>
 8010b2c:	9b07      	ldr	r3, [sp, #28]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f340 8101 	ble.w	8010d36 <_dtoa_r+0x66e>
 8010b34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010b38:	4656      	mov	r6, sl
 8010b3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b3e:	4620      	mov	r0, r4
 8010b40:	4629      	mov	r1, r5
 8010b42:	f7ef fea3 	bl	800088c <__aeabi_ddiv>
 8010b46:	f7f0 f827 	bl	8000b98 <__aeabi_d2iz>
 8010b4a:	4680      	mov	r8, r0
 8010b4c:	f7ef fd0a 	bl	8000564 <__aeabi_i2d>
 8010b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b54:	f7ef fd70 	bl	8000638 <__aeabi_dmul>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	4629      	mov	r1, r5
 8010b60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010b64:	f7ef fbb0 	bl	80002c8 <__aeabi_dsub>
 8010b68:	f806 4b01 	strb.w	r4, [r6], #1
 8010b6c:	9d07      	ldr	r5, [sp, #28]
 8010b6e:	eba6 040a 	sub.w	r4, r6, sl
 8010b72:	42a5      	cmp	r5, r4
 8010b74:	4602      	mov	r2, r0
 8010b76:	460b      	mov	r3, r1
 8010b78:	f040 8117 	bne.w	8010daa <_dtoa_r+0x6e2>
 8010b7c:	f7ef fba6 	bl	80002cc <__adddf3>
 8010b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b84:	4604      	mov	r4, r0
 8010b86:	460d      	mov	r5, r1
 8010b88:	f7ef ffe6 	bl	8000b58 <__aeabi_dcmpgt>
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	f040 80f9 	bne.w	8010d84 <_dtoa_r+0x6bc>
 8010b92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b96:	4620      	mov	r0, r4
 8010b98:	4629      	mov	r1, r5
 8010b9a:	f7ef ffb5 	bl	8000b08 <__aeabi_dcmpeq>
 8010b9e:	b118      	cbz	r0, 8010ba8 <_dtoa_r+0x4e0>
 8010ba0:	f018 0f01 	tst.w	r8, #1
 8010ba4:	f040 80ee 	bne.w	8010d84 <_dtoa_r+0x6bc>
 8010ba8:	4649      	mov	r1, r9
 8010baa:	4658      	mov	r0, fp
 8010bac:	f000 ff26 	bl	80119fc <_Bfree>
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	7033      	strb	r3, [r6, #0]
 8010bb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010bb6:	3701      	adds	r7, #1
 8010bb8:	601f      	str	r7, [r3, #0]
 8010bba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f000 831d 	beq.w	80111fc <_dtoa_r+0xb34>
 8010bc2:	601e      	str	r6, [r3, #0]
 8010bc4:	e31a      	b.n	80111fc <_dtoa_r+0xb34>
 8010bc6:	07e2      	lsls	r2, r4, #31
 8010bc8:	d505      	bpl.n	8010bd6 <_dtoa_r+0x50e>
 8010bca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010bce:	f7ef fd33 	bl	8000638 <__aeabi_dmul>
 8010bd2:	3601      	adds	r6, #1
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	1064      	asrs	r4, r4, #1
 8010bd8:	3508      	adds	r5, #8
 8010bda:	e73f      	b.n	8010a5c <_dtoa_r+0x394>
 8010bdc:	2602      	movs	r6, #2
 8010bde:	e742      	b.n	8010a66 <_dtoa_r+0x39e>
 8010be0:	9c07      	ldr	r4, [sp, #28]
 8010be2:	9704      	str	r7, [sp, #16]
 8010be4:	e761      	b.n	8010aaa <_dtoa_r+0x3e2>
 8010be6:	4b27      	ldr	r3, [pc, #156]	@ (8010c84 <_dtoa_r+0x5bc>)
 8010be8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010bea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010bee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010bf2:	4454      	add	r4, sl
 8010bf4:	2900      	cmp	r1, #0
 8010bf6:	d053      	beq.n	8010ca0 <_dtoa_r+0x5d8>
 8010bf8:	4928      	ldr	r1, [pc, #160]	@ (8010c9c <_dtoa_r+0x5d4>)
 8010bfa:	2000      	movs	r0, #0
 8010bfc:	f7ef fe46 	bl	800088c <__aeabi_ddiv>
 8010c00:	4633      	mov	r3, r6
 8010c02:	462a      	mov	r2, r5
 8010c04:	f7ef fb60 	bl	80002c8 <__aeabi_dsub>
 8010c08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010c0c:	4656      	mov	r6, sl
 8010c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c12:	f7ef ffc1 	bl	8000b98 <__aeabi_d2iz>
 8010c16:	4605      	mov	r5, r0
 8010c18:	f7ef fca4 	bl	8000564 <__aeabi_i2d>
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	460b      	mov	r3, r1
 8010c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c24:	f7ef fb50 	bl	80002c8 <__aeabi_dsub>
 8010c28:	3530      	adds	r5, #48	@ 0x30
 8010c2a:	4602      	mov	r2, r0
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c32:	f806 5b01 	strb.w	r5, [r6], #1
 8010c36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010c3a:	f7ef ff6f 	bl	8000b1c <__aeabi_dcmplt>
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	d171      	bne.n	8010d26 <_dtoa_r+0x65e>
 8010c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c46:	4911      	ldr	r1, [pc, #68]	@ (8010c8c <_dtoa_r+0x5c4>)
 8010c48:	2000      	movs	r0, #0
 8010c4a:	f7ef fb3d 	bl	80002c8 <__aeabi_dsub>
 8010c4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010c52:	f7ef ff63 	bl	8000b1c <__aeabi_dcmplt>
 8010c56:	2800      	cmp	r0, #0
 8010c58:	f040 8095 	bne.w	8010d86 <_dtoa_r+0x6be>
 8010c5c:	42a6      	cmp	r6, r4
 8010c5e:	f43f af50 	beq.w	8010b02 <_dtoa_r+0x43a>
 8010c62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010c66:	4b0a      	ldr	r3, [pc, #40]	@ (8010c90 <_dtoa_r+0x5c8>)
 8010c68:	2200      	movs	r2, #0
 8010c6a:	f7ef fce5 	bl	8000638 <__aeabi_dmul>
 8010c6e:	4b08      	ldr	r3, [pc, #32]	@ (8010c90 <_dtoa_r+0x5c8>)
 8010c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010c74:	2200      	movs	r2, #0
 8010c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c7a:	f7ef fcdd 	bl	8000638 <__aeabi_dmul>
 8010c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c82:	e7c4      	b.n	8010c0e <_dtoa_r+0x546>
 8010c84:	080155f8 	.word	0x080155f8
 8010c88:	080155d0 	.word	0x080155d0
 8010c8c:	3ff00000 	.word	0x3ff00000
 8010c90:	40240000 	.word	0x40240000
 8010c94:	401c0000 	.word	0x401c0000
 8010c98:	40140000 	.word	0x40140000
 8010c9c:	3fe00000 	.word	0x3fe00000
 8010ca0:	4631      	mov	r1, r6
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	f7ef fcc8 	bl	8000638 <__aeabi_dmul>
 8010ca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010cac:	9415      	str	r4, [sp, #84]	@ 0x54
 8010cae:	4656      	mov	r6, sl
 8010cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cb4:	f7ef ff70 	bl	8000b98 <__aeabi_d2iz>
 8010cb8:	4605      	mov	r5, r0
 8010cba:	f7ef fc53 	bl	8000564 <__aeabi_i2d>
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cc6:	f7ef faff 	bl	80002c8 <__aeabi_dsub>
 8010cca:	3530      	adds	r5, #48	@ 0x30
 8010ccc:	f806 5b01 	strb.w	r5, [r6], #1
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	42a6      	cmp	r6, r4
 8010cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010cda:	f04f 0200 	mov.w	r2, #0
 8010cde:	d124      	bne.n	8010d2a <_dtoa_r+0x662>
 8010ce0:	4bac      	ldr	r3, [pc, #688]	@ (8010f94 <_dtoa_r+0x8cc>)
 8010ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010ce6:	f7ef faf1 	bl	80002cc <__adddf3>
 8010cea:	4602      	mov	r2, r0
 8010cec:	460b      	mov	r3, r1
 8010cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cf2:	f7ef ff31 	bl	8000b58 <__aeabi_dcmpgt>
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d145      	bne.n	8010d86 <_dtoa_r+0x6be>
 8010cfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010cfe:	49a5      	ldr	r1, [pc, #660]	@ (8010f94 <_dtoa_r+0x8cc>)
 8010d00:	2000      	movs	r0, #0
 8010d02:	f7ef fae1 	bl	80002c8 <__aeabi_dsub>
 8010d06:	4602      	mov	r2, r0
 8010d08:	460b      	mov	r3, r1
 8010d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d0e:	f7ef ff05 	bl	8000b1c <__aeabi_dcmplt>
 8010d12:	2800      	cmp	r0, #0
 8010d14:	f43f aef5 	beq.w	8010b02 <_dtoa_r+0x43a>
 8010d18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010d1a:	1e73      	subs	r3, r6, #1
 8010d1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8010d1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d22:	2b30      	cmp	r3, #48	@ 0x30
 8010d24:	d0f8      	beq.n	8010d18 <_dtoa_r+0x650>
 8010d26:	9f04      	ldr	r7, [sp, #16]
 8010d28:	e73e      	b.n	8010ba8 <_dtoa_r+0x4e0>
 8010d2a:	4b9b      	ldr	r3, [pc, #620]	@ (8010f98 <_dtoa_r+0x8d0>)
 8010d2c:	f7ef fc84 	bl	8000638 <__aeabi_dmul>
 8010d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d34:	e7bc      	b.n	8010cb0 <_dtoa_r+0x5e8>
 8010d36:	d10c      	bne.n	8010d52 <_dtoa_r+0x68a>
 8010d38:	4b98      	ldr	r3, [pc, #608]	@ (8010f9c <_dtoa_r+0x8d4>)
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d40:	f7ef fc7a 	bl	8000638 <__aeabi_dmul>
 8010d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d48:	f7ef fefc 	bl	8000b44 <__aeabi_dcmpge>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	f000 8157 	beq.w	8011000 <_dtoa_r+0x938>
 8010d52:	2400      	movs	r4, #0
 8010d54:	4625      	mov	r5, r4
 8010d56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d58:	43db      	mvns	r3, r3
 8010d5a:	9304      	str	r3, [sp, #16]
 8010d5c:	4656      	mov	r6, sl
 8010d5e:	2700      	movs	r7, #0
 8010d60:	4621      	mov	r1, r4
 8010d62:	4658      	mov	r0, fp
 8010d64:	f000 fe4a 	bl	80119fc <_Bfree>
 8010d68:	2d00      	cmp	r5, #0
 8010d6a:	d0dc      	beq.n	8010d26 <_dtoa_r+0x65e>
 8010d6c:	b12f      	cbz	r7, 8010d7a <_dtoa_r+0x6b2>
 8010d6e:	42af      	cmp	r7, r5
 8010d70:	d003      	beq.n	8010d7a <_dtoa_r+0x6b2>
 8010d72:	4639      	mov	r1, r7
 8010d74:	4658      	mov	r0, fp
 8010d76:	f000 fe41 	bl	80119fc <_Bfree>
 8010d7a:	4629      	mov	r1, r5
 8010d7c:	4658      	mov	r0, fp
 8010d7e:	f000 fe3d 	bl	80119fc <_Bfree>
 8010d82:	e7d0      	b.n	8010d26 <_dtoa_r+0x65e>
 8010d84:	9704      	str	r7, [sp, #16]
 8010d86:	4633      	mov	r3, r6
 8010d88:	461e      	mov	r6, r3
 8010d8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d8e:	2a39      	cmp	r2, #57	@ 0x39
 8010d90:	d107      	bne.n	8010da2 <_dtoa_r+0x6da>
 8010d92:	459a      	cmp	sl, r3
 8010d94:	d1f8      	bne.n	8010d88 <_dtoa_r+0x6c0>
 8010d96:	9a04      	ldr	r2, [sp, #16]
 8010d98:	3201      	adds	r2, #1
 8010d9a:	9204      	str	r2, [sp, #16]
 8010d9c:	2230      	movs	r2, #48	@ 0x30
 8010d9e:	f88a 2000 	strb.w	r2, [sl]
 8010da2:	781a      	ldrb	r2, [r3, #0]
 8010da4:	3201      	adds	r2, #1
 8010da6:	701a      	strb	r2, [r3, #0]
 8010da8:	e7bd      	b.n	8010d26 <_dtoa_r+0x65e>
 8010daa:	4b7b      	ldr	r3, [pc, #492]	@ (8010f98 <_dtoa_r+0x8d0>)
 8010dac:	2200      	movs	r2, #0
 8010dae:	f7ef fc43 	bl	8000638 <__aeabi_dmul>
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ef fea5 	bl	8000b08 <__aeabi_dcmpeq>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	f43f aebb 	beq.w	8010b3a <_dtoa_r+0x472>
 8010dc4:	e6f0      	b.n	8010ba8 <_dtoa_r+0x4e0>
 8010dc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010dc8:	2a00      	cmp	r2, #0
 8010dca:	f000 80db 	beq.w	8010f84 <_dtoa_r+0x8bc>
 8010dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010dd0:	2a01      	cmp	r2, #1
 8010dd2:	f300 80bf 	bgt.w	8010f54 <_dtoa_r+0x88c>
 8010dd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010dd8:	2a00      	cmp	r2, #0
 8010dda:	f000 80b7 	beq.w	8010f4c <_dtoa_r+0x884>
 8010dde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010de2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010de4:	4646      	mov	r6, r8
 8010de6:	9a08      	ldr	r2, [sp, #32]
 8010de8:	2101      	movs	r1, #1
 8010dea:	441a      	add	r2, r3
 8010dec:	4658      	mov	r0, fp
 8010dee:	4498      	add	r8, r3
 8010df0:	9208      	str	r2, [sp, #32]
 8010df2:	f000 ff01 	bl	8011bf8 <__i2b>
 8010df6:	4605      	mov	r5, r0
 8010df8:	b15e      	cbz	r6, 8010e12 <_dtoa_r+0x74a>
 8010dfa:	9b08      	ldr	r3, [sp, #32]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	dd08      	ble.n	8010e12 <_dtoa_r+0x74a>
 8010e00:	42b3      	cmp	r3, r6
 8010e02:	9a08      	ldr	r2, [sp, #32]
 8010e04:	bfa8      	it	ge
 8010e06:	4633      	movge	r3, r6
 8010e08:	eba8 0803 	sub.w	r8, r8, r3
 8010e0c:	1af6      	subs	r6, r6, r3
 8010e0e:	1ad3      	subs	r3, r2, r3
 8010e10:	9308      	str	r3, [sp, #32]
 8010e12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e14:	b1f3      	cbz	r3, 8010e54 <_dtoa_r+0x78c>
 8010e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	f000 80b7 	beq.w	8010f8c <_dtoa_r+0x8c4>
 8010e1e:	b18c      	cbz	r4, 8010e44 <_dtoa_r+0x77c>
 8010e20:	4629      	mov	r1, r5
 8010e22:	4622      	mov	r2, r4
 8010e24:	4658      	mov	r0, fp
 8010e26:	f000 ffa7 	bl	8011d78 <__pow5mult>
 8010e2a:	464a      	mov	r2, r9
 8010e2c:	4601      	mov	r1, r0
 8010e2e:	4605      	mov	r5, r0
 8010e30:	4658      	mov	r0, fp
 8010e32:	f000 fef7 	bl	8011c24 <__multiply>
 8010e36:	4649      	mov	r1, r9
 8010e38:	9004      	str	r0, [sp, #16]
 8010e3a:	4658      	mov	r0, fp
 8010e3c:	f000 fdde 	bl	80119fc <_Bfree>
 8010e40:	9b04      	ldr	r3, [sp, #16]
 8010e42:	4699      	mov	r9, r3
 8010e44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e46:	1b1a      	subs	r2, r3, r4
 8010e48:	d004      	beq.n	8010e54 <_dtoa_r+0x78c>
 8010e4a:	4649      	mov	r1, r9
 8010e4c:	4658      	mov	r0, fp
 8010e4e:	f000 ff93 	bl	8011d78 <__pow5mult>
 8010e52:	4681      	mov	r9, r0
 8010e54:	2101      	movs	r1, #1
 8010e56:	4658      	mov	r0, fp
 8010e58:	f000 fece 	bl	8011bf8 <__i2b>
 8010e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e5e:	4604      	mov	r4, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	f000 81cf 	beq.w	8011204 <_dtoa_r+0xb3c>
 8010e66:	461a      	mov	r2, r3
 8010e68:	4601      	mov	r1, r0
 8010e6a:	4658      	mov	r0, fp
 8010e6c:	f000 ff84 	bl	8011d78 <__pow5mult>
 8010e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	4604      	mov	r4, r0
 8010e76:	f300 8095 	bgt.w	8010fa4 <_dtoa_r+0x8dc>
 8010e7a:	9b02      	ldr	r3, [sp, #8]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f040 8087 	bne.w	8010f90 <_dtoa_r+0x8c8>
 8010e82:	9b03      	ldr	r3, [sp, #12]
 8010e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	f040 8089 	bne.w	8010fa0 <_dtoa_r+0x8d8>
 8010e8e:	9b03      	ldr	r3, [sp, #12]
 8010e90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e94:	0d1b      	lsrs	r3, r3, #20
 8010e96:	051b      	lsls	r3, r3, #20
 8010e98:	b12b      	cbz	r3, 8010ea6 <_dtoa_r+0x7de>
 8010e9a:	9b08      	ldr	r3, [sp, #32]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	9308      	str	r3, [sp, #32]
 8010ea0:	f108 0801 	add.w	r8, r8, #1
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f000 81b0 	beq.w	8011210 <_dtoa_r+0xb48>
 8010eb0:	6923      	ldr	r3, [r4, #16]
 8010eb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010eb6:	6918      	ldr	r0, [r3, #16]
 8010eb8:	f000 fe52 	bl	8011b60 <__hi0bits>
 8010ebc:	f1c0 0020 	rsb	r0, r0, #32
 8010ec0:	9b08      	ldr	r3, [sp, #32]
 8010ec2:	4418      	add	r0, r3
 8010ec4:	f010 001f 	ands.w	r0, r0, #31
 8010ec8:	d077      	beq.n	8010fba <_dtoa_r+0x8f2>
 8010eca:	f1c0 0320 	rsb	r3, r0, #32
 8010ece:	2b04      	cmp	r3, #4
 8010ed0:	dd6b      	ble.n	8010faa <_dtoa_r+0x8e2>
 8010ed2:	9b08      	ldr	r3, [sp, #32]
 8010ed4:	f1c0 001c 	rsb	r0, r0, #28
 8010ed8:	4403      	add	r3, r0
 8010eda:	4480      	add	r8, r0
 8010edc:	4406      	add	r6, r0
 8010ede:	9308      	str	r3, [sp, #32]
 8010ee0:	f1b8 0f00 	cmp.w	r8, #0
 8010ee4:	dd05      	ble.n	8010ef2 <_dtoa_r+0x82a>
 8010ee6:	4649      	mov	r1, r9
 8010ee8:	4642      	mov	r2, r8
 8010eea:	4658      	mov	r0, fp
 8010eec:	f000 ff9e 	bl	8011e2c <__lshift>
 8010ef0:	4681      	mov	r9, r0
 8010ef2:	9b08      	ldr	r3, [sp, #32]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	dd05      	ble.n	8010f04 <_dtoa_r+0x83c>
 8010ef8:	4621      	mov	r1, r4
 8010efa:	461a      	mov	r2, r3
 8010efc:	4658      	mov	r0, fp
 8010efe:	f000 ff95 	bl	8011e2c <__lshift>
 8010f02:	4604      	mov	r4, r0
 8010f04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d059      	beq.n	8010fbe <_dtoa_r+0x8f6>
 8010f0a:	4621      	mov	r1, r4
 8010f0c:	4648      	mov	r0, r9
 8010f0e:	f000 fff9 	bl	8011f04 <__mcmp>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	da53      	bge.n	8010fbe <_dtoa_r+0x8f6>
 8010f16:	1e7b      	subs	r3, r7, #1
 8010f18:	9304      	str	r3, [sp, #16]
 8010f1a:	4649      	mov	r1, r9
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	220a      	movs	r2, #10
 8010f20:	4658      	mov	r0, fp
 8010f22:	f000 fd8d 	bl	8011a40 <__multadd>
 8010f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f28:	4681      	mov	r9, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	f000 8172 	beq.w	8011214 <_dtoa_r+0xb4c>
 8010f30:	2300      	movs	r3, #0
 8010f32:	4629      	mov	r1, r5
 8010f34:	220a      	movs	r2, #10
 8010f36:	4658      	mov	r0, fp
 8010f38:	f000 fd82 	bl	8011a40 <__multadd>
 8010f3c:	9b00      	ldr	r3, [sp, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	4605      	mov	r5, r0
 8010f42:	dc67      	bgt.n	8011014 <_dtoa_r+0x94c>
 8010f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f46:	2b02      	cmp	r3, #2
 8010f48:	dc41      	bgt.n	8010fce <_dtoa_r+0x906>
 8010f4a:	e063      	b.n	8011014 <_dtoa_r+0x94c>
 8010f4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010f4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010f52:	e746      	b.n	8010de2 <_dtoa_r+0x71a>
 8010f54:	9b07      	ldr	r3, [sp, #28]
 8010f56:	1e5c      	subs	r4, r3, #1
 8010f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f5a:	42a3      	cmp	r3, r4
 8010f5c:	bfbf      	itttt	lt
 8010f5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010f60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010f62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010f64:	1ae3      	sublt	r3, r4, r3
 8010f66:	bfb4      	ite	lt
 8010f68:	18d2      	addlt	r2, r2, r3
 8010f6a:	1b1c      	subge	r4, r3, r4
 8010f6c:	9b07      	ldr	r3, [sp, #28]
 8010f6e:	bfbc      	itt	lt
 8010f70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010f72:	2400      	movlt	r4, #0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	bfb5      	itete	lt
 8010f78:	eba8 0603 	sublt.w	r6, r8, r3
 8010f7c:	9b07      	ldrge	r3, [sp, #28]
 8010f7e:	2300      	movlt	r3, #0
 8010f80:	4646      	movge	r6, r8
 8010f82:	e730      	b.n	8010de6 <_dtoa_r+0x71e>
 8010f84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010f86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010f88:	4646      	mov	r6, r8
 8010f8a:	e735      	b.n	8010df8 <_dtoa_r+0x730>
 8010f8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010f8e:	e75c      	b.n	8010e4a <_dtoa_r+0x782>
 8010f90:	2300      	movs	r3, #0
 8010f92:	e788      	b.n	8010ea6 <_dtoa_r+0x7de>
 8010f94:	3fe00000 	.word	0x3fe00000
 8010f98:	40240000 	.word	0x40240000
 8010f9c:	40140000 	.word	0x40140000
 8010fa0:	9b02      	ldr	r3, [sp, #8]
 8010fa2:	e780      	b.n	8010ea6 <_dtoa_r+0x7de>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fa8:	e782      	b.n	8010eb0 <_dtoa_r+0x7e8>
 8010faa:	d099      	beq.n	8010ee0 <_dtoa_r+0x818>
 8010fac:	9a08      	ldr	r2, [sp, #32]
 8010fae:	331c      	adds	r3, #28
 8010fb0:	441a      	add	r2, r3
 8010fb2:	4498      	add	r8, r3
 8010fb4:	441e      	add	r6, r3
 8010fb6:	9208      	str	r2, [sp, #32]
 8010fb8:	e792      	b.n	8010ee0 <_dtoa_r+0x818>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	e7f6      	b.n	8010fac <_dtoa_r+0x8e4>
 8010fbe:	9b07      	ldr	r3, [sp, #28]
 8010fc0:	9704      	str	r7, [sp, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	dc20      	bgt.n	8011008 <_dtoa_r+0x940>
 8010fc6:	9300      	str	r3, [sp, #0]
 8010fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fca:	2b02      	cmp	r3, #2
 8010fcc:	dd1e      	ble.n	801100c <_dtoa_r+0x944>
 8010fce:	9b00      	ldr	r3, [sp, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	f47f aec0 	bne.w	8010d56 <_dtoa_r+0x68e>
 8010fd6:	4621      	mov	r1, r4
 8010fd8:	2205      	movs	r2, #5
 8010fda:	4658      	mov	r0, fp
 8010fdc:	f000 fd30 	bl	8011a40 <__multadd>
 8010fe0:	4601      	mov	r1, r0
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	4648      	mov	r0, r9
 8010fe6:	f000 ff8d 	bl	8011f04 <__mcmp>
 8010fea:	2800      	cmp	r0, #0
 8010fec:	f77f aeb3 	ble.w	8010d56 <_dtoa_r+0x68e>
 8010ff0:	4656      	mov	r6, sl
 8010ff2:	2331      	movs	r3, #49	@ 0x31
 8010ff4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ff8:	9b04      	ldr	r3, [sp, #16]
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	9304      	str	r3, [sp, #16]
 8010ffe:	e6ae      	b.n	8010d5e <_dtoa_r+0x696>
 8011000:	9c07      	ldr	r4, [sp, #28]
 8011002:	9704      	str	r7, [sp, #16]
 8011004:	4625      	mov	r5, r4
 8011006:	e7f3      	b.n	8010ff0 <_dtoa_r+0x928>
 8011008:	9b07      	ldr	r3, [sp, #28]
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801100e:	2b00      	cmp	r3, #0
 8011010:	f000 8104 	beq.w	801121c <_dtoa_r+0xb54>
 8011014:	2e00      	cmp	r6, #0
 8011016:	dd05      	ble.n	8011024 <_dtoa_r+0x95c>
 8011018:	4629      	mov	r1, r5
 801101a:	4632      	mov	r2, r6
 801101c:	4658      	mov	r0, fp
 801101e:	f000 ff05 	bl	8011e2c <__lshift>
 8011022:	4605      	mov	r5, r0
 8011024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011026:	2b00      	cmp	r3, #0
 8011028:	d05a      	beq.n	80110e0 <_dtoa_r+0xa18>
 801102a:	6869      	ldr	r1, [r5, #4]
 801102c:	4658      	mov	r0, fp
 801102e:	f000 fca5 	bl	801197c <_Balloc>
 8011032:	4606      	mov	r6, r0
 8011034:	b928      	cbnz	r0, 8011042 <_dtoa_r+0x97a>
 8011036:	4b84      	ldr	r3, [pc, #528]	@ (8011248 <_dtoa_r+0xb80>)
 8011038:	4602      	mov	r2, r0
 801103a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801103e:	f7ff bb5a 	b.w	80106f6 <_dtoa_r+0x2e>
 8011042:	692a      	ldr	r2, [r5, #16]
 8011044:	3202      	adds	r2, #2
 8011046:	0092      	lsls	r2, r2, #2
 8011048:	f105 010c 	add.w	r1, r5, #12
 801104c:	300c      	adds	r0, #12
 801104e:	f7ff fa94 	bl	801057a <memcpy>
 8011052:	2201      	movs	r2, #1
 8011054:	4631      	mov	r1, r6
 8011056:	4658      	mov	r0, fp
 8011058:	f000 fee8 	bl	8011e2c <__lshift>
 801105c:	f10a 0301 	add.w	r3, sl, #1
 8011060:	9307      	str	r3, [sp, #28]
 8011062:	9b00      	ldr	r3, [sp, #0]
 8011064:	4453      	add	r3, sl
 8011066:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011068:	9b02      	ldr	r3, [sp, #8]
 801106a:	f003 0301 	and.w	r3, r3, #1
 801106e:	462f      	mov	r7, r5
 8011070:	930a      	str	r3, [sp, #40]	@ 0x28
 8011072:	4605      	mov	r5, r0
 8011074:	9b07      	ldr	r3, [sp, #28]
 8011076:	4621      	mov	r1, r4
 8011078:	3b01      	subs	r3, #1
 801107a:	4648      	mov	r0, r9
 801107c:	9300      	str	r3, [sp, #0]
 801107e:	f7ff fa99 	bl	80105b4 <quorem>
 8011082:	4639      	mov	r1, r7
 8011084:	9002      	str	r0, [sp, #8]
 8011086:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801108a:	4648      	mov	r0, r9
 801108c:	f000 ff3a 	bl	8011f04 <__mcmp>
 8011090:	462a      	mov	r2, r5
 8011092:	9008      	str	r0, [sp, #32]
 8011094:	4621      	mov	r1, r4
 8011096:	4658      	mov	r0, fp
 8011098:	f000 ff50 	bl	8011f3c <__mdiff>
 801109c:	68c2      	ldr	r2, [r0, #12]
 801109e:	4606      	mov	r6, r0
 80110a0:	bb02      	cbnz	r2, 80110e4 <_dtoa_r+0xa1c>
 80110a2:	4601      	mov	r1, r0
 80110a4:	4648      	mov	r0, r9
 80110a6:	f000 ff2d 	bl	8011f04 <__mcmp>
 80110aa:	4602      	mov	r2, r0
 80110ac:	4631      	mov	r1, r6
 80110ae:	4658      	mov	r0, fp
 80110b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80110b2:	f000 fca3 	bl	80119fc <_Bfree>
 80110b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110ba:	9e07      	ldr	r6, [sp, #28]
 80110bc:	ea43 0102 	orr.w	r1, r3, r2
 80110c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110c2:	4319      	orrs	r1, r3
 80110c4:	d110      	bne.n	80110e8 <_dtoa_r+0xa20>
 80110c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80110ca:	d029      	beq.n	8011120 <_dtoa_r+0xa58>
 80110cc:	9b08      	ldr	r3, [sp, #32]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	dd02      	ble.n	80110d8 <_dtoa_r+0xa10>
 80110d2:	9b02      	ldr	r3, [sp, #8]
 80110d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80110d8:	9b00      	ldr	r3, [sp, #0]
 80110da:	f883 8000 	strb.w	r8, [r3]
 80110de:	e63f      	b.n	8010d60 <_dtoa_r+0x698>
 80110e0:	4628      	mov	r0, r5
 80110e2:	e7bb      	b.n	801105c <_dtoa_r+0x994>
 80110e4:	2201      	movs	r2, #1
 80110e6:	e7e1      	b.n	80110ac <_dtoa_r+0x9e4>
 80110e8:	9b08      	ldr	r3, [sp, #32]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	db04      	blt.n	80110f8 <_dtoa_r+0xa30>
 80110ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80110f0:	430b      	orrs	r3, r1
 80110f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80110f4:	430b      	orrs	r3, r1
 80110f6:	d120      	bne.n	801113a <_dtoa_r+0xa72>
 80110f8:	2a00      	cmp	r2, #0
 80110fa:	dded      	ble.n	80110d8 <_dtoa_r+0xa10>
 80110fc:	4649      	mov	r1, r9
 80110fe:	2201      	movs	r2, #1
 8011100:	4658      	mov	r0, fp
 8011102:	f000 fe93 	bl	8011e2c <__lshift>
 8011106:	4621      	mov	r1, r4
 8011108:	4681      	mov	r9, r0
 801110a:	f000 fefb 	bl	8011f04 <__mcmp>
 801110e:	2800      	cmp	r0, #0
 8011110:	dc03      	bgt.n	801111a <_dtoa_r+0xa52>
 8011112:	d1e1      	bne.n	80110d8 <_dtoa_r+0xa10>
 8011114:	f018 0f01 	tst.w	r8, #1
 8011118:	d0de      	beq.n	80110d8 <_dtoa_r+0xa10>
 801111a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801111e:	d1d8      	bne.n	80110d2 <_dtoa_r+0xa0a>
 8011120:	9a00      	ldr	r2, [sp, #0]
 8011122:	2339      	movs	r3, #57	@ 0x39
 8011124:	7013      	strb	r3, [r2, #0]
 8011126:	4633      	mov	r3, r6
 8011128:	461e      	mov	r6, r3
 801112a:	3b01      	subs	r3, #1
 801112c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011130:	2a39      	cmp	r2, #57	@ 0x39
 8011132:	d052      	beq.n	80111da <_dtoa_r+0xb12>
 8011134:	3201      	adds	r2, #1
 8011136:	701a      	strb	r2, [r3, #0]
 8011138:	e612      	b.n	8010d60 <_dtoa_r+0x698>
 801113a:	2a00      	cmp	r2, #0
 801113c:	dd07      	ble.n	801114e <_dtoa_r+0xa86>
 801113e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011142:	d0ed      	beq.n	8011120 <_dtoa_r+0xa58>
 8011144:	9a00      	ldr	r2, [sp, #0]
 8011146:	f108 0301 	add.w	r3, r8, #1
 801114a:	7013      	strb	r3, [r2, #0]
 801114c:	e608      	b.n	8010d60 <_dtoa_r+0x698>
 801114e:	9b07      	ldr	r3, [sp, #28]
 8011150:	9a07      	ldr	r2, [sp, #28]
 8011152:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011158:	4293      	cmp	r3, r2
 801115a:	d028      	beq.n	80111ae <_dtoa_r+0xae6>
 801115c:	4649      	mov	r1, r9
 801115e:	2300      	movs	r3, #0
 8011160:	220a      	movs	r2, #10
 8011162:	4658      	mov	r0, fp
 8011164:	f000 fc6c 	bl	8011a40 <__multadd>
 8011168:	42af      	cmp	r7, r5
 801116a:	4681      	mov	r9, r0
 801116c:	f04f 0300 	mov.w	r3, #0
 8011170:	f04f 020a 	mov.w	r2, #10
 8011174:	4639      	mov	r1, r7
 8011176:	4658      	mov	r0, fp
 8011178:	d107      	bne.n	801118a <_dtoa_r+0xac2>
 801117a:	f000 fc61 	bl	8011a40 <__multadd>
 801117e:	4607      	mov	r7, r0
 8011180:	4605      	mov	r5, r0
 8011182:	9b07      	ldr	r3, [sp, #28]
 8011184:	3301      	adds	r3, #1
 8011186:	9307      	str	r3, [sp, #28]
 8011188:	e774      	b.n	8011074 <_dtoa_r+0x9ac>
 801118a:	f000 fc59 	bl	8011a40 <__multadd>
 801118e:	4629      	mov	r1, r5
 8011190:	4607      	mov	r7, r0
 8011192:	2300      	movs	r3, #0
 8011194:	220a      	movs	r2, #10
 8011196:	4658      	mov	r0, fp
 8011198:	f000 fc52 	bl	8011a40 <__multadd>
 801119c:	4605      	mov	r5, r0
 801119e:	e7f0      	b.n	8011182 <_dtoa_r+0xaba>
 80111a0:	9b00      	ldr	r3, [sp, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	bfcc      	ite	gt
 80111a6:	461e      	movgt	r6, r3
 80111a8:	2601      	movle	r6, #1
 80111aa:	4456      	add	r6, sl
 80111ac:	2700      	movs	r7, #0
 80111ae:	4649      	mov	r1, r9
 80111b0:	2201      	movs	r2, #1
 80111b2:	4658      	mov	r0, fp
 80111b4:	f000 fe3a 	bl	8011e2c <__lshift>
 80111b8:	4621      	mov	r1, r4
 80111ba:	4681      	mov	r9, r0
 80111bc:	f000 fea2 	bl	8011f04 <__mcmp>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	dcb0      	bgt.n	8011126 <_dtoa_r+0xa5e>
 80111c4:	d102      	bne.n	80111cc <_dtoa_r+0xb04>
 80111c6:	f018 0f01 	tst.w	r8, #1
 80111ca:	d1ac      	bne.n	8011126 <_dtoa_r+0xa5e>
 80111cc:	4633      	mov	r3, r6
 80111ce:	461e      	mov	r6, r3
 80111d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111d4:	2a30      	cmp	r2, #48	@ 0x30
 80111d6:	d0fa      	beq.n	80111ce <_dtoa_r+0xb06>
 80111d8:	e5c2      	b.n	8010d60 <_dtoa_r+0x698>
 80111da:	459a      	cmp	sl, r3
 80111dc:	d1a4      	bne.n	8011128 <_dtoa_r+0xa60>
 80111de:	9b04      	ldr	r3, [sp, #16]
 80111e0:	3301      	adds	r3, #1
 80111e2:	9304      	str	r3, [sp, #16]
 80111e4:	2331      	movs	r3, #49	@ 0x31
 80111e6:	f88a 3000 	strb.w	r3, [sl]
 80111ea:	e5b9      	b.n	8010d60 <_dtoa_r+0x698>
 80111ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80111ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801124c <_dtoa_r+0xb84>
 80111f2:	b11b      	cbz	r3, 80111fc <_dtoa_r+0xb34>
 80111f4:	f10a 0308 	add.w	r3, sl, #8
 80111f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80111fa:	6013      	str	r3, [r2, #0]
 80111fc:	4650      	mov	r0, sl
 80111fe:	b019      	add	sp, #100	@ 0x64
 8011200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011206:	2b01      	cmp	r3, #1
 8011208:	f77f ae37 	ble.w	8010e7a <_dtoa_r+0x7b2>
 801120c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801120e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011210:	2001      	movs	r0, #1
 8011212:	e655      	b.n	8010ec0 <_dtoa_r+0x7f8>
 8011214:	9b00      	ldr	r3, [sp, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	f77f aed6 	ble.w	8010fc8 <_dtoa_r+0x900>
 801121c:	4656      	mov	r6, sl
 801121e:	4621      	mov	r1, r4
 8011220:	4648      	mov	r0, r9
 8011222:	f7ff f9c7 	bl	80105b4 <quorem>
 8011226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801122a:	f806 8b01 	strb.w	r8, [r6], #1
 801122e:	9b00      	ldr	r3, [sp, #0]
 8011230:	eba6 020a 	sub.w	r2, r6, sl
 8011234:	4293      	cmp	r3, r2
 8011236:	ddb3      	ble.n	80111a0 <_dtoa_r+0xad8>
 8011238:	4649      	mov	r1, r9
 801123a:	2300      	movs	r3, #0
 801123c:	220a      	movs	r2, #10
 801123e:	4658      	mov	r0, fp
 8011240:	f000 fbfe 	bl	8011a40 <__multadd>
 8011244:	4681      	mov	r9, r0
 8011246:	e7ea      	b.n	801121e <_dtoa_r+0xb56>
 8011248:	080154f5 	.word	0x080154f5
 801124c:	08015479 	.word	0x08015479

08011250 <_free_r>:
 8011250:	b538      	push	{r3, r4, r5, lr}
 8011252:	4605      	mov	r5, r0
 8011254:	2900      	cmp	r1, #0
 8011256:	d041      	beq.n	80112dc <_free_r+0x8c>
 8011258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801125c:	1f0c      	subs	r4, r1, #4
 801125e:	2b00      	cmp	r3, #0
 8011260:	bfb8      	it	lt
 8011262:	18e4      	addlt	r4, r4, r3
 8011264:	f7fd fb34 	bl	800e8d0 <__malloc_lock>
 8011268:	4a1d      	ldr	r2, [pc, #116]	@ (80112e0 <_free_r+0x90>)
 801126a:	6813      	ldr	r3, [r2, #0]
 801126c:	b933      	cbnz	r3, 801127c <_free_r+0x2c>
 801126e:	6063      	str	r3, [r4, #4]
 8011270:	6014      	str	r4, [r2, #0]
 8011272:	4628      	mov	r0, r5
 8011274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011278:	f7fd bb30 	b.w	800e8dc <__malloc_unlock>
 801127c:	42a3      	cmp	r3, r4
 801127e:	d908      	bls.n	8011292 <_free_r+0x42>
 8011280:	6820      	ldr	r0, [r4, #0]
 8011282:	1821      	adds	r1, r4, r0
 8011284:	428b      	cmp	r3, r1
 8011286:	bf01      	itttt	eq
 8011288:	6819      	ldreq	r1, [r3, #0]
 801128a:	685b      	ldreq	r3, [r3, #4]
 801128c:	1809      	addeq	r1, r1, r0
 801128e:	6021      	streq	r1, [r4, #0]
 8011290:	e7ed      	b.n	801126e <_free_r+0x1e>
 8011292:	461a      	mov	r2, r3
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	b10b      	cbz	r3, 801129c <_free_r+0x4c>
 8011298:	42a3      	cmp	r3, r4
 801129a:	d9fa      	bls.n	8011292 <_free_r+0x42>
 801129c:	6811      	ldr	r1, [r2, #0]
 801129e:	1850      	adds	r0, r2, r1
 80112a0:	42a0      	cmp	r0, r4
 80112a2:	d10b      	bne.n	80112bc <_free_r+0x6c>
 80112a4:	6820      	ldr	r0, [r4, #0]
 80112a6:	4401      	add	r1, r0
 80112a8:	1850      	adds	r0, r2, r1
 80112aa:	4283      	cmp	r3, r0
 80112ac:	6011      	str	r1, [r2, #0]
 80112ae:	d1e0      	bne.n	8011272 <_free_r+0x22>
 80112b0:	6818      	ldr	r0, [r3, #0]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	6053      	str	r3, [r2, #4]
 80112b6:	4408      	add	r0, r1
 80112b8:	6010      	str	r0, [r2, #0]
 80112ba:	e7da      	b.n	8011272 <_free_r+0x22>
 80112bc:	d902      	bls.n	80112c4 <_free_r+0x74>
 80112be:	230c      	movs	r3, #12
 80112c0:	602b      	str	r3, [r5, #0]
 80112c2:	e7d6      	b.n	8011272 <_free_r+0x22>
 80112c4:	6820      	ldr	r0, [r4, #0]
 80112c6:	1821      	adds	r1, r4, r0
 80112c8:	428b      	cmp	r3, r1
 80112ca:	bf04      	itt	eq
 80112cc:	6819      	ldreq	r1, [r3, #0]
 80112ce:	685b      	ldreq	r3, [r3, #4]
 80112d0:	6063      	str	r3, [r4, #4]
 80112d2:	bf04      	itt	eq
 80112d4:	1809      	addeq	r1, r1, r0
 80112d6:	6021      	streq	r1, [r4, #0]
 80112d8:	6054      	str	r4, [r2, #4]
 80112da:	e7ca      	b.n	8011272 <_free_r+0x22>
 80112dc:	bd38      	pop	{r3, r4, r5, pc}
 80112de:	bf00      	nop
 80112e0:	20002624 	.word	0x20002624

080112e4 <rshift>:
 80112e4:	6903      	ldr	r3, [r0, #16]
 80112e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80112ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80112f2:	f100 0414 	add.w	r4, r0, #20
 80112f6:	dd45      	ble.n	8011384 <rshift+0xa0>
 80112f8:	f011 011f 	ands.w	r1, r1, #31
 80112fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011300:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011304:	d10c      	bne.n	8011320 <rshift+0x3c>
 8011306:	f100 0710 	add.w	r7, r0, #16
 801130a:	4629      	mov	r1, r5
 801130c:	42b1      	cmp	r1, r6
 801130e:	d334      	bcc.n	801137a <rshift+0x96>
 8011310:	1a9b      	subs	r3, r3, r2
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	1eea      	subs	r2, r5, #3
 8011316:	4296      	cmp	r6, r2
 8011318:	bf38      	it	cc
 801131a:	2300      	movcc	r3, #0
 801131c:	4423      	add	r3, r4
 801131e:	e015      	b.n	801134c <rshift+0x68>
 8011320:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011324:	f1c1 0820 	rsb	r8, r1, #32
 8011328:	40cf      	lsrs	r7, r1
 801132a:	f105 0e04 	add.w	lr, r5, #4
 801132e:	46a1      	mov	r9, r4
 8011330:	4576      	cmp	r6, lr
 8011332:	46f4      	mov	ip, lr
 8011334:	d815      	bhi.n	8011362 <rshift+0x7e>
 8011336:	1a9a      	subs	r2, r3, r2
 8011338:	0092      	lsls	r2, r2, #2
 801133a:	3a04      	subs	r2, #4
 801133c:	3501      	adds	r5, #1
 801133e:	42ae      	cmp	r6, r5
 8011340:	bf38      	it	cc
 8011342:	2200      	movcc	r2, #0
 8011344:	18a3      	adds	r3, r4, r2
 8011346:	50a7      	str	r7, [r4, r2]
 8011348:	b107      	cbz	r7, 801134c <rshift+0x68>
 801134a:	3304      	adds	r3, #4
 801134c:	1b1a      	subs	r2, r3, r4
 801134e:	42a3      	cmp	r3, r4
 8011350:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011354:	bf08      	it	eq
 8011356:	2300      	moveq	r3, #0
 8011358:	6102      	str	r2, [r0, #16]
 801135a:	bf08      	it	eq
 801135c:	6143      	streq	r3, [r0, #20]
 801135e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011362:	f8dc c000 	ldr.w	ip, [ip]
 8011366:	fa0c fc08 	lsl.w	ip, ip, r8
 801136a:	ea4c 0707 	orr.w	r7, ip, r7
 801136e:	f849 7b04 	str.w	r7, [r9], #4
 8011372:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011376:	40cf      	lsrs	r7, r1
 8011378:	e7da      	b.n	8011330 <rshift+0x4c>
 801137a:	f851 cb04 	ldr.w	ip, [r1], #4
 801137e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011382:	e7c3      	b.n	801130c <rshift+0x28>
 8011384:	4623      	mov	r3, r4
 8011386:	e7e1      	b.n	801134c <rshift+0x68>

08011388 <__hexdig_fun>:
 8011388:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801138c:	2b09      	cmp	r3, #9
 801138e:	d802      	bhi.n	8011396 <__hexdig_fun+0xe>
 8011390:	3820      	subs	r0, #32
 8011392:	b2c0      	uxtb	r0, r0
 8011394:	4770      	bx	lr
 8011396:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801139a:	2b05      	cmp	r3, #5
 801139c:	d801      	bhi.n	80113a2 <__hexdig_fun+0x1a>
 801139e:	3847      	subs	r0, #71	@ 0x47
 80113a0:	e7f7      	b.n	8011392 <__hexdig_fun+0xa>
 80113a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80113a6:	2b05      	cmp	r3, #5
 80113a8:	d801      	bhi.n	80113ae <__hexdig_fun+0x26>
 80113aa:	3827      	subs	r0, #39	@ 0x27
 80113ac:	e7f1      	b.n	8011392 <__hexdig_fun+0xa>
 80113ae:	2000      	movs	r0, #0
 80113b0:	4770      	bx	lr
	...

080113b4 <__gethex>:
 80113b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b8:	b085      	sub	sp, #20
 80113ba:	468a      	mov	sl, r1
 80113bc:	9302      	str	r3, [sp, #8]
 80113be:	680b      	ldr	r3, [r1, #0]
 80113c0:	9001      	str	r0, [sp, #4]
 80113c2:	4690      	mov	r8, r2
 80113c4:	1c9c      	adds	r4, r3, #2
 80113c6:	46a1      	mov	r9, r4
 80113c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80113cc:	2830      	cmp	r0, #48	@ 0x30
 80113ce:	d0fa      	beq.n	80113c6 <__gethex+0x12>
 80113d0:	eba9 0303 	sub.w	r3, r9, r3
 80113d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80113d8:	f7ff ffd6 	bl	8011388 <__hexdig_fun>
 80113dc:	4605      	mov	r5, r0
 80113de:	2800      	cmp	r0, #0
 80113e0:	d168      	bne.n	80114b4 <__gethex+0x100>
 80113e2:	49a0      	ldr	r1, [pc, #640]	@ (8011664 <__gethex+0x2b0>)
 80113e4:	2201      	movs	r2, #1
 80113e6:	4648      	mov	r0, r9
 80113e8:	f7ff f82d 	bl	8010446 <strncmp>
 80113ec:	4607      	mov	r7, r0
 80113ee:	2800      	cmp	r0, #0
 80113f0:	d167      	bne.n	80114c2 <__gethex+0x10e>
 80113f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80113f6:	4626      	mov	r6, r4
 80113f8:	f7ff ffc6 	bl	8011388 <__hexdig_fun>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d062      	beq.n	80114c6 <__gethex+0x112>
 8011400:	4623      	mov	r3, r4
 8011402:	7818      	ldrb	r0, [r3, #0]
 8011404:	2830      	cmp	r0, #48	@ 0x30
 8011406:	4699      	mov	r9, r3
 8011408:	f103 0301 	add.w	r3, r3, #1
 801140c:	d0f9      	beq.n	8011402 <__gethex+0x4e>
 801140e:	f7ff ffbb 	bl	8011388 <__hexdig_fun>
 8011412:	fab0 f580 	clz	r5, r0
 8011416:	096d      	lsrs	r5, r5, #5
 8011418:	f04f 0b01 	mov.w	fp, #1
 801141c:	464a      	mov	r2, r9
 801141e:	4616      	mov	r6, r2
 8011420:	3201      	adds	r2, #1
 8011422:	7830      	ldrb	r0, [r6, #0]
 8011424:	f7ff ffb0 	bl	8011388 <__hexdig_fun>
 8011428:	2800      	cmp	r0, #0
 801142a:	d1f8      	bne.n	801141e <__gethex+0x6a>
 801142c:	498d      	ldr	r1, [pc, #564]	@ (8011664 <__gethex+0x2b0>)
 801142e:	2201      	movs	r2, #1
 8011430:	4630      	mov	r0, r6
 8011432:	f7ff f808 	bl	8010446 <strncmp>
 8011436:	2800      	cmp	r0, #0
 8011438:	d13f      	bne.n	80114ba <__gethex+0x106>
 801143a:	b944      	cbnz	r4, 801144e <__gethex+0x9a>
 801143c:	1c74      	adds	r4, r6, #1
 801143e:	4622      	mov	r2, r4
 8011440:	4616      	mov	r6, r2
 8011442:	3201      	adds	r2, #1
 8011444:	7830      	ldrb	r0, [r6, #0]
 8011446:	f7ff ff9f 	bl	8011388 <__hexdig_fun>
 801144a:	2800      	cmp	r0, #0
 801144c:	d1f8      	bne.n	8011440 <__gethex+0x8c>
 801144e:	1ba4      	subs	r4, r4, r6
 8011450:	00a7      	lsls	r7, r4, #2
 8011452:	7833      	ldrb	r3, [r6, #0]
 8011454:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011458:	2b50      	cmp	r3, #80	@ 0x50
 801145a:	d13e      	bne.n	80114da <__gethex+0x126>
 801145c:	7873      	ldrb	r3, [r6, #1]
 801145e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011460:	d033      	beq.n	80114ca <__gethex+0x116>
 8011462:	2b2d      	cmp	r3, #45	@ 0x2d
 8011464:	d034      	beq.n	80114d0 <__gethex+0x11c>
 8011466:	1c71      	adds	r1, r6, #1
 8011468:	2400      	movs	r4, #0
 801146a:	7808      	ldrb	r0, [r1, #0]
 801146c:	f7ff ff8c 	bl	8011388 <__hexdig_fun>
 8011470:	1e43      	subs	r3, r0, #1
 8011472:	b2db      	uxtb	r3, r3
 8011474:	2b18      	cmp	r3, #24
 8011476:	d830      	bhi.n	80114da <__gethex+0x126>
 8011478:	f1a0 0210 	sub.w	r2, r0, #16
 801147c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011480:	f7ff ff82 	bl	8011388 <__hexdig_fun>
 8011484:	f100 3cff 	add.w	ip, r0, #4294967295
 8011488:	fa5f fc8c 	uxtb.w	ip, ip
 801148c:	f1bc 0f18 	cmp.w	ip, #24
 8011490:	f04f 030a 	mov.w	r3, #10
 8011494:	d91e      	bls.n	80114d4 <__gethex+0x120>
 8011496:	b104      	cbz	r4, 801149a <__gethex+0xe6>
 8011498:	4252      	negs	r2, r2
 801149a:	4417      	add	r7, r2
 801149c:	f8ca 1000 	str.w	r1, [sl]
 80114a0:	b1ed      	cbz	r5, 80114de <__gethex+0x12a>
 80114a2:	f1bb 0f00 	cmp.w	fp, #0
 80114a6:	bf0c      	ite	eq
 80114a8:	2506      	moveq	r5, #6
 80114aa:	2500      	movne	r5, #0
 80114ac:	4628      	mov	r0, r5
 80114ae:	b005      	add	sp, #20
 80114b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114b4:	2500      	movs	r5, #0
 80114b6:	462c      	mov	r4, r5
 80114b8:	e7b0      	b.n	801141c <__gethex+0x68>
 80114ba:	2c00      	cmp	r4, #0
 80114bc:	d1c7      	bne.n	801144e <__gethex+0x9a>
 80114be:	4627      	mov	r7, r4
 80114c0:	e7c7      	b.n	8011452 <__gethex+0x9e>
 80114c2:	464e      	mov	r6, r9
 80114c4:	462f      	mov	r7, r5
 80114c6:	2501      	movs	r5, #1
 80114c8:	e7c3      	b.n	8011452 <__gethex+0x9e>
 80114ca:	2400      	movs	r4, #0
 80114cc:	1cb1      	adds	r1, r6, #2
 80114ce:	e7cc      	b.n	801146a <__gethex+0xb6>
 80114d0:	2401      	movs	r4, #1
 80114d2:	e7fb      	b.n	80114cc <__gethex+0x118>
 80114d4:	fb03 0002 	mla	r0, r3, r2, r0
 80114d8:	e7ce      	b.n	8011478 <__gethex+0xc4>
 80114da:	4631      	mov	r1, r6
 80114dc:	e7de      	b.n	801149c <__gethex+0xe8>
 80114de:	eba6 0309 	sub.w	r3, r6, r9
 80114e2:	3b01      	subs	r3, #1
 80114e4:	4629      	mov	r1, r5
 80114e6:	2b07      	cmp	r3, #7
 80114e8:	dc0a      	bgt.n	8011500 <__gethex+0x14c>
 80114ea:	9801      	ldr	r0, [sp, #4]
 80114ec:	f000 fa46 	bl	801197c <_Balloc>
 80114f0:	4604      	mov	r4, r0
 80114f2:	b940      	cbnz	r0, 8011506 <__gethex+0x152>
 80114f4:	4b5c      	ldr	r3, [pc, #368]	@ (8011668 <__gethex+0x2b4>)
 80114f6:	4602      	mov	r2, r0
 80114f8:	21e4      	movs	r1, #228	@ 0xe4
 80114fa:	485c      	ldr	r0, [pc, #368]	@ (801166c <__gethex+0x2b8>)
 80114fc:	f001 f996 	bl	801282c <__assert_func>
 8011500:	3101      	adds	r1, #1
 8011502:	105b      	asrs	r3, r3, #1
 8011504:	e7ef      	b.n	80114e6 <__gethex+0x132>
 8011506:	f100 0a14 	add.w	sl, r0, #20
 801150a:	2300      	movs	r3, #0
 801150c:	4655      	mov	r5, sl
 801150e:	469b      	mov	fp, r3
 8011510:	45b1      	cmp	r9, r6
 8011512:	d337      	bcc.n	8011584 <__gethex+0x1d0>
 8011514:	f845 bb04 	str.w	fp, [r5], #4
 8011518:	eba5 050a 	sub.w	r5, r5, sl
 801151c:	10ad      	asrs	r5, r5, #2
 801151e:	6125      	str	r5, [r4, #16]
 8011520:	4658      	mov	r0, fp
 8011522:	f000 fb1d 	bl	8011b60 <__hi0bits>
 8011526:	016d      	lsls	r5, r5, #5
 8011528:	f8d8 6000 	ldr.w	r6, [r8]
 801152c:	1a2d      	subs	r5, r5, r0
 801152e:	42b5      	cmp	r5, r6
 8011530:	dd54      	ble.n	80115dc <__gethex+0x228>
 8011532:	1bad      	subs	r5, r5, r6
 8011534:	4629      	mov	r1, r5
 8011536:	4620      	mov	r0, r4
 8011538:	f000 feb1 	bl	801229e <__any_on>
 801153c:	4681      	mov	r9, r0
 801153e:	b178      	cbz	r0, 8011560 <__gethex+0x1ac>
 8011540:	1e6b      	subs	r3, r5, #1
 8011542:	1159      	asrs	r1, r3, #5
 8011544:	f003 021f 	and.w	r2, r3, #31
 8011548:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801154c:	f04f 0901 	mov.w	r9, #1
 8011550:	fa09 f202 	lsl.w	r2, r9, r2
 8011554:	420a      	tst	r2, r1
 8011556:	d003      	beq.n	8011560 <__gethex+0x1ac>
 8011558:	454b      	cmp	r3, r9
 801155a:	dc36      	bgt.n	80115ca <__gethex+0x216>
 801155c:	f04f 0902 	mov.w	r9, #2
 8011560:	4629      	mov	r1, r5
 8011562:	4620      	mov	r0, r4
 8011564:	f7ff febe 	bl	80112e4 <rshift>
 8011568:	442f      	add	r7, r5
 801156a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801156e:	42bb      	cmp	r3, r7
 8011570:	da42      	bge.n	80115f8 <__gethex+0x244>
 8011572:	9801      	ldr	r0, [sp, #4]
 8011574:	4621      	mov	r1, r4
 8011576:	f000 fa41 	bl	80119fc <_Bfree>
 801157a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801157c:	2300      	movs	r3, #0
 801157e:	6013      	str	r3, [r2, #0]
 8011580:	25a3      	movs	r5, #163	@ 0xa3
 8011582:	e793      	b.n	80114ac <__gethex+0xf8>
 8011584:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011588:	2a2e      	cmp	r2, #46	@ 0x2e
 801158a:	d012      	beq.n	80115b2 <__gethex+0x1fe>
 801158c:	2b20      	cmp	r3, #32
 801158e:	d104      	bne.n	801159a <__gethex+0x1e6>
 8011590:	f845 bb04 	str.w	fp, [r5], #4
 8011594:	f04f 0b00 	mov.w	fp, #0
 8011598:	465b      	mov	r3, fp
 801159a:	7830      	ldrb	r0, [r6, #0]
 801159c:	9303      	str	r3, [sp, #12]
 801159e:	f7ff fef3 	bl	8011388 <__hexdig_fun>
 80115a2:	9b03      	ldr	r3, [sp, #12]
 80115a4:	f000 000f 	and.w	r0, r0, #15
 80115a8:	4098      	lsls	r0, r3
 80115aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80115ae:	3304      	adds	r3, #4
 80115b0:	e7ae      	b.n	8011510 <__gethex+0x15c>
 80115b2:	45b1      	cmp	r9, r6
 80115b4:	d8ea      	bhi.n	801158c <__gethex+0x1d8>
 80115b6:	492b      	ldr	r1, [pc, #172]	@ (8011664 <__gethex+0x2b0>)
 80115b8:	9303      	str	r3, [sp, #12]
 80115ba:	2201      	movs	r2, #1
 80115bc:	4630      	mov	r0, r6
 80115be:	f7fe ff42 	bl	8010446 <strncmp>
 80115c2:	9b03      	ldr	r3, [sp, #12]
 80115c4:	2800      	cmp	r0, #0
 80115c6:	d1e1      	bne.n	801158c <__gethex+0x1d8>
 80115c8:	e7a2      	b.n	8011510 <__gethex+0x15c>
 80115ca:	1ea9      	subs	r1, r5, #2
 80115cc:	4620      	mov	r0, r4
 80115ce:	f000 fe66 	bl	801229e <__any_on>
 80115d2:	2800      	cmp	r0, #0
 80115d4:	d0c2      	beq.n	801155c <__gethex+0x1a8>
 80115d6:	f04f 0903 	mov.w	r9, #3
 80115da:	e7c1      	b.n	8011560 <__gethex+0x1ac>
 80115dc:	da09      	bge.n	80115f2 <__gethex+0x23e>
 80115de:	1b75      	subs	r5, r6, r5
 80115e0:	4621      	mov	r1, r4
 80115e2:	9801      	ldr	r0, [sp, #4]
 80115e4:	462a      	mov	r2, r5
 80115e6:	f000 fc21 	bl	8011e2c <__lshift>
 80115ea:	1b7f      	subs	r7, r7, r5
 80115ec:	4604      	mov	r4, r0
 80115ee:	f100 0a14 	add.w	sl, r0, #20
 80115f2:	f04f 0900 	mov.w	r9, #0
 80115f6:	e7b8      	b.n	801156a <__gethex+0x1b6>
 80115f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80115fc:	42bd      	cmp	r5, r7
 80115fe:	dd6f      	ble.n	80116e0 <__gethex+0x32c>
 8011600:	1bed      	subs	r5, r5, r7
 8011602:	42ae      	cmp	r6, r5
 8011604:	dc34      	bgt.n	8011670 <__gethex+0x2bc>
 8011606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801160a:	2b02      	cmp	r3, #2
 801160c:	d022      	beq.n	8011654 <__gethex+0x2a0>
 801160e:	2b03      	cmp	r3, #3
 8011610:	d024      	beq.n	801165c <__gethex+0x2a8>
 8011612:	2b01      	cmp	r3, #1
 8011614:	d115      	bne.n	8011642 <__gethex+0x28e>
 8011616:	42ae      	cmp	r6, r5
 8011618:	d113      	bne.n	8011642 <__gethex+0x28e>
 801161a:	2e01      	cmp	r6, #1
 801161c:	d10b      	bne.n	8011636 <__gethex+0x282>
 801161e:	9a02      	ldr	r2, [sp, #8]
 8011620:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011624:	6013      	str	r3, [r2, #0]
 8011626:	2301      	movs	r3, #1
 8011628:	6123      	str	r3, [r4, #16]
 801162a:	f8ca 3000 	str.w	r3, [sl]
 801162e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011630:	2562      	movs	r5, #98	@ 0x62
 8011632:	601c      	str	r4, [r3, #0]
 8011634:	e73a      	b.n	80114ac <__gethex+0xf8>
 8011636:	1e71      	subs	r1, r6, #1
 8011638:	4620      	mov	r0, r4
 801163a:	f000 fe30 	bl	801229e <__any_on>
 801163e:	2800      	cmp	r0, #0
 8011640:	d1ed      	bne.n	801161e <__gethex+0x26a>
 8011642:	9801      	ldr	r0, [sp, #4]
 8011644:	4621      	mov	r1, r4
 8011646:	f000 f9d9 	bl	80119fc <_Bfree>
 801164a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801164c:	2300      	movs	r3, #0
 801164e:	6013      	str	r3, [r2, #0]
 8011650:	2550      	movs	r5, #80	@ 0x50
 8011652:	e72b      	b.n	80114ac <__gethex+0xf8>
 8011654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011656:	2b00      	cmp	r3, #0
 8011658:	d1f3      	bne.n	8011642 <__gethex+0x28e>
 801165a:	e7e0      	b.n	801161e <__gethex+0x26a>
 801165c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801165e:	2b00      	cmp	r3, #0
 8011660:	d1dd      	bne.n	801161e <__gethex+0x26a>
 8011662:	e7ee      	b.n	8011642 <__gethex+0x28e>
 8011664:	080153e4 	.word	0x080153e4
 8011668:	080154f5 	.word	0x080154f5
 801166c:	08015506 	.word	0x08015506
 8011670:	1e6f      	subs	r7, r5, #1
 8011672:	f1b9 0f00 	cmp.w	r9, #0
 8011676:	d130      	bne.n	80116da <__gethex+0x326>
 8011678:	b127      	cbz	r7, 8011684 <__gethex+0x2d0>
 801167a:	4639      	mov	r1, r7
 801167c:	4620      	mov	r0, r4
 801167e:	f000 fe0e 	bl	801229e <__any_on>
 8011682:	4681      	mov	r9, r0
 8011684:	117a      	asrs	r2, r7, #5
 8011686:	2301      	movs	r3, #1
 8011688:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801168c:	f007 071f 	and.w	r7, r7, #31
 8011690:	40bb      	lsls	r3, r7
 8011692:	4213      	tst	r3, r2
 8011694:	4629      	mov	r1, r5
 8011696:	4620      	mov	r0, r4
 8011698:	bf18      	it	ne
 801169a:	f049 0902 	orrne.w	r9, r9, #2
 801169e:	f7ff fe21 	bl	80112e4 <rshift>
 80116a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80116a6:	1b76      	subs	r6, r6, r5
 80116a8:	2502      	movs	r5, #2
 80116aa:	f1b9 0f00 	cmp.w	r9, #0
 80116ae:	d047      	beq.n	8011740 <__gethex+0x38c>
 80116b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80116b4:	2b02      	cmp	r3, #2
 80116b6:	d015      	beq.n	80116e4 <__gethex+0x330>
 80116b8:	2b03      	cmp	r3, #3
 80116ba:	d017      	beq.n	80116ec <__gethex+0x338>
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d109      	bne.n	80116d4 <__gethex+0x320>
 80116c0:	f019 0f02 	tst.w	r9, #2
 80116c4:	d006      	beq.n	80116d4 <__gethex+0x320>
 80116c6:	f8da 3000 	ldr.w	r3, [sl]
 80116ca:	ea49 0903 	orr.w	r9, r9, r3
 80116ce:	f019 0f01 	tst.w	r9, #1
 80116d2:	d10e      	bne.n	80116f2 <__gethex+0x33e>
 80116d4:	f045 0510 	orr.w	r5, r5, #16
 80116d8:	e032      	b.n	8011740 <__gethex+0x38c>
 80116da:	f04f 0901 	mov.w	r9, #1
 80116de:	e7d1      	b.n	8011684 <__gethex+0x2d0>
 80116e0:	2501      	movs	r5, #1
 80116e2:	e7e2      	b.n	80116aa <__gethex+0x2f6>
 80116e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116e6:	f1c3 0301 	rsb	r3, r3, #1
 80116ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80116ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d0f0      	beq.n	80116d4 <__gethex+0x320>
 80116f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80116f6:	f104 0314 	add.w	r3, r4, #20
 80116fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80116fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011702:	f04f 0c00 	mov.w	ip, #0
 8011706:	4618      	mov	r0, r3
 8011708:	f853 2b04 	ldr.w	r2, [r3], #4
 801170c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011710:	d01b      	beq.n	801174a <__gethex+0x396>
 8011712:	3201      	adds	r2, #1
 8011714:	6002      	str	r2, [r0, #0]
 8011716:	2d02      	cmp	r5, #2
 8011718:	f104 0314 	add.w	r3, r4, #20
 801171c:	d13c      	bne.n	8011798 <__gethex+0x3e4>
 801171e:	f8d8 2000 	ldr.w	r2, [r8]
 8011722:	3a01      	subs	r2, #1
 8011724:	42b2      	cmp	r2, r6
 8011726:	d109      	bne.n	801173c <__gethex+0x388>
 8011728:	1171      	asrs	r1, r6, #5
 801172a:	2201      	movs	r2, #1
 801172c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011730:	f006 061f 	and.w	r6, r6, #31
 8011734:	fa02 f606 	lsl.w	r6, r2, r6
 8011738:	421e      	tst	r6, r3
 801173a:	d13a      	bne.n	80117b2 <__gethex+0x3fe>
 801173c:	f045 0520 	orr.w	r5, r5, #32
 8011740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011742:	601c      	str	r4, [r3, #0]
 8011744:	9b02      	ldr	r3, [sp, #8]
 8011746:	601f      	str	r7, [r3, #0]
 8011748:	e6b0      	b.n	80114ac <__gethex+0xf8>
 801174a:	4299      	cmp	r1, r3
 801174c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011750:	d8d9      	bhi.n	8011706 <__gethex+0x352>
 8011752:	68a3      	ldr	r3, [r4, #8]
 8011754:	459b      	cmp	fp, r3
 8011756:	db17      	blt.n	8011788 <__gethex+0x3d4>
 8011758:	6861      	ldr	r1, [r4, #4]
 801175a:	9801      	ldr	r0, [sp, #4]
 801175c:	3101      	adds	r1, #1
 801175e:	f000 f90d 	bl	801197c <_Balloc>
 8011762:	4681      	mov	r9, r0
 8011764:	b918      	cbnz	r0, 801176e <__gethex+0x3ba>
 8011766:	4b1a      	ldr	r3, [pc, #104]	@ (80117d0 <__gethex+0x41c>)
 8011768:	4602      	mov	r2, r0
 801176a:	2184      	movs	r1, #132	@ 0x84
 801176c:	e6c5      	b.n	80114fa <__gethex+0x146>
 801176e:	6922      	ldr	r2, [r4, #16]
 8011770:	3202      	adds	r2, #2
 8011772:	f104 010c 	add.w	r1, r4, #12
 8011776:	0092      	lsls	r2, r2, #2
 8011778:	300c      	adds	r0, #12
 801177a:	f7fe fefe 	bl	801057a <memcpy>
 801177e:	4621      	mov	r1, r4
 8011780:	9801      	ldr	r0, [sp, #4]
 8011782:	f000 f93b 	bl	80119fc <_Bfree>
 8011786:	464c      	mov	r4, r9
 8011788:	6923      	ldr	r3, [r4, #16]
 801178a:	1c5a      	adds	r2, r3, #1
 801178c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011790:	6122      	str	r2, [r4, #16]
 8011792:	2201      	movs	r2, #1
 8011794:	615a      	str	r2, [r3, #20]
 8011796:	e7be      	b.n	8011716 <__gethex+0x362>
 8011798:	6922      	ldr	r2, [r4, #16]
 801179a:	455a      	cmp	r2, fp
 801179c:	dd0b      	ble.n	80117b6 <__gethex+0x402>
 801179e:	2101      	movs	r1, #1
 80117a0:	4620      	mov	r0, r4
 80117a2:	f7ff fd9f 	bl	80112e4 <rshift>
 80117a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80117aa:	3701      	adds	r7, #1
 80117ac:	42bb      	cmp	r3, r7
 80117ae:	f6ff aee0 	blt.w	8011572 <__gethex+0x1be>
 80117b2:	2501      	movs	r5, #1
 80117b4:	e7c2      	b.n	801173c <__gethex+0x388>
 80117b6:	f016 061f 	ands.w	r6, r6, #31
 80117ba:	d0fa      	beq.n	80117b2 <__gethex+0x3fe>
 80117bc:	4453      	add	r3, sl
 80117be:	f1c6 0620 	rsb	r6, r6, #32
 80117c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80117c6:	f000 f9cb 	bl	8011b60 <__hi0bits>
 80117ca:	42b0      	cmp	r0, r6
 80117cc:	dbe7      	blt.n	801179e <__gethex+0x3ea>
 80117ce:	e7f0      	b.n	80117b2 <__gethex+0x3fe>
 80117d0:	080154f5 	.word	0x080154f5

080117d4 <L_shift>:
 80117d4:	f1c2 0208 	rsb	r2, r2, #8
 80117d8:	0092      	lsls	r2, r2, #2
 80117da:	b570      	push	{r4, r5, r6, lr}
 80117dc:	f1c2 0620 	rsb	r6, r2, #32
 80117e0:	6843      	ldr	r3, [r0, #4]
 80117e2:	6804      	ldr	r4, [r0, #0]
 80117e4:	fa03 f506 	lsl.w	r5, r3, r6
 80117e8:	432c      	orrs	r4, r5
 80117ea:	40d3      	lsrs	r3, r2
 80117ec:	6004      	str	r4, [r0, #0]
 80117ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80117f2:	4288      	cmp	r0, r1
 80117f4:	d3f4      	bcc.n	80117e0 <L_shift+0xc>
 80117f6:	bd70      	pop	{r4, r5, r6, pc}

080117f8 <__match>:
 80117f8:	b530      	push	{r4, r5, lr}
 80117fa:	6803      	ldr	r3, [r0, #0]
 80117fc:	3301      	adds	r3, #1
 80117fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011802:	b914      	cbnz	r4, 801180a <__match+0x12>
 8011804:	6003      	str	r3, [r0, #0]
 8011806:	2001      	movs	r0, #1
 8011808:	bd30      	pop	{r4, r5, pc}
 801180a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801180e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011812:	2d19      	cmp	r5, #25
 8011814:	bf98      	it	ls
 8011816:	3220      	addls	r2, #32
 8011818:	42a2      	cmp	r2, r4
 801181a:	d0f0      	beq.n	80117fe <__match+0x6>
 801181c:	2000      	movs	r0, #0
 801181e:	e7f3      	b.n	8011808 <__match+0x10>

08011820 <__hexnan>:
 8011820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	680b      	ldr	r3, [r1, #0]
 8011826:	6801      	ldr	r1, [r0, #0]
 8011828:	115e      	asrs	r6, r3, #5
 801182a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801182e:	f013 031f 	ands.w	r3, r3, #31
 8011832:	b087      	sub	sp, #28
 8011834:	bf18      	it	ne
 8011836:	3604      	addne	r6, #4
 8011838:	2500      	movs	r5, #0
 801183a:	1f37      	subs	r7, r6, #4
 801183c:	4682      	mov	sl, r0
 801183e:	4690      	mov	r8, r2
 8011840:	9301      	str	r3, [sp, #4]
 8011842:	f846 5c04 	str.w	r5, [r6, #-4]
 8011846:	46b9      	mov	r9, r7
 8011848:	463c      	mov	r4, r7
 801184a:	9502      	str	r5, [sp, #8]
 801184c:	46ab      	mov	fp, r5
 801184e:	784a      	ldrb	r2, [r1, #1]
 8011850:	1c4b      	adds	r3, r1, #1
 8011852:	9303      	str	r3, [sp, #12]
 8011854:	b342      	cbz	r2, 80118a8 <__hexnan+0x88>
 8011856:	4610      	mov	r0, r2
 8011858:	9105      	str	r1, [sp, #20]
 801185a:	9204      	str	r2, [sp, #16]
 801185c:	f7ff fd94 	bl	8011388 <__hexdig_fun>
 8011860:	2800      	cmp	r0, #0
 8011862:	d151      	bne.n	8011908 <__hexnan+0xe8>
 8011864:	9a04      	ldr	r2, [sp, #16]
 8011866:	9905      	ldr	r1, [sp, #20]
 8011868:	2a20      	cmp	r2, #32
 801186a:	d818      	bhi.n	801189e <__hexnan+0x7e>
 801186c:	9b02      	ldr	r3, [sp, #8]
 801186e:	459b      	cmp	fp, r3
 8011870:	dd13      	ble.n	801189a <__hexnan+0x7a>
 8011872:	454c      	cmp	r4, r9
 8011874:	d206      	bcs.n	8011884 <__hexnan+0x64>
 8011876:	2d07      	cmp	r5, #7
 8011878:	dc04      	bgt.n	8011884 <__hexnan+0x64>
 801187a:	462a      	mov	r2, r5
 801187c:	4649      	mov	r1, r9
 801187e:	4620      	mov	r0, r4
 8011880:	f7ff ffa8 	bl	80117d4 <L_shift>
 8011884:	4544      	cmp	r4, r8
 8011886:	d952      	bls.n	801192e <__hexnan+0x10e>
 8011888:	2300      	movs	r3, #0
 801188a:	f1a4 0904 	sub.w	r9, r4, #4
 801188e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011892:	f8cd b008 	str.w	fp, [sp, #8]
 8011896:	464c      	mov	r4, r9
 8011898:	461d      	mov	r5, r3
 801189a:	9903      	ldr	r1, [sp, #12]
 801189c:	e7d7      	b.n	801184e <__hexnan+0x2e>
 801189e:	2a29      	cmp	r2, #41	@ 0x29
 80118a0:	d157      	bne.n	8011952 <__hexnan+0x132>
 80118a2:	3102      	adds	r1, #2
 80118a4:	f8ca 1000 	str.w	r1, [sl]
 80118a8:	f1bb 0f00 	cmp.w	fp, #0
 80118ac:	d051      	beq.n	8011952 <__hexnan+0x132>
 80118ae:	454c      	cmp	r4, r9
 80118b0:	d206      	bcs.n	80118c0 <__hexnan+0xa0>
 80118b2:	2d07      	cmp	r5, #7
 80118b4:	dc04      	bgt.n	80118c0 <__hexnan+0xa0>
 80118b6:	462a      	mov	r2, r5
 80118b8:	4649      	mov	r1, r9
 80118ba:	4620      	mov	r0, r4
 80118bc:	f7ff ff8a 	bl	80117d4 <L_shift>
 80118c0:	4544      	cmp	r4, r8
 80118c2:	d936      	bls.n	8011932 <__hexnan+0x112>
 80118c4:	f1a8 0204 	sub.w	r2, r8, #4
 80118c8:	4623      	mov	r3, r4
 80118ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80118ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80118d2:	429f      	cmp	r7, r3
 80118d4:	d2f9      	bcs.n	80118ca <__hexnan+0xaa>
 80118d6:	1b3b      	subs	r3, r7, r4
 80118d8:	f023 0303 	bic.w	r3, r3, #3
 80118dc:	3304      	adds	r3, #4
 80118de:	3401      	adds	r4, #1
 80118e0:	3e03      	subs	r6, #3
 80118e2:	42b4      	cmp	r4, r6
 80118e4:	bf88      	it	hi
 80118e6:	2304      	movhi	r3, #4
 80118e8:	4443      	add	r3, r8
 80118ea:	2200      	movs	r2, #0
 80118ec:	f843 2b04 	str.w	r2, [r3], #4
 80118f0:	429f      	cmp	r7, r3
 80118f2:	d2fb      	bcs.n	80118ec <__hexnan+0xcc>
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	b91b      	cbnz	r3, 8011900 <__hexnan+0xe0>
 80118f8:	4547      	cmp	r7, r8
 80118fa:	d128      	bne.n	801194e <__hexnan+0x12e>
 80118fc:	2301      	movs	r3, #1
 80118fe:	603b      	str	r3, [r7, #0]
 8011900:	2005      	movs	r0, #5
 8011902:	b007      	add	sp, #28
 8011904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011908:	3501      	adds	r5, #1
 801190a:	2d08      	cmp	r5, #8
 801190c:	f10b 0b01 	add.w	fp, fp, #1
 8011910:	dd06      	ble.n	8011920 <__hexnan+0x100>
 8011912:	4544      	cmp	r4, r8
 8011914:	d9c1      	bls.n	801189a <__hexnan+0x7a>
 8011916:	2300      	movs	r3, #0
 8011918:	f844 3c04 	str.w	r3, [r4, #-4]
 801191c:	2501      	movs	r5, #1
 801191e:	3c04      	subs	r4, #4
 8011920:	6822      	ldr	r2, [r4, #0]
 8011922:	f000 000f 	and.w	r0, r0, #15
 8011926:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801192a:	6020      	str	r0, [r4, #0]
 801192c:	e7b5      	b.n	801189a <__hexnan+0x7a>
 801192e:	2508      	movs	r5, #8
 8011930:	e7b3      	b.n	801189a <__hexnan+0x7a>
 8011932:	9b01      	ldr	r3, [sp, #4]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d0dd      	beq.n	80118f4 <__hexnan+0xd4>
 8011938:	f1c3 0320 	rsb	r3, r3, #32
 801193c:	f04f 32ff 	mov.w	r2, #4294967295
 8011940:	40da      	lsrs	r2, r3
 8011942:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011946:	4013      	ands	r3, r2
 8011948:	f846 3c04 	str.w	r3, [r6, #-4]
 801194c:	e7d2      	b.n	80118f4 <__hexnan+0xd4>
 801194e:	3f04      	subs	r7, #4
 8011950:	e7d0      	b.n	80118f4 <__hexnan+0xd4>
 8011952:	2004      	movs	r0, #4
 8011954:	e7d5      	b.n	8011902 <__hexnan+0xe2>

08011956 <__ascii_mbtowc>:
 8011956:	b082      	sub	sp, #8
 8011958:	b901      	cbnz	r1, 801195c <__ascii_mbtowc+0x6>
 801195a:	a901      	add	r1, sp, #4
 801195c:	b142      	cbz	r2, 8011970 <__ascii_mbtowc+0x1a>
 801195e:	b14b      	cbz	r3, 8011974 <__ascii_mbtowc+0x1e>
 8011960:	7813      	ldrb	r3, [r2, #0]
 8011962:	600b      	str	r3, [r1, #0]
 8011964:	7812      	ldrb	r2, [r2, #0]
 8011966:	1e10      	subs	r0, r2, #0
 8011968:	bf18      	it	ne
 801196a:	2001      	movne	r0, #1
 801196c:	b002      	add	sp, #8
 801196e:	4770      	bx	lr
 8011970:	4610      	mov	r0, r2
 8011972:	e7fb      	b.n	801196c <__ascii_mbtowc+0x16>
 8011974:	f06f 0001 	mvn.w	r0, #1
 8011978:	e7f8      	b.n	801196c <__ascii_mbtowc+0x16>
	...

0801197c <_Balloc>:
 801197c:	b570      	push	{r4, r5, r6, lr}
 801197e:	69c6      	ldr	r6, [r0, #28]
 8011980:	4604      	mov	r4, r0
 8011982:	460d      	mov	r5, r1
 8011984:	b976      	cbnz	r6, 80119a4 <_Balloc+0x28>
 8011986:	2010      	movs	r0, #16
 8011988:	f7fc fef8 	bl	800e77c <malloc>
 801198c:	4602      	mov	r2, r0
 801198e:	61e0      	str	r0, [r4, #28]
 8011990:	b920      	cbnz	r0, 801199c <_Balloc+0x20>
 8011992:	4b18      	ldr	r3, [pc, #96]	@ (80119f4 <_Balloc+0x78>)
 8011994:	4818      	ldr	r0, [pc, #96]	@ (80119f8 <_Balloc+0x7c>)
 8011996:	216b      	movs	r1, #107	@ 0x6b
 8011998:	f000 ff48 	bl	801282c <__assert_func>
 801199c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80119a0:	6006      	str	r6, [r0, #0]
 80119a2:	60c6      	str	r6, [r0, #12]
 80119a4:	69e6      	ldr	r6, [r4, #28]
 80119a6:	68f3      	ldr	r3, [r6, #12]
 80119a8:	b183      	cbz	r3, 80119cc <_Balloc+0x50>
 80119aa:	69e3      	ldr	r3, [r4, #28]
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80119b2:	b9b8      	cbnz	r0, 80119e4 <_Balloc+0x68>
 80119b4:	2101      	movs	r1, #1
 80119b6:	fa01 f605 	lsl.w	r6, r1, r5
 80119ba:	1d72      	adds	r2, r6, #5
 80119bc:	0092      	lsls	r2, r2, #2
 80119be:	4620      	mov	r0, r4
 80119c0:	f000 ff52 	bl	8012868 <_calloc_r>
 80119c4:	b160      	cbz	r0, 80119e0 <_Balloc+0x64>
 80119c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80119ca:	e00e      	b.n	80119ea <_Balloc+0x6e>
 80119cc:	2221      	movs	r2, #33	@ 0x21
 80119ce:	2104      	movs	r1, #4
 80119d0:	4620      	mov	r0, r4
 80119d2:	f000 ff49 	bl	8012868 <_calloc_r>
 80119d6:	69e3      	ldr	r3, [r4, #28]
 80119d8:	60f0      	str	r0, [r6, #12]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1e4      	bne.n	80119aa <_Balloc+0x2e>
 80119e0:	2000      	movs	r0, #0
 80119e2:	bd70      	pop	{r4, r5, r6, pc}
 80119e4:	6802      	ldr	r2, [r0, #0]
 80119e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80119ea:	2300      	movs	r3, #0
 80119ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80119f0:	e7f7      	b.n	80119e2 <_Balloc+0x66>
 80119f2:	bf00      	nop
 80119f4:	08015486 	.word	0x08015486
 80119f8:	08015566 	.word	0x08015566

080119fc <_Bfree>:
 80119fc:	b570      	push	{r4, r5, r6, lr}
 80119fe:	69c6      	ldr	r6, [r0, #28]
 8011a00:	4605      	mov	r5, r0
 8011a02:	460c      	mov	r4, r1
 8011a04:	b976      	cbnz	r6, 8011a24 <_Bfree+0x28>
 8011a06:	2010      	movs	r0, #16
 8011a08:	f7fc feb8 	bl	800e77c <malloc>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	61e8      	str	r0, [r5, #28]
 8011a10:	b920      	cbnz	r0, 8011a1c <_Bfree+0x20>
 8011a12:	4b09      	ldr	r3, [pc, #36]	@ (8011a38 <_Bfree+0x3c>)
 8011a14:	4809      	ldr	r0, [pc, #36]	@ (8011a3c <_Bfree+0x40>)
 8011a16:	218f      	movs	r1, #143	@ 0x8f
 8011a18:	f000 ff08 	bl	801282c <__assert_func>
 8011a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a20:	6006      	str	r6, [r0, #0]
 8011a22:	60c6      	str	r6, [r0, #12]
 8011a24:	b13c      	cbz	r4, 8011a36 <_Bfree+0x3a>
 8011a26:	69eb      	ldr	r3, [r5, #28]
 8011a28:	6862      	ldr	r2, [r4, #4]
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a30:	6021      	str	r1, [r4, #0]
 8011a32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011a36:	bd70      	pop	{r4, r5, r6, pc}
 8011a38:	08015486 	.word	0x08015486
 8011a3c:	08015566 	.word	0x08015566

08011a40 <__multadd>:
 8011a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a44:	690d      	ldr	r5, [r1, #16]
 8011a46:	4607      	mov	r7, r0
 8011a48:	460c      	mov	r4, r1
 8011a4a:	461e      	mov	r6, r3
 8011a4c:	f101 0c14 	add.w	ip, r1, #20
 8011a50:	2000      	movs	r0, #0
 8011a52:	f8dc 3000 	ldr.w	r3, [ip]
 8011a56:	b299      	uxth	r1, r3
 8011a58:	fb02 6101 	mla	r1, r2, r1, r6
 8011a5c:	0c1e      	lsrs	r6, r3, #16
 8011a5e:	0c0b      	lsrs	r3, r1, #16
 8011a60:	fb02 3306 	mla	r3, r2, r6, r3
 8011a64:	b289      	uxth	r1, r1
 8011a66:	3001      	adds	r0, #1
 8011a68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011a6c:	4285      	cmp	r5, r0
 8011a6e:	f84c 1b04 	str.w	r1, [ip], #4
 8011a72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011a76:	dcec      	bgt.n	8011a52 <__multadd+0x12>
 8011a78:	b30e      	cbz	r6, 8011abe <__multadd+0x7e>
 8011a7a:	68a3      	ldr	r3, [r4, #8]
 8011a7c:	42ab      	cmp	r3, r5
 8011a7e:	dc19      	bgt.n	8011ab4 <__multadd+0x74>
 8011a80:	6861      	ldr	r1, [r4, #4]
 8011a82:	4638      	mov	r0, r7
 8011a84:	3101      	adds	r1, #1
 8011a86:	f7ff ff79 	bl	801197c <_Balloc>
 8011a8a:	4680      	mov	r8, r0
 8011a8c:	b928      	cbnz	r0, 8011a9a <__multadd+0x5a>
 8011a8e:	4602      	mov	r2, r0
 8011a90:	4b0c      	ldr	r3, [pc, #48]	@ (8011ac4 <__multadd+0x84>)
 8011a92:	480d      	ldr	r0, [pc, #52]	@ (8011ac8 <__multadd+0x88>)
 8011a94:	21ba      	movs	r1, #186	@ 0xba
 8011a96:	f000 fec9 	bl	801282c <__assert_func>
 8011a9a:	6922      	ldr	r2, [r4, #16]
 8011a9c:	3202      	adds	r2, #2
 8011a9e:	f104 010c 	add.w	r1, r4, #12
 8011aa2:	0092      	lsls	r2, r2, #2
 8011aa4:	300c      	adds	r0, #12
 8011aa6:	f7fe fd68 	bl	801057a <memcpy>
 8011aaa:	4621      	mov	r1, r4
 8011aac:	4638      	mov	r0, r7
 8011aae:	f7ff ffa5 	bl	80119fc <_Bfree>
 8011ab2:	4644      	mov	r4, r8
 8011ab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ab8:	3501      	adds	r5, #1
 8011aba:	615e      	str	r6, [r3, #20]
 8011abc:	6125      	str	r5, [r4, #16]
 8011abe:	4620      	mov	r0, r4
 8011ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac4:	080154f5 	.word	0x080154f5
 8011ac8:	08015566 	.word	0x08015566

08011acc <__s2b>:
 8011acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ad0:	460c      	mov	r4, r1
 8011ad2:	4615      	mov	r5, r2
 8011ad4:	461f      	mov	r7, r3
 8011ad6:	2209      	movs	r2, #9
 8011ad8:	3308      	adds	r3, #8
 8011ada:	4606      	mov	r6, r0
 8011adc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ae0:	2100      	movs	r1, #0
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	db09      	blt.n	8011afc <__s2b+0x30>
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f7ff ff47 	bl	801197c <_Balloc>
 8011aee:	b940      	cbnz	r0, 8011b02 <__s2b+0x36>
 8011af0:	4602      	mov	r2, r0
 8011af2:	4b19      	ldr	r3, [pc, #100]	@ (8011b58 <__s2b+0x8c>)
 8011af4:	4819      	ldr	r0, [pc, #100]	@ (8011b5c <__s2b+0x90>)
 8011af6:	21d3      	movs	r1, #211	@ 0xd3
 8011af8:	f000 fe98 	bl	801282c <__assert_func>
 8011afc:	0052      	lsls	r2, r2, #1
 8011afe:	3101      	adds	r1, #1
 8011b00:	e7f0      	b.n	8011ae4 <__s2b+0x18>
 8011b02:	9b08      	ldr	r3, [sp, #32]
 8011b04:	6143      	str	r3, [r0, #20]
 8011b06:	2d09      	cmp	r5, #9
 8011b08:	f04f 0301 	mov.w	r3, #1
 8011b0c:	6103      	str	r3, [r0, #16]
 8011b0e:	dd16      	ble.n	8011b3e <__s2b+0x72>
 8011b10:	f104 0909 	add.w	r9, r4, #9
 8011b14:	46c8      	mov	r8, r9
 8011b16:	442c      	add	r4, r5
 8011b18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011b1c:	4601      	mov	r1, r0
 8011b1e:	3b30      	subs	r3, #48	@ 0x30
 8011b20:	220a      	movs	r2, #10
 8011b22:	4630      	mov	r0, r6
 8011b24:	f7ff ff8c 	bl	8011a40 <__multadd>
 8011b28:	45a0      	cmp	r8, r4
 8011b2a:	d1f5      	bne.n	8011b18 <__s2b+0x4c>
 8011b2c:	f1a5 0408 	sub.w	r4, r5, #8
 8011b30:	444c      	add	r4, r9
 8011b32:	1b2d      	subs	r5, r5, r4
 8011b34:	1963      	adds	r3, r4, r5
 8011b36:	42bb      	cmp	r3, r7
 8011b38:	db04      	blt.n	8011b44 <__s2b+0x78>
 8011b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b3e:	340a      	adds	r4, #10
 8011b40:	2509      	movs	r5, #9
 8011b42:	e7f6      	b.n	8011b32 <__s2b+0x66>
 8011b44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011b48:	4601      	mov	r1, r0
 8011b4a:	3b30      	subs	r3, #48	@ 0x30
 8011b4c:	220a      	movs	r2, #10
 8011b4e:	4630      	mov	r0, r6
 8011b50:	f7ff ff76 	bl	8011a40 <__multadd>
 8011b54:	e7ee      	b.n	8011b34 <__s2b+0x68>
 8011b56:	bf00      	nop
 8011b58:	080154f5 	.word	0x080154f5
 8011b5c:	08015566 	.word	0x08015566

08011b60 <__hi0bits>:
 8011b60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011b64:	4603      	mov	r3, r0
 8011b66:	bf36      	itet	cc
 8011b68:	0403      	lslcc	r3, r0, #16
 8011b6a:	2000      	movcs	r0, #0
 8011b6c:	2010      	movcc	r0, #16
 8011b6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011b72:	bf3c      	itt	cc
 8011b74:	021b      	lslcc	r3, r3, #8
 8011b76:	3008      	addcc	r0, #8
 8011b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011b7c:	bf3c      	itt	cc
 8011b7e:	011b      	lslcc	r3, r3, #4
 8011b80:	3004      	addcc	r0, #4
 8011b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011b86:	bf3c      	itt	cc
 8011b88:	009b      	lslcc	r3, r3, #2
 8011b8a:	3002      	addcc	r0, #2
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	db05      	blt.n	8011b9c <__hi0bits+0x3c>
 8011b90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011b94:	f100 0001 	add.w	r0, r0, #1
 8011b98:	bf08      	it	eq
 8011b9a:	2020      	moveq	r0, #32
 8011b9c:	4770      	bx	lr

08011b9e <__lo0bits>:
 8011b9e:	6803      	ldr	r3, [r0, #0]
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	f013 0007 	ands.w	r0, r3, #7
 8011ba6:	d00b      	beq.n	8011bc0 <__lo0bits+0x22>
 8011ba8:	07d9      	lsls	r1, r3, #31
 8011baa:	d421      	bmi.n	8011bf0 <__lo0bits+0x52>
 8011bac:	0798      	lsls	r0, r3, #30
 8011bae:	bf49      	itett	mi
 8011bb0:	085b      	lsrmi	r3, r3, #1
 8011bb2:	089b      	lsrpl	r3, r3, #2
 8011bb4:	2001      	movmi	r0, #1
 8011bb6:	6013      	strmi	r3, [r2, #0]
 8011bb8:	bf5c      	itt	pl
 8011bba:	6013      	strpl	r3, [r2, #0]
 8011bbc:	2002      	movpl	r0, #2
 8011bbe:	4770      	bx	lr
 8011bc0:	b299      	uxth	r1, r3
 8011bc2:	b909      	cbnz	r1, 8011bc8 <__lo0bits+0x2a>
 8011bc4:	0c1b      	lsrs	r3, r3, #16
 8011bc6:	2010      	movs	r0, #16
 8011bc8:	b2d9      	uxtb	r1, r3
 8011bca:	b909      	cbnz	r1, 8011bd0 <__lo0bits+0x32>
 8011bcc:	3008      	adds	r0, #8
 8011bce:	0a1b      	lsrs	r3, r3, #8
 8011bd0:	0719      	lsls	r1, r3, #28
 8011bd2:	bf04      	itt	eq
 8011bd4:	091b      	lsreq	r3, r3, #4
 8011bd6:	3004      	addeq	r0, #4
 8011bd8:	0799      	lsls	r1, r3, #30
 8011bda:	bf04      	itt	eq
 8011bdc:	089b      	lsreq	r3, r3, #2
 8011bde:	3002      	addeq	r0, #2
 8011be0:	07d9      	lsls	r1, r3, #31
 8011be2:	d403      	bmi.n	8011bec <__lo0bits+0x4e>
 8011be4:	085b      	lsrs	r3, r3, #1
 8011be6:	f100 0001 	add.w	r0, r0, #1
 8011bea:	d003      	beq.n	8011bf4 <__lo0bits+0x56>
 8011bec:	6013      	str	r3, [r2, #0]
 8011bee:	4770      	bx	lr
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	4770      	bx	lr
 8011bf4:	2020      	movs	r0, #32
 8011bf6:	4770      	bx	lr

08011bf8 <__i2b>:
 8011bf8:	b510      	push	{r4, lr}
 8011bfa:	460c      	mov	r4, r1
 8011bfc:	2101      	movs	r1, #1
 8011bfe:	f7ff febd 	bl	801197c <_Balloc>
 8011c02:	4602      	mov	r2, r0
 8011c04:	b928      	cbnz	r0, 8011c12 <__i2b+0x1a>
 8011c06:	4b05      	ldr	r3, [pc, #20]	@ (8011c1c <__i2b+0x24>)
 8011c08:	4805      	ldr	r0, [pc, #20]	@ (8011c20 <__i2b+0x28>)
 8011c0a:	f240 1145 	movw	r1, #325	@ 0x145
 8011c0e:	f000 fe0d 	bl	801282c <__assert_func>
 8011c12:	2301      	movs	r3, #1
 8011c14:	6144      	str	r4, [r0, #20]
 8011c16:	6103      	str	r3, [r0, #16]
 8011c18:	bd10      	pop	{r4, pc}
 8011c1a:	bf00      	nop
 8011c1c:	080154f5 	.word	0x080154f5
 8011c20:	08015566 	.word	0x08015566

08011c24 <__multiply>:
 8011c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c28:	4614      	mov	r4, r2
 8011c2a:	690a      	ldr	r2, [r1, #16]
 8011c2c:	6923      	ldr	r3, [r4, #16]
 8011c2e:	429a      	cmp	r2, r3
 8011c30:	bfa8      	it	ge
 8011c32:	4623      	movge	r3, r4
 8011c34:	460f      	mov	r7, r1
 8011c36:	bfa4      	itt	ge
 8011c38:	460c      	movge	r4, r1
 8011c3a:	461f      	movge	r7, r3
 8011c3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011c40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011c44:	68a3      	ldr	r3, [r4, #8]
 8011c46:	6861      	ldr	r1, [r4, #4]
 8011c48:	eb0a 0609 	add.w	r6, sl, r9
 8011c4c:	42b3      	cmp	r3, r6
 8011c4e:	b085      	sub	sp, #20
 8011c50:	bfb8      	it	lt
 8011c52:	3101      	addlt	r1, #1
 8011c54:	f7ff fe92 	bl	801197c <_Balloc>
 8011c58:	b930      	cbnz	r0, 8011c68 <__multiply+0x44>
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	4b44      	ldr	r3, [pc, #272]	@ (8011d70 <__multiply+0x14c>)
 8011c5e:	4845      	ldr	r0, [pc, #276]	@ (8011d74 <__multiply+0x150>)
 8011c60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011c64:	f000 fde2 	bl	801282c <__assert_func>
 8011c68:	f100 0514 	add.w	r5, r0, #20
 8011c6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011c70:	462b      	mov	r3, r5
 8011c72:	2200      	movs	r2, #0
 8011c74:	4543      	cmp	r3, r8
 8011c76:	d321      	bcc.n	8011cbc <__multiply+0x98>
 8011c78:	f107 0114 	add.w	r1, r7, #20
 8011c7c:	f104 0214 	add.w	r2, r4, #20
 8011c80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011c84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011c88:	9302      	str	r3, [sp, #8]
 8011c8a:	1b13      	subs	r3, r2, r4
 8011c8c:	3b15      	subs	r3, #21
 8011c8e:	f023 0303 	bic.w	r3, r3, #3
 8011c92:	3304      	adds	r3, #4
 8011c94:	f104 0715 	add.w	r7, r4, #21
 8011c98:	42ba      	cmp	r2, r7
 8011c9a:	bf38      	it	cc
 8011c9c:	2304      	movcc	r3, #4
 8011c9e:	9301      	str	r3, [sp, #4]
 8011ca0:	9b02      	ldr	r3, [sp, #8]
 8011ca2:	9103      	str	r1, [sp, #12]
 8011ca4:	428b      	cmp	r3, r1
 8011ca6:	d80c      	bhi.n	8011cc2 <__multiply+0x9e>
 8011ca8:	2e00      	cmp	r6, #0
 8011caa:	dd03      	ble.n	8011cb4 <__multiply+0x90>
 8011cac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d05b      	beq.n	8011d6c <__multiply+0x148>
 8011cb4:	6106      	str	r6, [r0, #16]
 8011cb6:	b005      	add	sp, #20
 8011cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cbc:	f843 2b04 	str.w	r2, [r3], #4
 8011cc0:	e7d8      	b.n	8011c74 <__multiply+0x50>
 8011cc2:	f8b1 a000 	ldrh.w	sl, [r1]
 8011cc6:	f1ba 0f00 	cmp.w	sl, #0
 8011cca:	d024      	beq.n	8011d16 <__multiply+0xf2>
 8011ccc:	f104 0e14 	add.w	lr, r4, #20
 8011cd0:	46a9      	mov	r9, r5
 8011cd2:	f04f 0c00 	mov.w	ip, #0
 8011cd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011cda:	f8d9 3000 	ldr.w	r3, [r9]
 8011cde:	fa1f fb87 	uxth.w	fp, r7
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	fb0a 330b 	mla	r3, sl, fp, r3
 8011ce8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011cec:	f8d9 7000 	ldr.w	r7, [r9]
 8011cf0:	4463      	add	r3, ip
 8011cf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011cf6:	fb0a c70b 	mla	r7, sl, fp, ip
 8011cfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011d04:	4572      	cmp	r2, lr
 8011d06:	f849 3b04 	str.w	r3, [r9], #4
 8011d0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011d0e:	d8e2      	bhi.n	8011cd6 <__multiply+0xb2>
 8011d10:	9b01      	ldr	r3, [sp, #4]
 8011d12:	f845 c003 	str.w	ip, [r5, r3]
 8011d16:	9b03      	ldr	r3, [sp, #12]
 8011d18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011d1c:	3104      	adds	r1, #4
 8011d1e:	f1b9 0f00 	cmp.w	r9, #0
 8011d22:	d021      	beq.n	8011d68 <__multiply+0x144>
 8011d24:	682b      	ldr	r3, [r5, #0]
 8011d26:	f104 0c14 	add.w	ip, r4, #20
 8011d2a:	46ae      	mov	lr, r5
 8011d2c:	f04f 0a00 	mov.w	sl, #0
 8011d30:	f8bc b000 	ldrh.w	fp, [ip]
 8011d34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011d38:	fb09 770b 	mla	r7, r9, fp, r7
 8011d3c:	4457      	add	r7, sl
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011d44:	f84e 3b04 	str.w	r3, [lr], #4
 8011d48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011d4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d50:	f8be 3000 	ldrh.w	r3, [lr]
 8011d54:	fb09 330a 	mla	r3, r9, sl, r3
 8011d58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011d5c:	4562      	cmp	r2, ip
 8011d5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d62:	d8e5      	bhi.n	8011d30 <__multiply+0x10c>
 8011d64:	9f01      	ldr	r7, [sp, #4]
 8011d66:	51eb      	str	r3, [r5, r7]
 8011d68:	3504      	adds	r5, #4
 8011d6a:	e799      	b.n	8011ca0 <__multiply+0x7c>
 8011d6c:	3e01      	subs	r6, #1
 8011d6e:	e79b      	b.n	8011ca8 <__multiply+0x84>
 8011d70:	080154f5 	.word	0x080154f5
 8011d74:	08015566 	.word	0x08015566

08011d78 <__pow5mult>:
 8011d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d7c:	4615      	mov	r5, r2
 8011d7e:	f012 0203 	ands.w	r2, r2, #3
 8011d82:	4607      	mov	r7, r0
 8011d84:	460e      	mov	r6, r1
 8011d86:	d007      	beq.n	8011d98 <__pow5mult+0x20>
 8011d88:	4c25      	ldr	r4, [pc, #148]	@ (8011e20 <__pow5mult+0xa8>)
 8011d8a:	3a01      	subs	r2, #1
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d92:	f7ff fe55 	bl	8011a40 <__multadd>
 8011d96:	4606      	mov	r6, r0
 8011d98:	10ad      	asrs	r5, r5, #2
 8011d9a:	d03d      	beq.n	8011e18 <__pow5mult+0xa0>
 8011d9c:	69fc      	ldr	r4, [r7, #28]
 8011d9e:	b97c      	cbnz	r4, 8011dc0 <__pow5mult+0x48>
 8011da0:	2010      	movs	r0, #16
 8011da2:	f7fc fceb 	bl	800e77c <malloc>
 8011da6:	4602      	mov	r2, r0
 8011da8:	61f8      	str	r0, [r7, #28]
 8011daa:	b928      	cbnz	r0, 8011db8 <__pow5mult+0x40>
 8011dac:	4b1d      	ldr	r3, [pc, #116]	@ (8011e24 <__pow5mult+0xac>)
 8011dae:	481e      	ldr	r0, [pc, #120]	@ (8011e28 <__pow5mult+0xb0>)
 8011db0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011db4:	f000 fd3a 	bl	801282c <__assert_func>
 8011db8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011dbc:	6004      	str	r4, [r0, #0]
 8011dbe:	60c4      	str	r4, [r0, #12]
 8011dc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011dc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011dc8:	b94c      	cbnz	r4, 8011dde <__pow5mult+0x66>
 8011dca:	f240 2171 	movw	r1, #625	@ 0x271
 8011dce:	4638      	mov	r0, r7
 8011dd0:	f7ff ff12 	bl	8011bf8 <__i2b>
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8011dda:	4604      	mov	r4, r0
 8011ddc:	6003      	str	r3, [r0, #0]
 8011dde:	f04f 0900 	mov.w	r9, #0
 8011de2:	07eb      	lsls	r3, r5, #31
 8011de4:	d50a      	bpl.n	8011dfc <__pow5mult+0x84>
 8011de6:	4631      	mov	r1, r6
 8011de8:	4622      	mov	r2, r4
 8011dea:	4638      	mov	r0, r7
 8011dec:	f7ff ff1a 	bl	8011c24 <__multiply>
 8011df0:	4631      	mov	r1, r6
 8011df2:	4680      	mov	r8, r0
 8011df4:	4638      	mov	r0, r7
 8011df6:	f7ff fe01 	bl	80119fc <_Bfree>
 8011dfa:	4646      	mov	r6, r8
 8011dfc:	106d      	asrs	r5, r5, #1
 8011dfe:	d00b      	beq.n	8011e18 <__pow5mult+0xa0>
 8011e00:	6820      	ldr	r0, [r4, #0]
 8011e02:	b938      	cbnz	r0, 8011e14 <__pow5mult+0x9c>
 8011e04:	4622      	mov	r2, r4
 8011e06:	4621      	mov	r1, r4
 8011e08:	4638      	mov	r0, r7
 8011e0a:	f7ff ff0b 	bl	8011c24 <__multiply>
 8011e0e:	6020      	str	r0, [r4, #0]
 8011e10:	f8c0 9000 	str.w	r9, [r0]
 8011e14:	4604      	mov	r4, r0
 8011e16:	e7e4      	b.n	8011de2 <__pow5mult+0x6a>
 8011e18:	4630      	mov	r0, r6
 8011e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e1e:	bf00      	nop
 8011e20:	080155c0 	.word	0x080155c0
 8011e24:	08015486 	.word	0x08015486
 8011e28:	08015566 	.word	0x08015566

08011e2c <__lshift>:
 8011e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e30:	460c      	mov	r4, r1
 8011e32:	6849      	ldr	r1, [r1, #4]
 8011e34:	6923      	ldr	r3, [r4, #16]
 8011e36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011e3a:	68a3      	ldr	r3, [r4, #8]
 8011e3c:	4607      	mov	r7, r0
 8011e3e:	4691      	mov	r9, r2
 8011e40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e44:	f108 0601 	add.w	r6, r8, #1
 8011e48:	42b3      	cmp	r3, r6
 8011e4a:	db0b      	blt.n	8011e64 <__lshift+0x38>
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f7ff fd95 	bl	801197c <_Balloc>
 8011e52:	4605      	mov	r5, r0
 8011e54:	b948      	cbnz	r0, 8011e6a <__lshift+0x3e>
 8011e56:	4602      	mov	r2, r0
 8011e58:	4b28      	ldr	r3, [pc, #160]	@ (8011efc <__lshift+0xd0>)
 8011e5a:	4829      	ldr	r0, [pc, #164]	@ (8011f00 <__lshift+0xd4>)
 8011e5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011e60:	f000 fce4 	bl	801282c <__assert_func>
 8011e64:	3101      	adds	r1, #1
 8011e66:	005b      	lsls	r3, r3, #1
 8011e68:	e7ee      	b.n	8011e48 <__lshift+0x1c>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	f100 0114 	add.w	r1, r0, #20
 8011e70:	f100 0210 	add.w	r2, r0, #16
 8011e74:	4618      	mov	r0, r3
 8011e76:	4553      	cmp	r3, sl
 8011e78:	db33      	blt.n	8011ee2 <__lshift+0xb6>
 8011e7a:	6920      	ldr	r0, [r4, #16]
 8011e7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e80:	f104 0314 	add.w	r3, r4, #20
 8011e84:	f019 091f 	ands.w	r9, r9, #31
 8011e88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011e90:	d02b      	beq.n	8011eea <__lshift+0xbe>
 8011e92:	f1c9 0e20 	rsb	lr, r9, #32
 8011e96:	468a      	mov	sl, r1
 8011e98:	2200      	movs	r2, #0
 8011e9a:	6818      	ldr	r0, [r3, #0]
 8011e9c:	fa00 f009 	lsl.w	r0, r0, r9
 8011ea0:	4310      	orrs	r0, r2
 8011ea2:	f84a 0b04 	str.w	r0, [sl], #4
 8011ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eaa:	459c      	cmp	ip, r3
 8011eac:	fa22 f20e 	lsr.w	r2, r2, lr
 8011eb0:	d8f3      	bhi.n	8011e9a <__lshift+0x6e>
 8011eb2:	ebac 0304 	sub.w	r3, ip, r4
 8011eb6:	3b15      	subs	r3, #21
 8011eb8:	f023 0303 	bic.w	r3, r3, #3
 8011ebc:	3304      	adds	r3, #4
 8011ebe:	f104 0015 	add.w	r0, r4, #21
 8011ec2:	4584      	cmp	ip, r0
 8011ec4:	bf38      	it	cc
 8011ec6:	2304      	movcc	r3, #4
 8011ec8:	50ca      	str	r2, [r1, r3]
 8011eca:	b10a      	cbz	r2, 8011ed0 <__lshift+0xa4>
 8011ecc:	f108 0602 	add.w	r6, r8, #2
 8011ed0:	3e01      	subs	r6, #1
 8011ed2:	4638      	mov	r0, r7
 8011ed4:	612e      	str	r6, [r5, #16]
 8011ed6:	4621      	mov	r1, r4
 8011ed8:	f7ff fd90 	bl	80119fc <_Bfree>
 8011edc:	4628      	mov	r0, r5
 8011ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ee2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	e7c5      	b.n	8011e76 <__lshift+0x4a>
 8011eea:	3904      	subs	r1, #4
 8011eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ef0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ef4:	459c      	cmp	ip, r3
 8011ef6:	d8f9      	bhi.n	8011eec <__lshift+0xc0>
 8011ef8:	e7ea      	b.n	8011ed0 <__lshift+0xa4>
 8011efa:	bf00      	nop
 8011efc:	080154f5 	.word	0x080154f5
 8011f00:	08015566 	.word	0x08015566

08011f04 <__mcmp>:
 8011f04:	690a      	ldr	r2, [r1, #16]
 8011f06:	4603      	mov	r3, r0
 8011f08:	6900      	ldr	r0, [r0, #16]
 8011f0a:	1a80      	subs	r0, r0, r2
 8011f0c:	b530      	push	{r4, r5, lr}
 8011f0e:	d10e      	bne.n	8011f2e <__mcmp+0x2a>
 8011f10:	3314      	adds	r3, #20
 8011f12:	3114      	adds	r1, #20
 8011f14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011f18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011f1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011f20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011f24:	4295      	cmp	r5, r2
 8011f26:	d003      	beq.n	8011f30 <__mcmp+0x2c>
 8011f28:	d205      	bcs.n	8011f36 <__mcmp+0x32>
 8011f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f2e:	bd30      	pop	{r4, r5, pc}
 8011f30:	42a3      	cmp	r3, r4
 8011f32:	d3f3      	bcc.n	8011f1c <__mcmp+0x18>
 8011f34:	e7fb      	b.n	8011f2e <__mcmp+0x2a>
 8011f36:	2001      	movs	r0, #1
 8011f38:	e7f9      	b.n	8011f2e <__mcmp+0x2a>
	...

08011f3c <__mdiff>:
 8011f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f40:	4689      	mov	r9, r1
 8011f42:	4606      	mov	r6, r0
 8011f44:	4611      	mov	r1, r2
 8011f46:	4648      	mov	r0, r9
 8011f48:	4614      	mov	r4, r2
 8011f4a:	f7ff ffdb 	bl	8011f04 <__mcmp>
 8011f4e:	1e05      	subs	r5, r0, #0
 8011f50:	d112      	bne.n	8011f78 <__mdiff+0x3c>
 8011f52:	4629      	mov	r1, r5
 8011f54:	4630      	mov	r0, r6
 8011f56:	f7ff fd11 	bl	801197c <_Balloc>
 8011f5a:	4602      	mov	r2, r0
 8011f5c:	b928      	cbnz	r0, 8011f6a <__mdiff+0x2e>
 8011f5e:	4b3f      	ldr	r3, [pc, #252]	@ (801205c <__mdiff+0x120>)
 8011f60:	f240 2137 	movw	r1, #567	@ 0x237
 8011f64:	483e      	ldr	r0, [pc, #248]	@ (8012060 <__mdiff+0x124>)
 8011f66:	f000 fc61 	bl	801282c <__assert_func>
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f70:	4610      	mov	r0, r2
 8011f72:	b003      	add	sp, #12
 8011f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f78:	bfbc      	itt	lt
 8011f7a:	464b      	movlt	r3, r9
 8011f7c:	46a1      	movlt	r9, r4
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011f84:	bfba      	itte	lt
 8011f86:	461c      	movlt	r4, r3
 8011f88:	2501      	movlt	r5, #1
 8011f8a:	2500      	movge	r5, #0
 8011f8c:	f7ff fcf6 	bl	801197c <_Balloc>
 8011f90:	4602      	mov	r2, r0
 8011f92:	b918      	cbnz	r0, 8011f9c <__mdiff+0x60>
 8011f94:	4b31      	ldr	r3, [pc, #196]	@ (801205c <__mdiff+0x120>)
 8011f96:	f240 2145 	movw	r1, #581	@ 0x245
 8011f9a:	e7e3      	b.n	8011f64 <__mdiff+0x28>
 8011f9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011fa0:	6926      	ldr	r6, [r4, #16]
 8011fa2:	60c5      	str	r5, [r0, #12]
 8011fa4:	f109 0310 	add.w	r3, r9, #16
 8011fa8:	f109 0514 	add.w	r5, r9, #20
 8011fac:	f104 0e14 	add.w	lr, r4, #20
 8011fb0:	f100 0b14 	add.w	fp, r0, #20
 8011fb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011fb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011fbc:	9301      	str	r3, [sp, #4]
 8011fbe:	46d9      	mov	r9, fp
 8011fc0:	f04f 0c00 	mov.w	ip, #0
 8011fc4:	9b01      	ldr	r3, [sp, #4]
 8011fc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011fca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011fce:	9301      	str	r3, [sp, #4]
 8011fd0:	fa1f f38a 	uxth.w	r3, sl
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	b283      	uxth	r3, r0
 8011fd8:	1acb      	subs	r3, r1, r3
 8011fda:	0c00      	lsrs	r0, r0, #16
 8011fdc:	4463      	add	r3, ip
 8011fde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011fe2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011fec:	4576      	cmp	r6, lr
 8011fee:	f849 3b04 	str.w	r3, [r9], #4
 8011ff2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ff6:	d8e5      	bhi.n	8011fc4 <__mdiff+0x88>
 8011ff8:	1b33      	subs	r3, r6, r4
 8011ffa:	3b15      	subs	r3, #21
 8011ffc:	f023 0303 	bic.w	r3, r3, #3
 8012000:	3415      	adds	r4, #21
 8012002:	3304      	adds	r3, #4
 8012004:	42a6      	cmp	r6, r4
 8012006:	bf38      	it	cc
 8012008:	2304      	movcc	r3, #4
 801200a:	441d      	add	r5, r3
 801200c:	445b      	add	r3, fp
 801200e:	461e      	mov	r6, r3
 8012010:	462c      	mov	r4, r5
 8012012:	4544      	cmp	r4, r8
 8012014:	d30e      	bcc.n	8012034 <__mdiff+0xf8>
 8012016:	f108 0103 	add.w	r1, r8, #3
 801201a:	1b49      	subs	r1, r1, r5
 801201c:	f021 0103 	bic.w	r1, r1, #3
 8012020:	3d03      	subs	r5, #3
 8012022:	45a8      	cmp	r8, r5
 8012024:	bf38      	it	cc
 8012026:	2100      	movcc	r1, #0
 8012028:	440b      	add	r3, r1
 801202a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801202e:	b191      	cbz	r1, 8012056 <__mdiff+0x11a>
 8012030:	6117      	str	r7, [r2, #16]
 8012032:	e79d      	b.n	8011f70 <__mdiff+0x34>
 8012034:	f854 1b04 	ldr.w	r1, [r4], #4
 8012038:	46e6      	mov	lr, ip
 801203a:	0c08      	lsrs	r0, r1, #16
 801203c:	fa1c fc81 	uxtah	ip, ip, r1
 8012040:	4471      	add	r1, lr
 8012042:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012046:	b289      	uxth	r1, r1
 8012048:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801204c:	f846 1b04 	str.w	r1, [r6], #4
 8012050:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012054:	e7dd      	b.n	8012012 <__mdiff+0xd6>
 8012056:	3f01      	subs	r7, #1
 8012058:	e7e7      	b.n	801202a <__mdiff+0xee>
 801205a:	bf00      	nop
 801205c:	080154f5 	.word	0x080154f5
 8012060:	08015566 	.word	0x08015566

08012064 <__ulp>:
 8012064:	b082      	sub	sp, #8
 8012066:	ed8d 0b00 	vstr	d0, [sp]
 801206a:	9a01      	ldr	r2, [sp, #4]
 801206c:	4b0f      	ldr	r3, [pc, #60]	@ (80120ac <__ulp+0x48>)
 801206e:	4013      	ands	r3, r2
 8012070:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012074:	2b00      	cmp	r3, #0
 8012076:	dc08      	bgt.n	801208a <__ulp+0x26>
 8012078:	425b      	negs	r3, r3
 801207a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801207e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012082:	da04      	bge.n	801208e <__ulp+0x2a>
 8012084:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012088:	4113      	asrs	r3, r2
 801208a:	2200      	movs	r2, #0
 801208c:	e008      	b.n	80120a0 <__ulp+0x3c>
 801208e:	f1a2 0314 	sub.w	r3, r2, #20
 8012092:	2b1e      	cmp	r3, #30
 8012094:	bfda      	itte	le
 8012096:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801209a:	40da      	lsrle	r2, r3
 801209c:	2201      	movgt	r2, #1
 801209e:	2300      	movs	r3, #0
 80120a0:	4619      	mov	r1, r3
 80120a2:	4610      	mov	r0, r2
 80120a4:	ec41 0b10 	vmov	d0, r0, r1
 80120a8:	b002      	add	sp, #8
 80120aa:	4770      	bx	lr
 80120ac:	7ff00000 	.word	0x7ff00000

080120b0 <__b2d>:
 80120b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b4:	6906      	ldr	r6, [r0, #16]
 80120b6:	f100 0814 	add.w	r8, r0, #20
 80120ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80120be:	1f37      	subs	r7, r6, #4
 80120c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80120c4:	4610      	mov	r0, r2
 80120c6:	f7ff fd4b 	bl	8011b60 <__hi0bits>
 80120ca:	f1c0 0320 	rsb	r3, r0, #32
 80120ce:	280a      	cmp	r0, #10
 80120d0:	600b      	str	r3, [r1, #0]
 80120d2:	491b      	ldr	r1, [pc, #108]	@ (8012140 <__b2d+0x90>)
 80120d4:	dc15      	bgt.n	8012102 <__b2d+0x52>
 80120d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80120da:	fa22 f30c 	lsr.w	r3, r2, ip
 80120de:	45b8      	cmp	r8, r7
 80120e0:	ea43 0501 	orr.w	r5, r3, r1
 80120e4:	bf34      	ite	cc
 80120e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80120ea:	2300      	movcs	r3, #0
 80120ec:	3015      	adds	r0, #21
 80120ee:	fa02 f000 	lsl.w	r0, r2, r0
 80120f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80120f6:	4303      	orrs	r3, r0
 80120f8:	461c      	mov	r4, r3
 80120fa:	ec45 4b10 	vmov	d0, r4, r5
 80120fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012102:	45b8      	cmp	r8, r7
 8012104:	bf3a      	itte	cc
 8012106:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801210a:	f1a6 0708 	subcc.w	r7, r6, #8
 801210e:	2300      	movcs	r3, #0
 8012110:	380b      	subs	r0, #11
 8012112:	d012      	beq.n	801213a <__b2d+0x8a>
 8012114:	f1c0 0120 	rsb	r1, r0, #32
 8012118:	fa23 f401 	lsr.w	r4, r3, r1
 801211c:	4082      	lsls	r2, r0
 801211e:	4322      	orrs	r2, r4
 8012120:	4547      	cmp	r7, r8
 8012122:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012126:	bf8c      	ite	hi
 8012128:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801212c:	2200      	movls	r2, #0
 801212e:	4083      	lsls	r3, r0
 8012130:	40ca      	lsrs	r2, r1
 8012132:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012136:	4313      	orrs	r3, r2
 8012138:	e7de      	b.n	80120f8 <__b2d+0x48>
 801213a:	ea42 0501 	orr.w	r5, r2, r1
 801213e:	e7db      	b.n	80120f8 <__b2d+0x48>
 8012140:	3ff00000 	.word	0x3ff00000

08012144 <__d2b>:
 8012144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012148:	460f      	mov	r7, r1
 801214a:	2101      	movs	r1, #1
 801214c:	ec59 8b10 	vmov	r8, r9, d0
 8012150:	4616      	mov	r6, r2
 8012152:	f7ff fc13 	bl	801197c <_Balloc>
 8012156:	4604      	mov	r4, r0
 8012158:	b930      	cbnz	r0, 8012168 <__d2b+0x24>
 801215a:	4602      	mov	r2, r0
 801215c:	4b23      	ldr	r3, [pc, #140]	@ (80121ec <__d2b+0xa8>)
 801215e:	4824      	ldr	r0, [pc, #144]	@ (80121f0 <__d2b+0xac>)
 8012160:	f240 310f 	movw	r1, #783	@ 0x30f
 8012164:	f000 fb62 	bl	801282c <__assert_func>
 8012168:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801216c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012170:	b10d      	cbz	r5, 8012176 <__d2b+0x32>
 8012172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012176:	9301      	str	r3, [sp, #4]
 8012178:	f1b8 0300 	subs.w	r3, r8, #0
 801217c:	d023      	beq.n	80121c6 <__d2b+0x82>
 801217e:	4668      	mov	r0, sp
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	f7ff fd0c 	bl	8011b9e <__lo0bits>
 8012186:	e9dd 1200 	ldrd	r1, r2, [sp]
 801218a:	b1d0      	cbz	r0, 80121c2 <__d2b+0x7e>
 801218c:	f1c0 0320 	rsb	r3, r0, #32
 8012190:	fa02 f303 	lsl.w	r3, r2, r3
 8012194:	430b      	orrs	r3, r1
 8012196:	40c2      	lsrs	r2, r0
 8012198:	6163      	str	r3, [r4, #20]
 801219a:	9201      	str	r2, [sp, #4]
 801219c:	9b01      	ldr	r3, [sp, #4]
 801219e:	61a3      	str	r3, [r4, #24]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	bf0c      	ite	eq
 80121a4:	2201      	moveq	r2, #1
 80121a6:	2202      	movne	r2, #2
 80121a8:	6122      	str	r2, [r4, #16]
 80121aa:	b1a5      	cbz	r5, 80121d6 <__d2b+0x92>
 80121ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80121b0:	4405      	add	r5, r0
 80121b2:	603d      	str	r5, [r7, #0]
 80121b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80121b8:	6030      	str	r0, [r6, #0]
 80121ba:	4620      	mov	r0, r4
 80121bc:	b003      	add	sp, #12
 80121be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121c2:	6161      	str	r1, [r4, #20]
 80121c4:	e7ea      	b.n	801219c <__d2b+0x58>
 80121c6:	a801      	add	r0, sp, #4
 80121c8:	f7ff fce9 	bl	8011b9e <__lo0bits>
 80121cc:	9b01      	ldr	r3, [sp, #4]
 80121ce:	6163      	str	r3, [r4, #20]
 80121d0:	3020      	adds	r0, #32
 80121d2:	2201      	movs	r2, #1
 80121d4:	e7e8      	b.n	80121a8 <__d2b+0x64>
 80121d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80121da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80121de:	6038      	str	r0, [r7, #0]
 80121e0:	6918      	ldr	r0, [r3, #16]
 80121e2:	f7ff fcbd 	bl	8011b60 <__hi0bits>
 80121e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80121ea:	e7e5      	b.n	80121b8 <__d2b+0x74>
 80121ec:	080154f5 	.word	0x080154f5
 80121f0:	08015566 	.word	0x08015566

080121f4 <__ratio>:
 80121f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f8:	b085      	sub	sp, #20
 80121fa:	e9cd 1000 	strd	r1, r0, [sp]
 80121fe:	a902      	add	r1, sp, #8
 8012200:	f7ff ff56 	bl	80120b0 <__b2d>
 8012204:	9800      	ldr	r0, [sp, #0]
 8012206:	a903      	add	r1, sp, #12
 8012208:	ec55 4b10 	vmov	r4, r5, d0
 801220c:	f7ff ff50 	bl	80120b0 <__b2d>
 8012210:	9b01      	ldr	r3, [sp, #4]
 8012212:	6919      	ldr	r1, [r3, #16]
 8012214:	9b00      	ldr	r3, [sp, #0]
 8012216:	691b      	ldr	r3, [r3, #16]
 8012218:	1ac9      	subs	r1, r1, r3
 801221a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801221e:	1a9b      	subs	r3, r3, r2
 8012220:	ec5b ab10 	vmov	sl, fp, d0
 8012224:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012228:	2b00      	cmp	r3, #0
 801222a:	bfce      	itee	gt
 801222c:	462a      	movgt	r2, r5
 801222e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012232:	465a      	movle	r2, fp
 8012234:	462f      	mov	r7, r5
 8012236:	46d9      	mov	r9, fp
 8012238:	bfcc      	ite	gt
 801223a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801223e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012242:	464b      	mov	r3, r9
 8012244:	4652      	mov	r2, sl
 8012246:	4620      	mov	r0, r4
 8012248:	4639      	mov	r1, r7
 801224a:	f7ee fb1f 	bl	800088c <__aeabi_ddiv>
 801224e:	ec41 0b10 	vmov	d0, r0, r1
 8012252:	b005      	add	sp, #20
 8012254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012258 <__copybits>:
 8012258:	3901      	subs	r1, #1
 801225a:	b570      	push	{r4, r5, r6, lr}
 801225c:	1149      	asrs	r1, r1, #5
 801225e:	6914      	ldr	r4, [r2, #16]
 8012260:	3101      	adds	r1, #1
 8012262:	f102 0314 	add.w	r3, r2, #20
 8012266:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801226a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801226e:	1f05      	subs	r5, r0, #4
 8012270:	42a3      	cmp	r3, r4
 8012272:	d30c      	bcc.n	801228e <__copybits+0x36>
 8012274:	1aa3      	subs	r3, r4, r2
 8012276:	3b11      	subs	r3, #17
 8012278:	f023 0303 	bic.w	r3, r3, #3
 801227c:	3211      	adds	r2, #17
 801227e:	42a2      	cmp	r2, r4
 8012280:	bf88      	it	hi
 8012282:	2300      	movhi	r3, #0
 8012284:	4418      	add	r0, r3
 8012286:	2300      	movs	r3, #0
 8012288:	4288      	cmp	r0, r1
 801228a:	d305      	bcc.n	8012298 <__copybits+0x40>
 801228c:	bd70      	pop	{r4, r5, r6, pc}
 801228e:	f853 6b04 	ldr.w	r6, [r3], #4
 8012292:	f845 6f04 	str.w	r6, [r5, #4]!
 8012296:	e7eb      	b.n	8012270 <__copybits+0x18>
 8012298:	f840 3b04 	str.w	r3, [r0], #4
 801229c:	e7f4      	b.n	8012288 <__copybits+0x30>

0801229e <__any_on>:
 801229e:	f100 0214 	add.w	r2, r0, #20
 80122a2:	6900      	ldr	r0, [r0, #16]
 80122a4:	114b      	asrs	r3, r1, #5
 80122a6:	4298      	cmp	r0, r3
 80122a8:	b510      	push	{r4, lr}
 80122aa:	db11      	blt.n	80122d0 <__any_on+0x32>
 80122ac:	dd0a      	ble.n	80122c4 <__any_on+0x26>
 80122ae:	f011 011f 	ands.w	r1, r1, #31
 80122b2:	d007      	beq.n	80122c4 <__any_on+0x26>
 80122b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80122b8:	fa24 f001 	lsr.w	r0, r4, r1
 80122bc:	fa00 f101 	lsl.w	r1, r0, r1
 80122c0:	428c      	cmp	r4, r1
 80122c2:	d10b      	bne.n	80122dc <__any_on+0x3e>
 80122c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d803      	bhi.n	80122d4 <__any_on+0x36>
 80122cc:	2000      	movs	r0, #0
 80122ce:	bd10      	pop	{r4, pc}
 80122d0:	4603      	mov	r3, r0
 80122d2:	e7f7      	b.n	80122c4 <__any_on+0x26>
 80122d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80122d8:	2900      	cmp	r1, #0
 80122da:	d0f5      	beq.n	80122c8 <__any_on+0x2a>
 80122dc:	2001      	movs	r0, #1
 80122de:	e7f6      	b.n	80122ce <__any_on+0x30>

080122e0 <_strtol_l.constprop.0>:
 80122e0:	2b24      	cmp	r3, #36	@ 0x24
 80122e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122e6:	4686      	mov	lr, r0
 80122e8:	4690      	mov	r8, r2
 80122ea:	d801      	bhi.n	80122f0 <_strtol_l.constprop.0+0x10>
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	d106      	bne.n	80122fe <_strtol_l.constprop.0+0x1e>
 80122f0:	f7fe f916 	bl	8010520 <__errno>
 80122f4:	2316      	movs	r3, #22
 80122f6:	6003      	str	r3, [r0, #0]
 80122f8:	2000      	movs	r0, #0
 80122fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122fe:	4834      	ldr	r0, [pc, #208]	@ (80123d0 <_strtol_l.constprop.0+0xf0>)
 8012300:	460d      	mov	r5, r1
 8012302:	462a      	mov	r2, r5
 8012304:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012308:	5d06      	ldrb	r6, [r0, r4]
 801230a:	f016 0608 	ands.w	r6, r6, #8
 801230e:	d1f8      	bne.n	8012302 <_strtol_l.constprop.0+0x22>
 8012310:	2c2d      	cmp	r4, #45	@ 0x2d
 8012312:	d12d      	bne.n	8012370 <_strtol_l.constprop.0+0x90>
 8012314:	782c      	ldrb	r4, [r5, #0]
 8012316:	2601      	movs	r6, #1
 8012318:	1c95      	adds	r5, r2, #2
 801231a:	f033 0210 	bics.w	r2, r3, #16
 801231e:	d109      	bne.n	8012334 <_strtol_l.constprop.0+0x54>
 8012320:	2c30      	cmp	r4, #48	@ 0x30
 8012322:	d12a      	bne.n	801237a <_strtol_l.constprop.0+0x9a>
 8012324:	782a      	ldrb	r2, [r5, #0]
 8012326:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801232a:	2a58      	cmp	r2, #88	@ 0x58
 801232c:	d125      	bne.n	801237a <_strtol_l.constprop.0+0x9a>
 801232e:	786c      	ldrb	r4, [r5, #1]
 8012330:	2310      	movs	r3, #16
 8012332:	3502      	adds	r5, #2
 8012334:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012338:	f10c 3cff 	add.w	ip, ip, #4294967295
 801233c:	2200      	movs	r2, #0
 801233e:	fbbc f9f3 	udiv	r9, ip, r3
 8012342:	4610      	mov	r0, r2
 8012344:	fb03 ca19 	mls	sl, r3, r9, ip
 8012348:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801234c:	2f09      	cmp	r7, #9
 801234e:	d81b      	bhi.n	8012388 <_strtol_l.constprop.0+0xa8>
 8012350:	463c      	mov	r4, r7
 8012352:	42a3      	cmp	r3, r4
 8012354:	dd27      	ble.n	80123a6 <_strtol_l.constprop.0+0xc6>
 8012356:	1c57      	adds	r7, r2, #1
 8012358:	d007      	beq.n	801236a <_strtol_l.constprop.0+0x8a>
 801235a:	4581      	cmp	r9, r0
 801235c:	d320      	bcc.n	80123a0 <_strtol_l.constprop.0+0xc0>
 801235e:	d101      	bne.n	8012364 <_strtol_l.constprop.0+0x84>
 8012360:	45a2      	cmp	sl, r4
 8012362:	db1d      	blt.n	80123a0 <_strtol_l.constprop.0+0xc0>
 8012364:	fb00 4003 	mla	r0, r0, r3, r4
 8012368:	2201      	movs	r2, #1
 801236a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801236e:	e7eb      	b.n	8012348 <_strtol_l.constprop.0+0x68>
 8012370:	2c2b      	cmp	r4, #43	@ 0x2b
 8012372:	bf04      	itt	eq
 8012374:	782c      	ldrbeq	r4, [r5, #0]
 8012376:	1c95      	addeq	r5, r2, #2
 8012378:	e7cf      	b.n	801231a <_strtol_l.constprop.0+0x3a>
 801237a:	2b00      	cmp	r3, #0
 801237c:	d1da      	bne.n	8012334 <_strtol_l.constprop.0+0x54>
 801237e:	2c30      	cmp	r4, #48	@ 0x30
 8012380:	bf0c      	ite	eq
 8012382:	2308      	moveq	r3, #8
 8012384:	230a      	movne	r3, #10
 8012386:	e7d5      	b.n	8012334 <_strtol_l.constprop.0+0x54>
 8012388:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801238c:	2f19      	cmp	r7, #25
 801238e:	d801      	bhi.n	8012394 <_strtol_l.constprop.0+0xb4>
 8012390:	3c37      	subs	r4, #55	@ 0x37
 8012392:	e7de      	b.n	8012352 <_strtol_l.constprop.0+0x72>
 8012394:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012398:	2f19      	cmp	r7, #25
 801239a:	d804      	bhi.n	80123a6 <_strtol_l.constprop.0+0xc6>
 801239c:	3c57      	subs	r4, #87	@ 0x57
 801239e:	e7d8      	b.n	8012352 <_strtol_l.constprop.0+0x72>
 80123a0:	f04f 32ff 	mov.w	r2, #4294967295
 80123a4:	e7e1      	b.n	801236a <_strtol_l.constprop.0+0x8a>
 80123a6:	1c53      	adds	r3, r2, #1
 80123a8:	d108      	bne.n	80123bc <_strtol_l.constprop.0+0xdc>
 80123aa:	2322      	movs	r3, #34	@ 0x22
 80123ac:	f8ce 3000 	str.w	r3, [lr]
 80123b0:	4660      	mov	r0, ip
 80123b2:	f1b8 0f00 	cmp.w	r8, #0
 80123b6:	d0a0      	beq.n	80122fa <_strtol_l.constprop.0+0x1a>
 80123b8:	1e69      	subs	r1, r5, #1
 80123ba:	e006      	b.n	80123ca <_strtol_l.constprop.0+0xea>
 80123bc:	b106      	cbz	r6, 80123c0 <_strtol_l.constprop.0+0xe0>
 80123be:	4240      	negs	r0, r0
 80123c0:	f1b8 0f00 	cmp.w	r8, #0
 80123c4:	d099      	beq.n	80122fa <_strtol_l.constprop.0+0x1a>
 80123c6:	2a00      	cmp	r2, #0
 80123c8:	d1f6      	bne.n	80123b8 <_strtol_l.constprop.0+0xd8>
 80123ca:	f8c8 1000 	str.w	r1, [r8]
 80123ce:	e794      	b.n	80122fa <_strtol_l.constprop.0+0x1a>
 80123d0:	080156c1 	.word	0x080156c1

080123d4 <_strtol_r>:
 80123d4:	f7ff bf84 	b.w	80122e0 <_strtol_l.constprop.0>

080123d8 <__ascii_wctomb>:
 80123d8:	4603      	mov	r3, r0
 80123da:	4608      	mov	r0, r1
 80123dc:	b141      	cbz	r1, 80123f0 <__ascii_wctomb+0x18>
 80123de:	2aff      	cmp	r2, #255	@ 0xff
 80123e0:	d904      	bls.n	80123ec <__ascii_wctomb+0x14>
 80123e2:	228a      	movs	r2, #138	@ 0x8a
 80123e4:	601a      	str	r2, [r3, #0]
 80123e6:	f04f 30ff 	mov.w	r0, #4294967295
 80123ea:	4770      	bx	lr
 80123ec:	700a      	strb	r2, [r1, #0]
 80123ee:	2001      	movs	r0, #1
 80123f0:	4770      	bx	lr

080123f2 <__ssputs_r>:
 80123f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123f6:	688e      	ldr	r6, [r1, #8]
 80123f8:	461f      	mov	r7, r3
 80123fa:	42be      	cmp	r6, r7
 80123fc:	680b      	ldr	r3, [r1, #0]
 80123fe:	4682      	mov	sl, r0
 8012400:	460c      	mov	r4, r1
 8012402:	4690      	mov	r8, r2
 8012404:	d82d      	bhi.n	8012462 <__ssputs_r+0x70>
 8012406:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801240a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801240e:	d026      	beq.n	801245e <__ssputs_r+0x6c>
 8012410:	6965      	ldr	r5, [r4, #20]
 8012412:	6909      	ldr	r1, [r1, #16]
 8012414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012418:	eba3 0901 	sub.w	r9, r3, r1
 801241c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012420:	1c7b      	adds	r3, r7, #1
 8012422:	444b      	add	r3, r9
 8012424:	106d      	asrs	r5, r5, #1
 8012426:	429d      	cmp	r5, r3
 8012428:	bf38      	it	cc
 801242a:	461d      	movcc	r5, r3
 801242c:	0553      	lsls	r3, r2, #21
 801242e:	d527      	bpl.n	8012480 <__ssputs_r+0x8e>
 8012430:	4629      	mov	r1, r5
 8012432:	f7fc f9cd 	bl	800e7d0 <_malloc_r>
 8012436:	4606      	mov	r6, r0
 8012438:	b360      	cbz	r0, 8012494 <__ssputs_r+0xa2>
 801243a:	6921      	ldr	r1, [r4, #16]
 801243c:	464a      	mov	r2, r9
 801243e:	f7fe f89c 	bl	801057a <memcpy>
 8012442:	89a3      	ldrh	r3, [r4, #12]
 8012444:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801244c:	81a3      	strh	r3, [r4, #12]
 801244e:	6126      	str	r6, [r4, #16]
 8012450:	6165      	str	r5, [r4, #20]
 8012452:	444e      	add	r6, r9
 8012454:	eba5 0509 	sub.w	r5, r5, r9
 8012458:	6026      	str	r6, [r4, #0]
 801245a:	60a5      	str	r5, [r4, #8]
 801245c:	463e      	mov	r6, r7
 801245e:	42be      	cmp	r6, r7
 8012460:	d900      	bls.n	8012464 <__ssputs_r+0x72>
 8012462:	463e      	mov	r6, r7
 8012464:	6820      	ldr	r0, [r4, #0]
 8012466:	4632      	mov	r2, r6
 8012468:	4641      	mov	r1, r8
 801246a:	f000 f9c5 	bl	80127f8 <memmove>
 801246e:	68a3      	ldr	r3, [r4, #8]
 8012470:	1b9b      	subs	r3, r3, r6
 8012472:	60a3      	str	r3, [r4, #8]
 8012474:	6823      	ldr	r3, [r4, #0]
 8012476:	4433      	add	r3, r6
 8012478:	6023      	str	r3, [r4, #0]
 801247a:	2000      	movs	r0, #0
 801247c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012480:	462a      	mov	r2, r5
 8012482:	f000 fa05 	bl	8012890 <_realloc_r>
 8012486:	4606      	mov	r6, r0
 8012488:	2800      	cmp	r0, #0
 801248a:	d1e0      	bne.n	801244e <__ssputs_r+0x5c>
 801248c:	6921      	ldr	r1, [r4, #16]
 801248e:	4650      	mov	r0, sl
 8012490:	f7fe fede 	bl	8011250 <_free_r>
 8012494:	230c      	movs	r3, #12
 8012496:	f8ca 3000 	str.w	r3, [sl]
 801249a:	89a3      	ldrh	r3, [r4, #12]
 801249c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80124a0:	81a3      	strh	r3, [r4, #12]
 80124a2:	f04f 30ff 	mov.w	r0, #4294967295
 80124a6:	e7e9      	b.n	801247c <__ssputs_r+0x8a>

080124a8 <_svfiprintf_r>:
 80124a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ac:	4698      	mov	r8, r3
 80124ae:	898b      	ldrh	r3, [r1, #12]
 80124b0:	061b      	lsls	r3, r3, #24
 80124b2:	b09d      	sub	sp, #116	@ 0x74
 80124b4:	4607      	mov	r7, r0
 80124b6:	460d      	mov	r5, r1
 80124b8:	4614      	mov	r4, r2
 80124ba:	d510      	bpl.n	80124de <_svfiprintf_r+0x36>
 80124bc:	690b      	ldr	r3, [r1, #16]
 80124be:	b973      	cbnz	r3, 80124de <_svfiprintf_r+0x36>
 80124c0:	2140      	movs	r1, #64	@ 0x40
 80124c2:	f7fc f985 	bl	800e7d0 <_malloc_r>
 80124c6:	6028      	str	r0, [r5, #0]
 80124c8:	6128      	str	r0, [r5, #16]
 80124ca:	b930      	cbnz	r0, 80124da <_svfiprintf_r+0x32>
 80124cc:	230c      	movs	r3, #12
 80124ce:	603b      	str	r3, [r7, #0]
 80124d0:	f04f 30ff 	mov.w	r0, #4294967295
 80124d4:	b01d      	add	sp, #116	@ 0x74
 80124d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124da:	2340      	movs	r3, #64	@ 0x40
 80124dc:	616b      	str	r3, [r5, #20]
 80124de:	2300      	movs	r3, #0
 80124e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80124e2:	2320      	movs	r3, #32
 80124e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80124ec:	2330      	movs	r3, #48	@ 0x30
 80124ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801268c <_svfiprintf_r+0x1e4>
 80124f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80124f6:	f04f 0901 	mov.w	r9, #1
 80124fa:	4623      	mov	r3, r4
 80124fc:	469a      	mov	sl, r3
 80124fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012502:	b10a      	cbz	r2, 8012508 <_svfiprintf_r+0x60>
 8012504:	2a25      	cmp	r2, #37	@ 0x25
 8012506:	d1f9      	bne.n	80124fc <_svfiprintf_r+0x54>
 8012508:	ebba 0b04 	subs.w	fp, sl, r4
 801250c:	d00b      	beq.n	8012526 <_svfiprintf_r+0x7e>
 801250e:	465b      	mov	r3, fp
 8012510:	4622      	mov	r2, r4
 8012512:	4629      	mov	r1, r5
 8012514:	4638      	mov	r0, r7
 8012516:	f7ff ff6c 	bl	80123f2 <__ssputs_r>
 801251a:	3001      	adds	r0, #1
 801251c:	f000 80a7 	beq.w	801266e <_svfiprintf_r+0x1c6>
 8012520:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012522:	445a      	add	r2, fp
 8012524:	9209      	str	r2, [sp, #36]	@ 0x24
 8012526:	f89a 3000 	ldrb.w	r3, [sl]
 801252a:	2b00      	cmp	r3, #0
 801252c:	f000 809f 	beq.w	801266e <_svfiprintf_r+0x1c6>
 8012530:	2300      	movs	r3, #0
 8012532:	f04f 32ff 	mov.w	r2, #4294967295
 8012536:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801253a:	f10a 0a01 	add.w	sl, sl, #1
 801253e:	9304      	str	r3, [sp, #16]
 8012540:	9307      	str	r3, [sp, #28]
 8012542:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012546:	931a      	str	r3, [sp, #104]	@ 0x68
 8012548:	4654      	mov	r4, sl
 801254a:	2205      	movs	r2, #5
 801254c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012550:	484e      	ldr	r0, [pc, #312]	@ (801268c <_svfiprintf_r+0x1e4>)
 8012552:	f7ed fe5d 	bl	8000210 <memchr>
 8012556:	9a04      	ldr	r2, [sp, #16]
 8012558:	b9d8      	cbnz	r0, 8012592 <_svfiprintf_r+0xea>
 801255a:	06d0      	lsls	r0, r2, #27
 801255c:	bf44      	itt	mi
 801255e:	2320      	movmi	r3, #32
 8012560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012564:	0711      	lsls	r1, r2, #28
 8012566:	bf44      	itt	mi
 8012568:	232b      	movmi	r3, #43	@ 0x2b
 801256a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801256e:	f89a 3000 	ldrb.w	r3, [sl]
 8012572:	2b2a      	cmp	r3, #42	@ 0x2a
 8012574:	d015      	beq.n	80125a2 <_svfiprintf_r+0xfa>
 8012576:	9a07      	ldr	r2, [sp, #28]
 8012578:	4654      	mov	r4, sl
 801257a:	2000      	movs	r0, #0
 801257c:	f04f 0c0a 	mov.w	ip, #10
 8012580:	4621      	mov	r1, r4
 8012582:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012586:	3b30      	subs	r3, #48	@ 0x30
 8012588:	2b09      	cmp	r3, #9
 801258a:	d94b      	bls.n	8012624 <_svfiprintf_r+0x17c>
 801258c:	b1b0      	cbz	r0, 80125bc <_svfiprintf_r+0x114>
 801258e:	9207      	str	r2, [sp, #28]
 8012590:	e014      	b.n	80125bc <_svfiprintf_r+0x114>
 8012592:	eba0 0308 	sub.w	r3, r0, r8
 8012596:	fa09 f303 	lsl.w	r3, r9, r3
 801259a:	4313      	orrs	r3, r2
 801259c:	9304      	str	r3, [sp, #16]
 801259e:	46a2      	mov	sl, r4
 80125a0:	e7d2      	b.n	8012548 <_svfiprintf_r+0xa0>
 80125a2:	9b03      	ldr	r3, [sp, #12]
 80125a4:	1d19      	adds	r1, r3, #4
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	9103      	str	r1, [sp, #12]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	bfbb      	ittet	lt
 80125ae:	425b      	neglt	r3, r3
 80125b0:	f042 0202 	orrlt.w	r2, r2, #2
 80125b4:	9307      	strge	r3, [sp, #28]
 80125b6:	9307      	strlt	r3, [sp, #28]
 80125b8:	bfb8      	it	lt
 80125ba:	9204      	strlt	r2, [sp, #16]
 80125bc:	7823      	ldrb	r3, [r4, #0]
 80125be:	2b2e      	cmp	r3, #46	@ 0x2e
 80125c0:	d10a      	bne.n	80125d8 <_svfiprintf_r+0x130>
 80125c2:	7863      	ldrb	r3, [r4, #1]
 80125c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80125c6:	d132      	bne.n	801262e <_svfiprintf_r+0x186>
 80125c8:	9b03      	ldr	r3, [sp, #12]
 80125ca:	1d1a      	adds	r2, r3, #4
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	9203      	str	r2, [sp, #12]
 80125d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125d4:	3402      	adds	r4, #2
 80125d6:	9305      	str	r3, [sp, #20]
 80125d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801269c <_svfiprintf_r+0x1f4>
 80125dc:	7821      	ldrb	r1, [r4, #0]
 80125de:	2203      	movs	r2, #3
 80125e0:	4650      	mov	r0, sl
 80125e2:	f7ed fe15 	bl	8000210 <memchr>
 80125e6:	b138      	cbz	r0, 80125f8 <_svfiprintf_r+0x150>
 80125e8:	9b04      	ldr	r3, [sp, #16]
 80125ea:	eba0 000a 	sub.w	r0, r0, sl
 80125ee:	2240      	movs	r2, #64	@ 0x40
 80125f0:	4082      	lsls	r2, r0
 80125f2:	4313      	orrs	r3, r2
 80125f4:	3401      	adds	r4, #1
 80125f6:	9304      	str	r3, [sp, #16]
 80125f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125fc:	4824      	ldr	r0, [pc, #144]	@ (8012690 <_svfiprintf_r+0x1e8>)
 80125fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012602:	2206      	movs	r2, #6
 8012604:	f7ed fe04 	bl	8000210 <memchr>
 8012608:	2800      	cmp	r0, #0
 801260a:	d036      	beq.n	801267a <_svfiprintf_r+0x1d2>
 801260c:	4b21      	ldr	r3, [pc, #132]	@ (8012694 <_svfiprintf_r+0x1ec>)
 801260e:	bb1b      	cbnz	r3, 8012658 <_svfiprintf_r+0x1b0>
 8012610:	9b03      	ldr	r3, [sp, #12]
 8012612:	3307      	adds	r3, #7
 8012614:	f023 0307 	bic.w	r3, r3, #7
 8012618:	3308      	adds	r3, #8
 801261a:	9303      	str	r3, [sp, #12]
 801261c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801261e:	4433      	add	r3, r6
 8012620:	9309      	str	r3, [sp, #36]	@ 0x24
 8012622:	e76a      	b.n	80124fa <_svfiprintf_r+0x52>
 8012624:	fb0c 3202 	mla	r2, ip, r2, r3
 8012628:	460c      	mov	r4, r1
 801262a:	2001      	movs	r0, #1
 801262c:	e7a8      	b.n	8012580 <_svfiprintf_r+0xd8>
 801262e:	2300      	movs	r3, #0
 8012630:	3401      	adds	r4, #1
 8012632:	9305      	str	r3, [sp, #20]
 8012634:	4619      	mov	r1, r3
 8012636:	f04f 0c0a 	mov.w	ip, #10
 801263a:	4620      	mov	r0, r4
 801263c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012640:	3a30      	subs	r2, #48	@ 0x30
 8012642:	2a09      	cmp	r2, #9
 8012644:	d903      	bls.n	801264e <_svfiprintf_r+0x1a6>
 8012646:	2b00      	cmp	r3, #0
 8012648:	d0c6      	beq.n	80125d8 <_svfiprintf_r+0x130>
 801264a:	9105      	str	r1, [sp, #20]
 801264c:	e7c4      	b.n	80125d8 <_svfiprintf_r+0x130>
 801264e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012652:	4604      	mov	r4, r0
 8012654:	2301      	movs	r3, #1
 8012656:	e7f0      	b.n	801263a <_svfiprintf_r+0x192>
 8012658:	ab03      	add	r3, sp, #12
 801265a:	9300      	str	r3, [sp, #0]
 801265c:	462a      	mov	r2, r5
 801265e:	4b0e      	ldr	r3, [pc, #56]	@ (8012698 <_svfiprintf_r+0x1f0>)
 8012660:	a904      	add	r1, sp, #16
 8012662:	4638      	mov	r0, r7
 8012664:	f7fc fff6 	bl	800f654 <_printf_float>
 8012668:	1c42      	adds	r2, r0, #1
 801266a:	4606      	mov	r6, r0
 801266c:	d1d6      	bne.n	801261c <_svfiprintf_r+0x174>
 801266e:	89ab      	ldrh	r3, [r5, #12]
 8012670:	065b      	lsls	r3, r3, #25
 8012672:	f53f af2d 	bmi.w	80124d0 <_svfiprintf_r+0x28>
 8012676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012678:	e72c      	b.n	80124d4 <_svfiprintf_r+0x2c>
 801267a:	ab03      	add	r3, sp, #12
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	462a      	mov	r2, r5
 8012680:	4b05      	ldr	r3, [pc, #20]	@ (8012698 <_svfiprintf_r+0x1f0>)
 8012682:	a904      	add	r1, sp, #16
 8012684:	4638      	mov	r0, r7
 8012686:	f7fd fa7d 	bl	800fb84 <_printf_i>
 801268a:	e7ed      	b.n	8012668 <_svfiprintf_r+0x1c0>
 801268c:	080157c1 	.word	0x080157c1
 8012690:	080157cb 	.word	0x080157cb
 8012694:	0800f655 	.word	0x0800f655
 8012698:	080123f3 	.word	0x080123f3
 801269c:	080157c7 	.word	0x080157c7

080126a0 <__sflush_r>:
 80126a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a8:	0716      	lsls	r6, r2, #28
 80126aa:	4605      	mov	r5, r0
 80126ac:	460c      	mov	r4, r1
 80126ae:	d454      	bmi.n	801275a <__sflush_r+0xba>
 80126b0:	684b      	ldr	r3, [r1, #4]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	dc02      	bgt.n	80126bc <__sflush_r+0x1c>
 80126b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	dd48      	ble.n	801274e <__sflush_r+0xae>
 80126bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126be:	2e00      	cmp	r6, #0
 80126c0:	d045      	beq.n	801274e <__sflush_r+0xae>
 80126c2:	2300      	movs	r3, #0
 80126c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80126c8:	682f      	ldr	r7, [r5, #0]
 80126ca:	6a21      	ldr	r1, [r4, #32]
 80126cc:	602b      	str	r3, [r5, #0]
 80126ce:	d030      	beq.n	8012732 <__sflush_r+0x92>
 80126d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80126d2:	89a3      	ldrh	r3, [r4, #12]
 80126d4:	0759      	lsls	r1, r3, #29
 80126d6:	d505      	bpl.n	80126e4 <__sflush_r+0x44>
 80126d8:	6863      	ldr	r3, [r4, #4]
 80126da:	1ad2      	subs	r2, r2, r3
 80126dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80126de:	b10b      	cbz	r3, 80126e4 <__sflush_r+0x44>
 80126e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126e2:	1ad2      	subs	r2, r2, r3
 80126e4:	2300      	movs	r3, #0
 80126e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126e8:	6a21      	ldr	r1, [r4, #32]
 80126ea:	4628      	mov	r0, r5
 80126ec:	47b0      	blx	r6
 80126ee:	1c43      	adds	r3, r0, #1
 80126f0:	89a3      	ldrh	r3, [r4, #12]
 80126f2:	d106      	bne.n	8012702 <__sflush_r+0x62>
 80126f4:	6829      	ldr	r1, [r5, #0]
 80126f6:	291d      	cmp	r1, #29
 80126f8:	d82b      	bhi.n	8012752 <__sflush_r+0xb2>
 80126fa:	4a2a      	ldr	r2, [pc, #168]	@ (80127a4 <__sflush_r+0x104>)
 80126fc:	410a      	asrs	r2, r1
 80126fe:	07d6      	lsls	r6, r2, #31
 8012700:	d427      	bmi.n	8012752 <__sflush_r+0xb2>
 8012702:	2200      	movs	r2, #0
 8012704:	6062      	str	r2, [r4, #4]
 8012706:	04d9      	lsls	r1, r3, #19
 8012708:	6922      	ldr	r2, [r4, #16]
 801270a:	6022      	str	r2, [r4, #0]
 801270c:	d504      	bpl.n	8012718 <__sflush_r+0x78>
 801270e:	1c42      	adds	r2, r0, #1
 8012710:	d101      	bne.n	8012716 <__sflush_r+0x76>
 8012712:	682b      	ldr	r3, [r5, #0]
 8012714:	b903      	cbnz	r3, 8012718 <__sflush_r+0x78>
 8012716:	6560      	str	r0, [r4, #84]	@ 0x54
 8012718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801271a:	602f      	str	r7, [r5, #0]
 801271c:	b1b9      	cbz	r1, 801274e <__sflush_r+0xae>
 801271e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012722:	4299      	cmp	r1, r3
 8012724:	d002      	beq.n	801272c <__sflush_r+0x8c>
 8012726:	4628      	mov	r0, r5
 8012728:	f7fe fd92 	bl	8011250 <_free_r>
 801272c:	2300      	movs	r3, #0
 801272e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012730:	e00d      	b.n	801274e <__sflush_r+0xae>
 8012732:	2301      	movs	r3, #1
 8012734:	4628      	mov	r0, r5
 8012736:	47b0      	blx	r6
 8012738:	4602      	mov	r2, r0
 801273a:	1c50      	adds	r0, r2, #1
 801273c:	d1c9      	bne.n	80126d2 <__sflush_r+0x32>
 801273e:	682b      	ldr	r3, [r5, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d0c6      	beq.n	80126d2 <__sflush_r+0x32>
 8012744:	2b1d      	cmp	r3, #29
 8012746:	d001      	beq.n	801274c <__sflush_r+0xac>
 8012748:	2b16      	cmp	r3, #22
 801274a:	d11e      	bne.n	801278a <__sflush_r+0xea>
 801274c:	602f      	str	r7, [r5, #0]
 801274e:	2000      	movs	r0, #0
 8012750:	e022      	b.n	8012798 <__sflush_r+0xf8>
 8012752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012756:	b21b      	sxth	r3, r3
 8012758:	e01b      	b.n	8012792 <__sflush_r+0xf2>
 801275a:	690f      	ldr	r7, [r1, #16]
 801275c:	2f00      	cmp	r7, #0
 801275e:	d0f6      	beq.n	801274e <__sflush_r+0xae>
 8012760:	0793      	lsls	r3, r2, #30
 8012762:	680e      	ldr	r6, [r1, #0]
 8012764:	bf08      	it	eq
 8012766:	694b      	ldreq	r3, [r1, #20]
 8012768:	600f      	str	r7, [r1, #0]
 801276a:	bf18      	it	ne
 801276c:	2300      	movne	r3, #0
 801276e:	eba6 0807 	sub.w	r8, r6, r7
 8012772:	608b      	str	r3, [r1, #8]
 8012774:	f1b8 0f00 	cmp.w	r8, #0
 8012778:	dde9      	ble.n	801274e <__sflush_r+0xae>
 801277a:	6a21      	ldr	r1, [r4, #32]
 801277c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801277e:	4643      	mov	r3, r8
 8012780:	463a      	mov	r2, r7
 8012782:	4628      	mov	r0, r5
 8012784:	47b0      	blx	r6
 8012786:	2800      	cmp	r0, #0
 8012788:	dc08      	bgt.n	801279c <__sflush_r+0xfc>
 801278a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801278e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012792:	81a3      	strh	r3, [r4, #12]
 8012794:	f04f 30ff 	mov.w	r0, #4294967295
 8012798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801279c:	4407      	add	r7, r0
 801279e:	eba8 0800 	sub.w	r8, r8, r0
 80127a2:	e7e7      	b.n	8012774 <__sflush_r+0xd4>
 80127a4:	dfbffffe 	.word	0xdfbffffe

080127a8 <_fflush_r>:
 80127a8:	b538      	push	{r3, r4, r5, lr}
 80127aa:	690b      	ldr	r3, [r1, #16]
 80127ac:	4605      	mov	r5, r0
 80127ae:	460c      	mov	r4, r1
 80127b0:	b913      	cbnz	r3, 80127b8 <_fflush_r+0x10>
 80127b2:	2500      	movs	r5, #0
 80127b4:	4628      	mov	r0, r5
 80127b6:	bd38      	pop	{r3, r4, r5, pc}
 80127b8:	b118      	cbz	r0, 80127c2 <_fflush_r+0x1a>
 80127ba:	6a03      	ldr	r3, [r0, #32]
 80127bc:	b90b      	cbnz	r3, 80127c2 <_fflush_r+0x1a>
 80127be:	f7fd fda1 	bl	8010304 <__sinit>
 80127c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d0f3      	beq.n	80127b2 <_fflush_r+0xa>
 80127ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80127cc:	07d0      	lsls	r0, r2, #31
 80127ce:	d404      	bmi.n	80127da <_fflush_r+0x32>
 80127d0:	0599      	lsls	r1, r3, #22
 80127d2:	d402      	bmi.n	80127da <_fflush_r+0x32>
 80127d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127d6:	f7fd fece 	bl	8010576 <__retarget_lock_acquire_recursive>
 80127da:	4628      	mov	r0, r5
 80127dc:	4621      	mov	r1, r4
 80127de:	f7ff ff5f 	bl	80126a0 <__sflush_r>
 80127e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127e4:	07da      	lsls	r2, r3, #31
 80127e6:	4605      	mov	r5, r0
 80127e8:	d4e4      	bmi.n	80127b4 <_fflush_r+0xc>
 80127ea:	89a3      	ldrh	r3, [r4, #12]
 80127ec:	059b      	lsls	r3, r3, #22
 80127ee:	d4e1      	bmi.n	80127b4 <_fflush_r+0xc>
 80127f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127f2:	f7fd fec1 	bl	8010578 <__retarget_lock_release_recursive>
 80127f6:	e7dd      	b.n	80127b4 <_fflush_r+0xc>

080127f8 <memmove>:
 80127f8:	4288      	cmp	r0, r1
 80127fa:	b510      	push	{r4, lr}
 80127fc:	eb01 0402 	add.w	r4, r1, r2
 8012800:	d902      	bls.n	8012808 <memmove+0x10>
 8012802:	4284      	cmp	r4, r0
 8012804:	4623      	mov	r3, r4
 8012806:	d807      	bhi.n	8012818 <memmove+0x20>
 8012808:	1e43      	subs	r3, r0, #1
 801280a:	42a1      	cmp	r1, r4
 801280c:	d008      	beq.n	8012820 <memmove+0x28>
 801280e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012816:	e7f8      	b.n	801280a <memmove+0x12>
 8012818:	4402      	add	r2, r0
 801281a:	4601      	mov	r1, r0
 801281c:	428a      	cmp	r2, r1
 801281e:	d100      	bne.n	8012822 <memmove+0x2a>
 8012820:	bd10      	pop	{r4, pc}
 8012822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801282a:	e7f7      	b.n	801281c <memmove+0x24>

0801282c <__assert_func>:
 801282c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801282e:	4614      	mov	r4, r2
 8012830:	461a      	mov	r2, r3
 8012832:	4b09      	ldr	r3, [pc, #36]	@ (8012858 <__assert_func+0x2c>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4605      	mov	r5, r0
 8012838:	68d8      	ldr	r0, [r3, #12]
 801283a:	b954      	cbnz	r4, 8012852 <__assert_func+0x26>
 801283c:	4b07      	ldr	r3, [pc, #28]	@ (801285c <__assert_func+0x30>)
 801283e:	461c      	mov	r4, r3
 8012840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012844:	9100      	str	r1, [sp, #0]
 8012846:	462b      	mov	r3, r5
 8012848:	4905      	ldr	r1, [pc, #20]	@ (8012860 <__assert_func+0x34>)
 801284a:	f000 f84f 	bl	80128ec <fiprintf>
 801284e:	f000 f85f 	bl	8012910 <abort>
 8012852:	4b04      	ldr	r3, [pc, #16]	@ (8012864 <__assert_func+0x38>)
 8012854:	e7f4      	b.n	8012840 <__assert_func+0x14>
 8012856:	bf00      	nop
 8012858:	20000288 	.word	0x20000288
 801285c:	0801580d 	.word	0x0801580d
 8012860:	080157df 	.word	0x080157df
 8012864:	080157d2 	.word	0x080157d2

08012868 <_calloc_r>:
 8012868:	b570      	push	{r4, r5, r6, lr}
 801286a:	fba1 5402 	umull	r5, r4, r1, r2
 801286e:	b93c      	cbnz	r4, 8012880 <_calloc_r+0x18>
 8012870:	4629      	mov	r1, r5
 8012872:	f7fb ffad 	bl	800e7d0 <_malloc_r>
 8012876:	4606      	mov	r6, r0
 8012878:	b928      	cbnz	r0, 8012886 <_calloc_r+0x1e>
 801287a:	2600      	movs	r6, #0
 801287c:	4630      	mov	r0, r6
 801287e:	bd70      	pop	{r4, r5, r6, pc}
 8012880:	220c      	movs	r2, #12
 8012882:	6002      	str	r2, [r0, #0]
 8012884:	e7f9      	b.n	801287a <_calloc_r+0x12>
 8012886:	462a      	mov	r2, r5
 8012888:	4621      	mov	r1, r4
 801288a:	f7fd fdd4 	bl	8010436 <memset>
 801288e:	e7f5      	b.n	801287c <_calloc_r+0x14>

08012890 <_realloc_r>:
 8012890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012894:	4680      	mov	r8, r0
 8012896:	4615      	mov	r5, r2
 8012898:	460c      	mov	r4, r1
 801289a:	b921      	cbnz	r1, 80128a6 <_realloc_r+0x16>
 801289c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128a0:	4611      	mov	r1, r2
 80128a2:	f7fb bf95 	b.w	800e7d0 <_malloc_r>
 80128a6:	b92a      	cbnz	r2, 80128b4 <_realloc_r+0x24>
 80128a8:	f7fe fcd2 	bl	8011250 <_free_r>
 80128ac:	2400      	movs	r4, #0
 80128ae:	4620      	mov	r0, r4
 80128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b4:	f000 f833 	bl	801291e <_malloc_usable_size_r>
 80128b8:	4285      	cmp	r5, r0
 80128ba:	4606      	mov	r6, r0
 80128bc:	d802      	bhi.n	80128c4 <_realloc_r+0x34>
 80128be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80128c2:	d8f4      	bhi.n	80128ae <_realloc_r+0x1e>
 80128c4:	4629      	mov	r1, r5
 80128c6:	4640      	mov	r0, r8
 80128c8:	f7fb ff82 	bl	800e7d0 <_malloc_r>
 80128cc:	4607      	mov	r7, r0
 80128ce:	2800      	cmp	r0, #0
 80128d0:	d0ec      	beq.n	80128ac <_realloc_r+0x1c>
 80128d2:	42b5      	cmp	r5, r6
 80128d4:	462a      	mov	r2, r5
 80128d6:	4621      	mov	r1, r4
 80128d8:	bf28      	it	cs
 80128da:	4632      	movcs	r2, r6
 80128dc:	f7fd fe4d 	bl	801057a <memcpy>
 80128e0:	4621      	mov	r1, r4
 80128e2:	4640      	mov	r0, r8
 80128e4:	f7fe fcb4 	bl	8011250 <_free_r>
 80128e8:	463c      	mov	r4, r7
 80128ea:	e7e0      	b.n	80128ae <_realloc_r+0x1e>

080128ec <fiprintf>:
 80128ec:	b40e      	push	{r1, r2, r3}
 80128ee:	b503      	push	{r0, r1, lr}
 80128f0:	4601      	mov	r1, r0
 80128f2:	ab03      	add	r3, sp, #12
 80128f4:	4805      	ldr	r0, [pc, #20]	@ (801290c <fiprintf+0x20>)
 80128f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80128fa:	6800      	ldr	r0, [r0, #0]
 80128fc:	9301      	str	r3, [sp, #4]
 80128fe:	f000 f83f 	bl	8012980 <_vfiprintf_r>
 8012902:	b002      	add	sp, #8
 8012904:	f85d eb04 	ldr.w	lr, [sp], #4
 8012908:	b003      	add	sp, #12
 801290a:	4770      	bx	lr
 801290c:	20000288 	.word	0x20000288

08012910 <abort>:
 8012910:	b508      	push	{r3, lr}
 8012912:	2006      	movs	r0, #6
 8012914:	f000 fa08 	bl	8012d28 <raise>
 8012918:	2001      	movs	r0, #1
 801291a:	f7f1 fcd7 	bl	80042cc <_exit>

0801291e <_malloc_usable_size_r>:
 801291e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012922:	1f18      	subs	r0, r3, #4
 8012924:	2b00      	cmp	r3, #0
 8012926:	bfbc      	itt	lt
 8012928:	580b      	ldrlt	r3, [r1, r0]
 801292a:	18c0      	addlt	r0, r0, r3
 801292c:	4770      	bx	lr

0801292e <__sfputc_r>:
 801292e:	6893      	ldr	r3, [r2, #8]
 8012930:	3b01      	subs	r3, #1
 8012932:	2b00      	cmp	r3, #0
 8012934:	b410      	push	{r4}
 8012936:	6093      	str	r3, [r2, #8]
 8012938:	da08      	bge.n	801294c <__sfputc_r+0x1e>
 801293a:	6994      	ldr	r4, [r2, #24]
 801293c:	42a3      	cmp	r3, r4
 801293e:	db01      	blt.n	8012944 <__sfputc_r+0x16>
 8012940:	290a      	cmp	r1, #10
 8012942:	d103      	bne.n	801294c <__sfputc_r+0x1e>
 8012944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012948:	f000 b932 	b.w	8012bb0 <__swbuf_r>
 801294c:	6813      	ldr	r3, [r2, #0]
 801294e:	1c58      	adds	r0, r3, #1
 8012950:	6010      	str	r0, [r2, #0]
 8012952:	7019      	strb	r1, [r3, #0]
 8012954:	4608      	mov	r0, r1
 8012956:	f85d 4b04 	ldr.w	r4, [sp], #4
 801295a:	4770      	bx	lr

0801295c <__sfputs_r>:
 801295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801295e:	4606      	mov	r6, r0
 8012960:	460f      	mov	r7, r1
 8012962:	4614      	mov	r4, r2
 8012964:	18d5      	adds	r5, r2, r3
 8012966:	42ac      	cmp	r4, r5
 8012968:	d101      	bne.n	801296e <__sfputs_r+0x12>
 801296a:	2000      	movs	r0, #0
 801296c:	e007      	b.n	801297e <__sfputs_r+0x22>
 801296e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012972:	463a      	mov	r2, r7
 8012974:	4630      	mov	r0, r6
 8012976:	f7ff ffda 	bl	801292e <__sfputc_r>
 801297a:	1c43      	adds	r3, r0, #1
 801297c:	d1f3      	bne.n	8012966 <__sfputs_r+0xa>
 801297e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012980 <_vfiprintf_r>:
 8012980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012984:	460d      	mov	r5, r1
 8012986:	b09d      	sub	sp, #116	@ 0x74
 8012988:	4614      	mov	r4, r2
 801298a:	4698      	mov	r8, r3
 801298c:	4606      	mov	r6, r0
 801298e:	b118      	cbz	r0, 8012998 <_vfiprintf_r+0x18>
 8012990:	6a03      	ldr	r3, [r0, #32]
 8012992:	b90b      	cbnz	r3, 8012998 <_vfiprintf_r+0x18>
 8012994:	f7fd fcb6 	bl	8010304 <__sinit>
 8012998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801299a:	07d9      	lsls	r1, r3, #31
 801299c:	d405      	bmi.n	80129aa <_vfiprintf_r+0x2a>
 801299e:	89ab      	ldrh	r3, [r5, #12]
 80129a0:	059a      	lsls	r2, r3, #22
 80129a2:	d402      	bmi.n	80129aa <_vfiprintf_r+0x2a>
 80129a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129a6:	f7fd fde6 	bl	8010576 <__retarget_lock_acquire_recursive>
 80129aa:	89ab      	ldrh	r3, [r5, #12]
 80129ac:	071b      	lsls	r3, r3, #28
 80129ae:	d501      	bpl.n	80129b4 <_vfiprintf_r+0x34>
 80129b0:	692b      	ldr	r3, [r5, #16]
 80129b2:	b99b      	cbnz	r3, 80129dc <_vfiprintf_r+0x5c>
 80129b4:	4629      	mov	r1, r5
 80129b6:	4630      	mov	r0, r6
 80129b8:	f000 f938 	bl	8012c2c <__swsetup_r>
 80129bc:	b170      	cbz	r0, 80129dc <_vfiprintf_r+0x5c>
 80129be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129c0:	07dc      	lsls	r4, r3, #31
 80129c2:	d504      	bpl.n	80129ce <_vfiprintf_r+0x4e>
 80129c4:	f04f 30ff 	mov.w	r0, #4294967295
 80129c8:	b01d      	add	sp, #116	@ 0x74
 80129ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ce:	89ab      	ldrh	r3, [r5, #12]
 80129d0:	0598      	lsls	r0, r3, #22
 80129d2:	d4f7      	bmi.n	80129c4 <_vfiprintf_r+0x44>
 80129d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129d6:	f7fd fdcf 	bl	8010578 <__retarget_lock_release_recursive>
 80129da:	e7f3      	b.n	80129c4 <_vfiprintf_r+0x44>
 80129dc:	2300      	movs	r3, #0
 80129de:	9309      	str	r3, [sp, #36]	@ 0x24
 80129e0:	2320      	movs	r3, #32
 80129e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80129e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80129ea:	2330      	movs	r3, #48	@ 0x30
 80129ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012b9c <_vfiprintf_r+0x21c>
 80129f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80129f4:	f04f 0901 	mov.w	r9, #1
 80129f8:	4623      	mov	r3, r4
 80129fa:	469a      	mov	sl, r3
 80129fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a00:	b10a      	cbz	r2, 8012a06 <_vfiprintf_r+0x86>
 8012a02:	2a25      	cmp	r2, #37	@ 0x25
 8012a04:	d1f9      	bne.n	80129fa <_vfiprintf_r+0x7a>
 8012a06:	ebba 0b04 	subs.w	fp, sl, r4
 8012a0a:	d00b      	beq.n	8012a24 <_vfiprintf_r+0xa4>
 8012a0c:	465b      	mov	r3, fp
 8012a0e:	4622      	mov	r2, r4
 8012a10:	4629      	mov	r1, r5
 8012a12:	4630      	mov	r0, r6
 8012a14:	f7ff ffa2 	bl	801295c <__sfputs_r>
 8012a18:	3001      	adds	r0, #1
 8012a1a:	f000 80a7 	beq.w	8012b6c <_vfiprintf_r+0x1ec>
 8012a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a20:	445a      	add	r2, fp
 8012a22:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a24:	f89a 3000 	ldrb.w	r3, [sl]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f000 809f 	beq.w	8012b6c <_vfiprintf_r+0x1ec>
 8012a2e:	2300      	movs	r3, #0
 8012a30:	f04f 32ff 	mov.w	r2, #4294967295
 8012a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a38:	f10a 0a01 	add.w	sl, sl, #1
 8012a3c:	9304      	str	r3, [sp, #16]
 8012a3e:	9307      	str	r3, [sp, #28]
 8012a40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a44:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a46:	4654      	mov	r4, sl
 8012a48:	2205      	movs	r2, #5
 8012a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a4e:	4853      	ldr	r0, [pc, #332]	@ (8012b9c <_vfiprintf_r+0x21c>)
 8012a50:	f7ed fbde 	bl	8000210 <memchr>
 8012a54:	9a04      	ldr	r2, [sp, #16]
 8012a56:	b9d8      	cbnz	r0, 8012a90 <_vfiprintf_r+0x110>
 8012a58:	06d1      	lsls	r1, r2, #27
 8012a5a:	bf44      	itt	mi
 8012a5c:	2320      	movmi	r3, #32
 8012a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a62:	0713      	lsls	r3, r2, #28
 8012a64:	bf44      	itt	mi
 8012a66:	232b      	movmi	r3, #43	@ 0x2b
 8012a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8012a70:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a72:	d015      	beq.n	8012aa0 <_vfiprintf_r+0x120>
 8012a74:	9a07      	ldr	r2, [sp, #28]
 8012a76:	4654      	mov	r4, sl
 8012a78:	2000      	movs	r0, #0
 8012a7a:	f04f 0c0a 	mov.w	ip, #10
 8012a7e:	4621      	mov	r1, r4
 8012a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a84:	3b30      	subs	r3, #48	@ 0x30
 8012a86:	2b09      	cmp	r3, #9
 8012a88:	d94b      	bls.n	8012b22 <_vfiprintf_r+0x1a2>
 8012a8a:	b1b0      	cbz	r0, 8012aba <_vfiprintf_r+0x13a>
 8012a8c:	9207      	str	r2, [sp, #28]
 8012a8e:	e014      	b.n	8012aba <_vfiprintf_r+0x13a>
 8012a90:	eba0 0308 	sub.w	r3, r0, r8
 8012a94:	fa09 f303 	lsl.w	r3, r9, r3
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	9304      	str	r3, [sp, #16]
 8012a9c:	46a2      	mov	sl, r4
 8012a9e:	e7d2      	b.n	8012a46 <_vfiprintf_r+0xc6>
 8012aa0:	9b03      	ldr	r3, [sp, #12]
 8012aa2:	1d19      	adds	r1, r3, #4
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	9103      	str	r1, [sp, #12]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	bfbb      	ittet	lt
 8012aac:	425b      	neglt	r3, r3
 8012aae:	f042 0202 	orrlt.w	r2, r2, #2
 8012ab2:	9307      	strge	r3, [sp, #28]
 8012ab4:	9307      	strlt	r3, [sp, #28]
 8012ab6:	bfb8      	it	lt
 8012ab8:	9204      	strlt	r2, [sp, #16]
 8012aba:	7823      	ldrb	r3, [r4, #0]
 8012abc:	2b2e      	cmp	r3, #46	@ 0x2e
 8012abe:	d10a      	bne.n	8012ad6 <_vfiprintf_r+0x156>
 8012ac0:	7863      	ldrb	r3, [r4, #1]
 8012ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ac4:	d132      	bne.n	8012b2c <_vfiprintf_r+0x1ac>
 8012ac6:	9b03      	ldr	r3, [sp, #12]
 8012ac8:	1d1a      	adds	r2, r3, #4
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	9203      	str	r2, [sp, #12]
 8012ace:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012ad2:	3402      	adds	r4, #2
 8012ad4:	9305      	str	r3, [sp, #20]
 8012ad6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012bac <_vfiprintf_r+0x22c>
 8012ada:	7821      	ldrb	r1, [r4, #0]
 8012adc:	2203      	movs	r2, #3
 8012ade:	4650      	mov	r0, sl
 8012ae0:	f7ed fb96 	bl	8000210 <memchr>
 8012ae4:	b138      	cbz	r0, 8012af6 <_vfiprintf_r+0x176>
 8012ae6:	9b04      	ldr	r3, [sp, #16]
 8012ae8:	eba0 000a 	sub.w	r0, r0, sl
 8012aec:	2240      	movs	r2, #64	@ 0x40
 8012aee:	4082      	lsls	r2, r0
 8012af0:	4313      	orrs	r3, r2
 8012af2:	3401      	adds	r4, #1
 8012af4:	9304      	str	r3, [sp, #16]
 8012af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012afa:	4829      	ldr	r0, [pc, #164]	@ (8012ba0 <_vfiprintf_r+0x220>)
 8012afc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012b00:	2206      	movs	r2, #6
 8012b02:	f7ed fb85 	bl	8000210 <memchr>
 8012b06:	2800      	cmp	r0, #0
 8012b08:	d03f      	beq.n	8012b8a <_vfiprintf_r+0x20a>
 8012b0a:	4b26      	ldr	r3, [pc, #152]	@ (8012ba4 <_vfiprintf_r+0x224>)
 8012b0c:	bb1b      	cbnz	r3, 8012b56 <_vfiprintf_r+0x1d6>
 8012b0e:	9b03      	ldr	r3, [sp, #12]
 8012b10:	3307      	adds	r3, #7
 8012b12:	f023 0307 	bic.w	r3, r3, #7
 8012b16:	3308      	adds	r3, #8
 8012b18:	9303      	str	r3, [sp, #12]
 8012b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b1c:	443b      	add	r3, r7
 8012b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b20:	e76a      	b.n	80129f8 <_vfiprintf_r+0x78>
 8012b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b26:	460c      	mov	r4, r1
 8012b28:	2001      	movs	r0, #1
 8012b2a:	e7a8      	b.n	8012a7e <_vfiprintf_r+0xfe>
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	3401      	adds	r4, #1
 8012b30:	9305      	str	r3, [sp, #20]
 8012b32:	4619      	mov	r1, r3
 8012b34:	f04f 0c0a 	mov.w	ip, #10
 8012b38:	4620      	mov	r0, r4
 8012b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b3e:	3a30      	subs	r2, #48	@ 0x30
 8012b40:	2a09      	cmp	r2, #9
 8012b42:	d903      	bls.n	8012b4c <_vfiprintf_r+0x1cc>
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d0c6      	beq.n	8012ad6 <_vfiprintf_r+0x156>
 8012b48:	9105      	str	r1, [sp, #20]
 8012b4a:	e7c4      	b.n	8012ad6 <_vfiprintf_r+0x156>
 8012b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b50:	4604      	mov	r4, r0
 8012b52:	2301      	movs	r3, #1
 8012b54:	e7f0      	b.n	8012b38 <_vfiprintf_r+0x1b8>
 8012b56:	ab03      	add	r3, sp, #12
 8012b58:	9300      	str	r3, [sp, #0]
 8012b5a:	462a      	mov	r2, r5
 8012b5c:	4b12      	ldr	r3, [pc, #72]	@ (8012ba8 <_vfiprintf_r+0x228>)
 8012b5e:	a904      	add	r1, sp, #16
 8012b60:	4630      	mov	r0, r6
 8012b62:	f7fc fd77 	bl	800f654 <_printf_float>
 8012b66:	4607      	mov	r7, r0
 8012b68:	1c78      	adds	r0, r7, #1
 8012b6a:	d1d6      	bne.n	8012b1a <_vfiprintf_r+0x19a>
 8012b6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b6e:	07d9      	lsls	r1, r3, #31
 8012b70:	d405      	bmi.n	8012b7e <_vfiprintf_r+0x1fe>
 8012b72:	89ab      	ldrh	r3, [r5, #12]
 8012b74:	059a      	lsls	r2, r3, #22
 8012b76:	d402      	bmi.n	8012b7e <_vfiprintf_r+0x1fe>
 8012b78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b7a:	f7fd fcfd 	bl	8010578 <__retarget_lock_release_recursive>
 8012b7e:	89ab      	ldrh	r3, [r5, #12]
 8012b80:	065b      	lsls	r3, r3, #25
 8012b82:	f53f af1f 	bmi.w	80129c4 <_vfiprintf_r+0x44>
 8012b86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b88:	e71e      	b.n	80129c8 <_vfiprintf_r+0x48>
 8012b8a:	ab03      	add	r3, sp, #12
 8012b8c:	9300      	str	r3, [sp, #0]
 8012b8e:	462a      	mov	r2, r5
 8012b90:	4b05      	ldr	r3, [pc, #20]	@ (8012ba8 <_vfiprintf_r+0x228>)
 8012b92:	a904      	add	r1, sp, #16
 8012b94:	4630      	mov	r0, r6
 8012b96:	f7fc fff5 	bl	800fb84 <_printf_i>
 8012b9a:	e7e4      	b.n	8012b66 <_vfiprintf_r+0x1e6>
 8012b9c:	080157c1 	.word	0x080157c1
 8012ba0:	080157cb 	.word	0x080157cb
 8012ba4:	0800f655 	.word	0x0800f655
 8012ba8:	0801295d 	.word	0x0801295d
 8012bac:	080157c7 	.word	0x080157c7

08012bb0 <__swbuf_r>:
 8012bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bb2:	460e      	mov	r6, r1
 8012bb4:	4614      	mov	r4, r2
 8012bb6:	4605      	mov	r5, r0
 8012bb8:	b118      	cbz	r0, 8012bc2 <__swbuf_r+0x12>
 8012bba:	6a03      	ldr	r3, [r0, #32]
 8012bbc:	b90b      	cbnz	r3, 8012bc2 <__swbuf_r+0x12>
 8012bbe:	f7fd fba1 	bl	8010304 <__sinit>
 8012bc2:	69a3      	ldr	r3, [r4, #24]
 8012bc4:	60a3      	str	r3, [r4, #8]
 8012bc6:	89a3      	ldrh	r3, [r4, #12]
 8012bc8:	071a      	lsls	r2, r3, #28
 8012bca:	d501      	bpl.n	8012bd0 <__swbuf_r+0x20>
 8012bcc:	6923      	ldr	r3, [r4, #16]
 8012bce:	b943      	cbnz	r3, 8012be2 <__swbuf_r+0x32>
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	f000 f82a 	bl	8012c2c <__swsetup_r>
 8012bd8:	b118      	cbz	r0, 8012be2 <__swbuf_r+0x32>
 8012bda:	f04f 37ff 	mov.w	r7, #4294967295
 8012bde:	4638      	mov	r0, r7
 8012be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	6922      	ldr	r2, [r4, #16]
 8012be6:	1a98      	subs	r0, r3, r2
 8012be8:	6963      	ldr	r3, [r4, #20]
 8012bea:	b2f6      	uxtb	r6, r6
 8012bec:	4283      	cmp	r3, r0
 8012bee:	4637      	mov	r7, r6
 8012bf0:	dc05      	bgt.n	8012bfe <__swbuf_r+0x4e>
 8012bf2:	4621      	mov	r1, r4
 8012bf4:	4628      	mov	r0, r5
 8012bf6:	f7ff fdd7 	bl	80127a8 <_fflush_r>
 8012bfa:	2800      	cmp	r0, #0
 8012bfc:	d1ed      	bne.n	8012bda <__swbuf_r+0x2a>
 8012bfe:	68a3      	ldr	r3, [r4, #8]
 8012c00:	3b01      	subs	r3, #1
 8012c02:	60a3      	str	r3, [r4, #8]
 8012c04:	6823      	ldr	r3, [r4, #0]
 8012c06:	1c5a      	adds	r2, r3, #1
 8012c08:	6022      	str	r2, [r4, #0]
 8012c0a:	701e      	strb	r6, [r3, #0]
 8012c0c:	6962      	ldr	r2, [r4, #20]
 8012c0e:	1c43      	adds	r3, r0, #1
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d004      	beq.n	8012c1e <__swbuf_r+0x6e>
 8012c14:	89a3      	ldrh	r3, [r4, #12]
 8012c16:	07db      	lsls	r3, r3, #31
 8012c18:	d5e1      	bpl.n	8012bde <__swbuf_r+0x2e>
 8012c1a:	2e0a      	cmp	r6, #10
 8012c1c:	d1df      	bne.n	8012bde <__swbuf_r+0x2e>
 8012c1e:	4621      	mov	r1, r4
 8012c20:	4628      	mov	r0, r5
 8012c22:	f7ff fdc1 	bl	80127a8 <_fflush_r>
 8012c26:	2800      	cmp	r0, #0
 8012c28:	d0d9      	beq.n	8012bde <__swbuf_r+0x2e>
 8012c2a:	e7d6      	b.n	8012bda <__swbuf_r+0x2a>

08012c2c <__swsetup_r>:
 8012c2c:	b538      	push	{r3, r4, r5, lr}
 8012c2e:	4b29      	ldr	r3, [pc, #164]	@ (8012cd4 <__swsetup_r+0xa8>)
 8012c30:	4605      	mov	r5, r0
 8012c32:	6818      	ldr	r0, [r3, #0]
 8012c34:	460c      	mov	r4, r1
 8012c36:	b118      	cbz	r0, 8012c40 <__swsetup_r+0x14>
 8012c38:	6a03      	ldr	r3, [r0, #32]
 8012c3a:	b90b      	cbnz	r3, 8012c40 <__swsetup_r+0x14>
 8012c3c:	f7fd fb62 	bl	8010304 <__sinit>
 8012c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c44:	0719      	lsls	r1, r3, #28
 8012c46:	d422      	bmi.n	8012c8e <__swsetup_r+0x62>
 8012c48:	06da      	lsls	r2, r3, #27
 8012c4a:	d407      	bmi.n	8012c5c <__swsetup_r+0x30>
 8012c4c:	2209      	movs	r2, #9
 8012c4e:	602a      	str	r2, [r5, #0]
 8012c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c54:	81a3      	strh	r3, [r4, #12]
 8012c56:	f04f 30ff 	mov.w	r0, #4294967295
 8012c5a:	e033      	b.n	8012cc4 <__swsetup_r+0x98>
 8012c5c:	0758      	lsls	r0, r3, #29
 8012c5e:	d512      	bpl.n	8012c86 <__swsetup_r+0x5a>
 8012c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c62:	b141      	cbz	r1, 8012c76 <__swsetup_r+0x4a>
 8012c64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c68:	4299      	cmp	r1, r3
 8012c6a:	d002      	beq.n	8012c72 <__swsetup_r+0x46>
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	f7fe faef 	bl	8011250 <_free_r>
 8012c72:	2300      	movs	r3, #0
 8012c74:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012c7c:	81a3      	strh	r3, [r4, #12]
 8012c7e:	2300      	movs	r3, #0
 8012c80:	6063      	str	r3, [r4, #4]
 8012c82:	6923      	ldr	r3, [r4, #16]
 8012c84:	6023      	str	r3, [r4, #0]
 8012c86:	89a3      	ldrh	r3, [r4, #12]
 8012c88:	f043 0308 	orr.w	r3, r3, #8
 8012c8c:	81a3      	strh	r3, [r4, #12]
 8012c8e:	6923      	ldr	r3, [r4, #16]
 8012c90:	b94b      	cbnz	r3, 8012ca6 <__swsetup_r+0x7a>
 8012c92:	89a3      	ldrh	r3, [r4, #12]
 8012c94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c9c:	d003      	beq.n	8012ca6 <__swsetup_r+0x7a>
 8012c9e:	4621      	mov	r1, r4
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	f000 f883 	bl	8012dac <__smakebuf_r>
 8012ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012caa:	f013 0201 	ands.w	r2, r3, #1
 8012cae:	d00a      	beq.n	8012cc6 <__swsetup_r+0x9a>
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	60a2      	str	r2, [r4, #8]
 8012cb4:	6962      	ldr	r2, [r4, #20]
 8012cb6:	4252      	negs	r2, r2
 8012cb8:	61a2      	str	r2, [r4, #24]
 8012cba:	6922      	ldr	r2, [r4, #16]
 8012cbc:	b942      	cbnz	r2, 8012cd0 <__swsetup_r+0xa4>
 8012cbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012cc2:	d1c5      	bne.n	8012c50 <__swsetup_r+0x24>
 8012cc4:	bd38      	pop	{r3, r4, r5, pc}
 8012cc6:	0799      	lsls	r1, r3, #30
 8012cc8:	bf58      	it	pl
 8012cca:	6962      	ldrpl	r2, [r4, #20]
 8012ccc:	60a2      	str	r2, [r4, #8]
 8012cce:	e7f4      	b.n	8012cba <__swsetup_r+0x8e>
 8012cd0:	2000      	movs	r0, #0
 8012cd2:	e7f7      	b.n	8012cc4 <__swsetup_r+0x98>
 8012cd4:	20000288 	.word	0x20000288

08012cd8 <_raise_r>:
 8012cd8:	291f      	cmp	r1, #31
 8012cda:	b538      	push	{r3, r4, r5, lr}
 8012cdc:	4605      	mov	r5, r0
 8012cde:	460c      	mov	r4, r1
 8012ce0:	d904      	bls.n	8012cec <_raise_r+0x14>
 8012ce2:	2316      	movs	r3, #22
 8012ce4:	6003      	str	r3, [r0, #0]
 8012ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8012cea:	bd38      	pop	{r3, r4, r5, pc}
 8012cec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012cee:	b112      	cbz	r2, 8012cf6 <_raise_r+0x1e>
 8012cf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012cf4:	b94b      	cbnz	r3, 8012d0a <_raise_r+0x32>
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f000 f830 	bl	8012d5c <_getpid_r>
 8012cfc:	4622      	mov	r2, r4
 8012cfe:	4601      	mov	r1, r0
 8012d00:	4628      	mov	r0, r5
 8012d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d06:	f000 b817 	b.w	8012d38 <_kill_r>
 8012d0a:	2b01      	cmp	r3, #1
 8012d0c:	d00a      	beq.n	8012d24 <_raise_r+0x4c>
 8012d0e:	1c59      	adds	r1, r3, #1
 8012d10:	d103      	bne.n	8012d1a <_raise_r+0x42>
 8012d12:	2316      	movs	r3, #22
 8012d14:	6003      	str	r3, [r0, #0]
 8012d16:	2001      	movs	r0, #1
 8012d18:	e7e7      	b.n	8012cea <_raise_r+0x12>
 8012d1a:	2100      	movs	r1, #0
 8012d1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012d20:	4620      	mov	r0, r4
 8012d22:	4798      	blx	r3
 8012d24:	2000      	movs	r0, #0
 8012d26:	e7e0      	b.n	8012cea <_raise_r+0x12>

08012d28 <raise>:
 8012d28:	4b02      	ldr	r3, [pc, #8]	@ (8012d34 <raise+0xc>)
 8012d2a:	4601      	mov	r1, r0
 8012d2c:	6818      	ldr	r0, [r3, #0]
 8012d2e:	f7ff bfd3 	b.w	8012cd8 <_raise_r>
 8012d32:	bf00      	nop
 8012d34:	20000288 	.word	0x20000288

08012d38 <_kill_r>:
 8012d38:	b538      	push	{r3, r4, r5, lr}
 8012d3a:	4d07      	ldr	r5, [pc, #28]	@ (8012d58 <_kill_r+0x20>)
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	4604      	mov	r4, r0
 8012d40:	4608      	mov	r0, r1
 8012d42:	4611      	mov	r1, r2
 8012d44:	602b      	str	r3, [r5, #0]
 8012d46:	f7f1 fab1 	bl	80042ac <_kill>
 8012d4a:	1c43      	adds	r3, r0, #1
 8012d4c:	d102      	bne.n	8012d54 <_kill_r+0x1c>
 8012d4e:	682b      	ldr	r3, [r5, #0]
 8012d50:	b103      	cbz	r3, 8012d54 <_kill_r+0x1c>
 8012d52:	6023      	str	r3, [r4, #0]
 8012d54:	bd38      	pop	{r3, r4, r5, pc}
 8012d56:	bf00      	nop
 8012d58:	20002764 	.word	0x20002764

08012d5c <_getpid_r>:
 8012d5c:	f7f1 ba9e 	b.w	800429c <_getpid>

08012d60 <__swhatbuf_r>:
 8012d60:	b570      	push	{r4, r5, r6, lr}
 8012d62:	460c      	mov	r4, r1
 8012d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d68:	2900      	cmp	r1, #0
 8012d6a:	b096      	sub	sp, #88	@ 0x58
 8012d6c:	4615      	mov	r5, r2
 8012d6e:	461e      	mov	r6, r3
 8012d70:	da0d      	bge.n	8012d8e <__swhatbuf_r+0x2e>
 8012d72:	89a3      	ldrh	r3, [r4, #12]
 8012d74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012d78:	f04f 0100 	mov.w	r1, #0
 8012d7c:	bf14      	ite	ne
 8012d7e:	2340      	movne	r3, #64	@ 0x40
 8012d80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012d84:	2000      	movs	r0, #0
 8012d86:	6031      	str	r1, [r6, #0]
 8012d88:	602b      	str	r3, [r5, #0]
 8012d8a:	b016      	add	sp, #88	@ 0x58
 8012d8c:	bd70      	pop	{r4, r5, r6, pc}
 8012d8e:	466a      	mov	r2, sp
 8012d90:	f000 f848 	bl	8012e24 <_fstat_r>
 8012d94:	2800      	cmp	r0, #0
 8012d96:	dbec      	blt.n	8012d72 <__swhatbuf_r+0x12>
 8012d98:	9901      	ldr	r1, [sp, #4]
 8012d9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012d9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012da2:	4259      	negs	r1, r3
 8012da4:	4159      	adcs	r1, r3
 8012da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012daa:	e7eb      	b.n	8012d84 <__swhatbuf_r+0x24>

08012dac <__smakebuf_r>:
 8012dac:	898b      	ldrh	r3, [r1, #12]
 8012dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012db0:	079d      	lsls	r5, r3, #30
 8012db2:	4606      	mov	r6, r0
 8012db4:	460c      	mov	r4, r1
 8012db6:	d507      	bpl.n	8012dc8 <__smakebuf_r+0x1c>
 8012db8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012dbc:	6023      	str	r3, [r4, #0]
 8012dbe:	6123      	str	r3, [r4, #16]
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	6163      	str	r3, [r4, #20]
 8012dc4:	b003      	add	sp, #12
 8012dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dc8:	ab01      	add	r3, sp, #4
 8012dca:	466a      	mov	r2, sp
 8012dcc:	f7ff ffc8 	bl	8012d60 <__swhatbuf_r>
 8012dd0:	9f00      	ldr	r7, [sp, #0]
 8012dd2:	4605      	mov	r5, r0
 8012dd4:	4639      	mov	r1, r7
 8012dd6:	4630      	mov	r0, r6
 8012dd8:	f7fb fcfa 	bl	800e7d0 <_malloc_r>
 8012ddc:	b948      	cbnz	r0, 8012df2 <__smakebuf_r+0x46>
 8012dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012de2:	059a      	lsls	r2, r3, #22
 8012de4:	d4ee      	bmi.n	8012dc4 <__smakebuf_r+0x18>
 8012de6:	f023 0303 	bic.w	r3, r3, #3
 8012dea:	f043 0302 	orr.w	r3, r3, #2
 8012dee:	81a3      	strh	r3, [r4, #12]
 8012df0:	e7e2      	b.n	8012db8 <__smakebuf_r+0xc>
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	6020      	str	r0, [r4, #0]
 8012df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012dfa:	81a3      	strh	r3, [r4, #12]
 8012dfc:	9b01      	ldr	r3, [sp, #4]
 8012dfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012e02:	b15b      	cbz	r3, 8012e1c <__smakebuf_r+0x70>
 8012e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e08:	4630      	mov	r0, r6
 8012e0a:	f000 f81d 	bl	8012e48 <_isatty_r>
 8012e0e:	b128      	cbz	r0, 8012e1c <__smakebuf_r+0x70>
 8012e10:	89a3      	ldrh	r3, [r4, #12]
 8012e12:	f023 0303 	bic.w	r3, r3, #3
 8012e16:	f043 0301 	orr.w	r3, r3, #1
 8012e1a:	81a3      	strh	r3, [r4, #12]
 8012e1c:	89a3      	ldrh	r3, [r4, #12]
 8012e1e:	431d      	orrs	r5, r3
 8012e20:	81a5      	strh	r5, [r4, #12]
 8012e22:	e7cf      	b.n	8012dc4 <__smakebuf_r+0x18>

08012e24 <_fstat_r>:
 8012e24:	b538      	push	{r3, r4, r5, lr}
 8012e26:	4d07      	ldr	r5, [pc, #28]	@ (8012e44 <_fstat_r+0x20>)
 8012e28:	2300      	movs	r3, #0
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	4608      	mov	r0, r1
 8012e2e:	4611      	mov	r1, r2
 8012e30:	602b      	str	r3, [r5, #0]
 8012e32:	f7f1 fa9b 	bl	800436c <_fstat>
 8012e36:	1c43      	adds	r3, r0, #1
 8012e38:	d102      	bne.n	8012e40 <_fstat_r+0x1c>
 8012e3a:	682b      	ldr	r3, [r5, #0]
 8012e3c:	b103      	cbz	r3, 8012e40 <_fstat_r+0x1c>
 8012e3e:	6023      	str	r3, [r4, #0]
 8012e40:	bd38      	pop	{r3, r4, r5, pc}
 8012e42:	bf00      	nop
 8012e44:	20002764 	.word	0x20002764

08012e48 <_isatty_r>:
 8012e48:	b538      	push	{r3, r4, r5, lr}
 8012e4a:	4d06      	ldr	r5, [pc, #24]	@ (8012e64 <_isatty_r+0x1c>)
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	4604      	mov	r4, r0
 8012e50:	4608      	mov	r0, r1
 8012e52:	602b      	str	r3, [r5, #0]
 8012e54:	f7f1 fa9a 	bl	800438c <_isatty>
 8012e58:	1c43      	adds	r3, r0, #1
 8012e5a:	d102      	bne.n	8012e62 <_isatty_r+0x1a>
 8012e5c:	682b      	ldr	r3, [r5, #0]
 8012e5e:	b103      	cbz	r3, 8012e62 <_isatty_r+0x1a>
 8012e60:	6023      	str	r3, [r4, #0]
 8012e62:	bd38      	pop	{r3, r4, r5, pc}
 8012e64:	20002764 	.word	0x20002764

08012e68 <atan2>:
 8012e68:	f000 bbb2 	b.w	80135d0 <__ieee754_atan2>

08012e6c <pow>:
 8012e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6e:	ed2d 8b02 	vpush	{d8}
 8012e72:	eeb0 8a40 	vmov.f32	s16, s0
 8012e76:	eef0 8a60 	vmov.f32	s17, s1
 8012e7a:	ec55 4b11 	vmov	r4, r5, d1
 8012e7e:	f000 fc6f 	bl	8013760 <__ieee754_pow>
 8012e82:	4622      	mov	r2, r4
 8012e84:	462b      	mov	r3, r5
 8012e86:	4620      	mov	r0, r4
 8012e88:	4629      	mov	r1, r5
 8012e8a:	ec57 6b10 	vmov	r6, r7, d0
 8012e8e:	f7ed fe6d 	bl	8000b6c <__aeabi_dcmpun>
 8012e92:	2800      	cmp	r0, #0
 8012e94:	d13b      	bne.n	8012f0e <pow+0xa2>
 8012e96:	ec51 0b18 	vmov	r0, r1, d8
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	f7ed fe33 	bl	8000b08 <__aeabi_dcmpeq>
 8012ea2:	b1b8      	cbz	r0, 8012ed4 <pow+0x68>
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	4629      	mov	r1, r5
 8012eac:	f7ed fe2c 	bl	8000b08 <__aeabi_dcmpeq>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	d146      	bne.n	8012f42 <pow+0xd6>
 8012eb4:	ec45 4b10 	vmov	d0, r4, r5
 8012eb8:	f000 f91e 	bl	80130f8 <finite>
 8012ebc:	b338      	cbz	r0, 8012f0e <pow+0xa2>
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	4629      	mov	r1, r5
 8012ec6:	f7ed fe29 	bl	8000b1c <__aeabi_dcmplt>
 8012eca:	b300      	cbz	r0, 8012f0e <pow+0xa2>
 8012ecc:	f7fd fb28 	bl	8010520 <__errno>
 8012ed0:	2322      	movs	r3, #34	@ 0x22
 8012ed2:	e01b      	b.n	8012f0c <pow+0xa0>
 8012ed4:	ec47 6b10 	vmov	d0, r6, r7
 8012ed8:	f000 f90e 	bl	80130f8 <finite>
 8012edc:	b9e0      	cbnz	r0, 8012f18 <pow+0xac>
 8012ede:	eeb0 0a48 	vmov.f32	s0, s16
 8012ee2:	eef0 0a68 	vmov.f32	s1, s17
 8012ee6:	f000 f907 	bl	80130f8 <finite>
 8012eea:	b1a8      	cbz	r0, 8012f18 <pow+0xac>
 8012eec:	ec45 4b10 	vmov	d0, r4, r5
 8012ef0:	f000 f902 	bl	80130f8 <finite>
 8012ef4:	b180      	cbz	r0, 8012f18 <pow+0xac>
 8012ef6:	4632      	mov	r2, r6
 8012ef8:	463b      	mov	r3, r7
 8012efa:	4630      	mov	r0, r6
 8012efc:	4639      	mov	r1, r7
 8012efe:	f7ed fe35 	bl	8000b6c <__aeabi_dcmpun>
 8012f02:	2800      	cmp	r0, #0
 8012f04:	d0e2      	beq.n	8012ecc <pow+0x60>
 8012f06:	f7fd fb0b 	bl	8010520 <__errno>
 8012f0a:	2321      	movs	r3, #33	@ 0x21
 8012f0c:	6003      	str	r3, [r0, #0]
 8012f0e:	ecbd 8b02 	vpop	{d8}
 8012f12:	ec47 6b10 	vmov	d0, r6, r7
 8012f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f18:	2200      	movs	r2, #0
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	4630      	mov	r0, r6
 8012f1e:	4639      	mov	r1, r7
 8012f20:	f7ed fdf2 	bl	8000b08 <__aeabi_dcmpeq>
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d0f2      	beq.n	8012f0e <pow+0xa2>
 8012f28:	eeb0 0a48 	vmov.f32	s0, s16
 8012f2c:	eef0 0a68 	vmov.f32	s1, s17
 8012f30:	f000 f8e2 	bl	80130f8 <finite>
 8012f34:	2800      	cmp	r0, #0
 8012f36:	d0ea      	beq.n	8012f0e <pow+0xa2>
 8012f38:	ec45 4b10 	vmov	d0, r4, r5
 8012f3c:	f000 f8dc 	bl	80130f8 <finite>
 8012f40:	e7c3      	b.n	8012eca <pow+0x5e>
 8012f42:	4f01      	ldr	r7, [pc, #4]	@ (8012f48 <pow+0xdc>)
 8012f44:	2600      	movs	r6, #0
 8012f46:	e7e2      	b.n	8012f0e <pow+0xa2>
 8012f48:	3ff00000 	.word	0x3ff00000

08012f4c <sqrt>:
 8012f4c:	b538      	push	{r3, r4, r5, lr}
 8012f4e:	ed2d 8b02 	vpush	{d8}
 8012f52:	ec55 4b10 	vmov	r4, r5, d0
 8012f56:	f000 f8db 	bl	8013110 <__ieee754_sqrt>
 8012f5a:	4622      	mov	r2, r4
 8012f5c:	462b      	mov	r3, r5
 8012f5e:	4620      	mov	r0, r4
 8012f60:	4629      	mov	r1, r5
 8012f62:	eeb0 8a40 	vmov.f32	s16, s0
 8012f66:	eef0 8a60 	vmov.f32	s17, s1
 8012f6a:	f7ed fdff 	bl	8000b6c <__aeabi_dcmpun>
 8012f6e:	b990      	cbnz	r0, 8012f96 <sqrt+0x4a>
 8012f70:	2200      	movs	r2, #0
 8012f72:	2300      	movs	r3, #0
 8012f74:	4620      	mov	r0, r4
 8012f76:	4629      	mov	r1, r5
 8012f78:	f7ed fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8012f7c:	b158      	cbz	r0, 8012f96 <sqrt+0x4a>
 8012f7e:	f7fd facf 	bl	8010520 <__errno>
 8012f82:	2321      	movs	r3, #33	@ 0x21
 8012f84:	6003      	str	r3, [r0, #0]
 8012f86:	2200      	movs	r2, #0
 8012f88:	2300      	movs	r3, #0
 8012f8a:	4610      	mov	r0, r2
 8012f8c:	4619      	mov	r1, r3
 8012f8e:	f7ed fc7d 	bl	800088c <__aeabi_ddiv>
 8012f92:	ec41 0b18 	vmov	d8, r0, r1
 8012f96:	eeb0 0a48 	vmov.f32	s0, s16
 8012f9a:	eef0 0a68 	vmov.f32	s1, s17
 8012f9e:	ecbd 8b02 	vpop	{d8}
 8012fa2:	bd38      	pop	{r3, r4, r5, pc}
 8012fa4:	0000      	movs	r0, r0
	...

08012fa8 <cos>:
 8012fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012faa:	ec53 2b10 	vmov	r2, r3, d0
 8012fae:	4826      	ldr	r0, [pc, #152]	@ (8013048 <cos+0xa0>)
 8012fb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012fb4:	4281      	cmp	r1, r0
 8012fb6:	d806      	bhi.n	8012fc6 <cos+0x1e>
 8012fb8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8013040 <cos+0x98>
 8012fbc:	b005      	add	sp, #20
 8012fbe:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fc2:	f000 b981 	b.w	80132c8 <__kernel_cos>
 8012fc6:	4821      	ldr	r0, [pc, #132]	@ (801304c <cos+0xa4>)
 8012fc8:	4281      	cmp	r1, r0
 8012fca:	d908      	bls.n	8012fde <cos+0x36>
 8012fcc:	4610      	mov	r0, r2
 8012fce:	4619      	mov	r1, r3
 8012fd0:	f7ed f97a 	bl	80002c8 <__aeabi_dsub>
 8012fd4:	ec41 0b10 	vmov	d0, r0, r1
 8012fd8:	b005      	add	sp, #20
 8012fda:	f85d fb04 	ldr.w	pc, [sp], #4
 8012fde:	4668      	mov	r0, sp
 8012fe0:	f001 f902 	bl	80141e8 <__ieee754_rem_pio2>
 8012fe4:	f000 0003 	and.w	r0, r0, #3
 8012fe8:	2801      	cmp	r0, #1
 8012fea:	d00b      	beq.n	8013004 <cos+0x5c>
 8012fec:	2802      	cmp	r0, #2
 8012fee:	d015      	beq.n	801301c <cos+0x74>
 8012ff0:	b9d8      	cbnz	r0, 801302a <cos+0x82>
 8012ff2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ff6:	ed9d 0b00 	vldr	d0, [sp]
 8012ffa:	f000 f965 	bl	80132c8 <__kernel_cos>
 8012ffe:	ec51 0b10 	vmov	r0, r1, d0
 8013002:	e7e7      	b.n	8012fd4 <cos+0x2c>
 8013004:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013008:	ed9d 0b00 	vldr	d0, [sp]
 801300c:	f000 fa24 	bl	8013458 <__kernel_sin>
 8013010:	ec53 2b10 	vmov	r2, r3, d0
 8013014:	4610      	mov	r0, r2
 8013016:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801301a:	e7db      	b.n	8012fd4 <cos+0x2c>
 801301c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013020:	ed9d 0b00 	vldr	d0, [sp]
 8013024:	f000 f950 	bl	80132c8 <__kernel_cos>
 8013028:	e7f2      	b.n	8013010 <cos+0x68>
 801302a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801302e:	ed9d 0b00 	vldr	d0, [sp]
 8013032:	2001      	movs	r0, #1
 8013034:	f000 fa10 	bl	8013458 <__kernel_sin>
 8013038:	e7e1      	b.n	8012ffe <cos+0x56>
 801303a:	bf00      	nop
 801303c:	f3af 8000 	nop.w
	...
 8013048:	3fe921fb 	.word	0x3fe921fb
 801304c:	7fefffff 	.word	0x7fefffff

08013050 <sin>:
 8013050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013052:	ec53 2b10 	vmov	r2, r3, d0
 8013056:	4826      	ldr	r0, [pc, #152]	@ (80130f0 <sin+0xa0>)
 8013058:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801305c:	4281      	cmp	r1, r0
 801305e:	d807      	bhi.n	8013070 <sin+0x20>
 8013060:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80130e8 <sin+0x98>
 8013064:	2000      	movs	r0, #0
 8013066:	b005      	add	sp, #20
 8013068:	f85d eb04 	ldr.w	lr, [sp], #4
 801306c:	f000 b9f4 	b.w	8013458 <__kernel_sin>
 8013070:	4820      	ldr	r0, [pc, #128]	@ (80130f4 <sin+0xa4>)
 8013072:	4281      	cmp	r1, r0
 8013074:	d908      	bls.n	8013088 <sin+0x38>
 8013076:	4610      	mov	r0, r2
 8013078:	4619      	mov	r1, r3
 801307a:	f7ed f925 	bl	80002c8 <__aeabi_dsub>
 801307e:	ec41 0b10 	vmov	d0, r0, r1
 8013082:	b005      	add	sp, #20
 8013084:	f85d fb04 	ldr.w	pc, [sp], #4
 8013088:	4668      	mov	r0, sp
 801308a:	f001 f8ad 	bl	80141e8 <__ieee754_rem_pio2>
 801308e:	f000 0003 	and.w	r0, r0, #3
 8013092:	2801      	cmp	r0, #1
 8013094:	d00c      	beq.n	80130b0 <sin+0x60>
 8013096:	2802      	cmp	r0, #2
 8013098:	d011      	beq.n	80130be <sin+0x6e>
 801309a:	b9e8      	cbnz	r0, 80130d8 <sin+0x88>
 801309c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130a0:	ed9d 0b00 	vldr	d0, [sp]
 80130a4:	2001      	movs	r0, #1
 80130a6:	f000 f9d7 	bl	8013458 <__kernel_sin>
 80130aa:	ec51 0b10 	vmov	r0, r1, d0
 80130ae:	e7e6      	b.n	801307e <sin+0x2e>
 80130b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130b4:	ed9d 0b00 	vldr	d0, [sp]
 80130b8:	f000 f906 	bl	80132c8 <__kernel_cos>
 80130bc:	e7f5      	b.n	80130aa <sin+0x5a>
 80130be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130c2:	ed9d 0b00 	vldr	d0, [sp]
 80130c6:	2001      	movs	r0, #1
 80130c8:	f000 f9c6 	bl	8013458 <__kernel_sin>
 80130cc:	ec53 2b10 	vmov	r2, r3, d0
 80130d0:	4610      	mov	r0, r2
 80130d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80130d6:	e7d2      	b.n	801307e <sin+0x2e>
 80130d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80130dc:	ed9d 0b00 	vldr	d0, [sp]
 80130e0:	f000 f8f2 	bl	80132c8 <__kernel_cos>
 80130e4:	e7f2      	b.n	80130cc <sin+0x7c>
 80130e6:	bf00      	nop
	...
 80130f0:	3fe921fb 	.word	0x3fe921fb
 80130f4:	7fefffff 	.word	0x7fefffff

080130f8 <finite>:
 80130f8:	b082      	sub	sp, #8
 80130fa:	ed8d 0b00 	vstr	d0, [sp]
 80130fe:	9801      	ldr	r0, [sp, #4]
 8013100:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8013104:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013108:	0fc0      	lsrs	r0, r0, #31
 801310a:	b002      	add	sp, #8
 801310c:	4770      	bx	lr
	...

08013110 <__ieee754_sqrt>:
 8013110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013114:	4a68      	ldr	r2, [pc, #416]	@ (80132b8 <__ieee754_sqrt+0x1a8>)
 8013116:	ec55 4b10 	vmov	r4, r5, d0
 801311a:	43aa      	bics	r2, r5
 801311c:	462b      	mov	r3, r5
 801311e:	4621      	mov	r1, r4
 8013120:	d110      	bne.n	8013144 <__ieee754_sqrt+0x34>
 8013122:	4622      	mov	r2, r4
 8013124:	4620      	mov	r0, r4
 8013126:	4629      	mov	r1, r5
 8013128:	f7ed fa86 	bl	8000638 <__aeabi_dmul>
 801312c:	4602      	mov	r2, r0
 801312e:	460b      	mov	r3, r1
 8013130:	4620      	mov	r0, r4
 8013132:	4629      	mov	r1, r5
 8013134:	f7ed f8ca 	bl	80002cc <__adddf3>
 8013138:	4604      	mov	r4, r0
 801313a:	460d      	mov	r5, r1
 801313c:	ec45 4b10 	vmov	d0, r4, r5
 8013140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013144:	2d00      	cmp	r5, #0
 8013146:	dc0e      	bgt.n	8013166 <__ieee754_sqrt+0x56>
 8013148:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801314c:	4322      	orrs	r2, r4
 801314e:	d0f5      	beq.n	801313c <__ieee754_sqrt+0x2c>
 8013150:	b19d      	cbz	r5, 801317a <__ieee754_sqrt+0x6a>
 8013152:	4622      	mov	r2, r4
 8013154:	4620      	mov	r0, r4
 8013156:	4629      	mov	r1, r5
 8013158:	f7ed f8b6 	bl	80002c8 <__aeabi_dsub>
 801315c:	4602      	mov	r2, r0
 801315e:	460b      	mov	r3, r1
 8013160:	f7ed fb94 	bl	800088c <__aeabi_ddiv>
 8013164:	e7e8      	b.n	8013138 <__ieee754_sqrt+0x28>
 8013166:	152a      	asrs	r2, r5, #20
 8013168:	d115      	bne.n	8013196 <__ieee754_sqrt+0x86>
 801316a:	2000      	movs	r0, #0
 801316c:	e009      	b.n	8013182 <__ieee754_sqrt+0x72>
 801316e:	0acb      	lsrs	r3, r1, #11
 8013170:	3a15      	subs	r2, #21
 8013172:	0549      	lsls	r1, r1, #21
 8013174:	2b00      	cmp	r3, #0
 8013176:	d0fa      	beq.n	801316e <__ieee754_sqrt+0x5e>
 8013178:	e7f7      	b.n	801316a <__ieee754_sqrt+0x5a>
 801317a:	462a      	mov	r2, r5
 801317c:	e7fa      	b.n	8013174 <__ieee754_sqrt+0x64>
 801317e:	005b      	lsls	r3, r3, #1
 8013180:	3001      	adds	r0, #1
 8013182:	02dc      	lsls	r4, r3, #11
 8013184:	d5fb      	bpl.n	801317e <__ieee754_sqrt+0x6e>
 8013186:	1e44      	subs	r4, r0, #1
 8013188:	1b12      	subs	r2, r2, r4
 801318a:	f1c0 0420 	rsb	r4, r0, #32
 801318e:	fa21 f404 	lsr.w	r4, r1, r4
 8013192:	4323      	orrs	r3, r4
 8013194:	4081      	lsls	r1, r0
 8013196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801319a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801319e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80131a2:	07d2      	lsls	r2, r2, #31
 80131a4:	bf5c      	itt	pl
 80131a6:	005b      	lslpl	r3, r3, #1
 80131a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80131ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80131b0:	bf58      	it	pl
 80131b2:	0049      	lslpl	r1, r1, #1
 80131b4:	2600      	movs	r6, #0
 80131b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80131ba:	106d      	asrs	r5, r5, #1
 80131bc:	0049      	lsls	r1, r1, #1
 80131be:	2016      	movs	r0, #22
 80131c0:	4632      	mov	r2, r6
 80131c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80131c6:	1917      	adds	r7, r2, r4
 80131c8:	429f      	cmp	r7, r3
 80131ca:	bfde      	ittt	le
 80131cc:	193a      	addle	r2, r7, r4
 80131ce:	1bdb      	suble	r3, r3, r7
 80131d0:	1936      	addle	r6, r6, r4
 80131d2:	0fcf      	lsrs	r7, r1, #31
 80131d4:	3801      	subs	r0, #1
 80131d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80131da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80131de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80131e2:	d1f0      	bne.n	80131c6 <__ieee754_sqrt+0xb6>
 80131e4:	4604      	mov	r4, r0
 80131e6:	2720      	movs	r7, #32
 80131e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80131ec:	429a      	cmp	r2, r3
 80131ee:	eb00 0e0c 	add.w	lr, r0, ip
 80131f2:	db02      	blt.n	80131fa <__ieee754_sqrt+0xea>
 80131f4:	d113      	bne.n	801321e <__ieee754_sqrt+0x10e>
 80131f6:	458e      	cmp	lr, r1
 80131f8:	d811      	bhi.n	801321e <__ieee754_sqrt+0x10e>
 80131fa:	f1be 0f00 	cmp.w	lr, #0
 80131fe:	eb0e 000c 	add.w	r0, lr, ip
 8013202:	da42      	bge.n	801328a <__ieee754_sqrt+0x17a>
 8013204:	2800      	cmp	r0, #0
 8013206:	db40      	blt.n	801328a <__ieee754_sqrt+0x17a>
 8013208:	f102 0801 	add.w	r8, r2, #1
 801320c:	1a9b      	subs	r3, r3, r2
 801320e:	458e      	cmp	lr, r1
 8013210:	bf88      	it	hi
 8013212:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013216:	eba1 010e 	sub.w	r1, r1, lr
 801321a:	4464      	add	r4, ip
 801321c:	4642      	mov	r2, r8
 801321e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013222:	3f01      	subs	r7, #1
 8013224:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013228:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801322c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013230:	d1dc      	bne.n	80131ec <__ieee754_sqrt+0xdc>
 8013232:	4319      	orrs	r1, r3
 8013234:	d01b      	beq.n	801326e <__ieee754_sqrt+0x15e>
 8013236:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80132bc <__ieee754_sqrt+0x1ac>
 801323a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80132c0 <__ieee754_sqrt+0x1b0>
 801323e:	e9da 0100 	ldrd	r0, r1, [sl]
 8013242:	e9db 2300 	ldrd	r2, r3, [fp]
 8013246:	f7ed f83f 	bl	80002c8 <__aeabi_dsub>
 801324a:	e9da 8900 	ldrd	r8, r9, [sl]
 801324e:	4602      	mov	r2, r0
 8013250:	460b      	mov	r3, r1
 8013252:	4640      	mov	r0, r8
 8013254:	4649      	mov	r1, r9
 8013256:	f7ed fc6b 	bl	8000b30 <__aeabi_dcmple>
 801325a:	b140      	cbz	r0, 801326e <__ieee754_sqrt+0x15e>
 801325c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013260:	e9da 0100 	ldrd	r0, r1, [sl]
 8013264:	e9db 2300 	ldrd	r2, r3, [fp]
 8013268:	d111      	bne.n	801328e <__ieee754_sqrt+0x17e>
 801326a:	3601      	adds	r6, #1
 801326c:	463c      	mov	r4, r7
 801326e:	1072      	asrs	r2, r6, #1
 8013270:	0863      	lsrs	r3, r4, #1
 8013272:	07f1      	lsls	r1, r6, #31
 8013274:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013278:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801327c:	bf48      	it	mi
 801327e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8013282:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8013286:	4618      	mov	r0, r3
 8013288:	e756      	b.n	8013138 <__ieee754_sqrt+0x28>
 801328a:	4690      	mov	r8, r2
 801328c:	e7be      	b.n	801320c <__ieee754_sqrt+0xfc>
 801328e:	f7ed f81d 	bl	80002cc <__adddf3>
 8013292:	e9da 8900 	ldrd	r8, r9, [sl]
 8013296:	4602      	mov	r2, r0
 8013298:	460b      	mov	r3, r1
 801329a:	4640      	mov	r0, r8
 801329c:	4649      	mov	r1, r9
 801329e:	f7ed fc3d 	bl	8000b1c <__aeabi_dcmplt>
 80132a2:	b120      	cbz	r0, 80132ae <__ieee754_sqrt+0x19e>
 80132a4:	1ca0      	adds	r0, r4, #2
 80132a6:	bf08      	it	eq
 80132a8:	3601      	addeq	r6, #1
 80132aa:	3402      	adds	r4, #2
 80132ac:	e7df      	b.n	801326e <__ieee754_sqrt+0x15e>
 80132ae:	1c63      	adds	r3, r4, #1
 80132b0:	f023 0401 	bic.w	r4, r3, #1
 80132b4:	e7db      	b.n	801326e <__ieee754_sqrt+0x15e>
 80132b6:	bf00      	nop
 80132b8:	7ff00000 	.word	0x7ff00000
 80132bc:	200002e0 	.word	0x200002e0
 80132c0:	200002d8 	.word	0x200002d8
 80132c4:	00000000 	.word	0x00000000

080132c8 <__kernel_cos>:
 80132c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132cc:	ec57 6b10 	vmov	r6, r7, d0
 80132d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80132d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80132d8:	ed8d 1b00 	vstr	d1, [sp]
 80132dc:	d206      	bcs.n	80132ec <__kernel_cos+0x24>
 80132de:	4630      	mov	r0, r6
 80132e0:	4639      	mov	r1, r7
 80132e2:	f7ed fc59 	bl	8000b98 <__aeabi_d2iz>
 80132e6:	2800      	cmp	r0, #0
 80132e8:	f000 8088 	beq.w	80133fc <__kernel_cos+0x134>
 80132ec:	4632      	mov	r2, r6
 80132ee:	463b      	mov	r3, r7
 80132f0:	4630      	mov	r0, r6
 80132f2:	4639      	mov	r1, r7
 80132f4:	f7ed f9a0 	bl	8000638 <__aeabi_dmul>
 80132f8:	4b51      	ldr	r3, [pc, #324]	@ (8013440 <__kernel_cos+0x178>)
 80132fa:	2200      	movs	r2, #0
 80132fc:	4604      	mov	r4, r0
 80132fe:	460d      	mov	r5, r1
 8013300:	f7ed f99a 	bl	8000638 <__aeabi_dmul>
 8013304:	a340      	add	r3, pc, #256	@ (adr r3, 8013408 <__kernel_cos+0x140>)
 8013306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330a:	4682      	mov	sl, r0
 801330c:	468b      	mov	fp, r1
 801330e:	4620      	mov	r0, r4
 8013310:	4629      	mov	r1, r5
 8013312:	f7ed f991 	bl	8000638 <__aeabi_dmul>
 8013316:	a33e      	add	r3, pc, #248	@ (adr r3, 8013410 <__kernel_cos+0x148>)
 8013318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331c:	f7ec ffd6 	bl	80002cc <__adddf3>
 8013320:	4622      	mov	r2, r4
 8013322:	462b      	mov	r3, r5
 8013324:	f7ed f988 	bl	8000638 <__aeabi_dmul>
 8013328:	a33b      	add	r3, pc, #236	@ (adr r3, 8013418 <__kernel_cos+0x150>)
 801332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332e:	f7ec ffcb 	bl	80002c8 <__aeabi_dsub>
 8013332:	4622      	mov	r2, r4
 8013334:	462b      	mov	r3, r5
 8013336:	f7ed f97f 	bl	8000638 <__aeabi_dmul>
 801333a:	a339      	add	r3, pc, #228	@ (adr r3, 8013420 <__kernel_cos+0x158>)
 801333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013340:	f7ec ffc4 	bl	80002cc <__adddf3>
 8013344:	4622      	mov	r2, r4
 8013346:	462b      	mov	r3, r5
 8013348:	f7ed f976 	bl	8000638 <__aeabi_dmul>
 801334c:	a336      	add	r3, pc, #216	@ (adr r3, 8013428 <__kernel_cos+0x160>)
 801334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013352:	f7ec ffb9 	bl	80002c8 <__aeabi_dsub>
 8013356:	4622      	mov	r2, r4
 8013358:	462b      	mov	r3, r5
 801335a:	f7ed f96d 	bl	8000638 <__aeabi_dmul>
 801335e:	a334      	add	r3, pc, #208	@ (adr r3, 8013430 <__kernel_cos+0x168>)
 8013360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013364:	f7ec ffb2 	bl	80002cc <__adddf3>
 8013368:	4622      	mov	r2, r4
 801336a:	462b      	mov	r3, r5
 801336c:	f7ed f964 	bl	8000638 <__aeabi_dmul>
 8013370:	4622      	mov	r2, r4
 8013372:	462b      	mov	r3, r5
 8013374:	f7ed f960 	bl	8000638 <__aeabi_dmul>
 8013378:	e9dd 2300 	ldrd	r2, r3, [sp]
 801337c:	4604      	mov	r4, r0
 801337e:	460d      	mov	r5, r1
 8013380:	4630      	mov	r0, r6
 8013382:	4639      	mov	r1, r7
 8013384:	f7ed f958 	bl	8000638 <__aeabi_dmul>
 8013388:	460b      	mov	r3, r1
 801338a:	4602      	mov	r2, r0
 801338c:	4629      	mov	r1, r5
 801338e:	4620      	mov	r0, r4
 8013390:	f7ec ff9a 	bl	80002c8 <__aeabi_dsub>
 8013394:	4b2b      	ldr	r3, [pc, #172]	@ (8013444 <__kernel_cos+0x17c>)
 8013396:	4598      	cmp	r8, r3
 8013398:	4606      	mov	r6, r0
 801339a:	460f      	mov	r7, r1
 801339c:	d810      	bhi.n	80133c0 <__kernel_cos+0xf8>
 801339e:	4602      	mov	r2, r0
 80133a0:	460b      	mov	r3, r1
 80133a2:	4650      	mov	r0, sl
 80133a4:	4659      	mov	r1, fp
 80133a6:	f7ec ff8f 	bl	80002c8 <__aeabi_dsub>
 80133aa:	460b      	mov	r3, r1
 80133ac:	4926      	ldr	r1, [pc, #152]	@ (8013448 <__kernel_cos+0x180>)
 80133ae:	4602      	mov	r2, r0
 80133b0:	2000      	movs	r0, #0
 80133b2:	f7ec ff89 	bl	80002c8 <__aeabi_dsub>
 80133b6:	ec41 0b10 	vmov	d0, r0, r1
 80133ba:	b003      	add	sp, #12
 80133bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133c0:	4b22      	ldr	r3, [pc, #136]	@ (801344c <__kernel_cos+0x184>)
 80133c2:	4921      	ldr	r1, [pc, #132]	@ (8013448 <__kernel_cos+0x180>)
 80133c4:	4598      	cmp	r8, r3
 80133c6:	bf8c      	ite	hi
 80133c8:	4d21      	ldrhi	r5, [pc, #132]	@ (8013450 <__kernel_cos+0x188>)
 80133ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80133ce:	2400      	movs	r4, #0
 80133d0:	4622      	mov	r2, r4
 80133d2:	462b      	mov	r3, r5
 80133d4:	2000      	movs	r0, #0
 80133d6:	f7ec ff77 	bl	80002c8 <__aeabi_dsub>
 80133da:	4622      	mov	r2, r4
 80133dc:	4680      	mov	r8, r0
 80133de:	4689      	mov	r9, r1
 80133e0:	462b      	mov	r3, r5
 80133e2:	4650      	mov	r0, sl
 80133e4:	4659      	mov	r1, fp
 80133e6:	f7ec ff6f 	bl	80002c8 <__aeabi_dsub>
 80133ea:	4632      	mov	r2, r6
 80133ec:	463b      	mov	r3, r7
 80133ee:	f7ec ff6b 	bl	80002c8 <__aeabi_dsub>
 80133f2:	4602      	mov	r2, r0
 80133f4:	460b      	mov	r3, r1
 80133f6:	4640      	mov	r0, r8
 80133f8:	4649      	mov	r1, r9
 80133fa:	e7da      	b.n	80133b2 <__kernel_cos+0xea>
 80133fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013438 <__kernel_cos+0x170>
 8013400:	e7db      	b.n	80133ba <__kernel_cos+0xf2>
 8013402:	bf00      	nop
 8013404:	f3af 8000 	nop.w
 8013408:	be8838d4 	.word	0xbe8838d4
 801340c:	bda8fae9 	.word	0xbda8fae9
 8013410:	bdb4b1c4 	.word	0xbdb4b1c4
 8013414:	3e21ee9e 	.word	0x3e21ee9e
 8013418:	809c52ad 	.word	0x809c52ad
 801341c:	3e927e4f 	.word	0x3e927e4f
 8013420:	19cb1590 	.word	0x19cb1590
 8013424:	3efa01a0 	.word	0x3efa01a0
 8013428:	16c15177 	.word	0x16c15177
 801342c:	3f56c16c 	.word	0x3f56c16c
 8013430:	5555554c 	.word	0x5555554c
 8013434:	3fa55555 	.word	0x3fa55555
 8013438:	00000000 	.word	0x00000000
 801343c:	3ff00000 	.word	0x3ff00000
 8013440:	3fe00000 	.word	0x3fe00000
 8013444:	3fd33332 	.word	0x3fd33332
 8013448:	3ff00000 	.word	0x3ff00000
 801344c:	3fe90000 	.word	0x3fe90000
 8013450:	3fd20000 	.word	0x3fd20000
 8013454:	00000000 	.word	0x00000000

08013458 <__kernel_sin>:
 8013458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801345c:	ec55 4b10 	vmov	r4, r5, d0
 8013460:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013464:	b085      	sub	sp, #20
 8013466:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801346a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801346e:	4680      	mov	r8, r0
 8013470:	d205      	bcs.n	801347e <__kernel_sin+0x26>
 8013472:	4620      	mov	r0, r4
 8013474:	4629      	mov	r1, r5
 8013476:	f7ed fb8f 	bl	8000b98 <__aeabi_d2iz>
 801347a:	2800      	cmp	r0, #0
 801347c:	d052      	beq.n	8013524 <__kernel_sin+0xcc>
 801347e:	4622      	mov	r2, r4
 8013480:	462b      	mov	r3, r5
 8013482:	4620      	mov	r0, r4
 8013484:	4629      	mov	r1, r5
 8013486:	f7ed f8d7 	bl	8000638 <__aeabi_dmul>
 801348a:	4682      	mov	sl, r0
 801348c:	468b      	mov	fp, r1
 801348e:	4602      	mov	r2, r0
 8013490:	460b      	mov	r3, r1
 8013492:	4620      	mov	r0, r4
 8013494:	4629      	mov	r1, r5
 8013496:	f7ed f8cf 	bl	8000638 <__aeabi_dmul>
 801349a:	a342      	add	r3, pc, #264	@ (adr r3, 80135a4 <__kernel_sin+0x14c>)
 801349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a0:	e9cd 0100 	strd	r0, r1, [sp]
 80134a4:	4650      	mov	r0, sl
 80134a6:	4659      	mov	r1, fp
 80134a8:	f7ed f8c6 	bl	8000638 <__aeabi_dmul>
 80134ac:	a33f      	add	r3, pc, #252	@ (adr r3, 80135ac <__kernel_sin+0x154>)
 80134ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b2:	f7ec ff09 	bl	80002c8 <__aeabi_dsub>
 80134b6:	4652      	mov	r2, sl
 80134b8:	465b      	mov	r3, fp
 80134ba:	f7ed f8bd 	bl	8000638 <__aeabi_dmul>
 80134be:	a33d      	add	r3, pc, #244	@ (adr r3, 80135b4 <__kernel_sin+0x15c>)
 80134c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c4:	f7ec ff02 	bl	80002cc <__adddf3>
 80134c8:	4652      	mov	r2, sl
 80134ca:	465b      	mov	r3, fp
 80134cc:	f7ed f8b4 	bl	8000638 <__aeabi_dmul>
 80134d0:	a33a      	add	r3, pc, #232	@ (adr r3, 80135bc <__kernel_sin+0x164>)
 80134d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d6:	f7ec fef7 	bl	80002c8 <__aeabi_dsub>
 80134da:	4652      	mov	r2, sl
 80134dc:	465b      	mov	r3, fp
 80134de:	f7ed f8ab 	bl	8000638 <__aeabi_dmul>
 80134e2:	a338      	add	r3, pc, #224	@ (adr r3, 80135c4 <__kernel_sin+0x16c>)
 80134e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e8:	f7ec fef0 	bl	80002cc <__adddf3>
 80134ec:	4606      	mov	r6, r0
 80134ee:	460f      	mov	r7, r1
 80134f0:	f1b8 0f00 	cmp.w	r8, #0
 80134f4:	d11b      	bne.n	801352e <__kernel_sin+0xd6>
 80134f6:	4602      	mov	r2, r0
 80134f8:	460b      	mov	r3, r1
 80134fa:	4650      	mov	r0, sl
 80134fc:	4659      	mov	r1, fp
 80134fe:	f7ed f89b 	bl	8000638 <__aeabi_dmul>
 8013502:	a325      	add	r3, pc, #148	@ (adr r3, 8013598 <__kernel_sin+0x140>)
 8013504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013508:	f7ec fede 	bl	80002c8 <__aeabi_dsub>
 801350c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013510:	f7ed f892 	bl	8000638 <__aeabi_dmul>
 8013514:	4602      	mov	r2, r0
 8013516:	460b      	mov	r3, r1
 8013518:	4620      	mov	r0, r4
 801351a:	4629      	mov	r1, r5
 801351c:	f7ec fed6 	bl	80002cc <__adddf3>
 8013520:	4604      	mov	r4, r0
 8013522:	460d      	mov	r5, r1
 8013524:	ec45 4b10 	vmov	d0, r4, r5
 8013528:	b005      	add	sp, #20
 801352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013532:	4b1b      	ldr	r3, [pc, #108]	@ (80135a0 <__kernel_sin+0x148>)
 8013534:	2200      	movs	r2, #0
 8013536:	f7ed f87f 	bl	8000638 <__aeabi_dmul>
 801353a:	4632      	mov	r2, r6
 801353c:	4680      	mov	r8, r0
 801353e:	4689      	mov	r9, r1
 8013540:	463b      	mov	r3, r7
 8013542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013546:	f7ed f877 	bl	8000638 <__aeabi_dmul>
 801354a:	4602      	mov	r2, r0
 801354c:	460b      	mov	r3, r1
 801354e:	4640      	mov	r0, r8
 8013550:	4649      	mov	r1, r9
 8013552:	f7ec feb9 	bl	80002c8 <__aeabi_dsub>
 8013556:	4652      	mov	r2, sl
 8013558:	465b      	mov	r3, fp
 801355a:	f7ed f86d 	bl	8000638 <__aeabi_dmul>
 801355e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013562:	f7ec feb1 	bl	80002c8 <__aeabi_dsub>
 8013566:	a30c      	add	r3, pc, #48	@ (adr r3, 8013598 <__kernel_sin+0x140>)
 8013568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356c:	4606      	mov	r6, r0
 801356e:	460f      	mov	r7, r1
 8013570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013574:	f7ed f860 	bl	8000638 <__aeabi_dmul>
 8013578:	4602      	mov	r2, r0
 801357a:	460b      	mov	r3, r1
 801357c:	4630      	mov	r0, r6
 801357e:	4639      	mov	r1, r7
 8013580:	f7ec fea4 	bl	80002cc <__adddf3>
 8013584:	4602      	mov	r2, r0
 8013586:	460b      	mov	r3, r1
 8013588:	4620      	mov	r0, r4
 801358a:	4629      	mov	r1, r5
 801358c:	f7ec fe9c 	bl	80002c8 <__aeabi_dsub>
 8013590:	e7c6      	b.n	8013520 <__kernel_sin+0xc8>
 8013592:	bf00      	nop
 8013594:	f3af 8000 	nop.w
 8013598:	55555549 	.word	0x55555549
 801359c:	3fc55555 	.word	0x3fc55555
 80135a0:	3fe00000 	.word	0x3fe00000
 80135a4:	5acfd57c 	.word	0x5acfd57c
 80135a8:	3de5d93a 	.word	0x3de5d93a
 80135ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80135b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80135b4:	57b1fe7d 	.word	0x57b1fe7d
 80135b8:	3ec71de3 	.word	0x3ec71de3
 80135bc:	19c161d5 	.word	0x19c161d5
 80135c0:	3f2a01a0 	.word	0x3f2a01a0
 80135c4:	1110f8a6 	.word	0x1110f8a6
 80135c8:	3f811111 	.word	0x3f811111
 80135cc:	00000000 	.word	0x00000000

080135d0 <__ieee754_atan2>:
 80135d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135d4:	ec57 6b11 	vmov	r6, r7, d1
 80135d8:	4273      	negs	r3, r6
 80135da:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013758 <__ieee754_atan2+0x188>
 80135de:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80135e2:	4333      	orrs	r3, r6
 80135e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80135e8:	4543      	cmp	r3, r8
 80135ea:	ec51 0b10 	vmov	r0, r1, d0
 80135ee:	4635      	mov	r5, r6
 80135f0:	d809      	bhi.n	8013606 <__ieee754_atan2+0x36>
 80135f2:	4244      	negs	r4, r0
 80135f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80135f8:	4304      	orrs	r4, r0
 80135fa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80135fe:	4544      	cmp	r4, r8
 8013600:	468e      	mov	lr, r1
 8013602:	4681      	mov	r9, r0
 8013604:	d907      	bls.n	8013616 <__ieee754_atan2+0x46>
 8013606:	4632      	mov	r2, r6
 8013608:	463b      	mov	r3, r7
 801360a:	f7ec fe5f 	bl	80002cc <__adddf3>
 801360e:	ec41 0b10 	vmov	d0, r0, r1
 8013612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013616:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801361a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801361e:	4334      	orrs	r4, r6
 8013620:	d103      	bne.n	801362a <__ieee754_atan2+0x5a>
 8013622:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013626:	f000 bfdb 	b.w	80145e0 <atan>
 801362a:	17bc      	asrs	r4, r7, #30
 801362c:	f004 0402 	and.w	r4, r4, #2
 8013630:	ea53 0909 	orrs.w	r9, r3, r9
 8013634:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013638:	d107      	bne.n	801364a <__ieee754_atan2+0x7a>
 801363a:	2c02      	cmp	r4, #2
 801363c:	d05f      	beq.n	80136fe <__ieee754_atan2+0x12e>
 801363e:	2c03      	cmp	r4, #3
 8013640:	d1e5      	bne.n	801360e <__ieee754_atan2+0x3e>
 8013642:	a141      	add	r1, pc, #260	@ (adr r1, 8013748 <__ieee754_atan2+0x178>)
 8013644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013648:	e7e1      	b.n	801360e <__ieee754_atan2+0x3e>
 801364a:	4315      	orrs	r5, r2
 801364c:	d106      	bne.n	801365c <__ieee754_atan2+0x8c>
 801364e:	f1be 0f00 	cmp.w	lr, #0
 8013652:	da5f      	bge.n	8013714 <__ieee754_atan2+0x144>
 8013654:	a13e      	add	r1, pc, #248	@ (adr r1, 8013750 <__ieee754_atan2+0x180>)
 8013656:	e9d1 0100 	ldrd	r0, r1, [r1]
 801365a:	e7d8      	b.n	801360e <__ieee754_atan2+0x3e>
 801365c:	4542      	cmp	r2, r8
 801365e:	d10f      	bne.n	8013680 <__ieee754_atan2+0xb0>
 8013660:	4293      	cmp	r3, r2
 8013662:	f104 34ff 	add.w	r4, r4, #4294967295
 8013666:	d107      	bne.n	8013678 <__ieee754_atan2+0xa8>
 8013668:	2c02      	cmp	r4, #2
 801366a:	d84c      	bhi.n	8013706 <__ieee754_atan2+0x136>
 801366c:	4b34      	ldr	r3, [pc, #208]	@ (8013740 <__ieee754_atan2+0x170>)
 801366e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013672:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013676:	e7ca      	b.n	801360e <__ieee754_atan2+0x3e>
 8013678:	2c02      	cmp	r4, #2
 801367a:	d848      	bhi.n	801370e <__ieee754_atan2+0x13e>
 801367c:	4b31      	ldr	r3, [pc, #196]	@ (8013744 <__ieee754_atan2+0x174>)
 801367e:	e7f6      	b.n	801366e <__ieee754_atan2+0x9e>
 8013680:	4543      	cmp	r3, r8
 8013682:	d0e4      	beq.n	801364e <__ieee754_atan2+0x7e>
 8013684:	1a9b      	subs	r3, r3, r2
 8013686:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801368a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801368e:	da1e      	bge.n	80136ce <__ieee754_atan2+0xfe>
 8013690:	2f00      	cmp	r7, #0
 8013692:	da01      	bge.n	8013698 <__ieee754_atan2+0xc8>
 8013694:	323c      	adds	r2, #60	@ 0x3c
 8013696:	db1e      	blt.n	80136d6 <__ieee754_atan2+0x106>
 8013698:	4632      	mov	r2, r6
 801369a:	463b      	mov	r3, r7
 801369c:	f7ed f8f6 	bl	800088c <__aeabi_ddiv>
 80136a0:	ec41 0b10 	vmov	d0, r0, r1
 80136a4:	f001 f934 	bl	8014910 <fabs>
 80136a8:	f000 ff9a 	bl	80145e0 <atan>
 80136ac:	ec51 0b10 	vmov	r0, r1, d0
 80136b0:	2c01      	cmp	r4, #1
 80136b2:	d013      	beq.n	80136dc <__ieee754_atan2+0x10c>
 80136b4:	2c02      	cmp	r4, #2
 80136b6:	d015      	beq.n	80136e4 <__ieee754_atan2+0x114>
 80136b8:	2c00      	cmp	r4, #0
 80136ba:	d0a8      	beq.n	801360e <__ieee754_atan2+0x3e>
 80136bc:	a318      	add	r3, pc, #96	@ (adr r3, 8013720 <__ieee754_atan2+0x150>)
 80136be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c2:	f7ec fe01 	bl	80002c8 <__aeabi_dsub>
 80136c6:	a318      	add	r3, pc, #96	@ (adr r3, 8013728 <__ieee754_atan2+0x158>)
 80136c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136cc:	e014      	b.n	80136f8 <__ieee754_atan2+0x128>
 80136ce:	a118      	add	r1, pc, #96	@ (adr r1, 8013730 <__ieee754_atan2+0x160>)
 80136d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136d4:	e7ec      	b.n	80136b0 <__ieee754_atan2+0xe0>
 80136d6:	2000      	movs	r0, #0
 80136d8:	2100      	movs	r1, #0
 80136da:	e7e9      	b.n	80136b0 <__ieee754_atan2+0xe0>
 80136dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80136e0:	4619      	mov	r1, r3
 80136e2:	e794      	b.n	801360e <__ieee754_atan2+0x3e>
 80136e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8013720 <__ieee754_atan2+0x150>)
 80136e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ea:	f7ec fded 	bl	80002c8 <__aeabi_dsub>
 80136ee:	4602      	mov	r2, r0
 80136f0:	460b      	mov	r3, r1
 80136f2:	a10d      	add	r1, pc, #52	@ (adr r1, 8013728 <__ieee754_atan2+0x158>)
 80136f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136f8:	f7ec fde6 	bl	80002c8 <__aeabi_dsub>
 80136fc:	e787      	b.n	801360e <__ieee754_atan2+0x3e>
 80136fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8013728 <__ieee754_atan2+0x158>)
 8013700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013704:	e783      	b.n	801360e <__ieee754_atan2+0x3e>
 8013706:	a10c      	add	r1, pc, #48	@ (adr r1, 8013738 <__ieee754_atan2+0x168>)
 8013708:	e9d1 0100 	ldrd	r0, r1, [r1]
 801370c:	e77f      	b.n	801360e <__ieee754_atan2+0x3e>
 801370e:	2000      	movs	r0, #0
 8013710:	2100      	movs	r1, #0
 8013712:	e77c      	b.n	801360e <__ieee754_atan2+0x3e>
 8013714:	a106      	add	r1, pc, #24	@ (adr r1, 8013730 <__ieee754_atan2+0x160>)
 8013716:	e9d1 0100 	ldrd	r0, r1, [r1]
 801371a:	e778      	b.n	801360e <__ieee754_atan2+0x3e>
 801371c:	f3af 8000 	nop.w
 8013720:	33145c07 	.word	0x33145c07
 8013724:	3ca1a626 	.word	0x3ca1a626
 8013728:	54442d18 	.word	0x54442d18
 801372c:	400921fb 	.word	0x400921fb
 8013730:	54442d18 	.word	0x54442d18
 8013734:	3ff921fb 	.word	0x3ff921fb
 8013738:	54442d18 	.word	0x54442d18
 801373c:	3fe921fb 	.word	0x3fe921fb
 8013740:	08015828 	.word	0x08015828
 8013744:	08015810 	.word	0x08015810
 8013748:	54442d18 	.word	0x54442d18
 801374c:	c00921fb 	.word	0xc00921fb
 8013750:	54442d18 	.word	0x54442d18
 8013754:	bff921fb 	.word	0xbff921fb
 8013758:	7ff00000 	.word	0x7ff00000
 801375c:	00000000 	.word	0x00000000

08013760 <__ieee754_pow>:
 8013760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013764:	b091      	sub	sp, #68	@ 0x44
 8013766:	ed8d 1b00 	vstr	d1, [sp]
 801376a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801376e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8013772:	ea5a 0001 	orrs.w	r0, sl, r1
 8013776:	ec57 6b10 	vmov	r6, r7, d0
 801377a:	d113      	bne.n	80137a4 <__ieee754_pow+0x44>
 801377c:	19b3      	adds	r3, r6, r6
 801377e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013782:	4152      	adcs	r2, r2
 8013784:	4298      	cmp	r0, r3
 8013786:	4b98      	ldr	r3, [pc, #608]	@ (80139e8 <__ieee754_pow+0x288>)
 8013788:	4193      	sbcs	r3, r2
 801378a:	f080 84ea 	bcs.w	8014162 <__ieee754_pow+0xa02>
 801378e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013792:	4630      	mov	r0, r6
 8013794:	4639      	mov	r1, r7
 8013796:	f7ec fd99 	bl	80002cc <__adddf3>
 801379a:	ec41 0b10 	vmov	d0, r0, r1
 801379e:	b011      	add	sp, #68	@ 0x44
 80137a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a4:	4a91      	ldr	r2, [pc, #580]	@ (80139ec <__ieee754_pow+0x28c>)
 80137a6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80137aa:	4590      	cmp	r8, r2
 80137ac:	463d      	mov	r5, r7
 80137ae:	4633      	mov	r3, r6
 80137b0:	d806      	bhi.n	80137c0 <__ieee754_pow+0x60>
 80137b2:	d101      	bne.n	80137b8 <__ieee754_pow+0x58>
 80137b4:	2e00      	cmp	r6, #0
 80137b6:	d1ea      	bne.n	801378e <__ieee754_pow+0x2e>
 80137b8:	4592      	cmp	sl, r2
 80137ba:	d801      	bhi.n	80137c0 <__ieee754_pow+0x60>
 80137bc:	d10e      	bne.n	80137dc <__ieee754_pow+0x7c>
 80137be:	b169      	cbz	r1, 80137dc <__ieee754_pow+0x7c>
 80137c0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80137c4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80137c8:	431d      	orrs	r5, r3
 80137ca:	d1e0      	bne.n	801378e <__ieee754_pow+0x2e>
 80137cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80137d0:	18db      	adds	r3, r3, r3
 80137d2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80137d6:	4152      	adcs	r2, r2
 80137d8:	429d      	cmp	r5, r3
 80137da:	e7d4      	b.n	8013786 <__ieee754_pow+0x26>
 80137dc:	2d00      	cmp	r5, #0
 80137de:	46c3      	mov	fp, r8
 80137e0:	da3a      	bge.n	8013858 <__ieee754_pow+0xf8>
 80137e2:	4a83      	ldr	r2, [pc, #524]	@ (80139f0 <__ieee754_pow+0x290>)
 80137e4:	4592      	cmp	sl, r2
 80137e6:	d84d      	bhi.n	8013884 <__ieee754_pow+0x124>
 80137e8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80137ec:	4592      	cmp	sl, r2
 80137ee:	f240 84c7 	bls.w	8014180 <__ieee754_pow+0xa20>
 80137f2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80137f6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80137fa:	2a14      	cmp	r2, #20
 80137fc:	dd0f      	ble.n	801381e <__ieee754_pow+0xbe>
 80137fe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013802:	fa21 f402 	lsr.w	r4, r1, r2
 8013806:	fa04 f202 	lsl.w	r2, r4, r2
 801380a:	428a      	cmp	r2, r1
 801380c:	f040 84b8 	bne.w	8014180 <__ieee754_pow+0xa20>
 8013810:	f004 0401 	and.w	r4, r4, #1
 8013814:	f1c4 0402 	rsb	r4, r4, #2
 8013818:	2900      	cmp	r1, #0
 801381a:	d158      	bne.n	80138ce <__ieee754_pow+0x16e>
 801381c:	e00e      	b.n	801383c <__ieee754_pow+0xdc>
 801381e:	2900      	cmp	r1, #0
 8013820:	d154      	bne.n	80138cc <__ieee754_pow+0x16c>
 8013822:	f1c2 0214 	rsb	r2, r2, #20
 8013826:	fa4a f402 	asr.w	r4, sl, r2
 801382a:	fa04 f202 	lsl.w	r2, r4, r2
 801382e:	4552      	cmp	r2, sl
 8013830:	f040 84a3 	bne.w	801417a <__ieee754_pow+0xa1a>
 8013834:	f004 0401 	and.w	r4, r4, #1
 8013838:	f1c4 0402 	rsb	r4, r4, #2
 801383c:	4a6d      	ldr	r2, [pc, #436]	@ (80139f4 <__ieee754_pow+0x294>)
 801383e:	4592      	cmp	sl, r2
 8013840:	d12e      	bne.n	80138a0 <__ieee754_pow+0x140>
 8013842:	f1b9 0f00 	cmp.w	r9, #0
 8013846:	f280 8494 	bge.w	8014172 <__ieee754_pow+0xa12>
 801384a:	496a      	ldr	r1, [pc, #424]	@ (80139f4 <__ieee754_pow+0x294>)
 801384c:	4632      	mov	r2, r6
 801384e:	463b      	mov	r3, r7
 8013850:	2000      	movs	r0, #0
 8013852:	f7ed f81b 	bl	800088c <__aeabi_ddiv>
 8013856:	e7a0      	b.n	801379a <__ieee754_pow+0x3a>
 8013858:	2400      	movs	r4, #0
 801385a:	bbc1      	cbnz	r1, 80138ce <__ieee754_pow+0x16e>
 801385c:	4a63      	ldr	r2, [pc, #396]	@ (80139ec <__ieee754_pow+0x28c>)
 801385e:	4592      	cmp	sl, r2
 8013860:	d1ec      	bne.n	801383c <__ieee754_pow+0xdc>
 8013862:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8013866:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801386a:	431a      	orrs	r2, r3
 801386c:	f000 8479 	beq.w	8014162 <__ieee754_pow+0xa02>
 8013870:	4b61      	ldr	r3, [pc, #388]	@ (80139f8 <__ieee754_pow+0x298>)
 8013872:	4598      	cmp	r8, r3
 8013874:	d908      	bls.n	8013888 <__ieee754_pow+0x128>
 8013876:	f1b9 0f00 	cmp.w	r9, #0
 801387a:	f2c0 8476 	blt.w	801416a <__ieee754_pow+0xa0a>
 801387e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013882:	e78a      	b.n	801379a <__ieee754_pow+0x3a>
 8013884:	2402      	movs	r4, #2
 8013886:	e7e8      	b.n	801385a <__ieee754_pow+0xfa>
 8013888:	f1b9 0f00 	cmp.w	r9, #0
 801388c:	f04f 0000 	mov.w	r0, #0
 8013890:	f04f 0100 	mov.w	r1, #0
 8013894:	da81      	bge.n	801379a <__ieee754_pow+0x3a>
 8013896:	e9dd 0300 	ldrd	r0, r3, [sp]
 801389a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801389e:	e77c      	b.n	801379a <__ieee754_pow+0x3a>
 80138a0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80138a4:	d106      	bne.n	80138b4 <__ieee754_pow+0x154>
 80138a6:	4632      	mov	r2, r6
 80138a8:	463b      	mov	r3, r7
 80138aa:	4630      	mov	r0, r6
 80138ac:	4639      	mov	r1, r7
 80138ae:	f7ec fec3 	bl	8000638 <__aeabi_dmul>
 80138b2:	e772      	b.n	801379a <__ieee754_pow+0x3a>
 80138b4:	4a51      	ldr	r2, [pc, #324]	@ (80139fc <__ieee754_pow+0x29c>)
 80138b6:	4591      	cmp	r9, r2
 80138b8:	d109      	bne.n	80138ce <__ieee754_pow+0x16e>
 80138ba:	2d00      	cmp	r5, #0
 80138bc:	db07      	blt.n	80138ce <__ieee754_pow+0x16e>
 80138be:	ec47 6b10 	vmov	d0, r6, r7
 80138c2:	b011      	add	sp, #68	@ 0x44
 80138c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c8:	f7ff bc22 	b.w	8013110 <__ieee754_sqrt>
 80138cc:	2400      	movs	r4, #0
 80138ce:	ec47 6b10 	vmov	d0, r6, r7
 80138d2:	9302      	str	r3, [sp, #8]
 80138d4:	f001 f81c 	bl	8014910 <fabs>
 80138d8:	9b02      	ldr	r3, [sp, #8]
 80138da:	ec51 0b10 	vmov	r0, r1, d0
 80138de:	bb53      	cbnz	r3, 8013936 <__ieee754_pow+0x1d6>
 80138e0:	4b44      	ldr	r3, [pc, #272]	@ (80139f4 <__ieee754_pow+0x294>)
 80138e2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d002      	beq.n	80138f0 <__ieee754_pow+0x190>
 80138ea:	f1b8 0f00 	cmp.w	r8, #0
 80138ee:	d122      	bne.n	8013936 <__ieee754_pow+0x1d6>
 80138f0:	f1b9 0f00 	cmp.w	r9, #0
 80138f4:	da05      	bge.n	8013902 <__ieee754_pow+0x1a2>
 80138f6:	4602      	mov	r2, r0
 80138f8:	460b      	mov	r3, r1
 80138fa:	2000      	movs	r0, #0
 80138fc:	493d      	ldr	r1, [pc, #244]	@ (80139f4 <__ieee754_pow+0x294>)
 80138fe:	f7ec ffc5 	bl	800088c <__aeabi_ddiv>
 8013902:	2d00      	cmp	r5, #0
 8013904:	f6bf af49 	bge.w	801379a <__ieee754_pow+0x3a>
 8013908:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801390c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013910:	ea58 0804 	orrs.w	r8, r8, r4
 8013914:	d108      	bne.n	8013928 <__ieee754_pow+0x1c8>
 8013916:	4602      	mov	r2, r0
 8013918:	460b      	mov	r3, r1
 801391a:	4610      	mov	r0, r2
 801391c:	4619      	mov	r1, r3
 801391e:	f7ec fcd3 	bl	80002c8 <__aeabi_dsub>
 8013922:	4602      	mov	r2, r0
 8013924:	460b      	mov	r3, r1
 8013926:	e794      	b.n	8013852 <__ieee754_pow+0xf2>
 8013928:	2c01      	cmp	r4, #1
 801392a:	f47f af36 	bne.w	801379a <__ieee754_pow+0x3a>
 801392e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013932:	4619      	mov	r1, r3
 8013934:	e731      	b.n	801379a <__ieee754_pow+0x3a>
 8013936:	0feb      	lsrs	r3, r5, #31
 8013938:	3b01      	subs	r3, #1
 801393a:	ea53 0204 	orrs.w	r2, r3, r4
 801393e:	d102      	bne.n	8013946 <__ieee754_pow+0x1e6>
 8013940:	4632      	mov	r2, r6
 8013942:	463b      	mov	r3, r7
 8013944:	e7e9      	b.n	801391a <__ieee754_pow+0x1ba>
 8013946:	3c01      	subs	r4, #1
 8013948:	431c      	orrs	r4, r3
 801394a:	d016      	beq.n	801397a <__ieee754_pow+0x21a>
 801394c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80139d8 <__ieee754_pow+0x278>
 8013950:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013954:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013958:	f240 8112 	bls.w	8013b80 <__ieee754_pow+0x420>
 801395c:	4b28      	ldr	r3, [pc, #160]	@ (8013a00 <__ieee754_pow+0x2a0>)
 801395e:	459a      	cmp	sl, r3
 8013960:	4b25      	ldr	r3, [pc, #148]	@ (80139f8 <__ieee754_pow+0x298>)
 8013962:	d916      	bls.n	8013992 <__ieee754_pow+0x232>
 8013964:	4598      	cmp	r8, r3
 8013966:	d80b      	bhi.n	8013980 <__ieee754_pow+0x220>
 8013968:	f1b9 0f00 	cmp.w	r9, #0
 801396c:	da0b      	bge.n	8013986 <__ieee754_pow+0x226>
 801396e:	2000      	movs	r0, #0
 8013970:	b011      	add	sp, #68	@ 0x44
 8013972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013976:	f001 b887 	b.w	8014a88 <__math_oflow>
 801397a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80139e0 <__ieee754_pow+0x280>
 801397e:	e7e7      	b.n	8013950 <__ieee754_pow+0x1f0>
 8013980:	f1b9 0f00 	cmp.w	r9, #0
 8013984:	dcf3      	bgt.n	801396e <__ieee754_pow+0x20e>
 8013986:	2000      	movs	r0, #0
 8013988:	b011      	add	sp, #68	@ 0x44
 801398a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801398e:	f001 b873 	b.w	8014a78 <__math_uflow>
 8013992:	4598      	cmp	r8, r3
 8013994:	d20c      	bcs.n	80139b0 <__ieee754_pow+0x250>
 8013996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801399a:	2200      	movs	r2, #0
 801399c:	2300      	movs	r3, #0
 801399e:	f7ed f8bd 	bl	8000b1c <__aeabi_dcmplt>
 80139a2:	3800      	subs	r0, #0
 80139a4:	bf18      	it	ne
 80139a6:	2001      	movne	r0, #1
 80139a8:	f1b9 0f00 	cmp.w	r9, #0
 80139ac:	daec      	bge.n	8013988 <__ieee754_pow+0x228>
 80139ae:	e7df      	b.n	8013970 <__ieee754_pow+0x210>
 80139b0:	4b10      	ldr	r3, [pc, #64]	@ (80139f4 <__ieee754_pow+0x294>)
 80139b2:	4598      	cmp	r8, r3
 80139b4:	f04f 0200 	mov.w	r2, #0
 80139b8:	d924      	bls.n	8013a04 <__ieee754_pow+0x2a4>
 80139ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139be:	2300      	movs	r3, #0
 80139c0:	f7ed f8ac 	bl	8000b1c <__aeabi_dcmplt>
 80139c4:	3800      	subs	r0, #0
 80139c6:	bf18      	it	ne
 80139c8:	2001      	movne	r0, #1
 80139ca:	f1b9 0f00 	cmp.w	r9, #0
 80139ce:	dccf      	bgt.n	8013970 <__ieee754_pow+0x210>
 80139d0:	e7da      	b.n	8013988 <__ieee754_pow+0x228>
 80139d2:	bf00      	nop
 80139d4:	f3af 8000 	nop.w
 80139d8:	00000000 	.word	0x00000000
 80139dc:	3ff00000 	.word	0x3ff00000
 80139e0:	00000000 	.word	0x00000000
 80139e4:	bff00000 	.word	0xbff00000
 80139e8:	fff00000 	.word	0xfff00000
 80139ec:	7ff00000 	.word	0x7ff00000
 80139f0:	433fffff 	.word	0x433fffff
 80139f4:	3ff00000 	.word	0x3ff00000
 80139f8:	3fefffff 	.word	0x3fefffff
 80139fc:	3fe00000 	.word	0x3fe00000
 8013a00:	43f00000 	.word	0x43f00000
 8013a04:	4b5a      	ldr	r3, [pc, #360]	@ (8013b70 <__ieee754_pow+0x410>)
 8013a06:	f7ec fc5f 	bl	80002c8 <__aeabi_dsub>
 8013a0a:	a351      	add	r3, pc, #324	@ (adr r3, 8013b50 <__ieee754_pow+0x3f0>)
 8013a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a10:	4604      	mov	r4, r0
 8013a12:	460d      	mov	r5, r1
 8013a14:	f7ec fe10 	bl	8000638 <__aeabi_dmul>
 8013a18:	a34f      	add	r3, pc, #316	@ (adr r3, 8013b58 <__ieee754_pow+0x3f8>)
 8013a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a1e:	4606      	mov	r6, r0
 8013a20:	460f      	mov	r7, r1
 8013a22:	4620      	mov	r0, r4
 8013a24:	4629      	mov	r1, r5
 8013a26:	f7ec fe07 	bl	8000638 <__aeabi_dmul>
 8013a2a:	4b52      	ldr	r3, [pc, #328]	@ (8013b74 <__ieee754_pow+0x414>)
 8013a2c:	4682      	mov	sl, r0
 8013a2e:	468b      	mov	fp, r1
 8013a30:	2200      	movs	r2, #0
 8013a32:	4620      	mov	r0, r4
 8013a34:	4629      	mov	r1, r5
 8013a36:	f7ec fdff 	bl	8000638 <__aeabi_dmul>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	460b      	mov	r3, r1
 8013a3e:	a148      	add	r1, pc, #288	@ (adr r1, 8013b60 <__ieee754_pow+0x400>)
 8013a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a44:	f7ec fc40 	bl	80002c8 <__aeabi_dsub>
 8013a48:	4622      	mov	r2, r4
 8013a4a:	462b      	mov	r3, r5
 8013a4c:	f7ec fdf4 	bl	8000638 <__aeabi_dmul>
 8013a50:	4602      	mov	r2, r0
 8013a52:	460b      	mov	r3, r1
 8013a54:	2000      	movs	r0, #0
 8013a56:	4948      	ldr	r1, [pc, #288]	@ (8013b78 <__ieee754_pow+0x418>)
 8013a58:	f7ec fc36 	bl	80002c8 <__aeabi_dsub>
 8013a5c:	4622      	mov	r2, r4
 8013a5e:	4680      	mov	r8, r0
 8013a60:	4689      	mov	r9, r1
 8013a62:	462b      	mov	r3, r5
 8013a64:	4620      	mov	r0, r4
 8013a66:	4629      	mov	r1, r5
 8013a68:	f7ec fde6 	bl	8000638 <__aeabi_dmul>
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	460b      	mov	r3, r1
 8013a70:	4640      	mov	r0, r8
 8013a72:	4649      	mov	r1, r9
 8013a74:	f7ec fde0 	bl	8000638 <__aeabi_dmul>
 8013a78:	a33b      	add	r3, pc, #236	@ (adr r3, 8013b68 <__ieee754_pow+0x408>)
 8013a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7e:	f7ec fddb 	bl	8000638 <__aeabi_dmul>
 8013a82:	4602      	mov	r2, r0
 8013a84:	460b      	mov	r3, r1
 8013a86:	4650      	mov	r0, sl
 8013a88:	4659      	mov	r1, fp
 8013a8a:	f7ec fc1d 	bl	80002c8 <__aeabi_dsub>
 8013a8e:	4602      	mov	r2, r0
 8013a90:	460b      	mov	r3, r1
 8013a92:	4680      	mov	r8, r0
 8013a94:	4689      	mov	r9, r1
 8013a96:	4630      	mov	r0, r6
 8013a98:	4639      	mov	r1, r7
 8013a9a:	f7ec fc17 	bl	80002cc <__adddf3>
 8013a9e:	2400      	movs	r4, #0
 8013aa0:	4632      	mov	r2, r6
 8013aa2:	463b      	mov	r3, r7
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	460d      	mov	r5, r1
 8013aa8:	f7ec fc0e 	bl	80002c8 <__aeabi_dsub>
 8013aac:	4602      	mov	r2, r0
 8013aae:	460b      	mov	r3, r1
 8013ab0:	4640      	mov	r0, r8
 8013ab2:	4649      	mov	r1, r9
 8013ab4:	f7ec fc08 	bl	80002c8 <__aeabi_dsub>
 8013ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013abc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	9304      	str	r3, [sp, #16]
 8013ac4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013ac8:	4606      	mov	r6, r0
 8013aca:	460f      	mov	r7, r1
 8013acc:	4652      	mov	r2, sl
 8013ace:	465b      	mov	r3, fp
 8013ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ad4:	f7ec fbf8 	bl	80002c8 <__aeabi_dsub>
 8013ad8:	4622      	mov	r2, r4
 8013ada:	462b      	mov	r3, r5
 8013adc:	f7ec fdac 	bl	8000638 <__aeabi_dmul>
 8013ae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ae4:	4680      	mov	r8, r0
 8013ae6:	4689      	mov	r9, r1
 8013ae8:	4630      	mov	r0, r6
 8013aea:	4639      	mov	r1, r7
 8013aec:	f7ec fda4 	bl	8000638 <__aeabi_dmul>
 8013af0:	4602      	mov	r2, r0
 8013af2:	460b      	mov	r3, r1
 8013af4:	4640      	mov	r0, r8
 8013af6:	4649      	mov	r1, r9
 8013af8:	f7ec fbe8 	bl	80002cc <__adddf3>
 8013afc:	4652      	mov	r2, sl
 8013afe:	465b      	mov	r3, fp
 8013b00:	4606      	mov	r6, r0
 8013b02:	460f      	mov	r7, r1
 8013b04:	4620      	mov	r0, r4
 8013b06:	4629      	mov	r1, r5
 8013b08:	f7ec fd96 	bl	8000638 <__aeabi_dmul>
 8013b0c:	460b      	mov	r3, r1
 8013b0e:	4602      	mov	r2, r0
 8013b10:	4680      	mov	r8, r0
 8013b12:	4689      	mov	r9, r1
 8013b14:	4630      	mov	r0, r6
 8013b16:	4639      	mov	r1, r7
 8013b18:	f7ec fbd8 	bl	80002cc <__adddf3>
 8013b1c:	4b17      	ldr	r3, [pc, #92]	@ (8013b7c <__ieee754_pow+0x41c>)
 8013b1e:	4299      	cmp	r1, r3
 8013b20:	4604      	mov	r4, r0
 8013b22:	460d      	mov	r5, r1
 8013b24:	468a      	mov	sl, r1
 8013b26:	468b      	mov	fp, r1
 8013b28:	f340 82ef 	ble.w	801410a <__ieee754_pow+0x9aa>
 8013b2c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013b30:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013b34:	4303      	orrs	r3, r0
 8013b36:	f000 81e8 	beq.w	8013f0a <__ieee754_pow+0x7aa>
 8013b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	2300      	movs	r3, #0
 8013b42:	f7ec ffeb 	bl	8000b1c <__aeabi_dcmplt>
 8013b46:	3800      	subs	r0, #0
 8013b48:	bf18      	it	ne
 8013b4a:	2001      	movne	r0, #1
 8013b4c:	e710      	b.n	8013970 <__ieee754_pow+0x210>
 8013b4e:	bf00      	nop
 8013b50:	60000000 	.word	0x60000000
 8013b54:	3ff71547 	.word	0x3ff71547
 8013b58:	f85ddf44 	.word	0xf85ddf44
 8013b5c:	3e54ae0b 	.word	0x3e54ae0b
 8013b60:	55555555 	.word	0x55555555
 8013b64:	3fd55555 	.word	0x3fd55555
 8013b68:	652b82fe 	.word	0x652b82fe
 8013b6c:	3ff71547 	.word	0x3ff71547
 8013b70:	3ff00000 	.word	0x3ff00000
 8013b74:	3fd00000 	.word	0x3fd00000
 8013b78:	3fe00000 	.word	0x3fe00000
 8013b7c:	408fffff 	.word	0x408fffff
 8013b80:	4bd5      	ldr	r3, [pc, #852]	@ (8013ed8 <__ieee754_pow+0x778>)
 8013b82:	402b      	ands	r3, r5
 8013b84:	2200      	movs	r2, #0
 8013b86:	b92b      	cbnz	r3, 8013b94 <__ieee754_pow+0x434>
 8013b88:	4bd4      	ldr	r3, [pc, #848]	@ (8013edc <__ieee754_pow+0x77c>)
 8013b8a:	f7ec fd55 	bl	8000638 <__aeabi_dmul>
 8013b8e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8013b92:	468b      	mov	fp, r1
 8013b94:	ea4f 532b 	mov.w	r3, fp, asr #20
 8013b98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013b9c:	4413      	add	r3, r2
 8013b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ba0:	4bcf      	ldr	r3, [pc, #828]	@ (8013ee0 <__ieee754_pow+0x780>)
 8013ba2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013ba6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013baa:	459b      	cmp	fp, r3
 8013bac:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013bb0:	dd08      	ble.n	8013bc4 <__ieee754_pow+0x464>
 8013bb2:	4bcc      	ldr	r3, [pc, #816]	@ (8013ee4 <__ieee754_pow+0x784>)
 8013bb4:	459b      	cmp	fp, r3
 8013bb6:	f340 81a5 	ble.w	8013f04 <__ieee754_pow+0x7a4>
 8013bba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013bbc:	3301      	adds	r3, #1
 8013bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bc0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013bc4:	f04f 0a00 	mov.w	sl, #0
 8013bc8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013bcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013bce:	4bc6      	ldr	r3, [pc, #792]	@ (8013ee8 <__ieee754_pow+0x788>)
 8013bd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013bd4:	ed93 7b00 	vldr	d7, [r3]
 8013bd8:	4629      	mov	r1, r5
 8013bda:	ec53 2b17 	vmov	r2, r3, d7
 8013bde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013be2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013be6:	f7ec fb6f 	bl	80002c8 <__aeabi_dsub>
 8013bea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013bee:	4606      	mov	r6, r0
 8013bf0:	460f      	mov	r7, r1
 8013bf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013bf6:	f7ec fb69 	bl	80002cc <__adddf3>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	2000      	movs	r0, #0
 8013c00:	49ba      	ldr	r1, [pc, #744]	@ (8013eec <__ieee754_pow+0x78c>)
 8013c02:	f7ec fe43 	bl	800088c <__aeabi_ddiv>
 8013c06:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	4630      	mov	r0, r6
 8013c10:	4639      	mov	r1, r7
 8013c12:	f7ec fd11 	bl	8000638 <__aeabi_dmul>
 8013c16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c1a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013c1e:	106d      	asrs	r5, r5, #1
 8013c20:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013c24:	f04f 0b00 	mov.w	fp, #0
 8013c28:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013c2c:	4661      	mov	r1, ip
 8013c2e:	2200      	movs	r2, #0
 8013c30:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013c34:	4658      	mov	r0, fp
 8013c36:	46e1      	mov	r9, ip
 8013c38:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013c3c:	4614      	mov	r4, r2
 8013c3e:	461d      	mov	r5, r3
 8013c40:	f7ec fcfa 	bl	8000638 <__aeabi_dmul>
 8013c44:	4602      	mov	r2, r0
 8013c46:	460b      	mov	r3, r1
 8013c48:	4630      	mov	r0, r6
 8013c4a:	4639      	mov	r1, r7
 8013c4c:	f7ec fb3c 	bl	80002c8 <__aeabi_dsub>
 8013c50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c54:	4606      	mov	r6, r0
 8013c56:	460f      	mov	r7, r1
 8013c58:	4620      	mov	r0, r4
 8013c5a:	4629      	mov	r1, r5
 8013c5c:	f7ec fb34 	bl	80002c8 <__aeabi_dsub>
 8013c60:	4602      	mov	r2, r0
 8013c62:	460b      	mov	r3, r1
 8013c64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013c68:	f7ec fb2e 	bl	80002c8 <__aeabi_dsub>
 8013c6c:	465a      	mov	r2, fp
 8013c6e:	464b      	mov	r3, r9
 8013c70:	f7ec fce2 	bl	8000638 <__aeabi_dmul>
 8013c74:	4602      	mov	r2, r0
 8013c76:	460b      	mov	r3, r1
 8013c78:	4630      	mov	r0, r6
 8013c7a:	4639      	mov	r1, r7
 8013c7c:	f7ec fb24 	bl	80002c8 <__aeabi_dsub>
 8013c80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013c84:	f7ec fcd8 	bl	8000638 <__aeabi_dmul>
 8013c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013c90:	4610      	mov	r0, r2
 8013c92:	4619      	mov	r1, r3
 8013c94:	f7ec fcd0 	bl	8000638 <__aeabi_dmul>
 8013c98:	a37d      	add	r3, pc, #500	@ (adr r3, 8013e90 <__ieee754_pow+0x730>)
 8013c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	460d      	mov	r5, r1
 8013ca2:	f7ec fcc9 	bl	8000638 <__aeabi_dmul>
 8013ca6:	a37c      	add	r3, pc, #496	@ (adr r3, 8013e98 <__ieee754_pow+0x738>)
 8013ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cac:	f7ec fb0e 	bl	80002cc <__adddf3>
 8013cb0:	4622      	mov	r2, r4
 8013cb2:	462b      	mov	r3, r5
 8013cb4:	f7ec fcc0 	bl	8000638 <__aeabi_dmul>
 8013cb8:	a379      	add	r3, pc, #484	@ (adr r3, 8013ea0 <__ieee754_pow+0x740>)
 8013cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cbe:	f7ec fb05 	bl	80002cc <__adddf3>
 8013cc2:	4622      	mov	r2, r4
 8013cc4:	462b      	mov	r3, r5
 8013cc6:	f7ec fcb7 	bl	8000638 <__aeabi_dmul>
 8013cca:	a377      	add	r3, pc, #476	@ (adr r3, 8013ea8 <__ieee754_pow+0x748>)
 8013ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd0:	f7ec fafc 	bl	80002cc <__adddf3>
 8013cd4:	4622      	mov	r2, r4
 8013cd6:	462b      	mov	r3, r5
 8013cd8:	f7ec fcae 	bl	8000638 <__aeabi_dmul>
 8013cdc:	a374      	add	r3, pc, #464	@ (adr r3, 8013eb0 <__ieee754_pow+0x750>)
 8013cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce2:	f7ec faf3 	bl	80002cc <__adddf3>
 8013ce6:	4622      	mov	r2, r4
 8013ce8:	462b      	mov	r3, r5
 8013cea:	f7ec fca5 	bl	8000638 <__aeabi_dmul>
 8013cee:	a372      	add	r3, pc, #456	@ (adr r3, 8013eb8 <__ieee754_pow+0x758>)
 8013cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf4:	f7ec faea 	bl	80002cc <__adddf3>
 8013cf8:	4622      	mov	r2, r4
 8013cfa:	4606      	mov	r6, r0
 8013cfc:	460f      	mov	r7, r1
 8013cfe:	462b      	mov	r3, r5
 8013d00:	4620      	mov	r0, r4
 8013d02:	4629      	mov	r1, r5
 8013d04:	f7ec fc98 	bl	8000638 <__aeabi_dmul>
 8013d08:	4602      	mov	r2, r0
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	4639      	mov	r1, r7
 8013d10:	f7ec fc92 	bl	8000638 <__aeabi_dmul>
 8013d14:	465a      	mov	r2, fp
 8013d16:	4604      	mov	r4, r0
 8013d18:	460d      	mov	r5, r1
 8013d1a:	464b      	mov	r3, r9
 8013d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d20:	f7ec fad4 	bl	80002cc <__adddf3>
 8013d24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d28:	f7ec fc86 	bl	8000638 <__aeabi_dmul>
 8013d2c:	4622      	mov	r2, r4
 8013d2e:	462b      	mov	r3, r5
 8013d30:	f7ec facc 	bl	80002cc <__adddf3>
 8013d34:	465a      	mov	r2, fp
 8013d36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013d3a:	464b      	mov	r3, r9
 8013d3c:	4658      	mov	r0, fp
 8013d3e:	4649      	mov	r1, r9
 8013d40:	f7ec fc7a 	bl	8000638 <__aeabi_dmul>
 8013d44:	4b6a      	ldr	r3, [pc, #424]	@ (8013ef0 <__ieee754_pow+0x790>)
 8013d46:	2200      	movs	r2, #0
 8013d48:	4606      	mov	r6, r0
 8013d4a:	460f      	mov	r7, r1
 8013d4c:	f7ec fabe 	bl	80002cc <__adddf3>
 8013d50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013d54:	f7ec faba 	bl	80002cc <__adddf3>
 8013d58:	46d8      	mov	r8, fp
 8013d5a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013d5e:	460d      	mov	r5, r1
 8013d60:	465a      	mov	r2, fp
 8013d62:	460b      	mov	r3, r1
 8013d64:	4640      	mov	r0, r8
 8013d66:	4649      	mov	r1, r9
 8013d68:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013d6c:	f7ec fc64 	bl	8000638 <__aeabi_dmul>
 8013d70:	465c      	mov	r4, fp
 8013d72:	4680      	mov	r8, r0
 8013d74:	4689      	mov	r9, r1
 8013d76:	4b5e      	ldr	r3, [pc, #376]	@ (8013ef0 <__ieee754_pow+0x790>)
 8013d78:	2200      	movs	r2, #0
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	4629      	mov	r1, r5
 8013d7e:	f7ec faa3 	bl	80002c8 <__aeabi_dsub>
 8013d82:	4632      	mov	r2, r6
 8013d84:	463b      	mov	r3, r7
 8013d86:	f7ec fa9f 	bl	80002c8 <__aeabi_dsub>
 8013d8a:	4602      	mov	r2, r0
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013d92:	f7ec fa99 	bl	80002c8 <__aeabi_dsub>
 8013d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d9a:	f7ec fc4d 	bl	8000638 <__aeabi_dmul>
 8013d9e:	4622      	mov	r2, r4
 8013da0:	4606      	mov	r6, r0
 8013da2:	460f      	mov	r7, r1
 8013da4:	462b      	mov	r3, r5
 8013da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013daa:	f7ec fc45 	bl	8000638 <__aeabi_dmul>
 8013dae:	4602      	mov	r2, r0
 8013db0:	460b      	mov	r3, r1
 8013db2:	4630      	mov	r0, r6
 8013db4:	4639      	mov	r1, r7
 8013db6:	f7ec fa89 	bl	80002cc <__adddf3>
 8013dba:	4606      	mov	r6, r0
 8013dbc:	460f      	mov	r7, r1
 8013dbe:	4602      	mov	r2, r0
 8013dc0:	460b      	mov	r3, r1
 8013dc2:	4640      	mov	r0, r8
 8013dc4:	4649      	mov	r1, r9
 8013dc6:	f7ec fa81 	bl	80002cc <__adddf3>
 8013dca:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013dce:	a33c      	add	r3, pc, #240	@ (adr r3, 8013ec0 <__ieee754_pow+0x760>)
 8013dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd4:	4658      	mov	r0, fp
 8013dd6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013dda:	460d      	mov	r5, r1
 8013ddc:	f7ec fc2c 	bl	8000638 <__aeabi_dmul>
 8013de0:	465c      	mov	r4, fp
 8013de2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013de6:	4642      	mov	r2, r8
 8013de8:	464b      	mov	r3, r9
 8013dea:	4620      	mov	r0, r4
 8013dec:	4629      	mov	r1, r5
 8013dee:	f7ec fa6b 	bl	80002c8 <__aeabi_dsub>
 8013df2:	4602      	mov	r2, r0
 8013df4:	460b      	mov	r3, r1
 8013df6:	4630      	mov	r0, r6
 8013df8:	4639      	mov	r1, r7
 8013dfa:	f7ec fa65 	bl	80002c8 <__aeabi_dsub>
 8013dfe:	a332      	add	r3, pc, #200	@ (adr r3, 8013ec8 <__ieee754_pow+0x768>)
 8013e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e04:	f7ec fc18 	bl	8000638 <__aeabi_dmul>
 8013e08:	a331      	add	r3, pc, #196	@ (adr r3, 8013ed0 <__ieee754_pow+0x770>)
 8013e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0e:	4606      	mov	r6, r0
 8013e10:	460f      	mov	r7, r1
 8013e12:	4620      	mov	r0, r4
 8013e14:	4629      	mov	r1, r5
 8013e16:	f7ec fc0f 	bl	8000638 <__aeabi_dmul>
 8013e1a:	4602      	mov	r2, r0
 8013e1c:	460b      	mov	r3, r1
 8013e1e:	4630      	mov	r0, r6
 8013e20:	4639      	mov	r1, r7
 8013e22:	f7ec fa53 	bl	80002cc <__adddf3>
 8013e26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013e28:	4b32      	ldr	r3, [pc, #200]	@ (8013ef4 <__ieee754_pow+0x794>)
 8013e2a:	4413      	add	r3, r2
 8013e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e30:	f7ec fa4c 	bl	80002cc <__adddf3>
 8013e34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013e38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013e3a:	f7ec fb93 	bl	8000564 <__aeabi_i2d>
 8013e3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013e40:	4b2d      	ldr	r3, [pc, #180]	@ (8013ef8 <__ieee754_pow+0x798>)
 8013e42:	4413      	add	r3, r2
 8013e44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e48:	4606      	mov	r6, r0
 8013e4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013e4e:	460f      	mov	r7, r1
 8013e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e54:	f7ec fa3a 	bl	80002cc <__adddf3>
 8013e58:	4642      	mov	r2, r8
 8013e5a:	464b      	mov	r3, r9
 8013e5c:	f7ec fa36 	bl	80002cc <__adddf3>
 8013e60:	4632      	mov	r2, r6
 8013e62:	463b      	mov	r3, r7
 8013e64:	f7ec fa32 	bl	80002cc <__adddf3>
 8013e68:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013e6c:	4632      	mov	r2, r6
 8013e6e:	463b      	mov	r3, r7
 8013e70:	4658      	mov	r0, fp
 8013e72:	460d      	mov	r5, r1
 8013e74:	f7ec fa28 	bl	80002c8 <__aeabi_dsub>
 8013e78:	4642      	mov	r2, r8
 8013e7a:	464b      	mov	r3, r9
 8013e7c:	f7ec fa24 	bl	80002c8 <__aeabi_dsub>
 8013e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e84:	f7ec fa20 	bl	80002c8 <__aeabi_dsub>
 8013e88:	465c      	mov	r4, fp
 8013e8a:	4602      	mov	r2, r0
 8013e8c:	e036      	b.n	8013efc <__ieee754_pow+0x79c>
 8013e8e:	bf00      	nop
 8013e90:	4a454eef 	.word	0x4a454eef
 8013e94:	3fca7e28 	.word	0x3fca7e28
 8013e98:	93c9db65 	.word	0x93c9db65
 8013e9c:	3fcd864a 	.word	0x3fcd864a
 8013ea0:	a91d4101 	.word	0xa91d4101
 8013ea4:	3fd17460 	.word	0x3fd17460
 8013ea8:	518f264d 	.word	0x518f264d
 8013eac:	3fd55555 	.word	0x3fd55555
 8013eb0:	db6fabff 	.word	0xdb6fabff
 8013eb4:	3fdb6db6 	.word	0x3fdb6db6
 8013eb8:	33333303 	.word	0x33333303
 8013ebc:	3fe33333 	.word	0x3fe33333
 8013ec0:	e0000000 	.word	0xe0000000
 8013ec4:	3feec709 	.word	0x3feec709
 8013ec8:	dc3a03fd 	.word	0xdc3a03fd
 8013ecc:	3feec709 	.word	0x3feec709
 8013ed0:	145b01f5 	.word	0x145b01f5
 8013ed4:	be3e2fe0 	.word	0xbe3e2fe0
 8013ed8:	7ff00000 	.word	0x7ff00000
 8013edc:	43400000 	.word	0x43400000
 8013ee0:	0003988e 	.word	0x0003988e
 8013ee4:	000bb679 	.word	0x000bb679
 8013ee8:	08015860 	.word	0x08015860
 8013eec:	3ff00000 	.word	0x3ff00000
 8013ef0:	40080000 	.word	0x40080000
 8013ef4:	08015840 	.word	0x08015840
 8013ef8:	08015850 	.word	0x08015850
 8013efc:	460b      	mov	r3, r1
 8013efe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f02:	e5d7      	b.n	8013ab4 <__ieee754_pow+0x354>
 8013f04:	f04f 0a01 	mov.w	sl, #1
 8013f08:	e65e      	b.n	8013bc8 <__ieee754_pow+0x468>
 8013f0a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80141dc <__ieee754_pow+0xa7c>)
 8013f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f10:	4630      	mov	r0, r6
 8013f12:	4639      	mov	r1, r7
 8013f14:	f7ec f9da 	bl	80002cc <__adddf3>
 8013f18:	4642      	mov	r2, r8
 8013f1a:	e9cd 0100 	strd	r0, r1, [sp]
 8013f1e:	464b      	mov	r3, r9
 8013f20:	4620      	mov	r0, r4
 8013f22:	4629      	mov	r1, r5
 8013f24:	f7ec f9d0 	bl	80002c8 <__aeabi_dsub>
 8013f28:	4602      	mov	r2, r0
 8013f2a:	460b      	mov	r3, r1
 8013f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f30:	f7ec fe12 	bl	8000b58 <__aeabi_dcmpgt>
 8013f34:	2800      	cmp	r0, #0
 8013f36:	f47f ae00 	bne.w	8013b3a <__ieee754_pow+0x3da>
 8013f3a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8013f3e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8013f42:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8013f46:	fa43 fa0a 	asr.w	sl, r3, sl
 8013f4a:	44da      	add	sl, fp
 8013f4c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013f50:	489d      	ldr	r0, [pc, #628]	@ (80141c8 <__ieee754_pow+0xa68>)
 8013f52:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013f56:	4108      	asrs	r0, r1
 8013f58:	ea00 030a 	and.w	r3, r0, sl
 8013f5c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013f60:	f1c1 0114 	rsb	r1, r1, #20
 8013f64:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013f68:	fa4a fa01 	asr.w	sl, sl, r1
 8013f6c:	f1bb 0f00 	cmp.w	fp, #0
 8013f70:	4640      	mov	r0, r8
 8013f72:	4649      	mov	r1, r9
 8013f74:	f04f 0200 	mov.w	r2, #0
 8013f78:	bfb8      	it	lt
 8013f7a:	f1ca 0a00 	rsblt	sl, sl, #0
 8013f7e:	f7ec f9a3 	bl	80002c8 <__aeabi_dsub>
 8013f82:	4680      	mov	r8, r0
 8013f84:	4689      	mov	r9, r1
 8013f86:	4632      	mov	r2, r6
 8013f88:	463b      	mov	r3, r7
 8013f8a:	4640      	mov	r0, r8
 8013f8c:	4649      	mov	r1, r9
 8013f8e:	f7ec f99d 	bl	80002cc <__adddf3>
 8013f92:	2400      	movs	r4, #0
 8013f94:	a37c      	add	r3, pc, #496	@ (adr r3, 8014188 <__ieee754_pow+0xa28>)
 8013f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	460d      	mov	r5, r1
 8013f9e:	f7ec fb4b 	bl	8000638 <__aeabi_dmul>
 8013fa2:	4642      	mov	r2, r8
 8013fa4:	e9cd 0100 	strd	r0, r1, [sp]
 8013fa8:	464b      	mov	r3, r9
 8013faa:	4620      	mov	r0, r4
 8013fac:	4629      	mov	r1, r5
 8013fae:	f7ec f98b 	bl	80002c8 <__aeabi_dsub>
 8013fb2:	4602      	mov	r2, r0
 8013fb4:	460b      	mov	r3, r1
 8013fb6:	4630      	mov	r0, r6
 8013fb8:	4639      	mov	r1, r7
 8013fba:	f7ec f985 	bl	80002c8 <__aeabi_dsub>
 8013fbe:	a374      	add	r3, pc, #464	@ (adr r3, 8014190 <__ieee754_pow+0xa30>)
 8013fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc4:	f7ec fb38 	bl	8000638 <__aeabi_dmul>
 8013fc8:	a373      	add	r3, pc, #460	@ (adr r3, 8014198 <__ieee754_pow+0xa38>)
 8013fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fce:	4680      	mov	r8, r0
 8013fd0:	4689      	mov	r9, r1
 8013fd2:	4620      	mov	r0, r4
 8013fd4:	4629      	mov	r1, r5
 8013fd6:	f7ec fb2f 	bl	8000638 <__aeabi_dmul>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	460b      	mov	r3, r1
 8013fde:	4640      	mov	r0, r8
 8013fe0:	4649      	mov	r1, r9
 8013fe2:	f7ec f973 	bl	80002cc <__adddf3>
 8013fe6:	4604      	mov	r4, r0
 8013fe8:	460d      	mov	r5, r1
 8013fea:	4602      	mov	r2, r0
 8013fec:	460b      	mov	r3, r1
 8013fee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ff2:	f7ec f96b 	bl	80002cc <__adddf3>
 8013ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ffa:	4680      	mov	r8, r0
 8013ffc:	4689      	mov	r9, r1
 8013ffe:	f7ec f963 	bl	80002c8 <__aeabi_dsub>
 8014002:	4602      	mov	r2, r0
 8014004:	460b      	mov	r3, r1
 8014006:	4620      	mov	r0, r4
 8014008:	4629      	mov	r1, r5
 801400a:	f7ec f95d 	bl	80002c8 <__aeabi_dsub>
 801400e:	4642      	mov	r2, r8
 8014010:	4606      	mov	r6, r0
 8014012:	460f      	mov	r7, r1
 8014014:	464b      	mov	r3, r9
 8014016:	4640      	mov	r0, r8
 8014018:	4649      	mov	r1, r9
 801401a:	f7ec fb0d 	bl	8000638 <__aeabi_dmul>
 801401e:	a360      	add	r3, pc, #384	@ (adr r3, 80141a0 <__ieee754_pow+0xa40>)
 8014020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014024:	4604      	mov	r4, r0
 8014026:	460d      	mov	r5, r1
 8014028:	f7ec fb06 	bl	8000638 <__aeabi_dmul>
 801402c:	a35e      	add	r3, pc, #376	@ (adr r3, 80141a8 <__ieee754_pow+0xa48>)
 801402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014032:	f7ec f949 	bl	80002c8 <__aeabi_dsub>
 8014036:	4622      	mov	r2, r4
 8014038:	462b      	mov	r3, r5
 801403a:	f7ec fafd 	bl	8000638 <__aeabi_dmul>
 801403e:	a35c      	add	r3, pc, #368	@ (adr r3, 80141b0 <__ieee754_pow+0xa50>)
 8014040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014044:	f7ec f942 	bl	80002cc <__adddf3>
 8014048:	4622      	mov	r2, r4
 801404a:	462b      	mov	r3, r5
 801404c:	f7ec faf4 	bl	8000638 <__aeabi_dmul>
 8014050:	a359      	add	r3, pc, #356	@ (adr r3, 80141b8 <__ieee754_pow+0xa58>)
 8014052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014056:	f7ec f937 	bl	80002c8 <__aeabi_dsub>
 801405a:	4622      	mov	r2, r4
 801405c:	462b      	mov	r3, r5
 801405e:	f7ec faeb 	bl	8000638 <__aeabi_dmul>
 8014062:	a357      	add	r3, pc, #348	@ (adr r3, 80141c0 <__ieee754_pow+0xa60>)
 8014064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014068:	f7ec f930 	bl	80002cc <__adddf3>
 801406c:	4622      	mov	r2, r4
 801406e:	462b      	mov	r3, r5
 8014070:	f7ec fae2 	bl	8000638 <__aeabi_dmul>
 8014074:	4602      	mov	r2, r0
 8014076:	460b      	mov	r3, r1
 8014078:	4640      	mov	r0, r8
 801407a:	4649      	mov	r1, r9
 801407c:	f7ec f924 	bl	80002c8 <__aeabi_dsub>
 8014080:	4604      	mov	r4, r0
 8014082:	460d      	mov	r5, r1
 8014084:	4602      	mov	r2, r0
 8014086:	460b      	mov	r3, r1
 8014088:	4640      	mov	r0, r8
 801408a:	4649      	mov	r1, r9
 801408c:	f7ec fad4 	bl	8000638 <__aeabi_dmul>
 8014090:	2200      	movs	r2, #0
 8014092:	e9cd 0100 	strd	r0, r1, [sp]
 8014096:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801409a:	4620      	mov	r0, r4
 801409c:	4629      	mov	r1, r5
 801409e:	f7ec f913 	bl	80002c8 <__aeabi_dsub>
 80140a2:	4602      	mov	r2, r0
 80140a4:	460b      	mov	r3, r1
 80140a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140aa:	f7ec fbef 	bl	800088c <__aeabi_ddiv>
 80140ae:	4632      	mov	r2, r6
 80140b0:	4604      	mov	r4, r0
 80140b2:	460d      	mov	r5, r1
 80140b4:	463b      	mov	r3, r7
 80140b6:	4640      	mov	r0, r8
 80140b8:	4649      	mov	r1, r9
 80140ba:	f7ec fabd 	bl	8000638 <__aeabi_dmul>
 80140be:	4632      	mov	r2, r6
 80140c0:	463b      	mov	r3, r7
 80140c2:	f7ec f903 	bl	80002cc <__adddf3>
 80140c6:	4602      	mov	r2, r0
 80140c8:	460b      	mov	r3, r1
 80140ca:	4620      	mov	r0, r4
 80140cc:	4629      	mov	r1, r5
 80140ce:	f7ec f8fb 	bl	80002c8 <__aeabi_dsub>
 80140d2:	4642      	mov	r2, r8
 80140d4:	464b      	mov	r3, r9
 80140d6:	f7ec f8f7 	bl	80002c8 <__aeabi_dsub>
 80140da:	460b      	mov	r3, r1
 80140dc:	4602      	mov	r2, r0
 80140de:	493b      	ldr	r1, [pc, #236]	@ (80141cc <__ieee754_pow+0xa6c>)
 80140e0:	2000      	movs	r0, #0
 80140e2:	f7ec f8f1 	bl	80002c8 <__aeabi_dsub>
 80140e6:	ec41 0b10 	vmov	d0, r0, r1
 80140ea:	ee10 3a90 	vmov	r3, s1
 80140ee:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80140f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80140f6:	da30      	bge.n	801415a <__ieee754_pow+0x9fa>
 80140f8:	4650      	mov	r0, sl
 80140fa:	f000 fc11 	bl	8014920 <scalbn>
 80140fe:	ec51 0b10 	vmov	r0, r1, d0
 8014102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014106:	f7ff bbd2 	b.w	80138ae <__ieee754_pow+0x14e>
 801410a:	4c31      	ldr	r4, [pc, #196]	@ (80141d0 <__ieee754_pow+0xa70>)
 801410c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014110:	42a3      	cmp	r3, r4
 8014112:	d91a      	bls.n	801414a <__ieee754_pow+0x9ea>
 8014114:	4b2f      	ldr	r3, [pc, #188]	@ (80141d4 <__ieee754_pow+0xa74>)
 8014116:	440b      	add	r3, r1
 8014118:	4303      	orrs	r3, r0
 801411a:	d009      	beq.n	8014130 <__ieee754_pow+0x9d0>
 801411c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014120:	2200      	movs	r2, #0
 8014122:	2300      	movs	r3, #0
 8014124:	f7ec fcfa 	bl	8000b1c <__aeabi_dcmplt>
 8014128:	3800      	subs	r0, #0
 801412a:	bf18      	it	ne
 801412c:	2001      	movne	r0, #1
 801412e:	e42b      	b.n	8013988 <__ieee754_pow+0x228>
 8014130:	4642      	mov	r2, r8
 8014132:	464b      	mov	r3, r9
 8014134:	f7ec f8c8 	bl	80002c8 <__aeabi_dsub>
 8014138:	4632      	mov	r2, r6
 801413a:	463b      	mov	r3, r7
 801413c:	f7ec fd02 	bl	8000b44 <__aeabi_dcmpge>
 8014140:	2800      	cmp	r0, #0
 8014142:	d1eb      	bne.n	801411c <__ieee754_pow+0x9bc>
 8014144:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80141e4 <__ieee754_pow+0xa84>
 8014148:	e6f7      	b.n	8013f3a <__ieee754_pow+0x7da>
 801414a:	469a      	mov	sl, r3
 801414c:	4b22      	ldr	r3, [pc, #136]	@ (80141d8 <__ieee754_pow+0xa78>)
 801414e:	459a      	cmp	sl, r3
 8014150:	f63f aef3 	bhi.w	8013f3a <__ieee754_pow+0x7da>
 8014154:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014158:	e715      	b.n	8013f86 <__ieee754_pow+0x826>
 801415a:	ec51 0b10 	vmov	r0, r1, d0
 801415e:	4619      	mov	r1, r3
 8014160:	e7cf      	b.n	8014102 <__ieee754_pow+0x9a2>
 8014162:	491a      	ldr	r1, [pc, #104]	@ (80141cc <__ieee754_pow+0xa6c>)
 8014164:	2000      	movs	r0, #0
 8014166:	f7ff bb18 	b.w	801379a <__ieee754_pow+0x3a>
 801416a:	2000      	movs	r0, #0
 801416c:	2100      	movs	r1, #0
 801416e:	f7ff bb14 	b.w	801379a <__ieee754_pow+0x3a>
 8014172:	4630      	mov	r0, r6
 8014174:	4639      	mov	r1, r7
 8014176:	f7ff bb10 	b.w	801379a <__ieee754_pow+0x3a>
 801417a:	460c      	mov	r4, r1
 801417c:	f7ff bb5e 	b.w	801383c <__ieee754_pow+0xdc>
 8014180:	2400      	movs	r4, #0
 8014182:	f7ff bb49 	b.w	8013818 <__ieee754_pow+0xb8>
 8014186:	bf00      	nop
 8014188:	00000000 	.word	0x00000000
 801418c:	3fe62e43 	.word	0x3fe62e43
 8014190:	fefa39ef 	.word	0xfefa39ef
 8014194:	3fe62e42 	.word	0x3fe62e42
 8014198:	0ca86c39 	.word	0x0ca86c39
 801419c:	be205c61 	.word	0xbe205c61
 80141a0:	72bea4d0 	.word	0x72bea4d0
 80141a4:	3e663769 	.word	0x3e663769
 80141a8:	c5d26bf1 	.word	0xc5d26bf1
 80141ac:	3ebbbd41 	.word	0x3ebbbd41
 80141b0:	af25de2c 	.word	0xaf25de2c
 80141b4:	3f11566a 	.word	0x3f11566a
 80141b8:	16bebd93 	.word	0x16bebd93
 80141bc:	3f66c16c 	.word	0x3f66c16c
 80141c0:	5555553e 	.word	0x5555553e
 80141c4:	3fc55555 	.word	0x3fc55555
 80141c8:	fff00000 	.word	0xfff00000
 80141cc:	3ff00000 	.word	0x3ff00000
 80141d0:	4090cbff 	.word	0x4090cbff
 80141d4:	3f6f3400 	.word	0x3f6f3400
 80141d8:	3fe00000 	.word	0x3fe00000
 80141dc:	652b82fe 	.word	0x652b82fe
 80141e0:	3c971547 	.word	0x3c971547
 80141e4:	4090cc00 	.word	0x4090cc00

080141e8 <__ieee754_rem_pio2>:
 80141e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ec:	ec57 6b10 	vmov	r6, r7, d0
 80141f0:	4bc5      	ldr	r3, [pc, #788]	@ (8014508 <__ieee754_rem_pio2+0x320>)
 80141f2:	b08d      	sub	sp, #52	@ 0x34
 80141f4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80141f8:	4598      	cmp	r8, r3
 80141fa:	4604      	mov	r4, r0
 80141fc:	9704      	str	r7, [sp, #16]
 80141fe:	d807      	bhi.n	8014210 <__ieee754_rem_pio2+0x28>
 8014200:	2200      	movs	r2, #0
 8014202:	2300      	movs	r3, #0
 8014204:	ed80 0b00 	vstr	d0, [r0]
 8014208:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801420c:	2500      	movs	r5, #0
 801420e:	e028      	b.n	8014262 <__ieee754_rem_pio2+0x7a>
 8014210:	4bbe      	ldr	r3, [pc, #760]	@ (801450c <__ieee754_rem_pio2+0x324>)
 8014212:	4598      	cmp	r8, r3
 8014214:	d878      	bhi.n	8014308 <__ieee754_rem_pio2+0x120>
 8014216:	9b04      	ldr	r3, [sp, #16]
 8014218:	4dbd      	ldr	r5, [pc, #756]	@ (8014510 <__ieee754_rem_pio2+0x328>)
 801421a:	2b00      	cmp	r3, #0
 801421c:	4630      	mov	r0, r6
 801421e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80144d0 <__ieee754_rem_pio2+0x2e8>)
 8014220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014224:	4639      	mov	r1, r7
 8014226:	dd38      	ble.n	801429a <__ieee754_rem_pio2+0xb2>
 8014228:	f7ec f84e 	bl	80002c8 <__aeabi_dsub>
 801422c:	45a8      	cmp	r8, r5
 801422e:	4606      	mov	r6, r0
 8014230:	460f      	mov	r7, r1
 8014232:	d01a      	beq.n	801426a <__ieee754_rem_pio2+0x82>
 8014234:	a3a8      	add	r3, pc, #672	@ (adr r3, 80144d8 <__ieee754_rem_pio2+0x2f0>)
 8014236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423a:	f7ec f845 	bl	80002c8 <__aeabi_dsub>
 801423e:	4602      	mov	r2, r0
 8014240:	460b      	mov	r3, r1
 8014242:	4680      	mov	r8, r0
 8014244:	4689      	mov	r9, r1
 8014246:	4630      	mov	r0, r6
 8014248:	4639      	mov	r1, r7
 801424a:	f7ec f83d 	bl	80002c8 <__aeabi_dsub>
 801424e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80144d8 <__ieee754_rem_pio2+0x2f0>)
 8014250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014254:	f7ec f838 	bl	80002c8 <__aeabi_dsub>
 8014258:	e9c4 8900 	strd	r8, r9, [r4]
 801425c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014260:	2501      	movs	r5, #1
 8014262:	4628      	mov	r0, r5
 8014264:	b00d      	add	sp, #52	@ 0x34
 8014266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801426a:	a39d      	add	r3, pc, #628	@ (adr r3, 80144e0 <__ieee754_rem_pio2+0x2f8>)
 801426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014270:	f7ec f82a 	bl	80002c8 <__aeabi_dsub>
 8014274:	a39c      	add	r3, pc, #624	@ (adr r3, 80144e8 <__ieee754_rem_pio2+0x300>)
 8014276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801427a:	4606      	mov	r6, r0
 801427c:	460f      	mov	r7, r1
 801427e:	f7ec f823 	bl	80002c8 <__aeabi_dsub>
 8014282:	4602      	mov	r2, r0
 8014284:	460b      	mov	r3, r1
 8014286:	4680      	mov	r8, r0
 8014288:	4689      	mov	r9, r1
 801428a:	4630      	mov	r0, r6
 801428c:	4639      	mov	r1, r7
 801428e:	f7ec f81b 	bl	80002c8 <__aeabi_dsub>
 8014292:	a395      	add	r3, pc, #596	@ (adr r3, 80144e8 <__ieee754_rem_pio2+0x300>)
 8014294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014298:	e7dc      	b.n	8014254 <__ieee754_rem_pio2+0x6c>
 801429a:	f7ec f817 	bl	80002cc <__adddf3>
 801429e:	45a8      	cmp	r8, r5
 80142a0:	4606      	mov	r6, r0
 80142a2:	460f      	mov	r7, r1
 80142a4:	d018      	beq.n	80142d8 <__ieee754_rem_pio2+0xf0>
 80142a6:	a38c      	add	r3, pc, #560	@ (adr r3, 80144d8 <__ieee754_rem_pio2+0x2f0>)
 80142a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ac:	f7ec f80e 	bl	80002cc <__adddf3>
 80142b0:	4602      	mov	r2, r0
 80142b2:	460b      	mov	r3, r1
 80142b4:	4680      	mov	r8, r0
 80142b6:	4689      	mov	r9, r1
 80142b8:	4630      	mov	r0, r6
 80142ba:	4639      	mov	r1, r7
 80142bc:	f7ec f804 	bl	80002c8 <__aeabi_dsub>
 80142c0:	a385      	add	r3, pc, #532	@ (adr r3, 80144d8 <__ieee754_rem_pio2+0x2f0>)
 80142c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c6:	f7ec f801 	bl	80002cc <__adddf3>
 80142ca:	f04f 35ff 	mov.w	r5, #4294967295
 80142ce:	e9c4 8900 	strd	r8, r9, [r4]
 80142d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80142d6:	e7c4      	b.n	8014262 <__ieee754_rem_pio2+0x7a>
 80142d8:	a381      	add	r3, pc, #516	@ (adr r3, 80144e0 <__ieee754_rem_pio2+0x2f8>)
 80142da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142de:	f7eb fff5 	bl	80002cc <__adddf3>
 80142e2:	a381      	add	r3, pc, #516	@ (adr r3, 80144e8 <__ieee754_rem_pio2+0x300>)
 80142e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e8:	4606      	mov	r6, r0
 80142ea:	460f      	mov	r7, r1
 80142ec:	f7eb ffee 	bl	80002cc <__adddf3>
 80142f0:	4602      	mov	r2, r0
 80142f2:	460b      	mov	r3, r1
 80142f4:	4680      	mov	r8, r0
 80142f6:	4689      	mov	r9, r1
 80142f8:	4630      	mov	r0, r6
 80142fa:	4639      	mov	r1, r7
 80142fc:	f7eb ffe4 	bl	80002c8 <__aeabi_dsub>
 8014300:	a379      	add	r3, pc, #484	@ (adr r3, 80144e8 <__ieee754_rem_pio2+0x300>)
 8014302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014306:	e7de      	b.n	80142c6 <__ieee754_rem_pio2+0xde>
 8014308:	4b82      	ldr	r3, [pc, #520]	@ (8014514 <__ieee754_rem_pio2+0x32c>)
 801430a:	4598      	cmp	r8, r3
 801430c:	f200 80d1 	bhi.w	80144b2 <__ieee754_rem_pio2+0x2ca>
 8014310:	f000 fafe 	bl	8014910 <fabs>
 8014314:	ec57 6b10 	vmov	r6, r7, d0
 8014318:	a375      	add	r3, pc, #468	@ (adr r3, 80144f0 <__ieee754_rem_pio2+0x308>)
 801431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431e:	4630      	mov	r0, r6
 8014320:	4639      	mov	r1, r7
 8014322:	f7ec f989 	bl	8000638 <__aeabi_dmul>
 8014326:	4b7c      	ldr	r3, [pc, #496]	@ (8014518 <__ieee754_rem_pio2+0x330>)
 8014328:	2200      	movs	r2, #0
 801432a:	f7eb ffcf 	bl	80002cc <__adddf3>
 801432e:	f7ec fc33 	bl	8000b98 <__aeabi_d2iz>
 8014332:	4605      	mov	r5, r0
 8014334:	f7ec f916 	bl	8000564 <__aeabi_i2d>
 8014338:	4602      	mov	r2, r0
 801433a:	460b      	mov	r3, r1
 801433c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014340:	a363      	add	r3, pc, #396	@ (adr r3, 80144d0 <__ieee754_rem_pio2+0x2e8>)
 8014342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014346:	f7ec f977 	bl	8000638 <__aeabi_dmul>
 801434a:	4602      	mov	r2, r0
 801434c:	460b      	mov	r3, r1
 801434e:	4630      	mov	r0, r6
 8014350:	4639      	mov	r1, r7
 8014352:	f7eb ffb9 	bl	80002c8 <__aeabi_dsub>
 8014356:	a360      	add	r3, pc, #384	@ (adr r3, 80144d8 <__ieee754_rem_pio2+0x2f0>)
 8014358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435c:	4682      	mov	sl, r0
 801435e:	468b      	mov	fp, r1
 8014360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014364:	f7ec f968 	bl	8000638 <__aeabi_dmul>
 8014368:	2d1f      	cmp	r5, #31
 801436a:	4606      	mov	r6, r0
 801436c:	460f      	mov	r7, r1
 801436e:	dc0c      	bgt.n	801438a <__ieee754_rem_pio2+0x1a2>
 8014370:	4b6a      	ldr	r3, [pc, #424]	@ (801451c <__ieee754_rem_pio2+0x334>)
 8014372:	1e6a      	subs	r2, r5, #1
 8014374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014378:	4543      	cmp	r3, r8
 801437a:	d006      	beq.n	801438a <__ieee754_rem_pio2+0x1a2>
 801437c:	4632      	mov	r2, r6
 801437e:	463b      	mov	r3, r7
 8014380:	4650      	mov	r0, sl
 8014382:	4659      	mov	r1, fp
 8014384:	f7eb ffa0 	bl	80002c8 <__aeabi_dsub>
 8014388:	e00e      	b.n	80143a8 <__ieee754_rem_pio2+0x1c0>
 801438a:	463b      	mov	r3, r7
 801438c:	4632      	mov	r2, r6
 801438e:	4650      	mov	r0, sl
 8014390:	4659      	mov	r1, fp
 8014392:	f7eb ff99 	bl	80002c8 <__aeabi_dsub>
 8014396:	ea4f 5328 	mov.w	r3, r8, asr #20
 801439a:	9305      	str	r3, [sp, #20]
 801439c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80143a0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80143a4:	2b10      	cmp	r3, #16
 80143a6:	dc02      	bgt.n	80143ae <__ieee754_rem_pio2+0x1c6>
 80143a8:	e9c4 0100 	strd	r0, r1, [r4]
 80143ac:	e039      	b.n	8014422 <__ieee754_rem_pio2+0x23a>
 80143ae:	a34c      	add	r3, pc, #304	@ (adr r3, 80144e0 <__ieee754_rem_pio2+0x2f8>)
 80143b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143b8:	f7ec f93e 	bl	8000638 <__aeabi_dmul>
 80143bc:	4606      	mov	r6, r0
 80143be:	460f      	mov	r7, r1
 80143c0:	4602      	mov	r2, r0
 80143c2:	460b      	mov	r3, r1
 80143c4:	4650      	mov	r0, sl
 80143c6:	4659      	mov	r1, fp
 80143c8:	f7eb ff7e 	bl	80002c8 <__aeabi_dsub>
 80143cc:	4602      	mov	r2, r0
 80143ce:	460b      	mov	r3, r1
 80143d0:	4680      	mov	r8, r0
 80143d2:	4689      	mov	r9, r1
 80143d4:	4650      	mov	r0, sl
 80143d6:	4659      	mov	r1, fp
 80143d8:	f7eb ff76 	bl	80002c8 <__aeabi_dsub>
 80143dc:	4632      	mov	r2, r6
 80143de:	463b      	mov	r3, r7
 80143e0:	f7eb ff72 	bl	80002c8 <__aeabi_dsub>
 80143e4:	a340      	add	r3, pc, #256	@ (adr r3, 80144e8 <__ieee754_rem_pio2+0x300>)
 80143e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ea:	4606      	mov	r6, r0
 80143ec:	460f      	mov	r7, r1
 80143ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143f2:	f7ec f921 	bl	8000638 <__aeabi_dmul>
 80143f6:	4632      	mov	r2, r6
 80143f8:	463b      	mov	r3, r7
 80143fa:	f7eb ff65 	bl	80002c8 <__aeabi_dsub>
 80143fe:	4602      	mov	r2, r0
 8014400:	460b      	mov	r3, r1
 8014402:	4606      	mov	r6, r0
 8014404:	460f      	mov	r7, r1
 8014406:	4640      	mov	r0, r8
 8014408:	4649      	mov	r1, r9
 801440a:	f7eb ff5d 	bl	80002c8 <__aeabi_dsub>
 801440e:	9a05      	ldr	r2, [sp, #20]
 8014410:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014414:	1ad3      	subs	r3, r2, r3
 8014416:	2b31      	cmp	r3, #49	@ 0x31
 8014418:	dc20      	bgt.n	801445c <__ieee754_rem_pio2+0x274>
 801441a:	e9c4 0100 	strd	r0, r1, [r4]
 801441e:	46c2      	mov	sl, r8
 8014420:	46cb      	mov	fp, r9
 8014422:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014426:	4650      	mov	r0, sl
 8014428:	4642      	mov	r2, r8
 801442a:	464b      	mov	r3, r9
 801442c:	4659      	mov	r1, fp
 801442e:	f7eb ff4b 	bl	80002c8 <__aeabi_dsub>
 8014432:	463b      	mov	r3, r7
 8014434:	4632      	mov	r2, r6
 8014436:	f7eb ff47 	bl	80002c8 <__aeabi_dsub>
 801443a:	9b04      	ldr	r3, [sp, #16]
 801443c:	2b00      	cmp	r3, #0
 801443e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014442:	f6bf af0e 	bge.w	8014262 <__ieee754_rem_pio2+0x7a>
 8014446:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801444a:	6063      	str	r3, [r4, #4]
 801444c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014450:	f8c4 8000 	str.w	r8, [r4]
 8014454:	60a0      	str	r0, [r4, #8]
 8014456:	60e3      	str	r3, [r4, #12]
 8014458:	426d      	negs	r5, r5
 801445a:	e702      	b.n	8014262 <__ieee754_rem_pio2+0x7a>
 801445c:	a326      	add	r3, pc, #152	@ (adr r3, 80144f8 <__ieee754_rem_pio2+0x310>)
 801445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014466:	f7ec f8e7 	bl	8000638 <__aeabi_dmul>
 801446a:	4606      	mov	r6, r0
 801446c:	460f      	mov	r7, r1
 801446e:	4602      	mov	r2, r0
 8014470:	460b      	mov	r3, r1
 8014472:	4640      	mov	r0, r8
 8014474:	4649      	mov	r1, r9
 8014476:	f7eb ff27 	bl	80002c8 <__aeabi_dsub>
 801447a:	4602      	mov	r2, r0
 801447c:	460b      	mov	r3, r1
 801447e:	4682      	mov	sl, r0
 8014480:	468b      	mov	fp, r1
 8014482:	4640      	mov	r0, r8
 8014484:	4649      	mov	r1, r9
 8014486:	f7eb ff1f 	bl	80002c8 <__aeabi_dsub>
 801448a:	4632      	mov	r2, r6
 801448c:	463b      	mov	r3, r7
 801448e:	f7eb ff1b 	bl	80002c8 <__aeabi_dsub>
 8014492:	a31b      	add	r3, pc, #108	@ (adr r3, 8014500 <__ieee754_rem_pio2+0x318>)
 8014494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014498:	4606      	mov	r6, r0
 801449a:	460f      	mov	r7, r1
 801449c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144a0:	f7ec f8ca 	bl	8000638 <__aeabi_dmul>
 80144a4:	4632      	mov	r2, r6
 80144a6:	463b      	mov	r3, r7
 80144a8:	f7eb ff0e 	bl	80002c8 <__aeabi_dsub>
 80144ac:	4606      	mov	r6, r0
 80144ae:	460f      	mov	r7, r1
 80144b0:	e764      	b.n	801437c <__ieee754_rem_pio2+0x194>
 80144b2:	4b1b      	ldr	r3, [pc, #108]	@ (8014520 <__ieee754_rem_pio2+0x338>)
 80144b4:	4598      	cmp	r8, r3
 80144b6:	d935      	bls.n	8014524 <__ieee754_rem_pio2+0x33c>
 80144b8:	4632      	mov	r2, r6
 80144ba:	463b      	mov	r3, r7
 80144bc:	4630      	mov	r0, r6
 80144be:	4639      	mov	r1, r7
 80144c0:	f7eb ff02 	bl	80002c8 <__aeabi_dsub>
 80144c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80144c8:	e9c4 0100 	strd	r0, r1, [r4]
 80144cc:	e69e      	b.n	801420c <__ieee754_rem_pio2+0x24>
 80144ce:	bf00      	nop
 80144d0:	54400000 	.word	0x54400000
 80144d4:	3ff921fb 	.word	0x3ff921fb
 80144d8:	1a626331 	.word	0x1a626331
 80144dc:	3dd0b461 	.word	0x3dd0b461
 80144e0:	1a600000 	.word	0x1a600000
 80144e4:	3dd0b461 	.word	0x3dd0b461
 80144e8:	2e037073 	.word	0x2e037073
 80144ec:	3ba3198a 	.word	0x3ba3198a
 80144f0:	6dc9c883 	.word	0x6dc9c883
 80144f4:	3fe45f30 	.word	0x3fe45f30
 80144f8:	2e000000 	.word	0x2e000000
 80144fc:	3ba3198a 	.word	0x3ba3198a
 8014500:	252049c1 	.word	0x252049c1
 8014504:	397b839a 	.word	0x397b839a
 8014508:	3fe921fb 	.word	0x3fe921fb
 801450c:	4002d97b 	.word	0x4002d97b
 8014510:	3ff921fb 	.word	0x3ff921fb
 8014514:	413921fb 	.word	0x413921fb
 8014518:	3fe00000 	.word	0x3fe00000
 801451c:	08015870 	.word	0x08015870
 8014520:	7fefffff 	.word	0x7fefffff
 8014524:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014528:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801452c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014530:	4630      	mov	r0, r6
 8014532:	460f      	mov	r7, r1
 8014534:	f7ec fb30 	bl	8000b98 <__aeabi_d2iz>
 8014538:	f7ec f814 	bl	8000564 <__aeabi_i2d>
 801453c:	4602      	mov	r2, r0
 801453e:	460b      	mov	r3, r1
 8014540:	4630      	mov	r0, r6
 8014542:	4639      	mov	r1, r7
 8014544:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014548:	f7eb febe 	bl	80002c8 <__aeabi_dsub>
 801454c:	4b22      	ldr	r3, [pc, #136]	@ (80145d8 <__ieee754_rem_pio2+0x3f0>)
 801454e:	2200      	movs	r2, #0
 8014550:	f7ec f872 	bl	8000638 <__aeabi_dmul>
 8014554:	460f      	mov	r7, r1
 8014556:	4606      	mov	r6, r0
 8014558:	f7ec fb1e 	bl	8000b98 <__aeabi_d2iz>
 801455c:	f7ec f802 	bl	8000564 <__aeabi_i2d>
 8014560:	4602      	mov	r2, r0
 8014562:	460b      	mov	r3, r1
 8014564:	4630      	mov	r0, r6
 8014566:	4639      	mov	r1, r7
 8014568:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801456c:	f7eb feac 	bl	80002c8 <__aeabi_dsub>
 8014570:	4b19      	ldr	r3, [pc, #100]	@ (80145d8 <__ieee754_rem_pio2+0x3f0>)
 8014572:	2200      	movs	r2, #0
 8014574:	f7ec f860 	bl	8000638 <__aeabi_dmul>
 8014578:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801457c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8014580:	f04f 0803 	mov.w	r8, #3
 8014584:	2600      	movs	r6, #0
 8014586:	2700      	movs	r7, #0
 8014588:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801458c:	4632      	mov	r2, r6
 801458e:	463b      	mov	r3, r7
 8014590:	46c2      	mov	sl, r8
 8014592:	f108 38ff 	add.w	r8, r8, #4294967295
 8014596:	f7ec fab7 	bl	8000b08 <__aeabi_dcmpeq>
 801459a:	2800      	cmp	r0, #0
 801459c:	d1f4      	bne.n	8014588 <__ieee754_rem_pio2+0x3a0>
 801459e:	4b0f      	ldr	r3, [pc, #60]	@ (80145dc <__ieee754_rem_pio2+0x3f4>)
 80145a0:	9301      	str	r3, [sp, #4]
 80145a2:	2302      	movs	r3, #2
 80145a4:	9300      	str	r3, [sp, #0]
 80145a6:	462a      	mov	r2, r5
 80145a8:	4653      	mov	r3, sl
 80145aa:	4621      	mov	r1, r4
 80145ac:	a806      	add	r0, sp, #24
 80145ae:	f000 fa73 	bl	8014a98 <__kernel_rem_pio2>
 80145b2:	9b04      	ldr	r3, [sp, #16]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	4605      	mov	r5, r0
 80145b8:	f6bf ae53 	bge.w	8014262 <__ieee754_rem_pio2+0x7a>
 80145bc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80145c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80145c4:	e9c4 2300 	strd	r2, r3, [r4]
 80145c8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80145cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80145d0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80145d4:	e740      	b.n	8014458 <__ieee754_rem_pio2+0x270>
 80145d6:	bf00      	nop
 80145d8:	41700000 	.word	0x41700000
 80145dc:	080158f0 	.word	0x080158f0

080145e0 <atan>:
 80145e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e4:	ec55 4b10 	vmov	r4, r5, d0
 80145e8:	4bbf      	ldr	r3, [pc, #764]	@ (80148e8 <atan+0x308>)
 80145ea:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80145ee:	429e      	cmp	r6, r3
 80145f0:	46ab      	mov	fp, r5
 80145f2:	d918      	bls.n	8014626 <atan+0x46>
 80145f4:	4bbd      	ldr	r3, [pc, #756]	@ (80148ec <atan+0x30c>)
 80145f6:	429e      	cmp	r6, r3
 80145f8:	d801      	bhi.n	80145fe <atan+0x1e>
 80145fa:	d109      	bne.n	8014610 <atan+0x30>
 80145fc:	b144      	cbz	r4, 8014610 <atan+0x30>
 80145fe:	4622      	mov	r2, r4
 8014600:	462b      	mov	r3, r5
 8014602:	4620      	mov	r0, r4
 8014604:	4629      	mov	r1, r5
 8014606:	f7eb fe61 	bl	80002cc <__adddf3>
 801460a:	4604      	mov	r4, r0
 801460c:	460d      	mov	r5, r1
 801460e:	e006      	b.n	801461e <atan+0x3e>
 8014610:	f1bb 0f00 	cmp.w	fp, #0
 8014614:	f340 812b 	ble.w	801486e <atan+0x28e>
 8014618:	a597      	add	r5, pc, #604	@ (adr r5, 8014878 <atan+0x298>)
 801461a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801461e:	ec45 4b10 	vmov	d0, r4, r5
 8014622:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014626:	4bb2      	ldr	r3, [pc, #712]	@ (80148f0 <atan+0x310>)
 8014628:	429e      	cmp	r6, r3
 801462a:	d813      	bhi.n	8014654 <atan+0x74>
 801462c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8014630:	429e      	cmp	r6, r3
 8014632:	d80c      	bhi.n	801464e <atan+0x6e>
 8014634:	a392      	add	r3, pc, #584	@ (adr r3, 8014880 <atan+0x2a0>)
 8014636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801463a:	4620      	mov	r0, r4
 801463c:	4629      	mov	r1, r5
 801463e:	f7eb fe45 	bl	80002cc <__adddf3>
 8014642:	4bac      	ldr	r3, [pc, #688]	@ (80148f4 <atan+0x314>)
 8014644:	2200      	movs	r2, #0
 8014646:	f7ec fa87 	bl	8000b58 <__aeabi_dcmpgt>
 801464a:	2800      	cmp	r0, #0
 801464c:	d1e7      	bne.n	801461e <atan+0x3e>
 801464e:	f04f 3aff 	mov.w	sl, #4294967295
 8014652:	e029      	b.n	80146a8 <atan+0xc8>
 8014654:	f000 f95c 	bl	8014910 <fabs>
 8014658:	4ba7      	ldr	r3, [pc, #668]	@ (80148f8 <atan+0x318>)
 801465a:	429e      	cmp	r6, r3
 801465c:	ec55 4b10 	vmov	r4, r5, d0
 8014660:	f200 80bc 	bhi.w	80147dc <atan+0x1fc>
 8014664:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8014668:	429e      	cmp	r6, r3
 801466a:	f200 809e 	bhi.w	80147aa <atan+0x1ca>
 801466e:	4622      	mov	r2, r4
 8014670:	462b      	mov	r3, r5
 8014672:	4620      	mov	r0, r4
 8014674:	4629      	mov	r1, r5
 8014676:	f7eb fe29 	bl	80002cc <__adddf3>
 801467a:	4b9e      	ldr	r3, [pc, #632]	@ (80148f4 <atan+0x314>)
 801467c:	2200      	movs	r2, #0
 801467e:	f7eb fe23 	bl	80002c8 <__aeabi_dsub>
 8014682:	2200      	movs	r2, #0
 8014684:	4606      	mov	r6, r0
 8014686:	460f      	mov	r7, r1
 8014688:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801468c:	4620      	mov	r0, r4
 801468e:	4629      	mov	r1, r5
 8014690:	f7eb fe1c 	bl	80002cc <__adddf3>
 8014694:	4602      	mov	r2, r0
 8014696:	460b      	mov	r3, r1
 8014698:	4630      	mov	r0, r6
 801469a:	4639      	mov	r1, r7
 801469c:	f7ec f8f6 	bl	800088c <__aeabi_ddiv>
 80146a0:	f04f 0a00 	mov.w	sl, #0
 80146a4:	4604      	mov	r4, r0
 80146a6:	460d      	mov	r5, r1
 80146a8:	4622      	mov	r2, r4
 80146aa:	462b      	mov	r3, r5
 80146ac:	4620      	mov	r0, r4
 80146ae:	4629      	mov	r1, r5
 80146b0:	f7eb ffc2 	bl	8000638 <__aeabi_dmul>
 80146b4:	4602      	mov	r2, r0
 80146b6:	460b      	mov	r3, r1
 80146b8:	4680      	mov	r8, r0
 80146ba:	4689      	mov	r9, r1
 80146bc:	f7eb ffbc 	bl	8000638 <__aeabi_dmul>
 80146c0:	a371      	add	r3, pc, #452	@ (adr r3, 8014888 <atan+0x2a8>)
 80146c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c6:	4606      	mov	r6, r0
 80146c8:	460f      	mov	r7, r1
 80146ca:	f7eb ffb5 	bl	8000638 <__aeabi_dmul>
 80146ce:	a370      	add	r3, pc, #448	@ (adr r3, 8014890 <atan+0x2b0>)
 80146d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d4:	f7eb fdfa 	bl	80002cc <__adddf3>
 80146d8:	4632      	mov	r2, r6
 80146da:	463b      	mov	r3, r7
 80146dc:	f7eb ffac 	bl	8000638 <__aeabi_dmul>
 80146e0:	a36d      	add	r3, pc, #436	@ (adr r3, 8014898 <atan+0x2b8>)
 80146e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e6:	f7eb fdf1 	bl	80002cc <__adddf3>
 80146ea:	4632      	mov	r2, r6
 80146ec:	463b      	mov	r3, r7
 80146ee:	f7eb ffa3 	bl	8000638 <__aeabi_dmul>
 80146f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80148a0 <atan+0x2c0>)
 80146f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f8:	f7eb fde8 	bl	80002cc <__adddf3>
 80146fc:	4632      	mov	r2, r6
 80146fe:	463b      	mov	r3, r7
 8014700:	f7eb ff9a 	bl	8000638 <__aeabi_dmul>
 8014704:	a368      	add	r3, pc, #416	@ (adr r3, 80148a8 <atan+0x2c8>)
 8014706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470a:	f7eb fddf 	bl	80002cc <__adddf3>
 801470e:	4632      	mov	r2, r6
 8014710:	463b      	mov	r3, r7
 8014712:	f7eb ff91 	bl	8000638 <__aeabi_dmul>
 8014716:	a366      	add	r3, pc, #408	@ (adr r3, 80148b0 <atan+0x2d0>)
 8014718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471c:	f7eb fdd6 	bl	80002cc <__adddf3>
 8014720:	4642      	mov	r2, r8
 8014722:	464b      	mov	r3, r9
 8014724:	f7eb ff88 	bl	8000638 <__aeabi_dmul>
 8014728:	a363      	add	r3, pc, #396	@ (adr r3, 80148b8 <atan+0x2d8>)
 801472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801472e:	4680      	mov	r8, r0
 8014730:	4689      	mov	r9, r1
 8014732:	4630      	mov	r0, r6
 8014734:	4639      	mov	r1, r7
 8014736:	f7eb ff7f 	bl	8000638 <__aeabi_dmul>
 801473a:	a361      	add	r3, pc, #388	@ (adr r3, 80148c0 <atan+0x2e0>)
 801473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014740:	f7eb fdc2 	bl	80002c8 <__aeabi_dsub>
 8014744:	4632      	mov	r2, r6
 8014746:	463b      	mov	r3, r7
 8014748:	f7eb ff76 	bl	8000638 <__aeabi_dmul>
 801474c:	a35e      	add	r3, pc, #376	@ (adr r3, 80148c8 <atan+0x2e8>)
 801474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014752:	f7eb fdb9 	bl	80002c8 <__aeabi_dsub>
 8014756:	4632      	mov	r2, r6
 8014758:	463b      	mov	r3, r7
 801475a:	f7eb ff6d 	bl	8000638 <__aeabi_dmul>
 801475e:	a35c      	add	r3, pc, #368	@ (adr r3, 80148d0 <atan+0x2f0>)
 8014760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014764:	f7eb fdb0 	bl	80002c8 <__aeabi_dsub>
 8014768:	4632      	mov	r2, r6
 801476a:	463b      	mov	r3, r7
 801476c:	f7eb ff64 	bl	8000638 <__aeabi_dmul>
 8014770:	a359      	add	r3, pc, #356	@ (adr r3, 80148d8 <atan+0x2f8>)
 8014772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014776:	f7eb fda7 	bl	80002c8 <__aeabi_dsub>
 801477a:	4632      	mov	r2, r6
 801477c:	463b      	mov	r3, r7
 801477e:	f7eb ff5b 	bl	8000638 <__aeabi_dmul>
 8014782:	4602      	mov	r2, r0
 8014784:	460b      	mov	r3, r1
 8014786:	4640      	mov	r0, r8
 8014788:	4649      	mov	r1, r9
 801478a:	f7eb fd9f 	bl	80002cc <__adddf3>
 801478e:	4622      	mov	r2, r4
 8014790:	462b      	mov	r3, r5
 8014792:	f7eb ff51 	bl	8000638 <__aeabi_dmul>
 8014796:	f1ba 3fff 	cmp.w	sl, #4294967295
 801479a:	4602      	mov	r2, r0
 801479c:	460b      	mov	r3, r1
 801479e:	d148      	bne.n	8014832 <atan+0x252>
 80147a0:	4620      	mov	r0, r4
 80147a2:	4629      	mov	r1, r5
 80147a4:	f7eb fd90 	bl	80002c8 <__aeabi_dsub>
 80147a8:	e72f      	b.n	801460a <atan+0x2a>
 80147aa:	4b52      	ldr	r3, [pc, #328]	@ (80148f4 <atan+0x314>)
 80147ac:	2200      	movs	r2, #0
 80147ae:	4620      	mov	r0, r4
 80147b0:	4629      	mov	r1, r5
 80147b2:	f7eb fd89 	bl	80002c8 <__aeabi_dsub>
 80147b6:	4b4f      	ldr	r3, [pc, #316]	@ (80148f4 <atan+0x314>)
 80147b8:	4606      	mov	r6, r0
 80147ba:	460f      	mov	r7, r1
 80147bc:	2200      	movs	r2, #0
 80147be:	4620      	mov	r0, r4
 80147c0:	4629      	mov	r1, r5
 80147c2:	f7eb fd83 	bl	80002cc <__adddf3>
 80147c6:	4602      	mov	r2, r0
 80147c8:	460b      	mov	r3, r1
 80147ca:	4630      	mov	r0, r6
 80147cc:	4639      	mov	r1, r7
 80147ce:	f7ec f85d 	bl	800088c <__aeabi_ddiv>
 80147d2:	f04f 0a01 	mov.w	sl, #1
 80147d6:	4604      	mov	r4, r0
 80147d8:	460d      	mov	r5, r1
 80147da:	e765      	b.n	80146a8 <atan+0xc8>
 80147dc:	4b47      	ldr	r3, [pc, #284]	@ (80148fc <atan+0x31c>)
 80147de:	429e      	cmp	r6, r3
 80147e0:	d21c      	bcs.n	801481c <atan+0x23c>
 80147e2:	4b47      	ldr	r3, [pc, #284]	@ (8014900 <atan+0x320>)
 80147e4:	2200      	movs	r2, #0
 80147e6:	4620      	mov	r0, r4
 80147e8:	4629      	mov	r1, r5
 80147ea:	f7eb fd6d 	bl	80002c8 <__aeabi_dsub>
 80147ee:	4b44      	ldr	r3, [pc, #272]	@ (8014900 <atan+0x320>)
 80147f0:	4606      	mov	r6, r0
 80147f2:	460f      	mov	r7, r1
 80147f4:	2200      	movs	r2, #0
 80147f6:	4620      	mov	r0, r4
 80147f8:	4629      	mov	r1, r5
 80147fa:	f7eb ff1d 	bl	8000638 <__aeabi_dmul>
 80147fe:	4b3d      	ldr	r3, [pc, #244]	@ (80148f4 <atan+0x314>)
 8014800:	2200      	movs	r2, #0
 8014802:	f7eb fd63 	bl	80002cc <__adddf3>
 8014806:	4602      	mov	r2, r0
 8014808:	460b      	mov	r3, r1
 801480a:	4630      	mov	r0, r6
 801480c:	4639      	mov	r1, r7
 801480e:	f7ec f83d 	bl	800088c <__aeabi_ddiv>
 8014812:	f04f 0a02 	mov.w	sl, #2
 8014816:	4604      	mov	r4, r0
 8014818:	460d      	mov	r5, r1
 801481a:	e745      	b.n	80146a8 <atan+0xc8>
 801481c:	4622      	mov	r2, r4
 801481e:	462b      	mov	r3, r5
 8014820:	4938      	ldr	r1, [pc, #224]	@ (8014904 <atan+0x324>)
 8014822:	2000      	movs	r0, #0
 8014824:	f7ec f832 	bl	800088c <__aeabi_ddiv>
 8014828:	f04f 0a03 	mov.w	sl, #3
 801482c:	4604      	mov	r4, r0
 801482e:	460d      	mov	r5, r1
 8014830:	e73a      	b.n	80146a8 <atan+0xc8>
 8014832:	4b35      	ldr	r3, [pc, #212]	@ (8014908 <atan+0x328>)
 8014834:	4e35      	ldr	r6, [pc, #212]	@ (801490c <atan+0x32c>)
 8014836:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801483e:	f7eb fd43 	bl	80002c8 <__aeabi_dsub>
 8014842:	4622      	mov	r2, r4
 8014844:	462b      	mov	r3, r5
 8014846:	f7eb fd3f 	bl	80002c8 <__aeabi_dsub>
 801484a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801484e:	4602      	mov	r2, r0
 8014850:	460b      	mov	r3, r1
 8014852:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014856:	f7eb fd37 	bl	80002c8 <__aeabi_dsub>
 801485a:	f1bb 0f00 	cmp.w	fp, #0
 801485e:	4604      	mov	r4, r0
 8014860:	460d      	mov	r5, r1
 8014862:	f6bf aedc 	bge.w	801461e <atan+0x3e>
 8014866:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801486a:	461d      	mov	r5, r3
 801486c:	e6d7      	b.n	801461e <atan+0x3e>
 801486e:	a51c      	add	r5, pc, #112	@ (adr r5, 80148e0 <atan+0x300>)
 8014870:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014874:	e6d3      	b.n	801461e <atan+0x3e>
 8014876:	bf00      	nop
 8014878:	54442d18 	.word	0x54442d18
 801487c:	3ff921fb 	.word	0x3ff921fb
 8014880:	8800759c 	.word	0x8800759c
 8014884:	7e37e43c 	.word	0x7e37e43c
 8014888:	e322da11 	.word	0xe322da11
 801488c:	3f90ad3a 	.word	0x3f90ad3a
 8014890:	24760deb 	.word	0x24760deb
 8014894:	3fa97b4b 	.word	0x3fa97b4b
 8014898:	a0d03d51 	.word	0xa0d03d51
 801489c:	3fb10d66 	.word	0x3fb10d66
 80148a0:	c54c206e 	.word	0xc54c206e
 80148a4:	3fb745cd 	.word	0x3fb745cd
 80148a8:	920083ff 	.word	0x920083ff
 80148ac:	3fc24924 	.word	0x3fc24924
 80148b0:	5555550d 	.word	0x5555550d
 80148b4:	3fd55555 	.word	0x3fd55555
 80148b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80148bc:	bfa2b444 	.word	0xbfa2b444
 80148c0:	52defd9a 	.word	0x52defd9a
 80148c4:	3fadde2d 	.word	0x3fadde2d
 80148c8:	af749a6d 	.word	0xaf749a6d
 80148cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80148d0:	fe231671 	.word	0xfe231671
 80148d4:	3fbc71c6 	.word	0x3fbc71c6
 80148d8:	9998ebc4 	.word	0x9998ebc4
 80148dc:	3fc99999 	.word	0x3fc99999
 80148e0:	54442d18 	.word	0x54442d18
 80148e4:	bff921fb 	.word	0xbff921fb
 80148e8:	440fffff 	.word	0x440fffff
 80148ec:	7ff00000 	.word	0x7ff00000
 80148f0:	3fdbffff 	.word	0x3fdbffff
 80148f4:	3ff00000 	.word	0x3ff00000
 80148f8:	3ff2ffff 	.word	0x3ff2ffff
 80148fc:	40038000 	.word	0x40038000
 8014900:	3ff80000 	.word	0x3ff80000
 8014904:	bff00000 	.word	0xbff00000
 8014908:	080159f8 	.word	0x080159f8
 801490c:	08015a18 	.word	0x08015a18

08014910 <fabs>:
 8014910:	ec51 0b10 	vmov	r0, r1, d0
 8014914:	4602      	mov	r2, r0
 8014916:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801491a:	ec43 2b10 	vmov	d0, r2, r3
 801491e:	4770      	bx	lr

08014920 <scalbn>:
 8014920:	b570      	push	{r4, r5, r6, lr}
 8014922:	ec55 4b10 	vmov	r4, r5, d0
 8014926:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801492a:	4606      	mov	r6, r0
 801492c:	462b      	mov	r3, r5
 801492e:	b991      	cbnz	r1, 8014956 <scalbn+0x36>
 8014930:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014934:	4323      	orrs	r3, r4
 8014936:	d03d      	beq.n	80149b4 <scalbn+0x94>
 8014938:	4b35      	ldr	r3, [pc, #212]	@ (8014a10 <scalbn+0xf0>)
 801493a:	4620      	mov	r0, r4
 801493c:	4629      	mov	r1, r5
 801493e:	2200      	movs	r2, #0
 8014940:	f7eb fe7a 	bl	8000638 <__aeabi_dmul>
 8014944:	4b33      	ldr	r3, [pc, #204]	@ (8014a14 <scalbn+0xf4>)
 8014946:	429e      	cmp	r6, r3
 8014948:	4604      	mov	r4, r0
 801494a:	460d      	mov	r5, r1
 801494c:	da0f      	bge.n	801496e <scalbn+0x4e>
 801494e:	a328      	add	r3, pc, #160	@ (adr r3, 80149f0 <scalbn+0xd0>)
 8014950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014954:	e01e      	b.n	8014994 <scalbn+0x74>
 8014956:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801495a:	4291      	cmp	r1, r2
 801495c:	d10b      	bne.n	8014976 <scalbn+0x56>
 801495e:	4622      	mov	r2, r4
 8014960:	4620      	mov	r0, r4
 8014962:	4629      	mov	r1, r5
 8014964:	f7eb fcb2 	bl	80002cc <__adddf3>
 8014968:	4604      	mov	r4, r0
 801496a:	460d      	mov	r5, r1
 801496c:	e022      	b.n	80149b4 <scalbn+0x94>
 801496e:	460b      	mov	r3, r1
 8014970:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014974:	3936      	subs	r1, #54	@ 0x36
 8014976:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801497a:	4296      	cmp	r6, r2
 801497c:	dd0d      	ble.n	801499a <scalbn+0x7a>
 801497e:	2d00      	cmp	r5, #0
 8014980:	a11d      	add	r1, pc, #116	@ (adr r1, 80149f8 <scalbn+0xd8>)
 8014982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014986:	da02      	bge.n	801498e <scalbn+0x6e>
 8014988:	a11d      	add	r1, pc, #116	@ (adr r1, 8014a00 <scalbn+0xe0>)
 801498a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801498e:	a31a      	add	r3, pc, #104	@ (adr r3, 80149f8 <scalbn+0xd8>)
 8014990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014994:	f7eb fe50 	bl	8000638 <__aeabi_dmul>
 8014998:	e7e6      	b.n	8014968 <scalbn+0x48>
 801499a:	1872      	adds	r2, r6, r1
 801499c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80149a0:	428a      	cmp	r2, r1
 80149a2:	dcec      	bgt.n	801497e <scalbn+0x5e>
 80149a4:	2a00      	cmp	r2, #0
 80149a6:	dd08      	ble.n	80149ba <scalbn+0x9a>
 80149a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80149ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80149b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80149b4:	ec45 4b10 	vmov	d0, r4, r5
 80149b8:	bd70      	pop	{r4, r5, r6, pc}
 80149ba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80149be:	da08      	bge.n	80149d2 <scalbn+0xb2>
 80149c0:	2d00      	cmp	r5, #0
 80149c2:	a10b      	add	r1, pc, #44	@ (adr r1, 80149f0 <scalbn+0xd0>)
 80149c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149c8:	dac1      	bge.n	801494e <scalbn+0x2e>
 80149ca:	a10f      	add	r1, pc, #60	@ (adr r1, 8014a08 <scalbn+0xe8>)
 80149cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149d0:	e7bd      	b.n	801494e <scalbn+0x2e>
 80149d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80149d6:	3236      	adds	r2, #54	@ 0x36
 80149d8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80149dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80149e0:	4620      	mov	r0, r4
 80149e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014a18 <scalbn+0xf8>)
 80149e4:	4629      	mov	r1, r5
 80149e6:	2200      	movs	r2, #0
 80149e8:	e7d4      	b.n	8014994 <scalbn+0x74>
 80149ea:	bf00      	nop
 80149ec:	f3af 8000 	nop.w
 80149f0:	c2f8f359 	.word	0xc2f8f359
 80149f4:	01a56e1f 	.word	0x01a56e1f
 80149f8:	8800759c 	.word	0x8800759c
 80149fc:	7e37e43c 	.word	0x7e37e43c
 8014a00:	8800759c 	.word	0x8800759c
 8014a04:	fe37e43c 	.word	0xfe37e43c
 8014a08:	c2f8f359 	.word	0xc2f8f359
 8014a0c:	81a56e1f 	.word	0x81a56e1f
 8014a10:	43500000 	.word	0x43500000
 8014a14:	ffff3cb0 	.word	0xffff3cb0
 8014a18:	3c900000 	.word	0x3c900000

08014a1c <with_errno>:
 8014a1c:	b510      	push	{r4, lr}
 8014a1e:	ed2d 8b02 	vpush	{d8}
 8014a22:	eeb0 8a40 	vmov.f32	s16, s0
 8014a26:	eef0 8a60 	vmov.f32	s17, s1
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	f7fb fd78 	bl	8010520 <__errno>
 8014a30:	eeb0 0a48 	vmov.f32	s0, s16
 8014a34:	eef0 0a68 	vmov.f32	s1, s17
 8014a38:	ecbd 8b02 	vpop	{d8}
 8014a3c:	6004      	str	r4, [r0, #0]
 8014a3e:	bd10      	pop	{r4, pc}

08014a40 <xflow>:
 8014a40:	4603      	mov	r3, r0
 8014a42:	b507      	push	{r0, r1, r2, lr}
 8014a44:	ec51 0b10 	vmov	r0, r1, d0
 8014a48:	b183      	cbz	r3, 8014a6c <xflow+0x2c>
 8014a4a:	4602      	mov	r2, r0
 8014a4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014a50:	e9cd 2300 	strd	r2, r3, [sp]
 8014a54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a58:	f7eb fdee 	bl	8000638 <__aeabi_dmul>
 8014a5c:	ec41 0b10 	vmov	d0, r0, r1
 8014a60:	2022      	movs	r0, #34	@ 0x22
 8014a62:	b003      	add	sp, #12
 8014a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a68:	f7ff bfd8 	b.w	8014a1c <with_errno>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	460b      	mov	r3, r1
 8014a70:	e7ee      	b.n	8014a50 <xflow+0x10>
 8014a72:	0000      	movs	r0, r0
 8014a74:	0000      	movs	r0, r0
	...

08014a78 <__math_uflow>:
 8014a78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014a80 <__math_uflow+0x8>
 8014a7c:	f7ff bfe0 	b.w	8014a40 <xflow>
 8014a80:	00000000 	.word	0x00000000
 8014a84:	10000000 	.word	0x10000000

08014a88 <__math_oflow>:
 8014a88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014a90 <__math_oflow+0x8>
 8014a8c:	f7ff bfd8 	b.w	8014a40 <xflow>
 8014a90:	00000000 	.word	0x00000000
 8014a94:	70000000 	.word	0x70000000

08014a98 <__kernel_rem_pio2>:
 8014a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a9c:	ed2d 8b02 	vpush	{d8}
 8014aa0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8014aa4:	f112 0f14 	cmn.w	r2, #20
 8014aa8:	9306      	str	r3, [sp, #24]
 8014aaa:	9104      	str	r1, [sp, #16]
 8014aac:	4bbe      	ldr	r3, [pc, #760]	@ (8014da8 <__kernel_rem_pio2+0x310>)
 8014aae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014ab0:	9008      	str	r0, [sp, #32]
 8014ab2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ab6:	9300      	str	r3, [sp, #0]
 8014ab8:	9b06      	ldr	r3, [sp, #24]
 8014aba:	f103 33ff 	add.w	r3, r3, #4294967295
 8014abe:	bfa8      	it	ge
 8014ac0:	1ed4      	subge	r4, r2, #3
 8014ac2:	9305      	str	r3, [sp, #20]
 8014ac4:	bfb2      	itee	lt
 8014ac6:	2400      	movlt	r4, #0
 8014ac8:	2318      	movge	r3, #24
 8014aca:	fb94 f4f3 	sdivge	r4, r4, r3
 8014ace:	f06f 0317 	mvn.w	r3, #23
 8014ad2:	fb04 3303 	mla	r3, r4, r3, r3
 8014ad6:	eb03 0b02 	add.w	fp, r3, r2
 8014ada:	9b00      	ldr	r3, [sp, #0]
 8014adc:	9a05      	ldr	r2, [sp, #20]
 8014ade:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8014d98 <__kernel_rem_pio2+0x300>
 8014ae2:	eb03 0802 	add.w	r8, r3, r2
 8014ae6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014ae8:	1aa7      	subs	r7, r4, r2
 8014aea:	ae20      	add	r6, sp, #128	@ 0x80
 8014aec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014af0:	2500      	movs	r5, #0
 8014af2:	4545      	cmp	r5, r8
 8014af4:	dd13      	ble.n	8014b1e <__kernel_rem_pio2+0x86>
 8014af6:	9b06      	ldr	r3, [sp, #24]
 8014af8:	aa20      	add	r2, sp, #128	@ 0x80
 8014afa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014afe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8014b02:	f04f 0800 	mov.w	r8, #0
 8014b06:	9b00      	ldr	r3, [sp, #0]
 8014b08:	4598      	cmp	r8, r3
 8014b0a:	dc31      	bgt.n	8014b70 <__kernel_rem_pio2+0xd8>
 8014b0c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8014d98 <__kernel_rem_pio2+0x300>
 8014b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014b14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b18:	462f      	mov	r7, r5
 8014b1a:	2600      	movs	r6, #0
 8014b1c:	e01b      	b.n	8014b56 <__kernel_rem_pio2+0xbe>
 8014b1e:	42ef      	cmn	r7, r5
 8014b20:	d407      	bmi.n	8014b32 <__kernel_rem_pio2+0x9a>
 8014b22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014b26:	f7eb fd1d 	bl	8000564 <__aeabi_i2d>
 8014b2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014b2e:	3501      	adds	r5, #1
 8014b30:	e7df      	b.n	8014af2 <__kernel_rem_pio2+0x5a>
 8014b32:	ec51 0b18 	vmov	r0, r1, d8
 8014b36:	e7f8      	b.n	8014b2a <__kernel_rem_pio2+0x92>
 8014b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014b40:	f7eb fd7a 	bl	8000638 <__aeabi_dmul>
 8014b44:	4602      	mov	r2, r0
 8014b46:	460b      	mov	r3, r1
 8014b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b4c:	f7eb fbbe 	bl	80002cc <__adddf3>
 8014b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b54:	3601      	adds	r6, #1
 8014b56:	9b05      	ldr	r3, [sp, #20]
 8014b58:	429e      	cmp	r6, r3
 8014b5a:	f1a7 0708 	sub.w	r7, r7, #8
 8014b5e:	ddeb      	ble.n	8014b38 <__kernel_rem_pio2+0xa0>
 8014b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014b64:	f108 0801 	add.w	r8, r8, #1
 8014b68:	ecaa 7b02 	vstmia	sl!, {d7}
 8014b6c:	3508      	adds	r5, #8
 8014b6e:	e7ca      	b.n	8014b06 <__kernel_rem_pio2+0x6e>
 8014b70:	9b00      	ldr	r3, [sp, #0]
 8014b72:	f8dd 8000 	ldr.w	r8, [sp]
 8014b76:	aa0c      	add	r2, sp, #48	@ 0x30
 8014b78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014b7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8014b7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014b80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b86:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014b8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014b8c:	ab98      	add	r3, sp, #608	@ 0x260
 8014b8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014b92:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8014b96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b9a:	ac0c      	add	r4, sp, #48	@ 0x30
 8014b9c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014b9e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8014ba2:	46a1      	mov	r9, r4
 8014ba4:	46c2      	mov	sl, r8
 8014ba6:	f1ba 0f00 	cmp.w	sl, #0
 8014baa:	f1a5 0508 	sub.w	r5, r5, #8
 8014bae:	dc77      	bgt.n	8014ca0 <__kernel_rem_pio2+0x208>
 8014bb0:	4658      	mov	r0, fp
 8014bb2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8014bb6:	f7ff feb3 	bl	8014920 <scalbn>
 8014bba:	ec57 6b10 	vmov	r6, r7, d0
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	4639      	mov	r1, r7
 8014bc8:	f7eb fd36 	bl	8000638 <__aeabi_dmul>
 8014bcc:	ec41 0b10 	vmov	d0, r0, r1
 8014bd0:	f000 faba 	bl	8015148 <floor>
 8014bd4:	4b75      	ldr	r3, [pc, #468]	@ (8014dac <__kernel_rem_pio2+0x314>)
 8014bd6:	ec51 0b10 	vmov	r0, r1, d0
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f7eb fd2c 	bl	8000638 <__aeabi_dmul>
 8014be0:	4602      	mov	r2, r0
 8014be2:	460b      	mov	r3, r1
 8014be4:	4630      	mov	r0, r6
 8014be6:	4639      	mov	r1, r7
 8014be8:	f7eb fb6e 	bl	80002c8 <__aeabi_dsub>
 8014bec:	460f      	mov	r7, r1
 8014bee:	4606      	mov	r6, r0
 8014bf0:	f7eb ffd2 	bl	8000b98 <__aeabi_d2iz>
 8014bf4:	9002      	str	r0, [sp, #8]
 8014bf6:	f7eb fcb5 	bl	8000564 <__aeabi_i2d>
 8014bfa:	4602      	mov	r2, r0
 8014bfc:	460b      	mov	r3, r1
 8014bfe:	4630      	mov	r0, r6
 8014c00:	4639      	mov	r1, r7
 8014c02:	f7eb fb61 	bl	80002c8 <__aeabi_dsub>
 8014c06:	f1bb 0f00 	cmp.w	fp, #0
 8014c0a:	4606      	mov	r6, r0
 8014c0c:	460f      	mov	r7, r1
 8014c0e:	dd6c      	ble.n	8014cea <__kernel_rem_pio2+0x252>
 8014c10:	f108 31ff 	add.w	r1, r8, #4294967295
 8014c14:	ab0c      	add	r3, sp, #48	@ 0x30
 8014c16:	9d02      	ldr	r5, [sp, #8]
 8014c18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014c1c:	f1cb 0018 	rsb	r0, fp, #24
 8014c20:	fa43 f200 	asr.w	r2, r3, r0
 8014c24:	4415      	add	r5, r2
 8014c26:	4082      	lsls	r2, r0
 8014c28:	1a9b      	subs	r3, r3, r2
 8014c2a:	aa0c      	add	r2, sp, #48	@ 0x30
 8014c2c:	9502      	str	r5, [sp, #8]
 8014c2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014c32:	f1cb 0217 	rsb	r2, fp, #23
 8014c36:	fa43 f902 	asr.w	r9, r3, r2
 8014c3a:	f1b9 0f00 	cmp.w	r9, #0
 8014c3e:	dd64      	ble.n	8014d0a <__kernel_rem_pio2+0x272>
 8014c40:	9b02      	ldr	r3, [sp, #8]
 8014c42:	2200      	movs	r2, #0
 8014c44:	3301      	adds	r3, #1
 8014c46:	9302      	str	r3, [sp, #8]
 8014c48:	4615      	mov	r5, r2
 8014c4a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014c4e:	4590      	cmp	r8, r2
 8014c50:	f300 80b8 	bgt.w	8014dc4 <__kernel_rem_pio2+0x32c>
 8014c54:	f1bb 0f00 	cmp.w	fp, #0
 8014c58:	dd07      	ble.n	8014c6a <__kernel_rem_pio2+0x1d2>
 8014c5a:	f1bb 0f01 	cmp.w	fp, #1
 8014c5e:	f000 80bf 	beq.w	8014de0 <__kernel_rem_pio2+0x348>
 8014c62:	f1bb 0f02 	cmp.w	fp, #2
 8014c66:	f000 80c6 	beq.w	8014df6 <__kernel_rem_pio2+0x35e>
 8014c6a:	f1b9 0f02 	cmp.w	r9, #2
 8014c6e:	d14c      	bne.n	8014d0a <__kernel_rem_pio2+0x272>
 8014c70:	4632      	mov	r2, r6
 8014c72:	463b      	mov	r3, r7
 8014c74:	494e      	ldr	r1, [pc, #312]	@ (8014db0 <__kernel_rem_pio2+0x318>)
 8014c76:	2000      	movs	r0, #0
 8014c78:	f7eb fb26 	bl	80002c8 <__aeabi_dsub>
 8014c7c:	4606      	mov	r6, r0
 8014c7e:	460f      	mov	r7, r1
 8014c80:	2d00      	cmp	r5, #0
 8014c82:	d042      	beq.n	8014d0a <__kernel_rem_pio2+0x272>
 8014c84:	4658      	mov	r0, fp
 8014c86:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8014da0 <__kernel_rem_pio2+0x308>
 8014c8a:	f7ff fe49 	bl	8014920 <scalbn>
 8014c8e:	4630      	mov	r0, r6
 8014c90:	4639      	mov	r1, r7
 8014c92:	ec53 2b10 	vmov	r2, r3, d0
 8014c96:	f7eb fb17 	bl	80002c8 <__aeabi_dsub>
 8014c9a:	4606      	mov	r6, r0
 8014c9c:	460f      	mov	r7, r1
 8014c9e:	e034      	b.n	8014d0a <__kernel_rem_pio2+0x272>
 8014ca0:	4b44      	ldr	r3, [pc, #272]	@ (8014db4 <__kernel_rem_pio2+0x31c>)
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ca8:	f7eb fcc6 	bl	8000638 <__aeabi_dmul>
 8014cac:	f7eb ff74 	bl	8000b98 <__aeabi_d2iz>
 8014cb0:	f7eb fc58 	bl	8000564 <__aeabi_i2d>
 8014cb4:	4b40      	ldr	r3, [pc, #256]	@ (8014db8 <__kernel_rem_pio2+0x320>)
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	4606      	mov	r6, r0
 8014cba:	460f      	mov	r7, r1
 8014cbc:	f7eb fcbc 	bl	8000638 <__aeabi_dmul>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	460b      	mov	r3, r1
 8014cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cc8:	f7eb fafe 	bl	80002c8 <__aeabi_dsub>
 8014ccc:	f7eb ff64 	bl	8000b98 <__aeabi_d2iz>
 8014cd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014cd4:	f849 0b04 	str.w	r0, [r9], #4
 8014cd8:	4639      	mov	r1, r7
 8014cda:	4630      	mov	r0, r6
 8014cdc:	f7eb faf6 	bl	80002cc <__adddf3>
 8014ce0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ce8:	e75d      	b.n	8014ba6 <__kernel_rem_pio2+0x10e>
 8014cea:	d107      	bne.n	8014cfc <__kernel_rem_pio2+0x264>
 8014cec:	f108 33ff 	add.w	r3, r8, #4294967295
 8014cf0:	aa0c      	add	r2, sp, #48	@ 0x30
 8014cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cf6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014cfa:	e79e      	b.n	8014c3a <__kernel_rem_pio2+0x1a2>
 8014cfc:	4b2f      	ldr	r3, [pc, #188]	@ (8014dbc <__kernel_rem_pio2+0x324>)
 8014cfe:	2200      	movs	r2, #0
 8014d00:	f7eb ff20 	bl	8000b44 <__aeabi_dcmpge>
 8014d04:	2800      	cmp	r0, #0
 8014d06:	d143      	bne.n	8014d90 <__kernel_rem_pio2+0x2f8>
 8014d08:	4681      	mov	r9, r0
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	4630      	mov	r0, r6
 8014d10:	4639      	mov	r1, r7
 8014d12:	f7eb fef9 	bl	8000b08 <__aeabi_dcmpeq>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	f000 80bf 	beq.w	8014e9a <__kernel_rem_pio2+0x402>
 8014d1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8014d20:	2200      	movs	r2, #0
 8014d22:	9900      	ldr	r1, [sp, #0]
 8014d24:	428b      	cmp	r3, r1
 8014d26:	da6e      	bge.n	8014e06 <__kernel_rem_pio2+0x36e>
 8014d28:	2a00      	cmp	r2, #0
 8014d2a:	f000 8089 	beq.w	8014e40 <__kernel_rem_pio2+0x3a8>
 8014d2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014d32:	ab0c      	add	r3, sp, #48	@ 0x30
 8014d34:	f1ab 0b18 	sub.w	fp, fp, #24
 8014d38:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d0f6      	beq.n	8014d2e <__kernel_rem_pio2+0x296>
 8014d40:	4658      	mov	r0, fp
 8014d42:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8014da0 <__kernel_rem_pio2+0x308>
 8014d46:	f7ff fdeb 	bl	8014920 <scalbn>
 8014d4a:	f108 0301 	add.w	r3, r8, #1
 8014d4e:	00da      	lsls	r2, r3, #3
 8014d50:	9205      	str	r2, [sp, #20]
 8014d52:	ec55 4b10 	vmov	r4, r5, d0
 8014d56:	aa70      	add	r2, sp, #448	@ 0x1c0
 8014d58:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8014db4 <__kernel_rem_pio2+0x31c>
 8014d5c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014d60:	4646      	mov	r6, r8
 8014d62:	f04f 0a00 	mov.w	sl, #0
 8014d66:	2e00      	cmp	r6, #0
 8014d68:	f280 80cf 	bge.w	8014f0a <__kernel_rem_pio2+0x472>
 8014d6c:	4644      	mov	r4, r8
 8014d6e:	2c00      	cmp	r4, #0
 8014d70:	f2c0 80fd 	blt.w	8014f6e <__kernel_rem_pio2+0x4d6>
 8014d74:	4b12      	ldr	r3, [pc, #72]	@ (8014dc0 <__kernel_rem_pio2+0x328>)
 8014d76:	461f      	mov	r7, r3
 8014d78:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014d7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014d7e:	9306      	str	r3, [sp, #24]
 8014d80:	f04f 0a00 	mov.w	sl, #0
 8014d84:	f04f 0b00 	mov.w	fp, #0
 8014d88:	2600      	movs	r6, #0
 8014d8a:	eba8 0504 	sub.w	r5, r8, r4
 8014d8e:	e0e2      	b.n	8014f56 <__kernel_rem_pio2+0x4be>
 8014d90:	f04f 0902 	mov.w	r9, #2
 8014d94:	e754      	b.n	8014c40 <__kernel_rem_pio2+0x1a8>
 8014d96:	bf00      	nop
	...
 8014da4:	3ff00000 	.word	0x3ff00000
 8014da8:	08015a78 	.word	0x08015a78
 8014dac:	40200000 	.word	0x40200000
 8014db0:	3ff00000 	.word	0x3ff00000
 8014db4:	3e700000 	.word	0x3e700000
 8014db8:	41700000 	.word	0x41700000
 8014dbc:	3fe00000 	.word	0x3fe00000
 8014dc0:	08015a38 	.word	0x08015a38
 8014dc4:	f854 3b04 	ldr.w	r3, [r4], #4
 8014dc8:	b945      	cbnz	r5, 8014ddc <__kernel_rem_pio2+0x344>
 8014dca:	b123      	cbz	r3, 8014dd6 <__kernel_rem_pio2+0x33e>
 8014dcc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8014dd0:	f844 3c04 	str.w	r3, [r4, #-4]
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	3201      	adds	r2, #1
 8014dd8:	461d      	mov	r5, r3
 8014dda:	e738      	b.n	8014c4e <__kernel_rem_pio2+0x1b6>
 8014ddc:	1acb      	subs	r3, r1, r3
 8014dde:	e7f7      	b.n	8014dd0 <__kernel_rem_pio2+0x338>
 8014de0:	f108 32ff 	add.w	r2, r8, #4294967295
 8014de4:	ab0c      	add	r3, sp, #48	@ 0x30
 8014de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014dee:	a90c      	add	r1, sp, #48	@ 0x30
 8014df0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014df4:	e739      	b.n	8014c6a <__kernel_rem_pio2+0x1d2>
 8014df6:	f108 32ff 	add.w	r2, r8, #4294967295
 8014dfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8014dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014e04:	e7f3      	b.n	8014dee <__kernel_rem_pio2+0x356>
 8014e06:	a90c      	add	r1, sp, #48	@ 0x30
 8014e08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014e0c:	3b01      	subs	r3, #1
 8014e0e:	430a      	orrs	r2, r1
 8014e10:	e787      	b.n	8014d22 <__kernel_rem_pio2+0x28a>
 8014e12:	3401      	adds	r4, #1
 8014e14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014e18:	2a00      	cmp	r2, #0
 8014e1a:	d0fa      	beq.n	8014e12 <__kernel_rem_pio2+0x37a>
 8014e1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014e1e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014e22:	eb0d 0503 	add.w	r5, sp, r3
 8014e26:	9b06      	ldr	r3, [sp, #24]
 8014e28:	aa20      	add	r2, sp, #128	@ 0x80
 8014e2a:	4443      	add	r3, r8
 8014e2c:	f108 0701 	add.w	r7, r8, #1
 8014e30:	3d98      	subs	r5, #152	@ 0x98
 8014e32:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8014e36:	4444      	add	r4, r8
 8014e38:	42bc      	cmp	r4, r7
 8014e3a:	da04      	bge.n	8014e46 <__kernel_rem_pio2+0x3ae>
 8014e3c:	46a0      	mov	r8, r4
 8014e3e:	e6a2      	b.n	8014b86 <__kernel_rem_pio2+0xee>
 8014e40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e42:	2401      	movs	r4, #1
 8014e44:	e7e6      	b.n	8014e14 <__kernel_rem_pio2+0x37c>
 8014e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e48:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014e4c:	f7eb fb8a 	bl	8000564 <__aeabi_i2d>
 8014e50:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8015118 <__kernel_rem_pio2+0x680>
 8014e54:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014e58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014e60:	46b2      	mov	sl, r6
 8014e62:	f04f 0800 	mov.w	r8, #0
 8014e66:	9b05      	ldr	r3, [sp, #20]
 8014e68:	4598      	cmp	r8, r3
 8014e6a:	dd05      	ble.n	8014e78 <__kernel_rem_pio2+0x3e0>
 8014e6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014e70:	3701      	adds	r7, #1
 8014e72:	eca5 7b02 	vstmia	r5!, {d7}
 8014e76:	e7df      	b.n	8014e38 <__kernel_rem_pio2+0x3a0>
 8014e78:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8014e7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014e80:	f7eb fbda 	bl	8000638 <__aeabi_dmul>
 8014e84:	4602      	mov	r2, r0
 8014e86:	460b      	mov	r3, r1
 8014e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e8c:	f7eb fa1e 	bl	80002cc <__adddf3>
 8014e90:	f108 0801 	add.w	r8, r8, #1
 8014e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e98:	e7e5      	b.n	8014e66 <__kernel_rem_pio2+0x3ce>
 8014e9a:	f1cb 0000 	rsb	r0, fp, #0
 8014e9e:	ec47 6b10 	vmov	d0, r6, r7
 8014ea2:	f7ff fd3d 	bl	8014920 <scalbn>
 8014ea6:	ec55 4b10 	vmov	r4, r5, d0
 8014eaa:	4b9d      	ldr	r3, [pc, #628]	@ (8015120 <__kernel_rem_pio2+0x688>)
 8014eac:	2200      	movs	r2, #0
 8014eae:	4620      	mov	r0, r4
 8014eb0:	4629      	mov	r1, r5
 8014eb2:	f7eb fe47 	bl	8000b44 <__aeabi_dcmpge>
 8014eb6:	b300      	cbz	r0, 8014efa <__kernel_rem_pio2+0x462>
 8014eb8:	4b9a      	ldr	r3, [pc, #616]	@ (8015124 <__kernel_rem_pio2+0x68c>)
 8014eba:	2200      	movs	r2, #0
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	4629      	mov	r1, r5
 8014ec0:	f7eb fbba 	bl	8000638 <__aeabi_dmul>
 8014ec4:	f7eb fe68 	bl	8000b98 <__aeabi_d2iz>
 8014ec8:	4606      	mov	r6, r0
 8014eca:	f7eb fb4b 	bl	8000564 <__aeabi_i2d>
 8014ece:	4b94      	ldr	r3, [pc, #592]	@ (8015120 <__kernel_rem_pio2+0x688>)
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	f7eb fbb1 	bl	8000638 <__aeabi_dmul>
 8014ed6:	460b      	mov	r3, r1
 8014ed8:	4602      	mov	r2, r0
 8014eda:	4629      	mov	r1, r5
 8014edc:	4620      	mov	r0, r4
 8014ede:	f7eb f9f3 	bl	80002c8 <__aeabi_dsub>
 8014ee2:	f7eb fe59 	bl	8000b98 <__aeabi_d2iz>
 8014ee6:	ab0c      	add	r3, sp, #48	@ 0x30
 8014ee8:	f10b 0b18 	add.w	fp, fp, #24
 8014eec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014ef0:	f108 0801 	add.w	r8, r8, #1
 8014ef4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8014ef8:	e722      	b.n	8014d40 <__kernel_rem_pio2+0x2a8>
 8014efa:	4620      	mov	r0, r4
 8014efc:	4629      	mov	r1, r5
 8014efe:	f7eb fe4b 	bl	8000b98 <__aeabi_d2iz>
 8014f02:	ab0c      	add	r3, sp, #48	@ 0x30
 8014f04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014f08:	e71a      	b.n	8014d40 <__kernel_rem_pio2+0x2a8>
 8014f0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8014f0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014f10:	f7eb fb28 	bl	8000564 <__aeabi_i2d>
 8014f14:	4622      	mov	r2, r4
 8014f16:	462b      	mov	r3, r5
 8014f18:	f7eb fb8e 	bl	8000638 <__aeabi_dmul>
 8014f1c:	4652      	mov	r2, sl
 8014f1e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8014f22:	465b      	mov	r3, fp
 8014f24:	4620      	mov	r0, r4
 8014f26:	4629      	mov	r1, r5
 8014f28:	f7eb fb86 	bl	8000638 <__aeabi_dmul>
 8014f2c:	3e01      	subs	r6, #1
 8014f2e:	4604      	mov	r4, r0
 8014f30:	460d      	mov	r5, r1
 8014f32:	e718      	b.n	8014d66 <__kernel_rem_pio2+0x2ce>
 8014f34:	9906      	ldr	r1, [sp, #24]
 8014f36:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8014f3a:	9106      	str	r1, [sp, #24]
 8014f3c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8014f40:	f7eb fb7a 	bl	8000638 <__aeabi_dmul>
 8014f44:	4602      	mov	r2, r0
 8014f46:	460b      	mov	r3, r1
 8014f48:	4650      	mov	r0, sl
 8014f4a:	4659      	mov	r1, fp
 8014f4c:	f7eb f9be 	bl	80002cc <__adddf3>
 8014f50:	3601      	adds	r6, #1
 8014f52:	4682      	mov	sl, r0
 8014f54:	468b      	mov	fp, r1
 8014f56:	9b00      	ldr	r3, [sp, #0]
 8014f58:	429e      	cmp	r6, r3
 8014f5a:	dc01      	bgt.n	8014f60 <__kernel_rem_pio2+0x4c8>
 8014f5c:	42b5      	cmp	r5, r6
 8014f5e:	dae9      	bge.n	8014f34 <__kernel_rem_pio2+0x49c>
 8014f60:	ab48      	add	r3, sp, #288	@ 0x120
 8014f62:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014f66:	e9c5 ab00 	strd	sl, fp, [r5]
 8014f6a:	3c01      	subs	r4, #1
 8014f6c:	e6ff      	b.n	8014d6e <__kernel_rem_pio2+0x2d6>
 8014f6e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014f70:	2b02      	cmp	r3, #2
 8014f72:	dc0b      	bgt.n	8014f8c <__kernel_rem_pio2+0x4f4>
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	dc39      	bgt.n	8014fec <__kernel_rem_pio2+0x554>
 8014f78:	d05d      	beq.n	8015036 <__kernel_rem_pio2+0x59e>
 8014f7a:	9b02      	ldr	r3, [sp, #8]
 8014f7c:	f003 0007 	and.w	r0, r3, #7
 8014f80:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8014f84:	ecbd 8b02 	vpop	{d8}
 8014f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f8c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014f8e:	2b03      	cmp	r3, #3
 8014f90:	d1f3      	bne.n	8014f7a <__kernel_rem_pio2+0x4e2>
 8014f92:	9b05      	ldr	r3, [sp, #20]
 8014f94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014f98:	eb0d 0403 	add.w	r4, sp, r3
 8014f9c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014fa0:	4625      	mov	r5, r4
 8014fa2:	46c2      	mov	sl, r8
 8014fa4:	f1ba 0f00 	cmp.w	sl, #0
 8014fa8:	f1a5 0508 	sub.w	r5, r5, #8
 8014fac:	dc6b      	bgt.n	8015086 <__kernel_rem_pio2+0x5ee>
 8014fae:	4645      	mov	r5, r8
 8014fb0:	2d01      	cmp	r5, #1
 8014fb2:	f1a4 0408 	sub.w	r4, r4, #8
 8014fb6:	f300 8087 	bgt.w	80150c8 <__kernel_rem_pio2+0x630>
 8014fba:	9c05      	ldr	r4, [sp, #20]
 8014fbc:	ab48      	add	r3, sp, #288	@ 0x120
 8014fbe:	441c      	add	r4, r3
 8014fc0:	2000      	movs	r0, #0
 8014fc2:	2100      	movs	r1, #0
 8014fc4:	f1b8 0f01 	cmp.w	r8, #1
 8014fc8:	f300 809c 	bgt.w	8015104 <__kernel_rem_pio2+0x66c>
 8014fcc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8014fd0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8014fd4:	f1b9 0f00 	cmp.w	r9, #0
 8014fd8:	f040 80a6 	bne.w	8015128 <__kernel_rem_pio2+0x690>
 8014fdc:	9b04      	ldr	r3, [sp, #16]
 8014fde:	e9c3 7800 	strd	r7, r8, [r3]
 8014fe2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014fe6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014fea:	e7c6      	b.n	8014f7a <__kernel_rem_pio2+0x4e2>
 8014fec:	9d05      	ldr	r5, [sp, #20]
 8014fee:	ab48      	add	r3, sp, #288	@ 0x120
 8014ff0:	441d      	add	r5, r3
 8014ff2:	4644      	mov	r4, r8
 8014ff4:	2000      	movs	r0, #0
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	2c00      	cmp	r4, #0
 8014ffa:	da35      	bge.n	8015068 <__kernel_rem_pio2+0x5d0>
 8014ffc:	f1b9 0f00 	cmp.w	r9, #0
 8015000:	d038      	beq.n	8015074 <__kernel_rem_pio2+0x5dc>
 8015002:	4602      	mov	r2, r0
 8015004:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015008:	9c04      	ldr	r4, [sp, #16]
 801500a:	e9c4 2300 	strd	r2, r3, [r4]
 801500e:	4602      	mov	r2, r0
 8015010:	460b      	mov	r3, r1
 8015012:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8015016:	f7eb f957 	bl	80002c8 <__aeabi_dsub>
 801501a:	ad4a      	add	r5, sp, #296	@ 0x128
 801501c:	2401      	movs	r4, #1
 801501e:	45a0      	cmp	r8, r4
 8015020:	da2b      	bge.n	801507a <__kernel_rem_pio2+0x5e2>
 8015022:	f1b9 0f00 	cmp.w	r9, #0
 8015026:	d002      	beq.n	801502e <__kernel_rem_pio2+0x596>
 8015028:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801502c:	4619      	mov	r1, r3
 801502e:	9b04      	ldr	r3, [sp, #16]
 8015030:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015034:	e7a1      	b.n	8014f7a <__kernel_rem_pio2+0x4e2>
 8015036:	9c05      	ldr	r4, [sp, #20]
 8015038:	ab48      	add	r3, sp, #288	@ 0x120
 801503a:	441c      	add	r4, r3
 801503c:	2000      	movs	r0, #0
 801503e:	2100      	movs	r1, #0
 8015040:	f1b8 0f00 	cmp.w	r8, #0
 8015044:	da09      	bge.n	801505a <__kernel_rem_pio2+0x5c2>
 8015046:	f1b9 0f00 	cmp.w	r9, #0
 801504a:	d002      	beq.n	8015052 <__kernel_rem_pio2+0x5ba>
 801504c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015050:	4619      	mov	r1, r3
 8015052:	9b04      	ldr	r3, [sp, #16]
 8015054:	e9c3 0100 	strd	r0, r1, [r3]
 8015058:	e78f      	b.n	8014f7a <__kernel_rem_pio2+0x4e2>
 801505a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801505e:	f7eb f935 	bl	80002cc <__adddf3>
 8015062:	f108 38ff 	add.w	r8, r8, #4294967295
 8015066:	e7eb      	b.n	8015040 <__kernel_rem_pio2+0x5a8>
 8015068:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801506c:	f7eb f92e 	bl	80002cc <__adddf3>
 8015070:	3c01      	subs	r4, #1
 8015072:	e7c1      	b.n	8014ff8 <__kernel_rem_pio2+0x560>
 8015074:	4602      	mov	r2, r0
 8015076:	460b      	mov	r3, r1
 8015078:	e7c6      	b.n	8015008 <__kernel_rem_pio2+0x570>
 801507a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801507e:	f7eb f925 	bl	80002cc <__adddf3>
 8015082:	3401      	adds	r4, #1
 8015084:	e7cb      	b.n	801501e <__kernel_rem_pio2+0x586>
 8015086:	ed95 7b00 	vldr	d7, [r5]
 801508a:	ed8d 7b00 	vstr	d7, [sp]
 801508e:	ed95 7b02 	vldr	d7, [r5, #8]
 8015092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015096:	ec53 2b17 	vmov	r2, r3, d7
 801509a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801509e:	f7eb f915 	bl	80002cc <__adddf3>
 80150a2:	4602      	mov	r2, r0
 80150a4:	460b      	mov	r3, r1
 80150a6:	4606      	mov	r6, r0
 80150a8:	460f      	mov	r7, r1
 80150aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150ae:	f7eb f90b 	bl	80002c8 <__aeabi_dsub>
 80150b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150b6:	f7eb f909 	bl	80002cc <__adddf3>
 80150ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80150be:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80150c2:	e9c5 6700 	strd	r6, r7, [r5]
 80150c6:	e76d      	b.n	8014fa4 <__kernel_rem_pio2+0x50c>
 80150c8:	ed94 7b00 	vldr	d7, [r4]
 80150cc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80150d0:	ec51 0b17 	vmov	r0, r1, d7
 80150d4:	4652      	mov	r2, sl
 80150d6:	465b      	mov	r3, fp
 80150d8:	ed8d 7b00 	vstr	d7, [sp]
 80150dc:	f7eb f8f6 	bl	80002cc <__adddf3>
 80150e0:	4602      	mov	r2, r0
 80150e2:	460b      	mov	r3, r1
 80150e4:	4606      	mov	r6, r0
 80150e6:	460f      	mov	r7, r1
 80150e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150ec:	f7eb f8ec 	bl	80002c8 <__aeabi_dsub>
 80150f0:	4652      	mov	r2, sl
 80150f2:	465b      	mov	r3, fp
 80150f4:	f7eb f8ea 	bl	80002cc <__adddf3>
 80150f8:	3d01      	subs	r5, #1
 80150fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80150fe:	e9c4 6700 	strd	r6, r7, [r4]
 8015102:	e755      	b.n	8014fb0 <__kernel_rem_pio2+0x518>
 8015104:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015108:	f7eb f8e0 	bl	80002cc <__adddf3>
 801510c:	f108 38ff 	add.w	r8, r8, #4294967295
 8015110:	e758      	b.n	8014fc4 <__kernel_rem_pio2+0x52c>
 8015112:	bf00      	nop
 8015114:	f3af 8000 	nop.w
	...
 8015120:	41700000 	.word	0x41700000
 8015124:	3e700000 	.word	0x3e700000
 8015128:	9b04      	ldr	r3, [sp, #16]
 801512a:	9a04      	ldr	r2, [sp, #16]
 801512c:	601f      	str	r7, [r3, #0]
 801512e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8015132:	605c      	str	r4, [r3, #4]
 8015134:	609d      	str	r5, [r3, #8]
 8015136:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801513a:	60d3      	str	r3, [r2, #12]
 801513c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015140:	6110      	str	r0, [r2, #16]
 8015142:	6153      	str	r3, [r2, #20]
 8015144:	e719      	b.n	8014f7a <__kernel_rem_pio2+0x4e2>
 8015146:	bf00      	nop

08015148 <floor>:
 8015148:	ec51 0b10 	vmov	r0, r1, d0
 801514c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015154:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8015158:	2e13      	cmp	r6, #19
 801515a:	460c      	mov	r4, r1
 801515c:	4605      	mov	r5, r0
 801515e:	4680      	mov	r8, r0
 8015160:	dc34      	bgt.n	80151cc <floor+0x84>
 8015162:	2e00      	cmp	r6, #0
 8015164:	da17      	bge.n	8015196 <floor+0x4e>
 8015166:	a332      	add	r3, pc, #200	@ (adr r3, 8015230 <floor+0xe8>)
 8015168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801516c:	f7eb f8ae 	bl	80002cc <__adddf3>
 8015170:	2200      	movs	r2, #0
 8015172:	2300      	movs	r3, #0
 8015174:	f7eb fcf0 	bl	8000b58 <__aeabi_dcmpgt>
 8015178:	b150      	cbz	r0, 8015190 <floor+0x48>
 801517a:	2c00      	cmp	r4, #0
 801517c:	da55      	bge.n	801522a <floor+0xe2>
 801517e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8015182:	432c      	orrs	r4, r5
 8015184:	2500      	movs	r5, #0
 8015186:	42ac      	cmp	r4, r5
 8015188:	4c2b      	ldr	r4, [pc, #172]	@ (8015238 <floor+0xf0>)
 801518a:	bf08      	it	eq
 801518c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8015190:	4621      	mov	r1, r4
 8015192:	4628      	mov	r0, r5
 8015194:	e023      	b.n	80151de <floor+0x96>
 8015196:	4f29      	ldr	r7, [pc, #164]	@ (801523c <floor+0xf4>)
 8015198:	4137      	asrs	r7, r6
 801519a:	ea01 0307 	and.w	r3, r1, r7
 801519e:	4303      	orrs	r3, r0
 80151a0:	d01d      	beq.n	80151de <floor+0x96>
 80151a2:	a323      	add	r3, pc, #140	@ (adr r3, 8015230 <floor+0xe8>)
 80151a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a8:	f7eb f890 	bl	80002cc <__adddf3>
 80151ac:	2200      	movs	r2, #0
 80151ae:	2300      	movs	r3, #0
 80151b0:	f7eb fcd2 	bl	8000b58 <__aeabi_dcmpgt>
 80151b4:	2800      	cmp	r0, #0
 80151b6:	d0eb      	beq.n	8015190 <floor+0x48>
 80151b8:	2c00      	cmp	r4, #0
 80151ba:	bfbe      	ittt	lt
 80151bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80151c0:	4133      	asrlt	r3, r6
 80151c2:	18e4      	addlt	r4, r4, r3
 80151c4:	ea24 0407 	bic.w	r4, r4, r7
 80151c8:	2500      	movs	r5, #0
 80151ca:	e7e1      	b.n	8015190 <floor+0x48>
 80151cc:	2e33      	cmp	r6, #51	@ 0x33
 80151ce:	dd0a      	ble.n	80151e6 <floor+0x9e>
 80151d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80151d4:	d103      	bne.n	80151de <floor+0x96>
 80151d6:	4602      	mov	r2, r0
 80151d8:	460b      	mov	r3, r1
 80151da:	f7eb f877 	bl	80002cc <__adddf3>
 80151de:	ec41 0b10 	vmov	d0, r0, r1
 80151e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80151ea:	f04f 37ff 	mov.w	r7, #4294967295
 80151ee:	40df      	lsrs	r7, r3
 80151f0:	4207      	tst	r7, r0
 80151f2:	d0f4      	beq.n	80151de <floor+0x96>
 80151f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8015230 <floor+0xe8>)
 80151f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151fa:	f7eb f867 	bl	80002cc <__adddf3>
 80151fe:	2200      	movs	r2, #0
 8015200:	2300      	movs	r3, #0
 8015202:	f7eb fca9 	bl	8000b58 <__aeabi_dcmpgt>
 8015206:	2800      	cmp	r0, #0
 8015208:	d0c2      	beq.n	8015190 <floor+0x48>
 801520a:	2c00      	cmp	r4, #0
 801520c:	da0a      	bge.n	8015224 <floor+0xdc>
 801520e:	2e14      	cmp	r6, #20
 8015210:	d101      	bne.n	8015216 <floor+0xce>
 8015212:	3401      	adds	r4, #1
 8015214:	e006      	b.n	8015224 <floor+0xdc>
 8015216:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801521a:	2301      	movs	r3, #1
 801521c:	40b3      	lsls	r3, r6
 801521e:	441d      	add	r5, r3
 8015220:	4545      	cmp	r5, r8
 8015222:	d3f6      	bcc.n	8015212 <floor+0xca>
 8015224:	ea25 0507 	bic.w	r5, r5, r7
 8015228:	e7b2      	b.n	8015190 <floor+0x48>
 801522a:	2500      	movs	r5, #0
 801522c:	462c      	mov	r4, r5
 801522e:	e7af      	b.n	8015190 <floor+0x48>
 8015230:	8800759c 	.word	0x8800759c
 8015234:	7e37e43c 	.word	0x7e37e43c
 8015238:	bff00000 	.word	0xbff00000
 801523c:	000fffff 	.word	0x000fffff

08015240 <_init>:
 8015240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015242:	bf00      	nop
 8015244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015246:	bc08      	pop	{r3}
 8015248:	469e      	mov	lr, r3
 801524a:	4770      	bx	lr

0801524c <_fini>:
 801524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801524e:	bf00      	nop
 8015250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015252:	bc08      	pop	{r3}
 8015254:	469e      	mov	lr, r3
 8015256:	4770      	bx	lr
