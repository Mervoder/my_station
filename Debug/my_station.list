
my_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800be20  0800be20  0000ce20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c340  0800c340  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c340  0800c340  0000d340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c348  0800c348  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c348  0800c348  0000d348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c34c  0800c34c  0000d34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c350  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  200001d8  0800c528  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  0800c528  0000e980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167c1  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da5  00000000  00000000  000249c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00027770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001062  00000000  00000000  00028c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000459d  00000000  00000000  00029c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5a4  00000000  00000000  0002e227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e571b  00000000  00000000  000487cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012dee6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e10  00000000  00000000  0012df2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00134d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be08 	.word	0x0800be08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800be08 	.word	0x0800be08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800102c:	22b0      	movs	r2, #176	@ 0xb0
 800102e:	2100      	movs	r1, #0
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f008 f9d0 	bl	80093d6 <memset>
    return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f002 f8e9 	bl	800321c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 fc79 	bl	8001940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 ff4b 	bl	8001ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001052:	f000 ff29 	bl	8001ea8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001056:	f000 fcdf 	bl	8001a18 <MX_ADC1_Init>
  MX_I2C1_Init();
 800105a:	f000 fd2f 	bl	8001abc <MX_I2C1_Init>
  MX_SPI1_Init();
 800105e:	f000 fd5b 	bl	8001b18 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001062:	f000 fea3 	bl	8001dac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001066:	f000 fecb 	bl	8001e00 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800106a:	f000 fef3 	bl	8001e54 <MX_USART6_UART_Init>
  MX_UART4_Init();
 800106e:	f000 fe73 	bl	8001d58 <MX_UART4_Init>
  MX_TIM2_Init();
 8001072:	f000 fd87 	bl	8001b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001076:	f000 fdd3 	bl	8001c20 <MX_TIM3_Init>
  MX_TIM4_Init();
 800107a:	f000 fe1f 	bl	8001cbc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 800107e:	2064      	movs	r0, #100	@ 0x64
 8001080:	f002 f93e 	bl	8003300 <HAL_Delay>
  receive_data =E220_write_register(0x2, 0x64);
 8001084:	2164      	movs	r1, #100	@ 0x64
 8001086:	2002      	movs	r0, #2
 8001088:	f001 f838 	bl	80020fc <E220_write_register>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b7b      	ldr	r3, [pc, #492]	@ (8001280 <main+0x240>)
 8001092:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001094:	2064      	movs	r0, #100	@ 0x64
 8001096:	f002 f933 	bl	8003300 <HAL_Delay>

  HAL_Delay(100);
 800109a:	2064      	movs	r0, #100	@ 0x64
 800109c:	f002 f930 	bl	8003300 <HAL_Delay>
  receive_data =E220_write_register(0x2, 0x64);
 80010a0:	2164      	movs	r1, #100	@ 0x64
 80010a2:	2002      	movs	r0, #2
 80010a4:	f001 f82a 	bl	80020fc <E220_write_register>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b74      	ldr	r3, [pc, #464]	@ (8001280 <main+0x240>)
 80010ae:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 80010b0:	2064      	movs	r0, #100	@ 0x64
 80010b2:	f002 f925 	bl	8003300 <HAL_Delay>

  receive_data =E220_write_register(0x3, 0x40);
 80010b6:	2140      	movs	r1, #64	@ 0x40
 80010b8:	2003      	movs	r0, #3
 80010ba:	f001 f81f 	bl	80020fc <E220_write_register>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001280 <main+0x240>)
 80010c4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 80010c6:	2064      	movs	r0, #100	@ 0x64
 80010c8:	f002 f91a 	bl	8003300 <HAL_Delay>
  receive_data =E220_write_register(0x4, 0x10); // ch
 80010cc:	2110      	movs	r1, #16
 80010ce:	2004      	movs	r0, #4
 80010d0:	f001 f814 	bl	80020fc <E220_write_register>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b69      	ldr	r3, [pc, #420]	@ (8001280 <main+0x240>)
 80010da:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 80010dc:	2064      	movs	r0, #100	@ 0x64
 80010de:	f002 f90f 	bl	8003300 <HAL_Delay>
  receive_data =E220_write_register(0x5, 0x40);//40
 80010e2:	2140      	movs	r1, #64	@ 0x40
 80010e4:	2005      	movs	r0, #5
 80010e6:	f001 f809 	bl	80020fc <E220_write_register>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b64      	ldr	r3, [pc, #400]	@ (8001280 <main+0x240>)
 80010f0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 80010f2:	2064      	movs	r0, #100	@ 0x64
 80010f4:	f002 f904 	bl	8003300 <HAL_Delay>
  receive_data =E220_write_register(0x6, 0x00);
 80010f8:	2100      	movs	r1, #0
 80010fa:	2006      	movs	r0, #6
 80010fc:	f000 fffe 	bl	80020fc <E220_write_register>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b5e      	ldr	r3, [pc, #376]	@ (8001280 <main+0x240>)
 8001106:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001108:	2064      	movs	r0, #100	@ 0x64
 800110a:	f002 f8f9 	bl	8003300 <HAL_Delay>
  receive_data =E220_write_register(0x7, 0x00);
 800110e:	2100      	movs	r1, #0
 8001110:	2007      	movs	r0, #7
 8001112:	f000 fff3 	bl	80020fc <E220_write_register>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b59      	ldr	r3, [pc, #356]	@ (8001280 <main+0x240>)
 800111c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 800111e:	2064      	movs	r0, #100	@ 0x64
 8001120:	f002 f8ee 	bl	8003300 <HAL_Delay>
  receive_data =E220_write_register(0, 0x06); // h 0x06
 8001124:	2106      	movs	r1, #6
 8001126:	2000      	movs	r0, #0
 8001128:	f000 ffe8 	bl	80020fc <E220_write_register>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b53      	ldr	r3, [pc, #332]	@ (8001280 <main+0x240>)
 8001132:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001134:	2064      	movs	r0, #100	@ 0x64
 8001136:	f002 f8e3 	bl	8003300 <HAL_Delay>

  receive_data =E220_write_register(0x1, 0x03); // low 0x03
 800113a:	2103      	movs	r1, #3
 800113c:	2001      	movs	r0, #1
 800113e:	f000 ffdd 	bl	80020fc <E220_write_register>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b4e      	ldr	r3, [pc, #312]	@ (8001280 <main+0x240>)
 8001148:	701a      	strb	r2, [r3, #0]
  HAL_Delay(200);
 800114a:	20c8      	movs	r0, #200	@ 0xc8
 800114c:	f002 f8d8 	bl	8003300 <HAL_Delay>

  receive_data = E220_read_register(0);
 8001150:	2000      	movs	r0, #0
 8001152:	f001 f81b 	bl	800218c <E220_read_register>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b49      	ldr	r3, [pc, #292]	@ (8001280 <main+0x240>)
 800115c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 800115e:	2064      	movs	r0, #100	@ 0x64
 8001160:	f002 f8ce 	bl	8003300 <HAL_Delay>
  receive_data = E220_read_register(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f001 f811 	bl	800218c <E220_read_register>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b44      	ldr	r3, [pc, #272]	@ (8001280 <main+0x240>)
 8001170:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8001172:	2064      	movs	r0, #100	@ 0x64
 8001174:	f002 f8c4 	bl	8003300 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);//m0
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	4841      	ldr	r0, [pc, #260]	@ (8001284 <main+0x244>)
 800117e:	f003 fc17 	bl	80049b0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001182:	2064      	movs	r0, #100	@ 0x64
 8001184:	f002 f8bc 	bl	8003300 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET); //m1
 8001188:	2201      	movs	r2, #1
 800118a:	2102      	movs	r1, #2
 800118c:	483d      	ldr	r0, [pc, #244]	@ (8001284 <main+0x244>)
 800118e:	f003 fc0f 	bl	80049b0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001192:	2064      	movs	r0, #100	@ 0x64
 8001194:	f002 f8b4 	bl	8003300 <HAL_Delay>

  lwgps_init(&gps);
 8001198:	483b      	ldr	r0, [pc, #236]	@ (8001288 <main+0x248>)
 800119a:	f7ff ff43 	bl	8001024 <lwgps_init>


  HAL_TIM_Base_Start_IT(&htim2);
 800119e:	483b      	ldr	r0, [pc, #236]	@ (800128c <main+0x24c>)
 80011a0:	f004 fc24 	bl	80059ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80011a4:	483a      	ldr	r0, [pc, #232]	@ (8001290 <main+0x250>)
 80011a6:	f004 fc21 	bl	80059ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80011aa:	483a      	ldr	r0, [pc, #232]	@ (8001294 <main+0x254>)
 80011ac:	f004 fc1e 	bl	80059ec <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_IT(&hadc1);
 80011b0:	4839      	ldr	r0, [pc, #228]	@ (8001298 <main+0x258>)
 80011b2:	f002 f90d 	bl	80033d0 <HAL_ADC_Start_IT>

  //HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
  HAL_UART_Receive_DMA(&huart3, Lora_Rx_Buffer, 72);
 80011b6:	2248      	movs	r2, #72	@ 0x48
 80011b8:	4938      	ldr	r1, [pc, #224]	@ (800129c <main+0x25c>)
 80011ba:	4839      	ldr	r0, [pc, #228]	@ (80012a0 <main+0x260>)
 80011bc:	f005 f9ae 	bl	800651c <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(Lora_Rx_Buffer[0]==2 && Lora_Rx_Buffer[47] == 0x31){
 80011c0:	4b36      	ldr	r3, [pc, #216]	@ (800129c <main+0x25c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	f040 8190 	bne.w	80014ea <main+0x4aa>
 80011ca:	4b34      	ldr	r3, [pc, #208]	@ (800129c <main+0x25c>)
 80011cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80011d0:	2b31      	cmp	r3, #49	@ 0x31
 80011d2:	f040 818a 	bne.w	80014ea <main+0x4aa>

	  		  Sustainer.satsinview=Lora_Rx_Buffer[1];
 80011d6:	4b31      	ldr	r3, [pc, #196]	@ (800129c <main+0x25c>)
 80011d8:	785a      	ldrb	r2, [r3, #1]
 80011da:	4b32      	ldr	r3, [pc, #200]	@ (80012a4 <main+0x264>)
 80011dc:	701a      	strb	r2, [r3, #0]

	  		  Sustainer_union_converter();
 80011de:	f001 f945 	bl	800246c <Sustainer_union_converter>
	  		  Sustainer.battery=Lora_Rx_Buffer[46];
 80011e2:	4b2e      	ldr	r3, [pc, #184]	@ (800129c <main+0x25c>)
 80011e4:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80011e8:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <main+0x264>)
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  		  Sustainer.mod=Lora_Rx_Buffer[70];
 80011ee:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <main+0x25c>)
 80011f0:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80011f4:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <main+0x264>)
 80011f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	  		  Sustainer.communication=Lora_Rx_Buffer[48];
 80011fa:	4b28      	ldr	r3, [pc, #160]	@ (800129c <main+0x25c>)
 80011fc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8001200:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <main+0x264>)
 8001202:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

	  			 //EGU PART
	  			 EGU_ARIZA=Lora_Rx_Buffer[49];
 8001206:	4b25      	ldr	r3, [pc, #148]	@ (800129c <main+0x25c>)
 8001208:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <main+0x268>)
 800120e:	701a      	strb	r2, [r3, #0]
	  			 EGU_AYRILMA_TESPIT=Lora_Rx_Buffer[50];
 8001210:	4b22      	ldr	r3, [pc, #136]	@ (800129c <main+0x25c>)
 8001212:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8001216:	4b25      	ldr	r3, [pc, #148]	@ (80012ac <main+0x26c>)
 8001218:	701a      	strb	r2, [r3, #0]

	  			 float2unit8 f2u8_EGU_BATTERY;
	  			for(uint8_t i=0;i<4;i++)
 800121a:	2300      	movs	r3, #0
 800121c:	77fb      	strb	r3, [r7, #31]
 800121e:	e00e      	b.n	800123e <main+0x1fe>
	  			{
	  				f2u8_EGU_BATTERY.array[i]=Lora_Rx_Buffer[i+51];
 8001220:	7ffb      	ldrb	r3, [r7, #31]
 8001222:	f103 0233 	add.w	r2, r3, #51	@ 0x33
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	491c      	ldr	r1, [pc, #112]	@ (800129c <main+0x25c>)
 800122a:	5c8a      	ldrb	r2, [r1, r2]
 800122c:	3318      	adds	r3, #24
 800122e:	f107 0108 	add.w	r1, r7, #8
 8001232:	440b      	add	r3, r1
 8001234:	f803 2c08 	strb.w	r2, [r3, #-8]
	  			for(uint8_t i=0;i<4;i++)
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	3301      	adds	r3, #1
 800123c:	77fb      	strb	r3, [r7, #31]
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d9ed      	bls.n	8001220 <main+0x1e0>
	  			}
	  			 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	4a1a      	ldr	r2, [pc, #104]	@ (80012b0 <main+0x270>)
 8001248:	6013      	str	r3, [r2, #0]

	  			 float2unit8 f2u8_EGU_ANGLE;
	  			for(uint8_t i=0;i<4;i++)
 800124a:	2300      	movs	r3, #0
 800124c:	77bb      	strb	r3, [r7, #30]
 800124e:	e00e      	b.n	800126e <main+0x22e>
	  			{
	  				f2u8_EGU_ANGLE.array[i]=Lora_Rx_Buffer[i+55];
 8001250:	7fbb      	ldrb	r3, [r7, #30]
 8001252:	f103 0237 	add.w	r2, r3, #55	@ 0x37
 8001256:	7fbb      	ldrb	r3, [r7, #30]
 8001258:	4910      	ldr	r1, [pc, #64]	@ (800129c <main+0x25c>)
 800125a:	5c8a      	ldrb	r2, [r1, r2]
 800125c:	3318      	adds	r3, #24
 800125e:	f107 0108 	add.w	r1, r7, #8
 8001262:	440b      	add	r3, r1
 8001264:	f803 2c0c 	strb.w	r2, [r3, #-12]
	  			for(uint8_t i=0;i<4;i++)
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	3301      	adds	r3, #1
 800126c:	77bb      	strb	r3, [r7, #30]
 800126e:	7fbb      	ldrb	r3, [r7, #30]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d9ed      	bls.n	8001250 <main+0x210>
	  			}
	  			  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4a0f      	ldr	r2, [pc, #60]	@ (80012b4 <main+0x274>)
 8001278:	6013      	str	r3, [r2, #0]

	  			  float2unit8 f2u8_EGU_IRTIFA;
	  			for(uint8_t i=0;i<4;i++)
 800127a:	2300      	movs	r3, #0
 800127c:	777b      	strb	r3, [r7, #29]
 800127e:	e02a      	b.n	80012d6 <main+0x296>
 8001280:	20000828 	.word	0x20000828
 8001284:	40020400 	.word	0x40020400
 8001288:	20000778 	.word	0x20000778
 800128c:	200002e8 	.word	0x200002e8
 8001290:	20000330 	.word	0x20000330
 8001294:	20000378 	.word	0x20000378
 8001298:	200001f4 	.word	0x200001f4
 800129c:	20000540 	.word	0x20000540
 80012a0:	20000450 	.word	0x20000450
 80012a4:	20000740 	.word	0x20000740
 80012a8:	200005e8 	.word	0x200005e8
 80012ac:	200005e9 	.word	0x200005e9
 80012b0:	200005f0 	.word	0x200005f0
 80012b4:	200005f8 	.word	0x200005f8
	  			{
	  				f2u8_EGU_IRTIFA.array[i]=Lora_Rx_Buffer[i+59];
 80012b8:	7f7b      	ldrb	r3, [r7, #29]
 80012ba:	f103 023b 	add.w	r2, r3, #59	@ 0x3b
 80012be:	7f7b      	ldrb	r3, [r7, #29]
 80012c0:	49ae      	ldr	r1, [pc, #696]	@ (800157c <main+0x53c>)
 80012c2:	5c8a      	ldrb	r2, [r1, r2]
 80012c4:	3318      	adds	r3, #24
 80012c6:	f107 0108 	add.w	r1, r7, #8
 80012ca:	440b      	add	r3, r1
 80012cc:	f803 2c10 	strb.w	r2, [r3, #-16]
	  			for(uint8_t i=0;i<4;i++)
 80012d0:	7f7b      	ldrb	r3, [r7, #29]
 80012d2:	3301      	adds	r3, #1
 80012d4:	777b      	strb	r3, [r7, #29]
 80012d6:	7f7b      	ldrb	r3, [r7, #29]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d9ed      	bls.n	80012b8 <main+0x278>
	  			}
	  		  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4aa8      	ldr	r2, [pc, #672]	@ (8001580 <main+0x540>)
 80012e0:	6013      	str	r3, [r2, #0]

	  		  EGU_FITIL=Lora_Rx_Buffer[50];
 80012e2:	4ba6      	ldr	r3, [pc, #664]	@ (800157c <main+0x53c>)
 80012e4:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80012e8:	4ba6      	ldr	r3, [pc, #664]	@ (8001584 <main+0x544>)
 80012ea:	701a      	strb	r2, [r3, #0]
	  //	/*  EGU_UCUS_BASLADIMI*/sustv4_mod=Lora_Rx_Buffer[63];
	  		  EGU_STAGE_DURUM=Lora_Rx_Buffer[64];
 80012ec:	4ba3      	ldr	r3, [pc, #652]	@ (800157c <main+0x53c>)
 80012ee:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80012f2:	4ba5      	ldr	r3, [pc, #660]	@ (8001588 <main+0x548>)
 80012f4:	701a      	strb	r2, [r3, #0]
	  		  EGU_MOTOR_ATESLEME_TALEP_IN=Lora_Rx_Buffer[65];
 80012f6:	4ba1      	ldr	r3, [pc, #644]	@ (800157c <main+0x53c>)
 80012f8:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80012fc:	4ba3      	ldr	r3, [pc, #652]	@ (800158c <main+0x54c>)
 80012fe:	701a      	strb	r2, [r3, #0]
	  		  float2unit8 f2u8_altitude;
	  		  f2u8_altitude.array[0] = Lora_Rx_Buffer[66];
 8001300:	4b9e      	ldr	r3, [pc, #632]	@ (800157c <main+0x53c>)
 8001302:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001306:	733b      	strb	r3, [r7, #12]
	  		  f2u8_altitude.array[1] = Lora_Rx_Buffer[67];
 8001308:	4b9c      	ldr	r3, [pc, #624]	@ (800157c <main+0x53c>)
 800130a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800130e:	737b      	strb	r3, [r7, #13]
	  		  f2u8_altitude.array[2] = Lora_Rx_Buffer[68];
 8001310:	4b9a      	ldr	r3, [pc, #616]	@ (800157c <main+0x53c>)
 8001312:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001316:	73bb      	strb	r3, [r7, #14]
	  		  f2u8_altitude.array[3] = Lora_Rx_Buffer[69];
 8001318:	4b98      	ldr	r3, [pc, #608]	@ (800157c <main+0x53c>)
 800131a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800131e:	73fb      	strb	r3, [r7, #15]
	  		  Sustainer.maxAltitude=f2u8_altitude.fVal;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a9b      	ldr	r2, [pc, #620]	@ (8001590 <main+0x550>)
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30



				sprintf(s_altitude,"%4.3f",Sustainer.altitude);
 8001326:	4b9a      	ldr	r3, [pc, #616]	@ (8001590 <main+0x550>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f92c 	bl	8000588 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4997      	ldr	r1, [pc, #604]	@ (8001594 <main+0x554>)
 8001336:	4898      	ldr	r0, [pc, #608]	@ (8001598 <main+0x558>)
 8001338:	f007 ffea 	bl	8009310 <siprintf>
				sprintf(s_temperature,"%2.2f",Sustainer.temperature);
 800133c:	4b94      	ldr	r3, [pc, #592]	@ (8001590 <main+0x550>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f921 	bl	8000588 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4994      	ldr	r1, [pc, #592]	@ (800159c <main+0x55c>)
 800134c:	4894      	ldr	r0, [pc, #592]	@ (80015a0 <main+0x560>)
 800134e:	f007 ffdf 	bl	8009310 <siprintf>
				sprintf(s_speed,"%2.2f",Sustainer.speed);
 8001352:	4b8f      	ldr	r3, [pc, #572]	@ (8001590 <main+0x550>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f916 	bl	8000588 <__aeabi_f2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	498e      	ldr	r1, [pc, #568]	@ (800159c <main+0x55c>)
 8001362:	4890      	ldr	r0, [pc, #576]	@ (80015a4 <main+0x564>)
 8001364:	f007 ffd4 	bl	8009310 <siprintf>
				sprintf(s_roll,"%2.2f",Sustainer.normal);
 8001368:	4b89      	ldr	r3, [pc, #548]	@ (8001590 <main+0x550>)
 800136a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f90b 	bl	8000588 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4989      	ldr	r1, [pc, #548]	@ (800159c <main+0x55c>)
 8001378:	488b      	ldr	r0, [pc, #556]	@ (80015a8 <main+0x568>)
 800137a:	f007 ffc9 	bl	8009310 <siprintf>
				sprintf(s_pitch,"%2.2f",Sustainer.pitch);
 800137e:	4b84      	ldr	r3, [pc, #528]	@ (8001590 <main+0x550>)
 8001380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f900 	bl	8000588 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4983      	ldr	r1, [pc, #524]	@ (800159c <main+0x55c>)
 800138e:	4887      	ldr	r0, [pc, #540]	@ (80015ac <main+0x56c>)
 8001390:	f007 ffbe 	bl	8009310 <siprintf>
				sprintf(s_latitude,"%2.6f",Sustainer.gpslatitude);
 8001394:	4b7e      	ldr	r3, [pc, #504]	@ (8001590 <main+0x550>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8f5 	bl	8000588 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4983      	ldr	r1, [pc, #524]	@ (80015b0 <main+0x570>)
 80013a4:	4883      	ldr	r0, [pc, #524]	@ (80015b4 <main+0x574>)
 80013a6:	f007 ffb3 	bl	8009310 <siprintf>
				sprintf(s_longitude,"%2.6f",Sustainer.gpslongitude);
 80013aa:	4b79      	ldr	r3, [pc, #484]	@ (8001590 <main+0x550>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8ea 	bl	8000588 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	497d      	ldr	r1, [pc, #500]	@ (80015b0 <main+0x570>)
 80013ba:	487f      	ldr	r0, [pc, #508]	@ (80015b8 <main+0x578>)
 80013bc:	f007 ffa8 	bl	8009310 <siprintf>
				sprintf(s_bat,"%2d",Sustainer.battery);
 80013c0:	4b73      	ldr	r3, [pc, #460]	@ (8001590 <main+0x550>)
 80013c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80013c6:	461a      	mov	r2, r3
 80013c8:	497c      	ldr	r1, [pc, #496]	@ (80015bc <main+0x57c>)
 80013ca:	487d      	ldr	r0, [pc, #500]	@ (80015c0 <main+0x580>)
 80013cc:	f007 ffa0 	bl	8009310 <siprintf>
				sprintf(s_sats,"%2d",Sustainer.satsinview);
 80013d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001590 <main+0x550>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4979      	ldr	r1, [pc, #484]	@ (80015bc <main+0x57c>)
 80013d8:	487a      	ldr	r0, [pc, #488]	@ (80015c4 <main+0x584>)
 80013da:	f007 ff99 	bl	8009310 <siprintf>
				sprintf(s_comm,"%2d",Sustainer.communication);
 80013de:	4b6c      	ldr	r3, [pc, #432]	@ (8001590 <main+0x550>)
 80013e0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80013e4:	461a      	mov	r2, r3
 80013e6:	4975      	ldr	r1, [pc, #468]	@ (80015bc <main+0x57c>)
 80013e8:	4877      	ldr	r0, [pc, #476]	@ (80015c8 <main+0x588>)
 80013ea:	f007 ff91 	bl	8009310 <siprintf>
				sprintf(s_comm,"%2d",Sustainer.communication);
 80013ee:	4b68      	ldr	r3, [pc, #416]	@ (8001590 <main+0x550>)
 80013f0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80013f4:	461a      	mov	r2, r3
 80013f6:	4971      	ldr	r1, [pc, #452]	@ (80015bc <main+0x57c>)
 80013f8:	4873      	ldr	r0, [pc, #460]	@ (80015c8 <main+0x588>)
 80013fa:	f007 ff89 	bl	8009310 <siprintf>
				//sprintf(s_dist,"%4.2f",s_distance);

				sprintf(e_altitude,"%4.2f",EGU_IRTIFA);
 80013fe:	4b60      	ldr	r3, [pc, #384]	@ (8001580 <main+0x540>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8c0 	bl	8000588 <__aeabi_f2d>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	496f      	ldr	r1, [pc, #444]	@ (80015cc <main+0x58c>)
 800140e:	4870      	ldr	r0, [pc, #448]	@ (80015d0 <main+0x590>)
 8001410:	f007 ff7e 	bl	8009310 <siprintf>
				sprintf(e_angle,"%2.2f",EGU_ANGLE);
 8001414:	4b6f      	ldr	r3, [pc, #444]	@ (80015d4 <main+0x594>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f8b5 	bl	8000588 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	495e      	ldr	r1, [pc, #376]	@ (800159c <main+0x55c>)
 8001424:	486c      	ldr	r0, [pc, #432]	@ (80015d8 <main+0x598>)
 8001426:	f007 ff73 	bl	8009310 <siprintf>
				sprintf(e_bat,"%2d",EGU_BATTERY);
 800142a:	4b6c      	ldr	r3, [pc, #432]	@ (80015dc <main+0x59c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f8aa 	bl	8000588 <__aeabi_f2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4960      	ldr	r1, [pc, #384]	@ (80015bc <main+0x57c>)
 800143a:	4869      	ldr	r0, [pc, #420]	@ (80015e0 <main+0x5a0>)
 800143c:	f007 ff68 	bl	8009310 <siprintf>
				sprintf(e_flight,"%d",EGU_UCUS_BASLADIMI);
 8001440:	4b68      	ldr	r3, [pc, #416]	@ (80015e4 <main+0x5a4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4968      	ldr	r1, [pc, #416]	@ (80015e8 <main+0x5a8>)
 8001448:	4868      	ldr	r0, [pc, #416]	@ (80015ec <main+0x5ac>)
 800144a:	f007 ff61 	bl	8009310 <siprintf>
				sprintf(e_stage,"%d",EGU_AYRILMA_TESPIT);
 800144e:	4b68      	ldr	r3, [pc, #416]	@ (80015f0 <main+0x5b0>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	4964      	ldr	r1, [pc, #400]	@ (80015e8 <main+0x5a8>)
 8001456:	4867      	ldr	r0, [pc, #412]	@ (80015f4 <main+0x5b4>)
 8001458:	f007 ff5a 	bl	8009310 <siprintf>
				sprintf(e_fitil,"%d",EGU_FITIL);
 800145c:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <main+0x544>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4961      	ldr	r1, [pc, #388]	@ (80015e8 <main+0x5a8>)
 8001464:	4864      	ldr	r0, [pc, #400]	@ (80015f8 <main+0x5b8>)
 8001466:	f007 ff53 	bl	8009310 <siprintf>
				// Nextion_SendFloatToTextbox("s1", Sustainer.altitude);
				 NEXTION_SendString("s1", s_altitude);
 800146a:	494b      	ldr	r1, [pc, #300]	@ (8001598 <main+0x558>)
 800146c:	4863      	ldr	r0, [pc, #396]	@ (80015fc <main+0x5bc>)
 800146e:	f000 febd 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("s2", s_temperature);
 8001472:	494b      	ldr	r1, [pc, #300]	@ (80015a0 <main+0x560>)
 8001474:	4862      	ldr	r0, [pc, #392]	@ (8001600 <main+0x5c0>)
 8001476:	f000 feb9 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("s3", s_speed);
 800147a:	494a      	ldr	r1, [pc, #296]	@ (80015a4 <main+0x564>)
 800147c:	4861      	ldr	r0, [pc, #388]	@ (8001604 <main+0x5c4>)
 800147e:	f000 feb5 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("s4", s_roll);
 8001482:	4949      	ldr	r1, [pc, #292]	@ (80015a8 <main+0x568>)
 8001484:	4860      	ldr	r0, [pc, #384]	@ (8001608 <main+0x5c8>)
 8001486:	f000 feb1 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("s5", s_pitch);
 800148a:	4948      	ldr	r1, [pc, #288]	@ (80015ac <main+0x56c>)
 800148c:	485f      	ldr	r0, [pc, #380]	@ (800160c <main+0x5cc>)
 800148e:	f000 fead 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("s6", s_sats);
 8001492:	494c      	ldr	r1, [pc, #304]	@ (80015c4 <main+0x584>)
 8001494:	485e      	ldr	r0, [pc, #376]	@ (8001610 <main+0x5d0>)
 8001496:	f000 fea9 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("s7", s_latitude);
 800149a:	4946      	ldr	r1, [pc, #280]	@ (80015b4 <main+0x574>)
 800149c:	485d      	ldr	r0, [pc, #372]	@ (8001614 <main+0x5d4>)
 800149e:	f000 fea5 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("s8", s_longitude);
 80014a2:	4945      	ldr	r1, [pc, #276]	@ (80015b8 <main+0x578>)
 80014a4:	485c      	ldr	r0, [pc, #368]	@ (8001618 <main+0x5d8>)
 80014a6:	f000 fea1 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("s9", s_bat);
 80014aa:	4945      	ldr	r1, [pc, #276]	@ (80015c0 <main+0x580>)
 80014ac:	485b      	ldr	r0, [pc, #364]	@ (800161c <main+0x5dc>)
 80014ae:	f000 fe9d 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("t57", s_comm);
 80014b2:	4945      	ldr	r1, [pc, #276]	@ (80015c8 <main+0x588>)
 80014b4:	485a      	ldr	r0, [pc, #360]	@ (8001620 <main+0x5e0>)
 80014b6:	f000 fe99 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("t", s_dist);
 80014ba:	495a      	ldr	r1, [pc, #360]	@ (8001624 <main+0x5e4>)
 80014bc:	485a      	ldr	r0, [pc, #360]	@ (8001628 <main+0x5e8>)
 80014be:	f000 fe95 	bl	80021ec <NEXTION_SendString>


				 NEXTION_SendString("m1", e_altitude);
 80014c2:	4943      	ldr	r1, [pc, #268]	@ (80015d0 <main+0x590>)
 80014c4:	4859      	ldr	r0, [pc, #356]	@ (800162c <main+0x5ec>)
 80014c6:	f000 fe91 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("m3", e_angle);
 80014ca:	4943      	ldr	r1, [pc, #268]	@ (80015d8 <main+0x598>)
 80014cc:	4858      	ldr	r0, [pc, #352]	@ (8001630 <main+0x5f0>)
 80014ce:	f000 fe8d 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("m2", e_bat);
 80014d2:	4943      	ldr	r1, [pc, #268]	@ (80015e0 <main+0x5a0>)
 80014d4:	4857      	ldr	r0, [pc, #348]	@ (8001634 <main+0x5f4>)
 80014d6:	f000 fe89 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("m4", e_flight);
 80014da:	4944      	ldr	r1, [pc, #272]	@ (80015ec <main+0x5ac>)
 80014dc:	4856      	ldr	r0, [pc, #344]	@ (8001638 <main+0x5f8>)
 80014de:	f000 fe85 	bl	80021ec <NEXTION_SendString>
				 NEXTION_SendString("m5", e_stage);
 80014e2:	4944      	ldr	r1, [pc, #272]	@ (80015f4 <main+0x5b4>)
 80014e4:	4855      	ldr	r0, [pc, #340]	@ (800163c <main+0x5fc>)
 80014e6:	f000 fe81 	bl	80021ec <NEXTION_SendString>

	  }



	  if(Lora_Rx_Buffer[0]==1 && Lora_Rx_Buffer[47]==0x32){
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <main+0x53c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	f040 8132 	bne.w	8001758 <main+0x718>
 80014f4:	4b21      	ldr	r3, [pc, #132]	@ (800157c <main+0x53c>)
 80014f6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80014fa:	2b32      	cmp	r3, #50	@ 0x32
 80014fc:	f040 812c 	bne.w	8001758 <main+0x718>

	  		  Booster.satsinview=Lora_Rx_Buffer[1];
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <main+0x53c>)
 8001502:	785a      	ldrb	r2, [r3, #1]
 8001504:	4b4e      	ldr	r3, [pc, #312]	@ (8001640 <main+0x600>)
 8001506:	701a      	strb	r2, [r3, #0]

	      	  Booster_union_converter();
 8001508:	f000 fe96 	bl	8002238 <Booster_union_converter>
	  		  Booster.battery=Lora_Rx_Buffer[46];
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <main+0x53c>)
 800150e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8001512:	4b4b      	ldr	r3, [pc, #300]	@ (8001640 <main+0x600>)
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  		  Booster.mod=Lora_Rx_Buffer[70];
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <main+0x53c>)
 800151a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800151e:	4b48      	ldr	r3, [pc, #288]	@ (8001640 <main+0x600>)
 8001520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	  		  Booster.communication=Lora_Rx_Buffer[48];
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <main+0x53c>)
 8001526:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800152a:	4b45      	ldr	r3, [pc, #276]	@ (8001640 <main+0x600>)
 800152c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	  		  float2unit8 f2u8_booster;
	  		  f2u8_booster.array[0] = Lora_Rx_Buffer[66];
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <main+0x53c>)
 8001532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001536:	723b      	strb	r3, [r7, #8]
	  		  f2u8_booster.array[1] = Lora_Rx_Buffer[67];
 8001538:	4b10      	ldr	r3, [pc, #64]	@ (800157c <main+0x53c>)
 800153a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800153e:	727b      	strb	r3, [r7, #9]
	  		  f2u8_booster.array[2] = Lora_Rx_Buffer[68];
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <main+0x53c>)
 8001542:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001546:	72bb      	strb	r3, [r7, #10]
	  		  f2u8_booster.array[3] = Lora_Rx_Buffer[69];
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <main+0x53c>)
 800154a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800154e:	72fb      	strb	r3, [r7, #11]
	  		  Booster.maxAltitude = f2u8_booster.fVal;
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4a3b      	ldr	r2, [pc, #236]	@ (8001640 <main+0x600>)
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30


	  		sprintf(b_altitude,"%4.3f",Booster.altitude);
 8001556:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <main+0x600>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f814 	bl	8000588 <__aeabi_f2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	490b      	ldr	r1, [pc, #44]	@ (8001594 <main+0x554>)
 8001566:	4837      	ldr	r0, [pc, #220]	@ (8001644 <main+0x604>)
 8001568:	f007 fed2 	bl	8009310 <siprintf>
			sprintf(b_temperature,"%2.2f",Booster.temperature);
 800156c:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <main+0x600>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f809 	bl	8000588 <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	e066      	b.n	8001648 <main+0x608>
 800157a:	bf00      	nop
 800157c:	20000540 	.word	0x20000540
 8001580:	200005f4 	.word	0x200005f4
 8001584:	200005ed 	.word	0x200005ed
 8001588:	200005eb 	.word	0x200005eb
 800158c:	200005ea 	.word	0x200005ea
 8001590:	20000740 	.word	0x20000740
 8001594:	0800be20 	.word	0x0800be20
 8001598:	20000650 	.word	0x20000650
 800159c:	0800be28 	.word	0x0800be28
 80015a0:	20000658 	.word	0x20000658
 80015a4:	20000660 	.word	0x20000660
 80015a8:	20000668 	.word	0x20000668
 80015ac:	20000670 	.word	0x20000670
 80015b0:	0800be30 	.word	0x0800be30
 80015b4:	20000678 	.word	0x20000678
 80015b8:	20000684 	.word	0x20000684
 80015bc:	0800be38 	.word	0x0800be38
 80015c0:	20000690 	.word	0x20000690
 80015c4:	20000694 	.word	0x20000694
 80015c8:	20000698 	.word	0x20000698
 80015cc:	0800be3c 	.word	0x0800be3c
 80015d0:	200006a8 	.word	0x200006a8
 80015d4:	200005f8 	.word	0x200005f8
 80015d8:	200006b4 	.word	0x200006b4
 80015dc:	200005f0 	.word	0x200005f0
 80015e0:	200006b0 	.word	0x200006b0
 80015e4:	200005ec 	.word	0x200005ec
 80015e8:	0800be44 	.word	0x0800be44
 80015ec:	200006bc 	.word	0x200006bc
 80015f0:	200005e9 	.word	0x200005e9
 80015f4:	200006c0 	.word	0x200006c0
 80015f8:	200006c4 	.word	0x200006c4
 80015fc:	0800be48 	.word	0x0800be48
 8001600:	0800be4c 	.word	0x0800be4c
 8001604:	0800be50 	.word	0x0800be50
 8001608:	0800be54 	.word	0x0800be54
 800160c:	0800be58 	.word	0x0800be58
 8001610:	0800be5c 	.word	0x0800be5c
 8001614:	0800be60 	.word	0x0800be60
 8001618:	0800be64 	.word	0x0800be64
 800161c:	0800be68 	.word	0x0800be68
 8001620:	0800be6c 	.word	0x0800be6c
 8001624:	2000069c 	.word	0x2000069c
 8001628:	0800be70 	.word	0x0800be70
 800162c:	0800be74 	.word	0x0800be74
 8001630:	0800be78 	.word	0x0800be78
 8001634:	0800be7c 	.word	0x0800be7c
 8001638:	0800be80 	.word	0x0800be80
 800163c:	0800be84 	.word	0x0800be84
 8001640:	20000708 	.word	0x20000708
 8001644:	200005fc 	.word	0x200005fc
 8001648:	460b      	mov	r3, r1
 800164a:	4991      	ldr	r1, [pc, #580]	@ (8001890 <main+0x850>)
 800164c:	4891      	ldr	r0, [pc, #580]	@ (8001894 <main+0x854>)
 800164e:	f007 fe5f 	bl	8009310 <siprintf>
			sprintf(b_speed,"%2.2f",Booster.speed);
 8001652:	4b91      	ldr	r3, [pc, #580]	@ (8001898 <main+0x858>)
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff96 	bl	8000588 <__aeabi_f2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	498b      	ldr	r1, [pc, #556]	@ (8001890 <main+0x850>)
 8001662:	488e      	ldr	r0, [pc, #568]	@ (800189c <main+0x85c>)
 8001664:	f007 fe54 	bl	8009310 <siprintf>
			sprintf(b_roll,"%2.2f",Booster.normal);
 8001668:	4b8b      	ldr	r3, [pc, #556]	@ (8001898 <main+0x858>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff8b 	bl	8000588 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4986      	ldr	r1, [pc, #536]	@ (8001890 <main+0x850>)
 8001678:	4889      	ldr	r0, [pc, #548]	@ (80018a0 <main+0x860>)
 800167a:	f007 fe49 	bl	8009310 <siprintf>
			sprintf(b_pitch,"%2.2f",Booster.pitch);
 800167e:	4b86      	ldr	r3, [pc, #536]	@ (8001898 <main+0x858>)
 8001680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff80 	bl	8000588 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4980      	ldr	r1, [pc, #512]	@ (8001890 <main+0x850>)
 800168e:	4885      	ldr	r0, [pc, #532]	@ (80018a4 <main+0x864>)
 8001690:	f007 fe3e 	bl	8009310 <siprintf>
			sprintf(b_latitude,"%2.6f",Booster.gpslatitude);
 8001694:	4b80      	ldr	r3, [pc, #512]	@ (8001898 <main+0x858>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff75 	bl	8000588 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4981      	ldr	r1, [pc, #516]	@ (80018a8 <main+0x868>)
 80016a4:	4881      	ldr	r0, [pc, #516]	@ (80018ac <main+0x86c>)
 80016a6:	f007 fe33 	bl	8009310 <siprintf>
			sprintf(b_longitude,"%2.6f",Booster.gpslongitude);
 80016aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001898 <main+0x858>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff6a 	bl	8000588 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	497b      	ldr	r1, [pc, #492]	@ (80018a8 <main+0x868>)
 80016ba:	487d      	ldr	r0, [pc, #500]	@ (80018b0 <main+0x870>)
 80016bc:	f007 fe28 	bl	8009310 <siprintf>
			sprintf(b_bat,"%2d",Booster.battery);
 80016c0:	4b75      	ldr	r3, [pc, #468]	@ (8001898 <main+0x858>)
 80016c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016c6:	461a      	mov	r2, r3
 80016c8:	497a      	ldr	r1, [pc, #488]	@ (80018b4 <main+0x874>)
 80016ca:	487b      	ldr	r0, [pc, #492]	@ (80018b8 <main+0x878>)
 80016cc:	f007 fe20 	bl	8009310 <siprintf>
			sprintf(b_sats,"%2d",Booster.satsinview);
 80016d0:	4b71      	ldr	r3, [pc, #452]	@ (8001898 <main+0x858>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4977      	ldr	r1, [pc, #476]	@ (80018b4 <main+0x874>)
 80016d8:	4878      	ldr	r0, [pc, #480]	@ (80018bc <main+0x87c>)
 80016da:	f007 fe19 	bl	8009310 <siprintf>
			sprintf(b_comm,"%2d",Booster.communication);
 80016de:	4b6e      	ldr	r3, [pc, #440]	@ (8001898 <main+0x858>)
 80016e0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80016e4:	461a      	mov	r2, r3
 80016e6:	4973      	ldr	r1, [pc, #460]	@ (80018b4 <main+0x874>)
 80016e8:	4875      	ldr	r0, [pc, #468]	@ (80018c0 <main+0x880>)
 80016ea:	f007 fe11 	bl	8009310 <siprintf>
		//	sprintf(b_dist,"%4.2f",bs_distance);

			NEXTION_SendString("bs1", b_altitude);
 80016ee:	4975      	ldr	r1, [pc, #468]	@ (80018c4 <main+0x884>)
 80016f0:	4875      	ldr	r0, [pc, #468]	@ (80018c8 <main+0x888>)
 80016f2:	f000 fd7b 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("bs2", b_temperature);
 80016f6:	4967      	ldr	r1, [pc, #412]	@ (8001894 <main+0x854>)
 80016f8:	4874      	ldr	r0, [pc, #464]	@ (80018cc <main+0x88c>)
 80016fa:	f000 fd77 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("bs3", b_speed);
 80016fe:	4967      	ldr	r1, [pc, #412]	@ (800189c <main+0x85c>)
 8001700:	4873      	ldr	r0, [pc, #460]	@ (80018d0 <main+0x890>)
 8001702:	f000 fd73 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("bs4", b_roll);
 8001706:	4966      	ldr	r1, [pc, #408]	@ (80018a0 <main+0x860>)
 8001708:	4872      	ldr	r0, [pc, #456]	@ (80018d4 <main+0x894>)
 800170a:	f000 fd6f 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("bs5", b_pitch);
 800170e:	4965      	ldr	r1, [pc, #404]	@ (80018a4 <main+0x864>)
 8001710:	4871      	ldr	r0, [pc, #452]	@ (80018d8 <main+0x898>)
 8001712:	f000 fd6b 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("bs6", b_sats);
 8001716:	4969      	ldr	r1, [pc, #420]	@ (80018bc <main+0x87c>)
 8001718:	4870      	ldr	r0, [pc, #448]	@ (80018dc <main+0x89c>)
 800171a:	f000 fd67 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("bs7", b_latitude);
 800171e:	4963      	ldr	r1, [pc, #396]	@ (80018ac <main+0x86c>)
 8001720:	486f      	ldr	r0, [pc, #444]	@ (80018e0 <main+0x8a0>)
 8001722:	f000 fd63 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("bs8", b_longitude);
 8001726:	4962      	ldr	r1, [pc, #392]	@ (80018b0 <main+0x870>)
 8001728:	486e      	ldr	r0, [pc, #440]	@ (80018e4 <main+0x8a4>)
 800172a:	f000 fd5f 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("bs9", b_bat);
 800172e:	4962      	ldr	r1, [pc, #392]	@ (80018b8 <main+0x878>)
 8001730:	486d      	ldr	r0, [pc, #436]	@ (80018e8 <main+0x8a8>)
 8001732:	f000 fd5b 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("t56", b_comm);
 8001736:	4962      	ldr	r1, [pc, #392]	@ (80018c0 <main+0x880>)
 8001738:	486c      	ldr	r0, [pc, #432]	@ (80018ec <main+0x8ac>)
 800173a:	f000 fd57 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("t17", b_dist);
 800173e:	496c      	ldr	r1, [pc, #432]	@ (80018f0 <main+0x8b0>)
 8001740:	486c      	ldr	r0, [pc, #432]	@ (80018f4 <main+0x8b4>)
 8001742:	f000 fd53 	bl	80021ec <NEXTION_SendString>

			NEXTION_SendString("m7", e_engine_request);
 8001746:	496c      	ldr	r1, [pc, #432]	@ (80018f8 <main+0x8b8>)
 8001748:	486c      	ldr	r0, [pc, #432]	@ (80018fc <main+0x8bc>)
 800174a:	f000 fd4f 	bl	80021ec <NEXTION_SendString>
			NEXTION_SendString("t59", e_fitil);
 800174e:	496c      	ldr	r1, [pc, #432]	@ (8001900 <main+0x8c0>)
 8001750:	486c      	ldr	r0, [pc, #432]	@ (8001904 <main+0x8c4>)
 8001752:	f000 fd4b 	bl	80021ec <NEXTION_SendString>
	  if(Lora_Rx_Buffer[0]==1 && Lora_Rx_Buffer[47]==0x32){
 8001756:	e020      	b.n	800179a <main+0x75a>
//			HAL_UART_Transmit(&huart3,send_data ,4, 100);
//			HAL_UART_Receive(&huart3, receive_data, 4, 100);
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);

	  }
	    else if(Lora_Rx_Buffer[0]==3 && Lora_Rx_Buffer[47]==0x33)
 8001758:	4b6b      	ldr	r3, [pc, #428]	@ (8001908 <main+0x8c8>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d11c      	bne.n	800179a <main+0x75a>
 8001760:	4b69      	ldr	r3, [pc, #420]	@ (8001908 <main+0x8c8>)
 8001762:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001766:	2b33      	cmp	r3, #51	@ 0x33
 8001768:	d117      	bne.n	800179a <main+0x75a>
		  {

		  Payload.satsinview=Lora_Rx_Buffer[1];
 800176a:	4b67      	ldr	r3, [pc, #412]	@ (8001908 <main+0x8c8>)
 800176c:	785a      	ldrb	r2, [r3, #1]
 800176e:	4b67      	ldr	r3, [pc, #412]	@ (800190c <main+0x8cc>)
 8001770:	701a      	strb	r2, [r3, #0]

		  Payload_union_converter();
 8001772:	f000 ffe7 	bl	8002744 <Payload_union_converter>

		  Payload.battery=Lora_Rx_Buffer[46];
 8001776:	4b64      	ldr	r3, [pc, #400]	@ (8001908 <main+0x8c8>)
 8001778:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 800177c:	4b63      	ldr	r3, [pc, #396]	@ (800190c <main+0x8cc>)
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		  Payload.mod=Lora_Rx_Buffer[70];
 8001782:	4b61      	ldr	r3, [pc, #388]	@ (8001908 <main+0x8c8>)
 8001784:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8001788:	4b60      	ldr	r3, [pc, #384]	@ (800190c <main+0x8cc>)
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
		  Payload.communication=Lora_Rx_Buffer[48];
 800178e:	4b5e      	ldr	r3, [pc, #376]	@ (8001908 <main+0x8c8>)
 8001790:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8001794:	4b5d      	ldr	r3, [pc, #372]	@ (800190c <main+0x8cc>)
 8001796:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36





	  if(flag_adc_cnt >=10 && flag_adc ==1)
 800179a:	4b5d      	ldr	r3, [pc, #372]	@ (8001910 <main+0x8d0>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b09      	cmp	r3, #9
 80017a0:	f67f ad0e 	bls.w	80011c0 <main+0x180>
 80017a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001914 <main+0x8d4>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	f47f ad09 	bne.w	80011c0 <main+0x180>
	  	  {
	  		  if(adc > 2476) adc = 2234;
 80017ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001918 <main+0x8d8>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800191c <main+0x8dc>
 80017b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd02      	ble.n	80017c8 <main+0x788>
 80017c2:	4b55      	ldr	r3, [pc, #340]	@ (8001918 <main+0x8d8>)
 80017c4:	4a56      	ldr	r2, [pc, #344]	@ (8001920 <main+0x8e0>)
 80017c6:	601a      	str	r2, [r3, #0]
	  		  if(adc < 1755) adc = 1755;
 80017c8:	4b53      	ldr	r3, [pc, #332]	@ (8001918 <main+0x8d8>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001924 <main+0x8e4>
 80017d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d502      	bpl.n	80017e2 <main+0x7a2>
 80017dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001918 <main+0x8d8>)
 80017de:	4a52      	ldr	r2, [pc, #328]	@ (8001928 <main+0x8e8>)
 80017e0:	601a      	str	r2, [r3, #0]
	  		  // 6V = 1755 adc val 1,41V
	  		  // 8.4V = 2476 adc val 1,99V 0,58V
	  		  adc_pil_val=(float)( ( ( (adc/4095)*3.3)-1.41) / (1.99-1.41) ) *100 ;
 80017e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001918 <main+0x8d8>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800192c <main+0x8ec>
 80017ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017f0:	ee16 0a90 	vmov	r0, s13
 80017f4:	f7fe fec8 	bl	8000588 <__aeabi_f2d>
 80017f8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001878 <main+0x838>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe ff1b 	bl	8000638 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001880 <main+0x840>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fd5a 	bl	80002c8 <__aeabi_dsub>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	a31a      	add	r3, pc, #104	@ (adr r3, 8001888 <main+0x848>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7ff f833 	bl	800088c <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f9fb 	bl	8000c28 <__aeabi_d2f>
 8001832:	ee07 0a10 	vmov	s14, r0
 8001836:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8001930 <main+0x8f0>
 800183a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183e:	4b3d      	ldr	r3, [pc, #244]	@ (8001934 <main+0x8f4>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
	  		 // adc_pil_val = (adc-1755)/(2746-1755)*100;

	      	sprintf(st_bat,"%2d",(uint8_t)adc_pil_val);
 8001844:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <main+0x8f4>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001852:	793b      	ldrb	r3, [r7, #4]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	4916      	ldr	r1, [pc, #88]	@ (80018b4 <main+0x874>)
 800185a:	4837      	ldr	r0, [pc, #220]	@ (8001938 <main+0x8f8>)
 800185c:	f007 fd58 	bl	8009310 <siprintf>
	      	NEXTION_SendString("t54", st_bat);
 8001860:	4935      	ldr	r1, [pc, #212]	@ (8001938 <main+0x8f8>)
 8001862:	4836      	ldr	r0, [pc, #216]	@ (800193c <main+0x8fc>)
 8001864:	f000 fcc2 	bl	80021ec <NEXTION_SendString>

	  		flag_adc=0;
 8001868:	4b2a      	ldr	r3, [pc, #168]	@ (8001914 <main+0x8d4>)
 800186a:	2200      	movs	r2, #0
 800186c:	701a      	strb	r2, [r3, #0]
	  		flag_adc_cnt=0;
 800186e:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <main+0x8d0>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
	  if(Lora_Rx_Buffer[0]==2 && Lora_Rx_Buffer[47] == 0x31){
 8001874:	e4a4      	b.n	80011c0 <main+0x180>
 8001876:	bf00      	nop
 8001878:	66666666 	.word	0x66666666
 800187c:	400a6666 	.word	0x400a6666
 8001880:	28f5c28f 	.word	0x28f5c28f
 8001884:	3ff68f5c 	.word	0x3ff68f5c
 8001888:	28f5c290 	.word	0x28f5c290
 800188c:	3fe28f5c 	.word	0x3fe28f5c
 8001890:	0800be28 	.word	0x0800be28
 8001894:	20000604 	.word	0x20000604
 8001898:	20000708 	.word	0x20000708
 800189c:	2000060c 	.word	0x2000060c
 80018a0:	20000614 	.word	0x20000614
 80018a4:	2000061c 	.word	0x2000061c
 80018a8:	0800be30 	.word	0x0800be30
 80018ac:	20000624 	.word	0x20000624
 80018b0:	20000630 	.word	0x20000630
 80018b4:	0800be38 	.word	0x0800be38
 80018b8:	2000063c 	.word	0x2000063c
 80018bc:	20000640 	.word	0x20000640
 80018c0:	20000644 	.word	0x20000644
 80018c4:	200005fc 	.word	0x200005fc
 80018c8:	0800be88 	.word	0x0800be88
 80018cc:	0800be8c 	.word	0x0800be8c
 80018d0:	0800be90 	.word	0x0800be90
 80018d4:	0800be94 	.word	0x0800be94
 80018d8:	0800be98 	.word	0x0800be98
 80018dc:	0800be9c 	.word	0x0800be9c
 80018e0:	0800bea0 	.word	0x0800bea0
 80018e4:	0800bea4 	.word	0x0800bea4
 80018e8:	0800bea8 	.word	0x0800bea8
 80018ec:	0800beac 	.word	0x0800beac
 80018f0:	20000648 	.word	0x20000648
 80018f4:	0800beb0 	.word	0x0800beb0
 80018f8:	200006cc 	.word	0x200006cc
 80018fc:	0800beb4 	.word	0x0800beb4
 8001900:	200006c4 	.word	0x200006c4
 8001904:	0800beb8 	.word	0x0800beb8
 8001908:	20000540 	.word	0x20000540
 800190c:	200006d0 	.word	0x200006d0
 8001910:	200005db 	.word	0x200005db
 8001914:	200005dc 	.word	0x200005dc
 8001918:	200005e0 	.word	0x200005e0
 800191c:	451ac000 	.word	0x451ac000
 8001920:	450ba000 	.word	0x450ba000
 8001924:	44db6000 	.word	0x44db6000
 8001928:	44db6000 	.word	0x44db6000
 800192c:	457ff000 	.word	0x457ff000
 8001930:	42c80000 	.word	0x42c80000
 8001934:	200005e4 	.word	0x200005e4
 8001938:	200006a4 	.word	0x200006a4
 800193c:	0800bebc 	.word	0x0800bebc

08001940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b094      	sub	sp, #80	@ 0x50
 8001944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	2234      	movs	r2, #52	@ 0x34
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f007 fd41 	bl	80093d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4b29      	ldr	r3, [pc, #164]	@ (8001a10 <SystemClock_Config+0xd0>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	4a28      	ldr	r2, [pc, #160]	@ (8001a10 <SystemClock_Config+0xd0>)
 800196e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001972:	6413      	str	r3, [r2, #64]	@ 0x40
 8001974:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <SystemClock_Config+0xd0>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001980:	2300      	movs	r3, #0
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	4b23      	ldr	r3, [pc, #140]	@ (8001a14 <SystemClock_Config+0xd4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800198c:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <SystemClock_Config+0xd4>)
 800198e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <SystemClock_Config+0xd4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019aa:	2302      	movs	r3, #2
 80019ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019b4:	2304      	movs	r3, #4
 80019b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80019b8:	2354      	movs	r3, #84	@ 0x54
 80019ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019bc:	2302      	movs	r3, #2
 80019be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019c0:	2302      	movs	r3, #2
 80019c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fc97 	bl	8005300 <HAL_RCC_OscConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019d8:	f000 ffce 	bl	8002978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019dc:	230f      	movs	r3, #15
 80019de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e0:	2302      	movs	r3, #2
 80019e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	2102      	movs	r1, #2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 f937 	bl	8004c6c <HAL_RCC_ClockConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a04:	f000 ffb8 	bl	8002978 <Error_Handler>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3750      	adds	r7, #80	@ 0x50
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40007000 	.word	0x40007000

08001a18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a2c:	4a21      	ldr	r2, [pc, #132]	@ (8001ab4 <MX_ADC1_Init+0x9c>)
 8001a2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a52:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a58:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a5a:	4a17      	ldr	r2, [pc, #92]	@ (8001ab8 <MX_ADC1_Init+0xa0>)
 8001a5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a72:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a78:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a7a:	f001 fc65 	bl	8003348 <HAL_ADC_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a84:	f000 ff78 	bl	8002978 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001a88:	230c      	movs	r3, #12
 8001a8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_ADC1_Init+0x98>)
 8001a9a:	f001 fea9 	bl	80037f0 <HAL_ADC_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001aa4:	f000 ff68 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200001f4 	.word	0x200001f4
 8001ab4:	40012000 	.word	0x40012000
 8001ab8:	0f000001 	.word	0x0f000001

08001abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ac2:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <MX_I2C1_Init+0x54>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ac8:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <MX_I2C1_Init+0x58>)
 8001aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aec:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <MX_I2C1_Init+0x50>)
 8001afa:	f002 ff73 	bl	80049e4 <HAL_I2C_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b04:	f000 ff38 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000023c 	.word	0x2000023c
 8001b10:	40005400 	.word	0x40005400
 8001b14:	00061a80 	.word	0x00061a80

08001b18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b1e:	4a18      	ldr	r2, [pc, #96]	@ (8001b80 <MX_SPI1_Init+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b22:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b64:	220a      	movs	r2, #10
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	@ (8001b7c <MX_SPI1_Init+0x64>)
 8001b6a:	f003 fe67 	bl	800583c <HAL_SPI_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b74:	f000 ff00 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000290 	.word	0x20000290
 8001b80:	40013000 	.word	0x40013000

08001b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_TIM2_Init+0x98>)
 8001ba2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <MX_TIM2_Init+0x98>)
 8001baa:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM2_Init+0x98>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_TIM2_Init+0x98>)
 8001bb8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <MX_TIM2_Init+0x98>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <MX_TIM2_Init+0x98>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bca:	4814      	ldr	r0, [pc, #80]	@ (8001c1c <MX_TIM2_Init+0x98>)
 8001bcc:	f003 febf 	bl	800594e <HAL_TIM_Base_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bd6:	f000 fecf 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_TIM2_Init+0x98>)
 8001be8:	f004 f860 	bl	8005cac <HAL_TIM_ConfigClockSource>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bf2:	f000 fec1 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_TIM2_Init+0x98>)
 8001c04:	f004 fa88 	bl	8006118 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c0e:	f000 feb3 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200002e8 	.word	0x200002e8

08001c20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	463b      	mov	r3, r7
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <MX_TIM3_Init+0x94>)
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb8 <MX_TIM3_Init+0x98>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <MX_TIM3_Init+0x94>)
 8001c44:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <MX_TIM3_Init+0x94>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300-1;
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <MX_TIM3_Init+0x94>)
 8001c52:	f240 122b 	movw	r2, #299	@ 0x12b
 8001c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <MX_TIM3_Init+0x94>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <MX_TIM3_Init+0x94>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c64:	4813      	ldr	r0, [pc, #76]	@ (8001cb4 <MX_TIM3_Init+0x94>)
 8001c66:	f003 fe72 	bl	800594e <HAL_TIM_Base_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001c70:	f000 fe82 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <MX_TIM3_Init+0x94>)
 8001c82:	f004 f813 	bl	8005cac <HAL_TIM_ConfigClockSource>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001c8c:	f000 fe74 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <MX_TIM3_Init+0x94>)
 8001c9e:	f004 fa3b 	bl	8006118 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ca8:	f000 fe66 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000330 	.word	0x20000330
 8001cb8:	40000400 	.word	0x40000400

08001cbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <MX_TIM4_Init+0x94>)
 8001cda:	4a1e      	ldr	r2, [pc, #120]	@ (8001d54 <MX_TIM4_Init+0x98>)
 8001cdc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <MX_TIM4_Init+0x94>)
 8001ce0:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001ce4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_TIM4_Init+0x94>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <MX_TIM4_Init+0x94>)
 8001cee:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001cf2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf4:	4b16      	ldr	r3, [pc, #88]	@ (8001d50 <MX_TIM4_Init+0x94>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <MX_TIM4_Init+0x94>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d00:	4813      	ldr	r0, [pc, #76]	@ (8001d50 <MX_TIM4_Init+0x94>)
 8001d02:	f003 fe24 	bl	800594e <HAL_TIM_Base_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001d0c:	f000 fe34 	bl	8002978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <MX_TIM4_Init+0x94>)
 8001d1e:	f003 ffc5 	bl	8005cac <HAL_TIM_ConfigClockSource>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001d28:	f000 fe26 	bl	8002978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	@ (8001d50 <MX_TIM4_Init+0x94>)
 8001d3a:	f004 f9ed 	bl	8006118 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001d44:	f000 fe18 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000378 	.word	0x20000378
 8001d54:	40000800 	.word	0x40000800

08001d58 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <MX_UART4_Init+0x4c>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <MX_UART4_Init+0x50>)
 8001d60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <MX_UART4_Init+0x4c>)
 8001d64:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d68:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <MX_UART4_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <MX_UART4_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <MX_UART4_Init+0x4c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <MX_UART4_Init+0x4c>)
 8001d7e:	220c      	movs	r2, #12
 8001d80:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <MX_UART4_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <MX_UART4_Init+0x4c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	@ (8001da4 <MX_UART4_Init+0x4c>)
 8001d90:	f004 fa52 	bl	8006238 <HAL_UART_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d9a:	f000 fded 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200003c0 	.word	0x200003c0
 8001da8:	40004c00 	.word	0x40004c00

08001dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <MX_USART2_UART_Init+0x50>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001db8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <MX_USART2_UART_Init+0x4c>)
 8001de4:	f004 fa28 	bl	8006238 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dee:	f000 fdc3 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000408 	.word	0x20000408
 8001dfc:	40004400 	.word	0x40004400

08001e00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <MX_USART3_UART_Init+0x4c>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	@ (8001e50 <MX_USART3_UART_Init+0x50>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <MX_USART3_UART_Init+0x4c>)
 8001e0c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_USART3_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <MX_USART3_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <MX_USART3_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <MX_USART3_UART_Init+0x4c>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <MX_USART3_UART_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <MX_USART3_UART_Init+0x4c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	@ (8001e4c <MX_USART3_UART_Init+0x4c>)
 8001e38:	f004 f9fe 	bl	8006238 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e42:	f000 fd99 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000450 	.word	0x20000450
 8001e50:	40004800 	.word	0x40004800

08001e54 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_USART6_UART_Init+0x4c>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <MX_USART6_UART_Init+0x50>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <MX_USART6_UART_Init+0x4c>)
 8001e60:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001e64:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <MX_USART6_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <MX_USART6_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <MX_USART6_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <MX_USART6_UART_Init+0x4c>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <MX_USART6_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <MX_USART6_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <MX_USART6_UART_Init+0x4c>)
 8001e8c:	f004 f9d4 	bl	8006238 <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e96:	f000 fd6f 	bl	8002978 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000498 	.word	0x20000498
 8001ea4:	40011400 	.word	0x40011400

08001ea8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <MX_DMA_Init+0x3c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee4 <MX_DMA_Init+0x3c>)
 8001eb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <MX_DMA_Init+0x3c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	200c      	movs	r0, #12
 8001ed0:	f001 ffa1 	bl	8003e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ed4:	200c      	movs	r0, #12
 8001ed6:	f001 ffba 	bl	8003e4e <HAL_NVIC_EnableIRQ>

}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b38      	ldr	r3, [pc, #224]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4a37      	ldr	r2, [pc, #220]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0e:	4b35      	ldr	r3, [pc, #212]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a30      	ldr	r2, [pc, #192]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a29      	ldr	r2, [pc, #164]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b27      	ldr	r3, [pc, #156]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a22      	ldr	r2, [pc, #136]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <MX_GPIO_Init+0xfc>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f642 4112 	movw	r1, #11282	@ 0x2c12
 8001f74:	481c      	ldr	r0, [pc, #112]	@ (8001fe8 <MX_GPIO_Init+0x100>)
 8001f76:	f002 fd1b 	bl	80049b0 <HAL_GPIO_WritePin>
                          |GATE_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|Led2_Pin
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f246 011f 	movw	r1, #24607	@ 0x601f
 8001f80:	481a      	ldr	r0, [pc, #104]	@ (8001fec <MX_GPIO_Init+0x104>)
 8001f82:	f002 fd15 	bl	80049b0 <HAL_GPIO_WritePin>
                          |Led1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 CS_Pin Buzzer_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CS_Pin|Buzzer_Pin|GATE_D_Pin
 8001f86:	f642 4312 	movw	r3, #11282	@ 0x2c12
 8001f8a:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4812      	ldr	r0, [pc, #72]	@ (8001fe8 <MX_GPIO_Init+0x100>)
 8001fa0:	f002 fb72 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 Button_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|Button_Pin;
 8001fa4:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480b      	ldr	r0, [pc, #44]	@ (8001fe8 <MX_GPIO_Init+0x100>)
 8001fba:	f002 fb65 	bl	8004688 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin Led2_Pin
                           Led1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|Led2_Pin
 8001fbe:	f246 031f 	movw	r3, #24607	@ 0x601f
 8001fc2:	617b      	str	r3, [r7, #20]
                          |Led1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	@ (8001fec <MX_GPIO_Init+0x104>)
 8001fd8:	f002 fb56 	bl	8004688 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	@ 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020400 	.word	0x40020400

08001ff0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

	if(htim==&htim2)// Lora timer
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8002068 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d10f      	bne.n	8002020 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		flag_lora=1;
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]

		flag_adc_cnt++;
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002010:	701a      	strb	r2, [r3, #0]
		if(flag_adc_cnt >=11) flag_adc_cnt=0;
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b0a      	cmp	r3, #10
 8002018:	d902      	bls.n	8002020 <HAL_TIM_PeriodElapsedCallback+0x30>
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
	}

	if(htim==&htim3)// sensor timer 30ms
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d112      	bne.n	800204e <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		flag_sensor_imu=1;
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]

		flag_counter++;
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002038:	701a      	strb	r2, [r3, #0]
		if(flag_counter == 10)
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b0a      	cmp	r3, #10
 8002040:	d105      	bne.n	800204e <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			flag_sensor_barometre =1;
 8002042:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
			flag_counter=0;
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(htim==&htim4)// megü timer
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a0c      	ldr	r2, [pc, #48]	@ (8002084 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d102      	bne.n	800205c <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		flag_megu=1;
 8002056:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]

	}

}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	200002e8 	.word	0x200002e8
 800206c:	200005d6 	.word	0x200005d6
 8002070:	200005db 	.word	0x200005db
 8002074:	20000330 	.word	0x20000330
 8002078:	200005d8 	.word	0x200005d8
 800207c:	200005da 	.word	0x200005da
 8002080:	200005d9 	.word	0x200005d9
 8002084:	20000378 	.word	0x20000378
 8002088:	200005d7 	.word	0x200005d7

0800208c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
//	}
//	HAL_UART_Receive_IT(&huart2, &rx_data_gps, 1);
//	}


	if(huart == &huart3){
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a06      	ldr	r2, [pc, #24]	@ (80020b0 <HAL_UART_RxCpltCallback+0x24>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d104      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0x1a>
//			rx_index_lora=0;
//
//			}
//		HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);

		 HAL_UART_Receive_DMA(&huart3, Lora_Rx_Buffer, 72);
 800209c:	2248      	movs	r2, #72	@ 0x48
 800209e:	4905      	ldr	r1, [pc, #20]	@ (80020b4 <HAL_UART_RxCpltCallback+0x28>)
 80020a0:	4803      	ldr	r0, [pc, #12]	@ (80020b0 <HAL_UART_RxCpltCallback+0x24>)
 80020a2:	f004 fa3b 	bl	800651c <HAL_UART_Receive_DMA>
		}

}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000450 	.word	0x20000450
 80020b4:	20000540 	.word	0x20000540

080020b8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1 )
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <HAL_ADC_ConvCpltCallback+0x34>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10c      	bne.n	80020e4 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		adc= HAL_ADC_GetValue(&hadc1);
 80020ca:	4809      	ldr	r0, [pc, #36]	@ (80020f0 <HAL_ADC_ConvCpltCallback+0x38>)
 80020cc:	f001 fb6e 	bl	80037ac <HAL_ADC_GetValue>
 80020d0:	ee07 0a90 	vmov	s15, r0
 80020d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80020da:	edc3 7a00 	vstr	s15, [r3]
		flag_adc=1;
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_ADC_ConvCpltCallback+0x40>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
	}
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40012000 	.word	0x40012000
 80020f0:	200001f4 	.word	0x200001f4
 80020f4:	200005e0 	.word	0x200005e0
 80020f8:	200005dc 	.word	0x200005dc

080020fc <E220_write_register>:

int8_t E220_write_register(uint8_t reg,uint8_t parameter)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	460a      	mov	r2, r1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	4613      	mov	r3, r2
 800210a:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800210c:	2201      	movs	r2, #1
 800210e:	2101      	movs	r1, #1
 8002110:	481c      	ldr	r0, [pc, #112]	@ (8002184 <E220_write_register+0x88>)
 8002112:	f002 fc4d 	bl	80049b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8002116:	2201      	movs	r2, #1
 8002118:	2102      	movs	r1, #2
 800211a:	481a      	ldr	r0, [pc, #104]	@ (8002184 <E220_write_register+0x88>)
 800211c:	f002 fc48 	bl	80049b0 <HAL_GPIO_WritePin>

	HAL_Delay(3);
 8002120:	2003      	movs	r0, #3
 8002122:	f001 f8ed 	bl	8003300 <HAL_Delay>

	uint8_t send_data[4]={CMD_SET_REG,reg,1,parameter};
 8002126:	23c0      	movs	r3, #192	@ 0xc0
 8002128:	733b      	strb	r3, [r7, #12]
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	737b      	strb	r3, [r7, #13]
 800212e:	2301      	movs	r3, #1
 8002130:	73bb      	strb	r3, [r7, #14]
 8002132:	79bb      	ldrb	r3, [r7, #6]
 8002134:	73fb      	strb	r3, [r7, #15]
	uint8_t receive_data[4]={0};
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]

	HAL_UART_Transmit(&huart3,send_data ,4, 100);
 800213a:	f107 010c 	add.w	r1, r7, #12
 800213e:	2364      	movs	r3, #100	@ 0x64
 8002140:	2204      	movs	r2, #4
 8002142:	4811      	ldr	r0, [pc, #68]	@ (8002188 <E220_write_register+0x8c>)
 8002144:	f004 f8c8 	bl	80062d8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, receive_data, 4, 100);
 8002148:	f107 0108 	add.w	r1, r7, #8
 800214c:	2364      	movs	r3, #100	@ 0x64
 800214e:	2204      	movs	r2, #4
 8002150:	480d      	ldr	r0, [pc, #52]	@ (8002188 <E220_write_register+0x8c>)
 8002152:	f004 f94c 	bl	80063ee <HAL_UART_Receive>


	if(receive_data[0]==CMD_READ_REG && receive_data[1]==reg && receive_data[2]==1 && receive_data[3] == parameter)
 8002156:	7a3b      	ldrb	r3, [r7, #8]
 8002158:	2bc1      	cmp	r3, #193	@ 0xc1
 800215a:	d10d      	bne.n	8002178 <E220_write_register+0x7c>
 800215c:	7a7b      	ldrb	r3, [r7, #9]
 800215e:	79fa      	ldrb	r2, [r7, #7]
 8002160:	429a      	cmp	r2, r3
 8002162:	d109      	bne.n	8002178 <E220_write_register+0x7c>
 8002164:	7abb      	ldrb	r3, [r7, #10]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d106      	bne.n	8002178 <E220_write_register+0x7c>
 800216a:	7afb      	ldrb	r3, [r7, #11]
 800216c:	79ba      	ldrb	r2, [r7, #6]
 800216e:	429a      	cmp	r2, r3
 8002170:	d102      	bne.n	8002178 <E220_write_register+0x7c>
		return receive_data[3];
 8002172:	7afb      	ldrb	r3, [r7, #11]
 8002174:	b25b      	sxtb	r3, r3
 8002176:	e001      	b.n	800217c <E220_write_register+0x80>
	else
		return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295

}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40020400 	.word	0x40020400
 8002188:	20000450 	.word	0x20000450

0800218c <E220_read_register>:
int8_t E220_read_register(uint8_t reg)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]


	uint8_t send_data[3]={CMD_READ_REG,reg,1};
 8002196:	23c1      	movs	r3, #193	@ 0xc1
 8002198:	733b      	strb	r3, [r7, #12]
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	737b      	strb	r3, [r7, #13]
 800219e:	2301      	movs	r3, #1
 80021a0:	73bb      	strb	r3, [r7, #14]
	uint8_t receive_data[4]={0};
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart3,send_data ,3, 100);
 80021a6:	f107 010c 	add.w	r1, r7, #12
 80021aa:	2364      	movs	r3, #100	@ 0x64
 80021ac:	2203      	movs	r2, #3
 80021ae:	480e      	ldr	r0, [pc, #56]	@ (80021e8 <E220_read_register+0x5c>)
 80021b0:	f004 f892 	bl	80062d8 <HAL_UART_Transmit>



	HAL_UART_Receive(&huart3, receive_data, 4, 100);
 80021b4:	f107 0108 	add.w	r1, r7, #8
 80021b8:	2364      	movs	r3, #100	@ 0x64
 80021ba:	2204      	movs	r2, #4
 80021bc:	480a      	ldr	r0, [pc, #40]	@ (80021e8 <E220_read_register+0x5c>)
 80021be:	f004 f916 	bl	80063ee <HAL_UART_Receive>

	if(receive_data[0]==CMD_READ_REG && receive_data[1]==reg && receive_data[2]==1)
 80021c2:	7a3b      	ldrb	r3, [r7, #8]
 80021c4:	2bc1      	cmp	r3, #193	@ 0xc1
 80021c6:	d109      	bne.n	80021dc <E220_read_register+0x50>
 80021c8:	7a7b      	ldrb	r3, [r7, #9]
 80021ca:	79fa      	ldrb	r2, [r7, #7]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d105      	bne.n	80021dc <E220_read_register+0x50>
 80021d0:	7abb      	ldrb	r3, [r7, #10]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <E220_read_register+0x50>
		return receive_data[3];
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	e001      	b.n	80021e0 <E220_read_register+0x54>
	else
		return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000450 	.word	0x20000450

080021ec <NEXTION_SendString>:


void NEXTION_SendString (char *ID, char *string)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b090      	sub	sp, #64	@ 0x40
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf (buf, "%s.txt=\"%s\"", ID, string);
 80021f6:	f107 0008 	add.w	r0, r7, #8
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	490b      	ldr	r1, [pc, #44]	@ (800222c <NEXTION_SendString+0x40>)
 8002200:	f007 f886 	bl	8009310 <siprintf>
 8002204:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, len, 1000);
 8002206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002208:	b29a      	uxth	r2, r3
 800220a:	f107 0108 	add.w	r1, r7, #8
 800220e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002212:	4807      	ldr	r0, [pc, #28]	@ (8002230 <NEXTION_SendString+0x44>)
 8002214:	f004 f860 	bl	80062d8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, Cmd_End, 3, 100);
 8002218:	2364      	movs	r3, #100	@ 0x64
 800221a:	2203      	movs	r2, #3
 800221c:	4905      	ldr	r1, [pc, #20]	@ (8002234 <NEXTION_SendString+0x48>)
 800221e:	4804      	ldr	r0, [pc, #16]	@ (8002230 <NEXTION_SendString+0x44>)
 8002220:	f004 f85a 	bl	80062d8 <HAL_UART_Transmit>
}
 8002224:	bf00      	nop
 8002226:	3740      	adds	r7, #64	@ 0x40
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	0800bec0 	.word	0x0800bec0
 8002230:	200003c0 	.word	0x200003c0
 8002234:	20000000 	.word	0x20000000

08002238 <Booster_union_converter>:
}



void Booster_union_converter(void)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
			float2unit8 f2u8_booster;
					 for(uint8_t i=0;i<4;i++)
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e013      	b.n	800226c <Booster_union_converter+0x34>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+2];
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	1c9a      	adds	r2, r3, #2
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	4985      	ldr	r1, [pc, #532]	@ (8002460 <Booster_union_converter+0x228>)
 800224c:	5c8a      	ldrb	r2, [r1, r2]
 800224e:	3310      	adds	r3, #16
 8002250:	443b      	add	r3, r7
 8002252:	f803 2c10 	strb.w	r2, [r3, #-16]
						 HYI_BUFFER[34+i]=Lora_Rx_Buffer[i+5]; // 34 35 36 37
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	1d5a      	adds	r2, r3, #5
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	3322      	adds	r3, #34	@ 0x22
 800225e:	4980      	ldr	r1, [pc, #512]	@ (8002460 <Booster_union_converter+0x228>)
 8002260:	5c89      	ldrb	r1, [r1, r2]
 8002262:	4a80      	ldr	r2, [pc, #512]	@ (8002464 <Booster_union_converter+0x22c>)
 8002264:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	3301      	adds	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d9e8      	bls.n	8002244 <Booster_union_converter+0xc>
					 }
					 Booster.gpsaltitude=f2u8_booster.fVal;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4a7c      	ldr	r2, [pc, #496]	@ (8002468 <Booster_union_converter+0x230>)
 8002276:	6053      	str	r3, [r2, #4]


					 for(uint8_t i=0;i<4;i++)
 8002278:	2300      	movs	r3, #0
 800227a:	73bb      	strb	r3, [r7, #14]
 800227c:	e014      	b.n	80022a8 <Booster_union_converter+0x70>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+6];
 800227e:	7bbb      	ldrb	r3, [r7, #14]
 8002280:	1d9a      	adds	r2, r3, #6
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	4976      	ldr	r1, [pc, #472]	@ (8002460 <Booster_union_converter+0x228>)
 8002286:	5c8a      	ldrb	r2, [r1, r2]
 8002288:	3310      	adds	r3, #16
 800228a:	443b      	add	r3, r7
 800228c:	f803 2c10 	strb.w	r2, [r3, #-16]
						 HYI_BUFFER[38+i]=Lora_Rx_Buffer[i+9]; // 38 39 40 41
 8002290:	7bbb      	ldrb	r3, [r7, #14]
 8002292:	f103 0209 	add.w	r2, r3, #9
 8002296:	7bbb      	ldrb	r3, [r7, #14]
 8002298:	3326      	adds	r3, #38	@ 0x26
 800229a:	4971      	ldr	r1, [pc, #452]	@ (8002460 <Booster_union_converter+0x228>)
 800229c:	5c89      	ldrb	r1, [r1, r2]
 800229e:	4a71      	ldr	r2, [pc, #452]	@ (8002464 <Booster_union_converter+0x22c>)
 80022a0:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80022a2:	7bbb      	ldrb	r3, [r7, #14]
 80022a4:	3301      	adds	r3, #1
 80022a6:	73bb      	strb	r3, [r7, #14]
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d9e7      	bls.n	800227e <Booster_union_converter+0x46>
					 }
					 Booster.gpslatitude=f2u8_booster.fVal;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	4a6d      	ldr	r2, [pc, #436]	@ (8002468 <Booster_union_converter+0x230>)
 80022b2:	6093      	str	r3, [r2, #8]

					 for(uint8_t i=0;i<4;i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	737b      	strb	r3, [r7, #13]
 80022b8:	e015      	b.n	80022e6 <Booster_union_converter+0xae>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+10];
 80022ba:	7b7b      	ldrb	r3, [r7, #13]
 80022bc:	f103 020a 	add.w	r2, r3, #10
 80022c0:	7b7b      	ldrb	r3, [r7, #13]
 80022c2:	4967      	ldr	r1, [pc, #412]	@ (8002460 <Booster_union_converter+0x228>)
 80022c4:	5c8a      	ldrb	r2, [r1, r2]
 80022c6:	3310      	adds	r3, #16
 80022c8:	443b      	add	r3, r7
 80022ca:	f803 2c10 	strb.w	r2, [r3, #-16]
						 HYI_BUFFER[42+i]=Lora_Rx_Buffer[i+13]; // 42 43 44 45
 80022ce:	7b7b      	ldrb	r3, [r7, #13]
 80022d0:	f103 020d 	add.w	r2, r3, #13
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	332a      	adds	r3, #42	@ 0x2a
 80022d8:	4961      	ldr	r1, [pc, #388]	@ (8002460 <Booster_union_converter+0x228>)
 80022da:	5c89      	ldrb	r1, [r1, r2]
 80022dc:	4a61      	ldr	r2, [pc, #388]	@ (8002464 <Booster_union_converter+0x22c>)
 80022de:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80022e0:	7b7b      	ldrb	r3, [r7, #13]
 80022e2:	3301      	adds	r3, #1
 80022e4:	737b      	strb	r3, [r7, #13]
 80022e6:	7b7b      	ldrb	r3, [r7, #13]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d9e6      	bls.n	80022ba <Booster_union_converter+0x82>
					 }
					 Booster.gpslongitude=f2u8_booster.fVal;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002468 <Booster_union_converter+0x230>)
 80022f0:	60d3      	str	r3, [r2, #12]

					 for(uint8_t i=0;i<4;i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	733b      	strb	r3, [r7, #12]
 80022f6:	e00c      	b.n	8002312 <Booster_union_converter+0xda>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+14];
 80022f8:	7b3b      	ldrb	r3, [r7, #12]
 80022fa:	f103 020e 	add.w	r2, r3, #14
 80022fe:	7b3b      	ldrb	r3, [r7, #12]
 8002300:	4957      	ldr	r1, [pc, #348]	@ (8002460 <Booster_union_converter+0x228>)
 8002302:	5c8a      	ldrb	r2, [r1, r2]
 8002304:	3310      	adds	r3, #16
 8002306:	443b      	add	r3, r7
 8002308:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 800230c:	7b3b      	ldrb	r3, [r7, #12]
 800230e:	3301      	adds	r3, #1
 8002310:	733b      	strb	r3, [r7, #12]
 8002312:	7b3b      	ldrb	r3, [r7, #12]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d9ef      	bls.n	80022f8 <Booster_union_converter+0xc0>
					 }
					 Booster.altitude=f2u8_booster.fVal;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4a53      	ldr	r2, [pc, #332]	@ (8002468 <Booster_union_converter+0x230>)
 800231c:	6153      	str	r3, [r2, #20]



					 for(uint8_t i=0;i<4;i++)
 800231e:	2300      	movs	r3, #0
 8002320:	72fb      	strb	r3, [r7, #11]
 8002322:	e00c      	b.n	800233e <Booster_union_converter+0x106>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+18];
 8002324:	7afb      	ldrb	r3, [r7, #11]
 8002326:	f103 0212 	add.w	r2, r3, #18
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	494c      	ldr	r1, [pc, #304]	@ (8002460 <Booster_union_converter+0x228>)
 800232e:	5c8a      	ldrb	r2, [r1, r2]
 8002330:	3310      	adds	r3, #16
 8002332:	443b      	add	r3, r7
 8002334:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 8002338:	7afb      	ldrb	r3, [r7, #11]
 800233a:	3301      	adds	r3, #1
 800233c:	72fb      	strb	r3, [r7, #11]
 800233e:	7afb      	ldrb	r3, [r7, #11]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d9ef      	bls.n	8002324 <Booster_union_converter+0xec>
					 }
					 Booster.speed=f2u8_booster.fVal;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4a48      	ldr	r2, [pc, #288]	@ (8002468 <Booster_union_converter+0x230>)
 8002348:	6113      	str	r3, [r2, #16]


					 for(uint8_t i=0;i<4;i++)
 800234a:	2300      	movs	r3, #0
 800234c:	72bb      	strb	r3, [r7, #10]
 800234e:	e00c      	b.n	800236a <Booster_union_converter+0x132>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+22];
 8002350:	7abb      	ldrb	r3, [r7, #10]
 8002352:	f103 0216 	add.w	r2, r3, #22
 8002356:	7abb      	ldrb	r3, [r7, #10]
 8002358:	4941      	ldr	r1, [pc, #260]	@ (8002460 <Booster_union_converter+0x228>)
 800235a:	5c8a      	ldrb	r2, [r1, r2]
 800235c:	3310      	adds	r3, #16
 800235e:	443b      	add	r3, r7
 8002360:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 8002364:	7abb      	ldrb	r3, [r7, #10]
 8002366:	3301      	adds	r3, #1
 8002368:	72bb      	strb	r3, [r7, #10]
 800236a:	7abb      	ldrb	r3, [r7, #10]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d9ef      	bls.n	8002350 <Booster_union_converter+0x118>
					 }
					 Booster.temperature=f2u8_booster.fVal;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4a3d      	ldr	r2, [pc, #244]	@ (8002468 <Booster_union_converter+0x230>)
 8002374:	6193      	str	r3, [r2, #24]


					 for(uint8_t i=0;i<4;i++)
 8002376:	2300      	movs	r3, #0
 8002378:	727b      	strb	r3, [r7, #9]
 800237a:	e00c      	b.n	8002396 <Booster_union_converter+0x15e>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+26];
 800237c:	7a7b      	ldrb	r3, [r7, #9]
 800237e:	f103 021a 	add.w	r2, r3, #26
 8002382:	7a7b      	ldrb	r3, [r7, #9]
 8002384:	4936      	ldr	r1, [pc, #216]	@ (8002460 <Booster_union_converter+0x228>)
 8002386:	5c8a      	ldrb	r2, [r1, r2]
 8002388:	3310      	adds	r3, #16
 800238a:	443b      	add	r3, r7
 800238c:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 8002390:	7a7b      	ldrb	r3, [r7, #9]
 8002392:	3301      	adds	r3, #1
 8002394:	727b      	strb	r3, [r7, #9]
 8002396:	7a7b      	ldrb	r3, [r7, #9]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d9ef      	bls.n	800237c <Booster_union_converter+0x144>
					 }
					 Booster.accx=f2u8_booster.fVal;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4a32      	ldr	r2, [pc, #200]	@ (8002468 <Booster_union_converter+0x230>)
 80023a0:	61d3      	str	r3, [r2, #28]


					 for(uint8_t i=0;i<4;i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	723b      	strb	r3, [r7, #8]
 80023a6:	e00c      	b.n	80023c2 <Booster_union_converter+0x18a>
					 {
						 f2u8_booster.array[i]=Lora_Rx_Buffer[i+30];
 80023a8:	7a3b      	ldrb	r3, [r7, #8]
 80023aa:	f103 021e 	add.w	r2, r3, #30
 80023ae:	7a3b      	ldrb	r3, [r7, #8]
 80023b0:	492b      	ldr	r1, [pc, #172]	@ (8002460 <Booster_union_converter+0x228>)
 80023b2:	5c8a      	ldrb	r2, [r1, r2]
 80023b4:	3310      	adds	r3, #16
 80023b6:	443b      	add	r3, r7
 80023b8:	f803 2c10 	strb.w	r2, [r3, #-16]
					 for(uint8_t i=0;i<4;i++)
 80023bc:	7a3b      	ldrb	r3, [r7, #8]
 80023be:	3301      	adds	r3, #1
 80023c0:	723b      	strb	r3, [r7, #8]
 80023c2:	7a3b      	ldrb	r3, [r7, #8]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d9ef      	bls.n	80023a8 <Booster_union_converter+0x170>
					 }
					 Booster.accy=f2u8_booster.fVal;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4a27      	ldr	r2, [pc, #156]	@ (8002468 <Booster_union_converter+0x230>)
 80023cc:	6213      	str	r3, [r2, #32]


				      for(uint8_t i=0;i<4;i++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	71fb      	strb	r3, [r7, #7]
 80023d2:	e00c      	b.n	80023ee <Booster_union_converter+0x1b6>
					 {
				    	  f2u8_booster.array[i]=Lora_Rx_Buffer[i+34];
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4920      	ldr	r1, [pc, #128]	@ (8002460 <Booster_union_converter+0x228>)
 80023de:	5c8a      	ldrb	r2, [r1, r2]
 80023e0:	3310      	adds	r3, #16
 80023e2:	443b      	add	r3, r7
 80023e4:	f803 2c10 	strb.w	r2, [r3, #-16]
				      for(uint8_t i=0;i<4;i++)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	3301      	adds	r3, #1
 80023ec:	71fb      	strb	r3, [r7, #7]
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d9ef      	bls.n	80023d4 <Booster_union_converter+0x19c>
					 }
				      Booster.accz=f2u8_booster.fVal;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002468 <Booster_union_converter+0x230>)
 80023f8:	6253      	str	r3, [r2, #36]	@ 0x24

					  for(uint8_t i=0;i<4;i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	71bb      	strb	r3, [r7, #6]
 80023fe:	e00c      	b.n	800241a <Booster_union_converter+0x1e2>
					 {
						  f2u8_booster.array[i]=Lora_Rx_Buffer[i+38];
 8002400:	79bb      	ldrb	r3, [r7, #6]
 8002402:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	4915      	ldr	r1, [pc, #84]	@ (8002460 <Booster_union_converter+0x228>)
 800240a:	5c8a      	ldrb	r2, [r1, r2]
 800240c:	3310      	adds	r3, #16
 800240e:	443b      	add	r3, r7
 8002410:	f803 2c10 	strb.w	r2, [r3, #-16]
					  for(uint8_t i=0;i<4;i++)
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	3301      	adds	r3, #1
 8002418:	71bb      	strb	r3, [r7, #6]
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d9ef      	bls.n	8002400 <Booster_union_converter+0x1c8>
					 }
					  Booster.normal=f2u8_booster.fVal;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4a11      	ldr	r2, [pc, #68]	@ (8002468 <Booster_union_converter+0x230>)
 8002424:	6293      	str	r3, [r2, #40]	@ 0x28

					  for(uint8_t i=0;i<4;i++)
 8002426:	2300      	movs	r3, #0
 8002428:	717b      	strb	r3, [r7, #5]
 800242a:	e00c      	b.n	8002446 <Booster_union_converter+0x20e>
					 {
						  f2u8_booster.array[i]=Lora_Rx_Buffer[i+42];
 800242c:	797b      	ldrb	r3, [r7, #5]
 800242e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8002432:	797b      	ldrb	r3, [r7, #5]
 8002434:	490a      	ldr	r1, [pc, #40]	@ (8002460 <Booster_union_converter+0x228>)
 8002436:	5c8a      	ldrb	r2, [r1, r2]
 8002438:	3310      	adds	r3, #16
 800243a:	443b      	add	r3, r7
 800243c:	f803 2c10 	strb.w	r2, [r3, #-16]
					  for(uint8_t i=0;i<4;i++)
 8002440:	797b      	ldrb	r3, [r7, #5]
 8002442:	3301      	adds	r3, #1
 8002444:	717b      	strb	r3, [r7, #5]
 8002446:	797b      	ldrb	r3, [r7, #5]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d9ef      	bls.n	800242c <Booster_union_converter+0x1f4>
					 }
					  Booster.pitch=f2u8_booster.fVal;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4a06      	ldr	r2, [pc, #24]	@ (8002468 <Booster_union_converter+0x230>)
 8002450:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000540 	.word	0x20000540
 8002464:	20000588 	.word	0x20000588
 8002468:	20000708 	.word	0x20000708

0800246c <Sustainer_union_converter>:




void Sustainer_union_converter(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b08f      	sub	sp, #60	@ 0x3c
 8002470:	af00      	add	r7, sp, #0
	 float2unit8 f2u8_gpsalt;
					 for(uint8_t i=0;i<4;i++)
 8002472:	2300      	movs	r3, #0
 8002474:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002478:	e019      	b.n	80024ae <Sustainer_union_converter+0x42>
					 {
						 f2u8_gpsalt.array[i]=Lora_Rx_Buffer[i+2];
 800247a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800247e:	1c9a      	adds	r2, r3, #2
 8002480:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002484:	49ac      	ldr	r1, [pc, #688]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 8002486:	5c8a      	ldrb	r2, [r1, r2]
 8002488:	3338      	adds	r3, #56	@ 0x38
 800248a:	443b      	add	r3, r7
 800248c:	f803 2c10 	strb.w	r2, [r3, #-16]
						 HYI_BUFFER[10+i] =Lora_Rx_Buffer[i+5]; // 10 11 12 13
 8002490:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002494:	1d5a      	adds	r2, r3, #5
 8002496:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800249a:	330a      	adds	r3, #10
 800249c:	49a6      	ldr	r1, [pc, #664]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 800249e:	5c89      	ldrb	r1, [r1, r2]
 80024a0:	4aa6      	ldr	r2, [pc, #664]	@ (800273c <Sustainer_union_converter+0x2d0>)
 80024a2:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80024a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024a8:	3301      	adds	r3, #1
 80024aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80024ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d9e1      	bls.n	800247a <Sustainer_union_converter+0xe>
					 }
					 Sustainer.gpsaltitude=f2u8_gpsalt.fVal;
 80024b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b8:	4aa1      	ldr	r2, [pc, #644]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 80024ba:	6053      	str	r3, [r2, #4]
				 float2unit8 f2u8_latitude;

					 for(uint8_t i=0;i<4;i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80024c2:	e01a      	b.n	80024fa <Sustainer_union_converter+0x8e>
					 {
						f2u8_latitude.array[i]=Lora_Rx_Buffer[i+6];
 80024c4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80024c8:	1d9a      	adds	r2, r3, #6
 80024ca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80024ce:	499a      	ldr	r1, [pc, #616]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 80024d0:	5c8a      	ldrb	r2, [r1, r2]
 80024d2:	3338      	adds	r3, #56	@ 0x38
 80024d4:	443b      	add	r3, r7
 80024d6:	f803 2c14 	strb.w	r2, [r3, #-20]
						HYI_BUFFER[14+i] =Lora_Rx_Buffer[i+9]; // 14 15 16 17
 80024da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80024de:	f103 0209 	add.w	r2, r3, #9
 80024e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80024e6:	330e      	adds	r3, #14
 80024e8:	4993      	ldr	r1, [pc, #588]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 80024ea:	5c89      	ldrb	r1, [r1, r2]
 80024ec:	4a93      	ldr	r2, [pc, #588]	@ (800273c <Sustainer_union_converter+0x2d0>)
 80024ee:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 80024f0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80024f4:	3301      	adds	r3, #1
 80024f6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80024fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d9e0      	bls.n	80024c4 <Sustainer_union_converter+0x58>
					 }
					 Sustainer.gpslatitude=f2u8_latitude.fVal;
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	4a8e      	ldr	r2, [pc, #568]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 8002506:	6093      	str	r3, [r2, #8]

				 float2unit8 f2u8_longitude;
					 for(uint8_t i=0;i<4;i++)
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800250e:	e01b      	b.n	8002548 <Sustainer_union_converter+0xdc>
					 {
						f2u8_longitude.array[i]=Lora_Rx_Buffer[i+10];
 8002510:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002514:	f103 020a 	add.w	r2, r3, #10
 8002518:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800251c:	4986      	ldr	r1, [pc, #536]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 800251e:	5c8a      	ldrb	r2, [r1, r2]
 8002520:	3338      	adds	r3, #56	@ 0x38
 8002522:	443b      	add	r3, r7
 8002524:	f803 2c18 	strb.w	r2, [r3, #-24]
						HYI_BUFFER[18+i] =Lora_Rx_Buffer[i+13]; // 18 19 20 21
 8002528:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800252c:	f103 020d 	add.w	r2, r3, #13
 8002530:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002534:	3312      	adds	r3, #18
 8002536:	4980      	ldr	r1, [pc, #512]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 8002538:	5c89      	ldrb	r1, [r1, r2]
 800253a:	4a80      	ldr	r2, [pc, #512]	@ (800273c <Sustainer_union_converter+0x2d0>)
 800253c:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 800253e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002542:	3301      	adds	r3, #1
 8002544:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8002548:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800254c:	2b03      	cmp	r3, #3
 800254e:	d9df      	bls.n	8002510 <Sustainer_union_converter+0xa4>
					 }
					 Sustainer.gpslongitude=f2u8_longitude.fVal;
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	4a7b      	ldr	r2, [pc, #492]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 8002554:	60d3      	str	r3, [r2, #12]

				 float2unit8 f2u8_altitude;
					 for(uint8_t i=0;i<4;i++)
 8002556:	2300      	movs	r3, #0
 8002558:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800255c:	e01b      	b.n	8002596 <Sustainer_union_converter+0x12a>
					 {
						f2u8_altitude.array[i]=Lora_Rx_Buffer[i+14];
 800255e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002562:	f103 020e 	add.w	r2, r3, #14
 8002566:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800256a:	4973      	ldr	r1, [pc, #460]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 800256c:	5c8a      	ldrb	r2, [r1, r2]
 800256e:	3338      	adds	r3, #56	@ 0x38
 8002570:	443b      	add	r3, r7
 8002572:	f803 2c1c 	strb.w	r2, [r3, #-28]
						HYI_BUFFER[6+i] =Lora_Rx_Buffer[i+17]; // 6 7 8 9
 8002576:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800257a:	f103 0211 	add.w	r2, r3, #17
 800257e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002582:	3306      	adds	r3, #6
 8002584:	496c      	ldr	r1, [pc, #432]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 8002586:	5c89      	ldrb	r1, [r1, r2]
 8002588:	4a6c      	ldr	r2, [pc, #432]	@ (800273c <Sustainer_union_converter+0x2d0>)
 800258a:	54d1      	strb	r1, [r2, r3]
					 for(uint8_t i=0;i<4;i++)
 800258c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002590:	3301      	adds	r3, #1
 8002592:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8002596:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800259a:	2b03      	cmp	r3, #3
 800259c:	d9df      	bls.n	800255e <Sustainer_union_converter+0xf2>
					 }
					 Sustainer.altitude=f2u8_altitude.fVal;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	4a67      	ldr	r2, [pc, #412]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 80025a2:	6153      	str	r3, [r2, #20]

				 float2unit8 f2u8_speed;

					 for(uint8_t i=0;i<4;i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80025aa:	e010      	b.n	80025ce <Sustainer_union_converter+0x162>
					 {
						 f2u8_speed.array[i]=Lora_Rx_Buffer[i+18];
 80025ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025b0:	f103 0212 	add.w	r2, r3, #18
 80025b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025b8:	495f      	ldr	r1, [pc, #380]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 80025ba:	5c8a      	ldrb	r2, [r1, r2]
 80025bc:	3338      	adds	r3, #56	@ 0x38
 80025be:	443b      	add	r3, r7
 80025c0:	f803 2c20 	strb.w	r2, [r3, #-32]
					 for(uint8_t i=0;i<4;i++)
 80025c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025c8:	3301      	adds	r3, #1
 80025ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80025ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d9ea      	bls.n	80025ac <Sustainer_union_converter+0x140>
					 }
					 Sustainer.speed=f2u8_speed.fVal;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4a59      	ldr	r2, [pc, #356]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 80025da:	6113      	str	r3, [r2, #16]

				 float2unit8 f2u8_temp;
					 for(uint8_t i=0;i<4;i++)
 80025dc:	2300      	movs	r3, #0
 80025de:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80025e2:	e010      	b.n	8002606 <Sustainer_union_converter+0x19a>
					 {
						 f2u8_temp.array[i]=Lora_Rx_Buffer[i+22];
 80025e4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80025e8:	f103 0216 	add.w	r2, r3, #22
 80025ec:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80025f0:	4951      	ldr	r1, [pc, #324]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 80025f2:	5c8a      	ldrb	r2, [r1, r2]
 80025f4:	3338      	adds	r3, #56	@ 0x38
 80025f6:	443b      	add	r3, r7
 80025f8:	f803 2c24 	strb.w	r2, [r3, #-36]
					 for(uint8_t i=0;i<4;i++)
 80025fc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002600:	3301      	adds	r3, #1
 8002602:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002606:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800260a:	2b03      	cmp	r3, #3
 800260c:	d9ea      	bls.n	80025e4 <Sustainer_union_converter+0x178>
					 }
					 Sustainer.temperature=f2u8_temp.fVal;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	4a4b      	ldr	r2, [pc, #300]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 8002612:	6193      	str	r3, [r2, #24]

				 float2unit8 f2u8_accx;
					 for(uint8_t i=0;i<4;i++)
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800261a:	e010      	b.n	800263e <Sustainer_union_converter+0x1d2>
					 {
						 f2u8_accx.array[i]=Lora_Rx_Buffer[i+26];
 800261c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002620:	f103 021a 	add.w	r2, r3, #26
 8002624:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002628:	4943      	ldr	r1, [pc, #268]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 800262a:	5c8a      	ldrb	r2, [r1, r2]
 800262c:	3338      	adds	r3, #56	@ 0x38
 800262e:	443b      	add	r3, r7
 8002630:	f803 2c28 	strb.w	r2, [r3, #-40]
					 for(uint8_t i=0;i<4;i++)
 8002634:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002638:	3301      	adds	r3, #1
 800263a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800263e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002642:	2b03      	cmp	r3, #3
 8002644:	d9ea      	bls.n	800261c <Sustainer_union_converter+0x1b0>
						// HYI_BUFFER[58+i]=Lora_Rx_Buffer[i+29]; //
					 }
					 Sustainer.accx=f2u8_accx.fVal;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4a3d      	ldr	r2, [pc, #244]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 800264a:	61d3      	str	r3, [r2, #28]

				float2unit8 f2u8_accy;
					 for(uint8_t i=0;i<4;i++)
 800264c:	2300      	movs	r3, #0
 800264e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002652:	e010      	b.n	8002676 <Sustainer_union_converter+0x20a>
					 {
						 f2u8_accy.array[i]=Lora_Rx_Buffer[i+30];
 8002654:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002658:	f103 021e 	add.w	r2, r3, #30
 800265c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002660:	4935      	ldr	r1, [pc, #212]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 8002662:	5c8a      	ldrb	r2, [r1, r2]
 8002664:	3338      	adds	r3, #56	@ 0x38
 8002666:	443b      	add	r3, r7
 8002668:	f803 2c2c 	strb.w	r2, [r3, #-44]
					 for(uint8_t i=0;i<4;i++)
 800266c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002670:	3301      	adds	r3, #1
 8002672:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002676:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800267a:	2b03      	cmp	r3, #3
 800267c:	d9ea      	bls.n	8002654 <Sustainer_union_converter+0x1e8>
						 //HYI_BUFFER[62+i]=Lora_Rx_Buffer[i+33];
					 }
					 Sustainer.accy=f2u8_accy.fVal;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4a2f      	ldr	r2, [pc, #188]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 8002682:	6213      	str	r3, [r2, #32]

				float2unit8 f2u8_accz;
				      for(uint8_t i=0;i<4;i++)
 8002684:	2300      	movs	r3, #0
 8002686:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800268a:	e010      	b.n	80026ae <Sustainer_union_converter+0x242>
					 {
				    	  f2u8_accz.array[i]=Lora_Rx_Buffer[i+34];
 800268c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002690:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8002694:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002698:	4927      	ldr	r1, [pc, #156]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 800269a:	5c8a      	ldrb	r2, [r1, r2]
 800269c:	3338      	adds	r3, #56	@ 0x38
 800269e:	443b      	add	r3, r7
 80026a0:	f803 2c30 	strb.w	r2, [r3, #-48]
				      for(uint8_t i=0;i<4;i++)
 80026a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026a8:	3301      	adds	r3, #1
 80026aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80026ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d9ea      	bls.n	800268c <Sustainer_union_converter+0x220>
				    	//  HYI_BUFFER[66+i]=Lora_Rx_Buffer[i+37];
					 }
				      Sustainer.accz=f2u8_accz.fVal;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4a21      	ldr	r2, [pc, #132]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 80026ba:	6253      	str	r3, [r2, #36]	@ 0x24

				float2unit8 f2u8_roll;
					  for(uint8_t i=0;i<4;i++)
 80026bc:	2300      	movs	r3, #0
 80026be:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80026c2:	e010      	b.n	80026e6 <Sustainer_union_converter+0x27a>
					 {
						  f2u8_roll.array[i]=Lora_Rx_Buffer[i+38];
 80026c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026c8:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80026cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026d0:	4919      	ldr	r1, [pc, #100]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 80026d2:	5c8a      	ldrb	r2, [r1, r2]
 80026d4:	3338      	adds	r3, #56	@ 0x38
 80026d6:	443b      	add	r3, r7
 80026d8:	f803 2c34 	strb.w	r2, [r3, #-52]
					  for(uint8_t i=0;i<4;i++)
 80026dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026e0:	3301      	adds	r3, #1
 80026e2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80026e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d9ea      	bls.n	80026c4 <Sustainer_union_converter+0x258>
					 }
					  Sustainer.normal=f2u8_roll.fVal;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a13      	ldr	r2, [pc, #76]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 80026f2:	6293      	str	r3, [r2, #40]	@ 0x28

				float2unit8 f2u8_pitch;
					  for(uint8_t i=0;i<4;i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80026fa:	e010      	b.n	800271e <Sustainer_union_converter+0x2b2>
					 {
						  f2u8_pitch.array[i]=Lora_Rx_Buffer[i+42];
 80026fc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002700:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8002704:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002708:	490b      	ldr	r1, [pc, #44]	@ (8002738 <Sustainer_union_converter+0x2cc>)
 800270a:	5c8a      	ldrb	r2, [r1, r2]
 800270c:	3338      	adds	r3, #56	@ 0x38
 800270e:	443b      	add	r3, r7
 8002710:	f803 2c38 	strb.w	r2, [r3, #-56]
					  for(uint8_t i=0;i<4;i++)
 8002714:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002718:	3301      	adds	r3, #1
 800271a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800271e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002722:	2b03      	cmp	r3, #3
 8002724:	d9ea      	bls.n	80026fc <Sustainer_union_converter+0x290>
					 }
					  Sustainer.pitch=f2u8_pitch.fVal;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	4a05      	ldr	r2, [pc, #20]	@ (8002740 <Sustainer_union_converter+0x2d4>)
 800272a:	62d3      	str	r3, [r2, #44]	@ 0x2c

}
 800272c:	bf00      	nop
 800272e:	373c      	adds	r7, #60	@ 0x3c
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	20000540 	.word	0x20000540
 800273c:	20000588 	.word	0x20000588
 8002740:	20000740 	.word	0x20000740

08002744 <Payload_union_converter>:
void Payload_union_converter(void)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
	 float2unit8 f2u8;
			 for(uint8_t i=0;i<4;i++)
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e013      	b.n	8002778 <Payload_union_converter+0x34>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+2];
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	1c9a      	adds	r2, r3, #2
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	4985      	ldr	r1, [pc, #532]	@ (800296c <Payload_union_converter+0x228>)
 8002758:	5c8a      	ldrb	r2, [r1, r2]
 800275a:	3310      	adds	r3, #16
 800275c:	443b      	add	r3, r7
 800275e:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[22+i]=Lora_Rx_Buffer[i+5]; // 34 35 36 37
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	1d5a      	adds	r2, r3, #5
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	3316      	adds	r3, #22
 800276a:	4980      	ldr	r1, [pc, #512]	@ (800296c <Payload_union_converter+0x228>)
 800276c:	5c89      	ldrb	r1, [r1, r2]
 800276e:	4a80      	ldr	r2, [pc, #512]	@ (8002970 <Payload_union_converter+0x22c>)
 8002770:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	3301      	adds	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d9e8      	bls.n	8002750 <Payload_union_converter+0xc>
			 }
			 Payload.gpsaltitude=f2u8.fVal;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	4a7c      	ldr	r2, [pc, #496]	@ (8002974 <Payload_union_converter+0x230>)
 8002782:	6053      	str	r3, [r2, #4]


			 for(uint8_t i=0;i<4;i++)
 8002784:	2300      	movs	r3, #0
 8002786:	73bb      	strb	r3, [r7, #14]
 8002788:	e014      	b.n	80027b4 <Payload_union_converter+0x70>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+6];
 800278a:	7bbb      	ldrb	r3, [r7, #14]
 800278c:	1d9a      	adds	r2, r3, #6
 800278e:	7bbb      	ldrb	r3, [r7, #14]
 8002790:	4976      	ldr	r1, [pc, #472]	@ (800296c <Payload_union_converter+0x228>)
 8002792:	5c8a      	ldrb	r2, [r1, r2]
 8002794:	3310      	adds	r3, #16
 8002796:	443b      	add	r3, r7
 8002798:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[26+i]=Lora_Rx_Buffer[i+9]; // 38 39 40 41
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	f103 0209 	add.w	r2, r3, #9
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	331a      	adds	r3, #26
 80027a6:	4971      	ldr	r1, [pc, #452]	@ (800296c <Payload_union_converter+0x228>)
 80027a8:	5c89      	ldrb	r1, [r1, r2]
 80027aa:	4a71      	ldr	r2, [pc, #452]	@ (8002970 <Payload_union_converter+0x22c>)
 80027ac:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 80027ae:	7bbb      	ldrb	r3, [r7, #14]
 80027b0:	3301      	adds	r3, #1
 80027b2:	73bb      	strb	r3, [r7, #14]
 80027b4:	7bbb      	ldrb	r3, [r7, #14]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d9e7      	bls.n	800278a <Payload_union_converter+0x46>
			 }
			 Payload.gpslatitude=f2u8.fVal;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	4a6d      	ldr	r2, [pc, #436]	@ (8002974 <Payload_union_converter+0x230>)
 80027be:	6093      	str	r3, [r2, #8]

			 for(uint8_t i=0;i<4;i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	737b      	strb	r3, [r7, #13]
 80027c4:	e015      	b.n	80027f2 <Payload_union_converter+0xae>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+10];
 80027c6:	7b7b      	ldrb	r3, [r7, #13]
 80027c8:	f103 020a 	add.w	r2, r3, #10
 80027cc:	7b7b      	ldrb	r3, [r7, #13]
 80027ce:	4967      	ldr	r1, [pc, #412]	@ (800296c <Payload_union_converter+0x228>)
 80027d0:	5c8a      	ldrb	r2, [r1, r2]
 80027d2:	3310      	adds	r3, #16
 80027d4:	443b      	add	r3, r7
 80027d6:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[30+i]=Lora_Rx_Buffer[i+13]; // 42 43 44 45
 80027da:	7b7b      	ldrb	r3, [r7, #13]
 80027dc:	f103 020d 	add.w	r2, r3, #13
 80027e0:	7b7b      	ldrb	r3, [r7, #13]
 80027e2:	331e      	adds	r3, #30
 80027e4:	4961      	ldr	r1, [pc, #388]	@ (800296c <Payload_union_converter+0x228>)
 80027e6:	5c89      	ldrb	r1, [r1, r2]
 80027e8:	4a61      	ldr	r2, [pc, #388]	@ (8002970 <Payload_union_converter+0x22c>)
 80027ea:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 80027ec:	7b7b      	ldrb	r3, [r7, #13]
 80027ee:	3301      	adds	r3, #1
 80027f0:	737b      	strb	r3, [r7, #13]
 80027f2:	7b7b      	ldrb	r3, [r7, #13]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d9e6      	bls.n	80027c6 <Payload_union_converter+0x82>
			 }
			 Payload.gpslongitude=f2u8.fVal;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002974 <Payload_union_converter+0x230>)
 80027fc:	60d3      	str	r3, [r2, #12]

			 for(uint8_t i=0;i<4;i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	733b      	strb	r3, [r7, #12]
 8002802:	e00c      	b.n	800281e <Payload_union_converter+0xda>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+14];
 8002804:	7b3b      	ldrb	r3, [r7, #12]
 8002806:	f103 020e 	add.w	r2, r3, #14
 800280a:	7b3b      	ldrb	r3, [r7, #12]
 800280c:	4957      	ldr	r1, [pc, #348]	@ (800296c <Payload_union_converter+0x228>)
 800280e:	5c8a      	ldrb	r2, [r1, r2]
 8002810:	3310      	adds	r3, #16
 8002812:	443b      	add	r3, r7
 8002814:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002818:	7b3b      	ldrb	r3, [r7, #12]
 800281a:	3301      	adds	r3, #1
 800281c:	733b      	strb	r3, [r7, #12]
 800281e:	7b3b      	ldrb	r3, [r7, #12]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d9ef      	bls.n	8002804 <Payload_union_converter+0xc0>
			 }
			 Payload.altitude=f2u8.fVal;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4a53      	ldr	r2, [pc, #332]	@ (8002974 <Payload_union_converter+0x230>)
 8002828:	6153      	str	r3, [r2, #20]


			 for(uint8_t i=0;i<4;i++)
 800282a:	2300      	movs	r3, #0
 800282c:	72fb      	strb	r3, [r7, #11]
 800282e:	e00c      	b.n	800284a <Payload_union_converter+0x106>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+18];
 8002830:	7afb      	ldrb	r3, [r7, #11]
 8002832:	f103 0212 	add.w	r2, r3, #18
 8002836:	7afb      	ldrb	r3, [r7, #11]
 8002838:	494c      	ldr	r1, [pc, #304]	@ (800296c <Payload_union_converter+0x228>)
 800283a:	5c8a      	ldrb	r2, [r1, r2]
 800283c:	3310      	adds	r3, #16
 800283e:	443b      	add	r3, r7
 8002840:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	3301      	adds	r3, #1
 8002848:	72fb      	strb	r3, [r7, #11]
 800284a:	7afb      	ldrb	r3, [r7, #11]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d9ef      	bls.n	8002830 <Payload_union_converter+0xec>
			 }
			 Payload.speed=f2u8.fVal;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4a48      	ldr	r2, [pc, #288]	@ (8002974 <Payload_union_converter+0x230>)
 8002854:	6113      	str	r3, [r2, #16]


			 for(uint8_t i=0;i<4;i++)
 8002856:	2300      	movs	r3, #0
 8002858:	72bb      	strb	r3, [r7, #10]
 800285a:	e00c      	b.n	8002876 <Payload_union_converter+0x132>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+22];
 800285c:	7abb      	ldrb	r3, [r7, #10]
 800285e:	f103 0216 	add.w	r2, r3, #22
 8002862:	7abb      	ldrb	r3, [r7, #10]
 8002864:	4941      	ldr	r1, [pc, #260]	@ (800296c <Payload_union_converter+0x228>)
 8002866:	5c8a      	ldrb	r2, [r1, r2]
 8002868:	3310      	adds	r3, #16
 800286a:	443b      	add	r3, r7
 800286c:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8002870:	7abb      	ldrb	r3, [r7, #10]
 8002872:	3301      	adds	r3, #1
 8002874:	72bb      	strb	r3, [r7, #10]
 8002876:	7abb      	ldrb	r3, [r7, #10]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d9ef      	bls.n	800285c <Payload_union_converter+0x118>
			 }
			 Payload.temperature=f2u8.fVal;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4a3d      	ldr	r2, [pc, #244]	@ (8002974 <Payload_union_converter+0x230>)
 8002880:	6193      	str	r3, [r2, #24]


			 for(uint8_t i=0;i<4;i++)
 8002882:	2300      	movs	r3, #0
 8002884:	727b      	strb	r3, [r7, #9]
 8002886:	e00c      	b.n	80028a2 <Payload_union_converter+0x15e>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+26];
 8002888:	7a7b      	ldrb	r3, [r7, #9]
 800288a:	f103 021a 	add.w	r2, r3, #26
 800288e:	7a7b      	ldrb	r3, [r7, #9]
 8002890:	4936      	ldr	r1, [pc, #216]	@ (800296c <Payload_union_converter+0x228>)
 8002892:	5c8a      	ldrb	r2, [r1, r2]
 8002894:	3310      	adds	r3, #16
 8002896:	443b      	add	r3, r7
 8002898:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 800289c:	7a7b      	ldrb	r3, [r7, #9]
 800289e:	3301      	adds	r3, #1
 80028a0:	727b      	strb	r3, [r7, #9]
 80028a2:	7a7b      	ldrb	r3, [r7, #9]
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d9ef      	bls.n	8002888 <Payload_union_converter+0x144>
			 }
			 Payload.accx=f2u8.fVal;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4a32      	ldr	r2, [pc, #200]	@ (8002974 <Payload_union_converter+0x230>)
 80028ac:	61d3      	str	r3, [r2, #28]


			 for(uint8_t i=0;i<4;i++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	723b      	strb	r3, [r7, #8]
 80028b2:	e00c      	b.n	80028ce <Payload_union_converter+0x18a>
			 {
				 f2u8.array[i]=Lora_Rx_Buffer[i+30];
 80028b4:	7a3b      	ldrb	r3, [r7, #8]
 80028b6:	f103 021e 	add.w	r2, r3, #30
 80028ba:	7a3b      	ldrb	r3, [r7, #8]
 80028bc:	492b      	ldr	r1, [pc, #172]	@ (800296c <Payload_union_converter+0x228>)
 80028be:	5c8a      	ldrb	r2, [r1, r2]
 80028c0:	3310      	adds	r3, #16
 80028c2:	443b      	add	r3, r7
 80028c4:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80028c8:	7a3b      	ldrb	r3, [r7, #8]
 80028ca:	3301      	adds	r3, #1
 80028cc:	723b      	strb	r3, [r7, #8]
 80028ce:	7a3b      	ldrb	r3, [r7, #8]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d9ef      	bls.n	80028b4 <Payload_union_converter+0x170>
			 }
			 Payload.accy=f2u8.fVal;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4a27      	ldr	r2, [pc, #156]	@ (8002974 <Payload_union_converter+0x230>)
 80028d8:	6213      	str	r3, [r2, #32]


		      for(uint8_t i=0;i<4;i++)
 80028da:	2300      	movs	r3, #0
 80028dc:	71fb      	strb	r3, [r7, #7]
 80028de:	e00c      	b.n	80028fa <Payload_union_converter+0x1b6>
			 {
		    	  f2u8.array[i]=Lora_Rx_Buffer[i+34];
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	4920      	ldr	r1, [pc, #128]	@ (800296c <Payload_union_converter+0x228>)
 80028ea:	5c8a      	ldrb	r2, [r1, r2]
 80028ec:	3310      	adds	r3, #16
 80028ee:	443b      	add	r3, r7
 80028f0:	f803 2c10 	strb.w	r2, [r3, #-16]
		      for(uint8_t i=0;i<4;i++)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	3301      	adds	r3, #1
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d9ef      	bls.n	80028e0 <Payload_union_converter+0x19c>
			 }
		      Payload.accz=f2u8.fVal;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <Payload_union_converter+0x230>)
 8002904:	6253      	str	r3, [r2, #36]	@ 0x24


			  for(uint8_t i=0;i<4;i++)
 8002906:	2300      	movs	r3, #0
 8002908:	71bb      	strb	r3, [r7, #6]
 800290a:	e00c      	b.n	8002926 <Payload_union_converter+0x1e2>
			 {
				  f2u8.array[i]=Lora_Rx_Buffer[i+38];
 800290c:	79bb      	ldrb	r3, [r7, #6]
 800290e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8002912:	79bb      	ldrb	r3, [r7, #6]
 8002914:	4915      	ldr	r1, [pc, #84]	@ (800296c <Payload_union_converter+0x228>)
 8002916:	5c8a      	ldrb	r2, [r1, r2]
 8002918:	3310      	adds	r3, #16
 800291a:	443b      	add	r3, r7
 800291c:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 8002920:	79bb      	ldrb	r3, [r7, #6]
 8002922:	3301      	adds	r3, #1
 8002924:	71bb      	strb	r3, [r7, #6]
 8002926:	79bb      	ldrb	r3, [r7, #6]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d9ef      	bls.n	800290c <Payload_union_converter+0x1c8>
			 }
			  Payload.normal=f2u8.fVal;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4a11      	ldr	r2, [pc, #68]	@ (8002974 <Payload_union_converter+0x230>)
 8002930:	6293      	str	r3, [r2, #40]	@ 0x28


			  for(uint8_t i=0;i<4;i++)
 8002932:	2300      	movs	r3, #0
 8002934:	717b      	strb	r3, [r7, #5]
 8002936:	e00c      	b.n	8002952 <Payload_union_converter+0x20e>
			 {
				  f2u8.array[i]=Lora_Rx_Buffer[i+42];
 8002938:	797b      	ldrb	r3, [r7, #5]
 800293a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800293e:	797b      	ldrb	r3, [r7, #5]
 8002940:	490a      	ldr	r1, [pc, #40]	@ (800296c <Payload_union_converter+0x228>)
 8002942:	5c8a      	ldrb	r2, [r1, r2]
 8002944:	3310      	adds	r3, #16
 8002946:	443b      	add	r3, r7
 8002948:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 800294c:	797b      	ldrb	r3, [r7, #5]
 800294e:	3301      	adds	r3, #1
 8002950:	717b      	strb	r3, [r7, #5]
 8002952:	797b      	ldrb	r3, [r7, #5]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d9ef      	bls.n	8002938 <Payload_union_converter+0x1f4>
			 }
			  Payload.pitch=f2u8.fVal;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4a06      	ldr	r2, [pc, #24]	@ (8002974 <Payload_union_converter+0x230>)
 800295c:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000540 	.word	0x20000540
 8002970:	20000588 	.word	0x20000588
 8002974:	200006d0 	.word	0x200006d0

08002978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800297c:	b672      	cpsid	i
}
 800297e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <Error_Handler+0x8>

08002984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <HAL_MspInit+0x4c>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4a0f      	ldr	r2, [pc, #60]	@ (80029d0 <HAL_MspInit+0x4c>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	4b0d      	ldr	r3, [pc, #52]	@ (80029d0 <HAL_MspInit+0x4c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_MspInit+0x4c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a08      	ldr	r2, [pc, #32]	@ (80029d0 <HAL_MspInit+0x4c>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_MspInit+0x4c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800

080029d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a60 <HAL_ADC_MspInit+0x8c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d12f      	bne.n	8002a56 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <HAL_ADC_MspInit+0x90>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	4a19      	ldr	r2, [pc, #100]	@ (8002a64 <HAL_ADC_MspInit+0x90>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a06:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <HAL_ADC_MspInit+0x90>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <HAL_ADC_MspInit+0x90>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	4a12      	ldr	r2, [pc, #72]	@ (8002a64 <HAL_ADC_MspInit+0x90>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_ADC_MspInit+0x90>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a32:	2303      	movs	r3, #3
 8002a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4809      	ldr	r0, [pc, #36]	@ (8002a68 <HAL_ADC_MspInit+0x94>)
 8002a42:	f001 fe21 	bl	8004688 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2012      	movs	r0, #18
 8002a4c:	f001 f9e3 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a50:	2012      	movs	r0, #18
 8002a52:	f001 f9fc 	bl	8003e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002a56:	bf00      	nop
 8002a58:	3728      	adds	r7, #40	@ 0x28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40012000 	.word	0x40012000
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020800 	.word	0x40020800

08002a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	@ 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a19      	ldr	r2, [pc, #100]	@ (8002af0 <HAL_I2C_MspInit+0x84>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d12b      	bne.n	8002ae6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <HAL_I2C_MspInit+0x88>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4a17      	ldr	r2, [pc, #92]	@ (8002af4 <HAL_I2C_MspInit+0x88>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <HAL_I2C_MspInit+0x88>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aaa:	23c0      	movs	r3, #192	@ 0xc0
 8002aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aae:	2312      	movs	r3, #18
 8002ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aba:	2304      	movs	r3, #4
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <HAL_I2C_MspInit+0x8c>)
 8002ac6:	f001 fddf 	bl	8004688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <HAL_I2C_MspInit+0x88>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	4a08      	ldr	r2, [pc, #32]	@ (8002af4 <HAL_I2C_MspInit+0x88>)
 8002ad4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <HAL_I2C_MspInit+0x88>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002ae6:	bf00      	nop
 8002ae8:	3728      	adds	r7, #40	@ 0x28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40005400 	.word	0x40005400
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40020400 	.word	0x40020400

08002afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a19      	ldr	r2, [pc, #100]	@ (8002b80 <HAL_SPI_MspInit+0x84>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12b      	bne.n	8002b76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <HAL_SPI_MspInit+0x88>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	4a17      	ldr	r2, [pc, #92]	@ (8002b84 <HAL_SPI_MspInit+0x88>)
 8002b28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <HAL_SPI_MspInit+0x88>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_SPI_MspInit+0x88>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	4a10      	ldr	r2, [pc, #64]	@ (8002b84 <HAL_SPI_MspInit+0x88>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <HAL_SPI_MspInit+0x88>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b56:	23e0      	movs	r3, #224	@ 0xe0
 8002b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b66:	2305      	movs	r3, #5
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4805      	ldr	r0, [pc, #20]	@ (8002b88 <HAL_SPI_MspInit+0x8c>)
 8002b72:	f001 fd89 	bl	8004688 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b76:	bf00      	nop
 8002b78:	3728      	adds	r7, #40	@ 0x28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40013000 	.word	0x40013000
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40020000 	.word	0x40020000

08002b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9c:	d116      	bne.n	8002bcc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	4b28      	ldr	r3, [pc, #160]	@ (8002c44 <HAL_TIM_Base_MspInit+0xb8>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	4a27      	ldr	r2, [pc, #156]	@ (8002c44 <HAL_TIM_Base_MspInit+0xb8>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bae:	4b25      	ldr	r3, [pc, #148]	@ (8002c44 <HAL_TIM_Base_MspInit+0xb8>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	201c      	movs	r0, #28
 8002bc0:	f001 f929 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bc4:	201c      	movs	r0, #28
 8002bc6:	f001 f942 	bl	8003e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bca:	e036      	b.n	8002c3a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c48 <HAL_TIM_Base_MspInit+0xbc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d116      	bne.n	8002c04 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <HAL_TIM_Base_MspInit+0xb8>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <HAL_TIM_Base_MspInit+0xb8>)
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be6:	4b17      	ldr	r3, [pc, #92]	@ (8002c44 <HAL_TIM_Base_MspInit+0xb8>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	201d      	movs	r0, #29
 8002bf8:	f001 f90d 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bfc:	201d      	movs	r0, #29
 8002bfe:	f001 f926 	bl	8003e4e <HAL_NVIC_EnableIRQ>
}
 8002c02:	e01a      	b.n	8002c3a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a10      	ldr	r2, [pc, #64]	@ (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d115      	bne.n	8002c3a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <HAL_TIM_Base_MspInit+0xb8>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a0b      	ldr	r2, [pc, #44]	@ (8002c44 <HAL_TIM_Base_MspInit+0xb8>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_TIM_Base_MspInit+0xb8>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	201e      	movs	r0, #30
 8002c30:	f001 f8f1 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c34:	201e      	movs	r0, #30
 8002c36:	f001 f90a 	bl	8003e4e <HAL_NVIC_EnableIRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800

08002c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b090      	sub	sp, #64	@ 0x40
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a9b      	ldr	r2, [pc, #620]	@ (8002edc <HAL_UART_MspInit+0x28c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d134      	bne.n	8002cdc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c76:	4b9a      	ldr	r3, [pc, #616]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4a99      	ldr	r2, [pc, #612]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002c7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c82:	4b97      	ldr	r3, [pc, #604]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c92:	4b93      	ldr	r3, [pc, #588]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	4a92      	ldr	r2, [pc, #584]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9e:	4b90      	ldr	r3, [pc, #576]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002caa:	2303      	movs	r3, #3
 8002cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cba:	2308      	movs	r3, #8
 8002cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4887      	ldr	r0, [pc, #540]	@ (8002ee4 <HAL_UART_MspInit+0x294>)
 8002cc6:	f001 fcdf 	bl	8004688 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2101      	movs	r1, #1
 8002cce:	2034      	movs	r0, #52	@ 0x34
 8002cd0:	f001 f8a1 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002cd4:	2034      	movs	r0, #52	@ 0x34
 8002cd6:	f001 f8ba 	bl	8003e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cda:	e0fa      	b.n	8002ed2 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a81      	ldr	r2, [pc, #516]	@ (8002ee8 <HAL_UART_MspInit+0x298>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d134      	bne.n	8002d50 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
 8002cea:	4b7d      	ldr	r3, [pc, #500]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	4a7c      	ldr	r2, [pc, #496]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	4b76      	ldr	r3, [pc, #472]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	4a75      	ldr	r2, [pc, #468]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d12:	4b73      	ldr	r3, [pc, #460]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d1e:	230c      	movs	r3, #12
 8002d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d2e:	2307      	movs	r3, #7
 8002d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d36:	4619      	mov	r1, r3
 8002d38:	486a      	ldr	r0, [pc, #424]	@ (8002ee4 <HAL_UART_MspInit+0x294>)
 8002d3a:	f001 fca5 	bl	8004688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2102      	movs	r1, #2
 8002d42:	2026      	movs	r0, #38	@ 0x26
 8002d44:	f001 f867 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d48:	2026      	movs	r0, #38	@ 0x26
 8002d4a:	f001 f880 	bl	8003e4e <HAL_NVIC_EnableIRQ>
}
 8002d4e:	e0c0      	b.n	8002ed2 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART3)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a65      	ldr	r2, [pc, #404]	@ (8002eec <HAL_UART_MspInit+0x29c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	f040 8082 	bne.w	8002e60 <HAL_UART_MspInit+0x210>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	4b5f      	ldr	r3, [pc, #380]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	4a5e      	ldr	r2, [pc, #376]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	4b58      	ldr	r3, [pc, #352]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	4a57      	ldr	r2, [pc, #348]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d88:	4b55      	ldr	r3, [pc, #340]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	4b51      	ldr	r3, [pc, #324]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9c:	4a50      	ldr	r2, [pc, #320]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002d9e:	f043 0302 	orr.w	r3, r3, #2
 8002da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da4:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002db0:	2320      	movs	r3, #32
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dc0:	2307      	movs	r3, #7
 8002dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4849      	ldr	r0, [pc, #292]	@ (8002ef0 <HAL_UART_MspInit+0x2a0>)
 8002dcc:	f001 fc5c 	bl	8004688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002de2:	2307      	movs	r3, #7
 8002de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dea:	4619      	mov	r1, r3
 8002dec:	4841      	ldr	r0, [pc, #260]	@ (8002ef4 <HAL_UART_MspInit+0x2a4>)
 8002dee:	f001 fc4b 	bl	8004688 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002df2:	4b41      	ldr	r3, [pc, #260]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002df4:	4a41      	ldr	r2, [pc, #260]	@ (8002efc <HAL_UART_MspInit+0x2ac>)
 8002df6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002df8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002dfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002dfe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e00:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e06:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e12:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e14:	4b38      	ldr	r3, [pc, #224]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e1a:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e20:	4b35      	ldr	r3, [pc, #212]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e26:	4b34      	ldr	r3, [pc, #208]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e2c:	4b32      	ldr	r3, [pc, #200]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e32:	4831      	ldr	r0, [pc, #196]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e34:	f001 f826 	bl	8003e84 <HAL_DMA_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8002e3e:	f7ff fd9b 	bl	8002978 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e48:	4a2b      	ldr	r2, [pc, #172]	@ (8002ef8 <HAL_UART_MspInit+0x2a8>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	2027      	movs	r0, #39	@ 0x27
 8002e54:	f000 ffdf 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e58:	2027      	movs	r0, #39	@ 0x27
 8002e5a:	f000 fff8 	bl	8003e4e <HAL_NVIC_EnableIRQ>
}
 8002e5e:	e038      	b.n	8002ed2 <HAL_UART_MspInit+0x282>
  else if(huart->Instance==USART6)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a26      	ldr	r2, [pc, #152]	@ (8002f00 <HAL_UART_MspInit+0x2b0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d133      	bne.n	8002ed2 <HAL_UART_MspInit+0x282>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002e74:	f043 0320 	orr.w	r3, r3, #32
 8002e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7a:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	4a14      	ldr	r2, [pc, #80]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002e90:	f043 0304 	orr.w	r3, r3, #4
 8002e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e96:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <HAL_UART_MspInit+0x290>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS_Tx_Pin|RS_Rx_Pin;
 8002ea2:	23c0      	movs	r3, #192	@ 0xc0
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eba:	4619      	mov	r1, r3
 8002ebc:	480c      	ldr	r0, [pc, #48]	@ (8002ef0 <HAL_UART_MspInit+0x2a0>)
 8002ebe:	f001 fbe3 	bl	8004688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	2047      	movs	r0, #71	@ 0x47
 8002ec8:	f000 ffa5 	bl	8003e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ecc:	2047      	movs	r0, #71	@ 0x47
 8002ece:	f000 ffbe 	bl	8003e4e <HAL_NVIC_EnableIRQ>
}
 8002ed2:	bf00      	nop
 8002ed4:	3740      	adds	r7, #64	@ 0x40
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40004c00 	.word	0x40004c00
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40020000 	.word	0x40020000
 8002ee8:	40004400 	.word	0x40004400
 8002eec:	40004800 	.word	0x40004800
 8002ef0:	40020800 	.word	0x40020800
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	200004e0 	.word	0x200004e0
 8002efc:	40026028 	.word	0x40026028
 8002f00:	40011400 	.word	0x40011400

08002f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <NMI_Handler+0x4>

08002f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <HardFault_Handler+0x4>

08002f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <MemManage_Handler+0x4>

08002f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <BusFault_Handler+0x4>

08002f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <UsageFault_Handler+0x4>

08002f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f5a:	f000 f9b1 	bl	80032c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002f68:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <DMA1_Stream1_IRQHandler+0x10>)
 8002f6a:	f001 f923 	bl	80041b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200004e0 	.word	0x200004e0

08002f78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f7c:	4802      	ldr	r0, [pc, #8]	@ (8002f88 <ADC_IRQHandler+0x10>)
 8002f7e:	f000 fb05 	bl	800358c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200001f4 	.word	0x200001f4

08002f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f90:	4802      	ldr	r0, [pc, #8]	@ (8002f9c <TIM2_IRQHandler+0x10>)
 8002f92:	f002 fd9b 	bl	8005acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200002e8 	.word	0x200002e8

08002fa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fa4:	4802      	ldr	r0, [pc, #8]	@ (8002fb0 <TIM3_IRQHandler+0x10>)
 8002fa6:	f002 fd91 	bl	8005acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000330 	.word	0x20000330

08002fb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fb8:	4802      	ldr	r0, [pc, #8]	@ (8002fc4 <TIM4_IRQHandler+0x10>)
 8002fba:	f002 fd87 	bl	8005acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000378 	.word	0x20000378

08002fc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fcc:	4802      	ldr	r0, [pc, #8]	@ (8002fd8 <USART2_IRQHandler+0x10>)
 8002fce:	f003 facb 	bl	8006568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000408 	.word	0x20000408

08002fdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fe0:	4802      	ldr	r0, [pc, #8]	@ (8002fec <USART3_IRQHandler+0x10>)
 8002fe2:	f003 fac1 	bl	8006568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000450 	.word	0x20000450

08002ff0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ff4:	4802      	ldr	r0, [pc, #8]	@ (8003000 <UART4_IRQHandler+0x10>)
 8002ff6:	f003 fab7 	bl	8006568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200003c0 	.word	0x200003c0

08003004 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003008:	4802      	ldr	r0, [pc, #8]	@ (8003014 <USART6_IRQHandler+0x10>)
 800300a:	f003 faad 	bl	8006568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000498 	.word	0x20000498

08003018 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return 1;
 800301c:	2301      	movs	r3, #1
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_kill>:

int _kill(int pid, int sig)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003032:	f006 fa45 	bl	80094c0 <__errno>
 8003036:	4603      	mov	r3, r0
 8003038:	2216      	movs	r2, #22
 800303a:	601a      	str	r2, [r3, #0]
  return -1;
 800303c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_exit>:

void _exit (int status)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003050:	f04f 31ff 	mov.w	r1, #4294967295
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ffe7 	bl	8003028 <_kill>
  while (1) {}    /* Make sure we hang here */
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <_exit+0x12>

0800305e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e00a      	b.n	8003086 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003070:	f3af 8000 	nop.w
 8003074:	4601      	mov	r1, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	60ba      	str	r2, [r7, #8]
 800307c:	b2ca      	uxtb	r2, r1
 800307e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	dbf0      	blt.n	8003070 <_read+0x12>
  }

  return len;
 800308e:	687b      	ldr	r3, [r7, #4]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	e009      	b.n	80030be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	60ba      	str	r2, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3301      	adds	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	dbf1      	blt.n	80030aa <_write+0x12>
  }
  return len;
 80030c6:	687b      	ldr	r3, [r7, #4]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_close>:

int _close(int file)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030f8:	605a      	str	r2, [r3, #4]
  return 0;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <_isatty>:

int _isatty(int file)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003110:	2301      	movs	r3, #1
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003140:	4a14      	ldr	r2, [pc, #80]	@ (8003194 <_sbrk+0x5c>)
 8003142:	4b15      	ldr	r3, [pc, #84]	@ (8003198 <_sbrk+0x60>)
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800314c:	4b13      	ldr	r3, [pc, #76]	@ (800319c <_sbrk+0x64>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003154:	4b11      	ldr	r3, [pc, #68]	@ (800319c <_sbrk+0x64>)
 8003156:	4a12      	ldr	r2, [pc, #72]	@ (80031a0 <_sbrk+0x68>)
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800315a:	4b10      	ldr	r3, [pc, #64]	@ (800319c <_sbrk+0x64>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	429a      	cmp	r2, r3
 8003166:	d207      	bcs.n	8003178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003168:	f006 f9aa 	bl	80094c0 <__errno>
 800316c:	4603      	mov	r3, r0
 800316e:	220c      	movs	r2, #12
 8003170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	e009      	b.n	800318c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003178:	4b08      	ldr	r3, [pc, #32]	@ (800319c <_sbrk+0x64>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800317e:	4b07      	ldr	r3, [pc, #28]	@ (800319c <_sbrk+0x64>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <_sbrk+0x64>)
 8003188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318a:	68fb      	ldr	r3, [r7, #12]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20020000 	.word	0x20020000
 8003198:	00000400 	.word	0x00000400
 800319c:	2000082c 	.word	0x2000082c
 80031a0:	20000980 	.word	0x20000980

080031a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <SystemInit+0x20>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	4a05      	ldr	r2, [pc, #20]	@ (80031c4 <SystemInit+0x20>)
 80031b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003200 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80031cc:	f7ff ffea 	bl	80031a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031d0:	480c      	ldr	r0, [pc, #48]	@ (8003204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031d2:	490d      	ldr	r1, [pc, #52]	@ (8003208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031d4:	4a0d      	ldr	r2, [pc, #52]	@ (800320c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d8:	e002      	b.n	80031e0 <LoopCopyDataInit>

080031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031de:	3304      	adds	r3, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e4:	d3f9      	bcc.n	80031da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003214 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ec:	e001      	b.n	80031f2 <LoopFillZerobss>

080031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f0:	3204      	adds	r2, #4

080031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f4:	d3fb      	bcc.n	80031ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031f6:	f006 f969 	bl	80094cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fa:	f7fd ff21 	bl	8001040 <main>
  bx  lr    
 80031fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003208:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800320c:	0800c350 	.word	0x0800c350
  ldr r2, =_sbss
 8003210:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003214:	20000980 	.word	0x20000980

08003218 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <CAN1_RX0_IRQHandler>
	...

0800321c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003220:	4b0e      	ldr	r3, [pc, #56]	@ (800325c <HAL_Init+0x40>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <HAL_Init+0x40>)
 8003226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800322a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <HAL_Init+0x40>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <HAL_Init+0x40>)
 8003232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003238:	4b08      	ldr	r3, [pc, #32]	@ (800325c <HAL_Init+0x40>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a07      	ldr	r2, [pc, #28]	@ (800325c <HAL_Init+0x40>)
 800323e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003244:	2003      	movs	r0, #3
 8003246:	f000 fddb 	bl	8003e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800324a:	200f      	movs	r0, #15
 800324c:	f000 f808 	bl	8003260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003250:	f7ff fb98 	bl	8002984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023c00 	.word	0x40023c00

08003260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003268:	4b12      	ldr	r3, [pc, #72]	@ (80032b4 <HAL_InitTick+0x54>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <HAL_InitTick+0x58>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	4619      	mov	r1, r3
 8003272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003276:	fbb3 f3f1 	udiv	r3, r3, r1
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fdf3 	bl	8003e6a <HAL_SYSTICK_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e00e      	b.n	80032ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b0f      	cmp	r3, #15
 8003292:	d80a      	bhi.n	80032aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003294:	2200      	movs	r2, #0
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	f000 fdbb 	bl	8003e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032a0:	4a06      	ldr	r2, [pc, #24]	@ (80032bc <HAL_InitTick+0x5c>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e000      	b.n	80032ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000004 	.word	0x20000004
 80032b8:	2000000c 	.word	0x2000000c
 80032bc:	20000008 	.word	0x20000008

080032c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_IncTick+0x20>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_IncTick+0x24>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	4a04      	ldr	r2, [pc, #16]	@ (80032e4 <HAL_IncTick+0x24>)
 80032d2:	6013      	str	r3, [r2, #0]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	2000000c 	.word	0x2000000c
 80032e4:	20000830 	.word	0x20000830

080032e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return uwTick;
 80032ec:	4b03      	ldr	r3, [pc, #12]	@ (80032fc <HAL_GetTick+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000830 	.word	0x20000830

08003300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff ffee 	bl	80032e8 <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d005      	beq.n	8003326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_Delay+0x44>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003326:	bf00      	nop
 8003328:	f7ff ffde 	bl	80032e8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d8f7      	bhi.n	8003328 <HAL_Delay+0x28>
  {
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	2000000c 	.word	0x2000000c

08003348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e033      	b.n	80033c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fb34 	bl	80029d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d118      	bne.n	80033b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800338e:	f023 0302 	bic.w	r3, r3, #2
 8003392:	f043 0202 	orr.w	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fb5a 	bl	8003a54 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80033b6:	e001      	b.n	80033bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_ADC_Start_IT+0x1a>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0bd      	b.n	8003566 <HAL_ADC_Start_IT+0x196>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d018      	beq.n	8003432 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003410:	4b58      	ldr	r3, [pc, #352]	@ (8003574 <HAL_ADC_Start_IT+0x1a4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a58      	ldr	r2, [pc, #352]	@ (8003578 <HAL_ADC_Start_IT+0x1a8>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0c9a      	lsrs	r2, r3, #18
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003424:	e002      	b.n	800342c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	3b01      	subs	r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f9      	bne.n	8003426 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	f040 8085 	bne.w	800354c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800346c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800347c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003480:	d106      	bne.n	8003490 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f023 0206 	bic.w	r2, r3, #6
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
 800348e:	e002      	b.n	8003496 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800349e:	4b37      	ldr	r3, [pc, #220]	@ (800357c <HAL_ADC_Start_IT+0x1ac>)
 80034a0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80034aa:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034ba:	f043 0320 	orr.w	r3, r3, #32
 80034be:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d12a      	bne.n	8003522 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003580 <HAL_ADC_Start_IT+0x1b0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d015      	beq.n	8003502 <HAL_ADC_Start_IT+0x132>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2a      	ldr	r2, [pc, #168]	@ (8003584 <HAL_ADC_Start_IT+0x1b4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d105      	bne.n	80034ec <HAL_ADC_Start_IT+0x11c>
 80034e0:	4b26      	ldr	r3, [pc, #152]	@ (800357c <HAL_ADC_Start_IT+0x1ac>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a25      	ldr	r2, [pc, #148]	@ (8003588 <HAL_ADC_Start_IT+0x1b8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d136      	bne.n	8003564 <HAL_ADC_Start_IT+0x194>
 80034f6:	4b21      	ldr	r3, [pc, #132]	@ (800357c <HAL_ADC_Start_IT+0x1ac>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d130      	bne.n	8003564 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d129      	bne.n	8003564 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	e020      	b.n	8003564 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a16      	ldr	r2, [pc, #88]	@ (8003580 <HAL_ADC_Start_IT+0x1b0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d11b      	bne.n	8003564 <HAL_ADC_Start_IT+0x194>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d114      	bne.n	8003564 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	e00b      	b.n	8003564 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	f043 0210 	orr.w	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000004 	.word	0x20000004
 8003578:	431bde83 	.word	0x431bde83
 800357c:	40012300 	.word	0x40012300
 8003580:	40012000 	.word	0x40012000
 8003584:	40012100 	.word	0x40012100
 8003588:	40012200 	.word	0x40012200

0800358c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d049      	beq.n	8003656 <HAL_ADC_IRQHandler+0xca>
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d046      	beq.n	8003656 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d12b      	bne.n	8003646 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d127      	bne.n	8003646 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800360e:	2b00      	cmp	r3, #0
 8003610:	d119      	bne.n	8003646 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0220 	bic.w	r2, r2, #32
 8003620:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe fd36 	bl	80020b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0212 	mvn.w	r2, #18
 8003654:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003664:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d057      	beq.n	800371c <HAL_ADC_IRQHandler+0x190>
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d054      	beq.n	800371c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d139      	bne.n	800370c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d12b      	bne.n	800370c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d124      	bne.n	800370c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11d      	bne.n	800370c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d119      	bne.n	800370c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036e6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa9d 	bl	8003c4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f06f 020c 	mvn.w	r2, #12
 800371a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d017      	beq.n	8003762 <HAL_ADC_IRQHandler+0x1d6>
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d014      	beq.n	8003762 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10d      	bne.n	8003762 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f837 	bl	80037c6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0201 	mvn.w	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003770:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d015      	beq.n	80037a4 <HAL_ADC_IRQHandler+0x218>
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d012      	beq.n	80037a4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f043 0202 	orr.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f06f 0220 	mvn.w	r2, #32
 8003792:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f820 	bl	80037da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f06f 0220 	mvn.w	r2, #32
 80037a2:	601a      	str	r2, [r3, #0]
  }
}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x1c>
 8003808:	2302      	movs	r3, #2
 800380a:	e113      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x244>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b09      	cmp	r3, #9
 800381a:	d925      	bls.n	8003868 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68d9      	ldr	r1, [r3, #12]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	4613      	mov	r3, r2
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4413      	add	r3, r2
 8003830:	3b1e      	subs	r3, #30
 8003832:	2207      	movs	r2, #7
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43da      	mvns	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	400a      	ands	r2, r1
 8003840:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68d9      	ldr	r1, [r3, #12]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	4618      	mov	r0, r3
 8003854:	4603      	mov	r3, r0
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4403      	add	r3, r0
 800385a:	3b1e      	subs	r3, #30
 800385c:	409a      	lsls	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	e022      	b.n	80038ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6919      	ldr	r1, [r3, #16]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	2207      	movs	r2, #7
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	400a      	ands	r2, r1
 800388a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6919      	ldr	r1, [r3, #16]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	4618      	mov	r0, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4403      	add	r3, r0
 80038a4:	409a      	lsls	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d824      	bhi.n	8003900 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	3b05      	subs	r3, #5
 80038c8:	221f      	movs	r2, #31
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	400a      	ands	r2, r1
 80038d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4618      	mov	r0, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	3b05      	subs	r3, #5
 80038f2:	fa00 f203 	lsl.w	r2, r0, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80038fe:	e04c      	b.n	800399a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	d824      	bhi.n	8003952 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	3b23      	subs	r3, #35	@ 0x23
 800391a:	221f      	movs	r2, #31
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43da      	mvns	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	400a      	ands	r2, r1
 8003928:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	4618      	mov	r0, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	3b23      	subs	r3, #35	@ 0x23
 8003944:	fa00 f203 	lsl.w	r2, r0, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003950:	e023      	b.n	800399a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	3b41      	subs	r3, #65	@ 0x41
 8003964:	221f      	movs	r2, #31
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43da      	mvns	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	400a      	ands	r2, r1
 8003972:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	4618      	mov	r0, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	3b41      	subs	r3, #65	@ 0x41
 800398e:	fa00 f203 	lsl.w	r2, r0, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800399a:	4b29      	ldr	r3, [pc, #164]	@ (8003a40 <HAL_ADC_ConfigChannel+0x250>)
 800399c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a28      	ldr	r2, [pc, #160]	@ (8003a44 <HAL_ADC_ConfigChannel+0x254>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10f      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1d8>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b12      	cmp	r3, #18
 80039ae:	d10b      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a44 <HAL_ADC_ConfigChannel+0x254>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d12b      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x23a>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <HAL_ADC_ConfigChannel+0x258>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x1f4>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b11      	cmp	r3, #17
 80039e2:	d122      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a11      	ldr	r2, [pc, #68]	@ (8003a48 <HAL_ADC_ConfigChannel+0x258>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d111      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <HAL_ADC_ConfigChannel+0x25c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a11      	ldr	r2, [pc, #68]	@ (8003a50 <HAL_ADC_ConfigChannel+0x260>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	0c9a      	lsrs	r2, r3, #18
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a1c:	e002      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f9      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40012300 	.word	0x40012300
 8003a44:	40012000 	.word	0x40012000
 8003a48:	10000012 	.word	0x10000012
 8003a4c:	20000004 	.word	0x20000004
 8003a50:	431bde83 	.word	0x431bde83

08003a54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a5c:	4b79      	ldr	r3, [pc, #484]	@ (8003c44 <ADC_Init+0x1f0>)
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	021a      	lsls	r2, r3, #8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6899      	ldr	r1, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae6:	4a58      	ldr	r2, [pc, #352]	@ (8003c48 <ADC_Init+0x1f4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003afa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6899      	ldr	r1, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	e00f      	b.n	8003b52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b50:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0202 	bic.w	r2, r2, #2
 8003b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6899      	ldr	r1, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7e1b      	ldrb	r3, [r3, #24]
 8003b6c:	005a      	lsls	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01b      	beq.n	8003bb8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b8e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	3b01      	subs	r3, #1
 8003bac:	035a      	lsls	r2, r3, #13
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	e007      	b.n	8003bc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	051a      	lsls	r2, r3, #20
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6899      	ldr	r1, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003c0a:	025a      	lsls	r2, r3, #9
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6899      	ldr	r1, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	029a      	lsls	r2, r3, #10
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40012300 	.word	0x40012300
 8003c48:	0f000001 	.word	0x0f000001

08003c4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c92:	4a04      	ldr	r2, [pc, #16]	@ (8003ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	60d3      	str	r3, [r2, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cac:	4b04      	ldr	r3, [pc, #16]	@ (8003cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	f003 0307 	and.w	r3, r3, #7
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	db0b      	blt.n	8003cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	4907      	ldr	r1, [pc, #28]	@ (8003cfc <__NVIC_EnableIRQ+0x38>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000e100 	.word	0xe000e100

08003d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	6039      	str	r1, [r7, #0]
 8003d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	db0a      	blt.n	8003d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	490c      	ldr	r1, [pc, #48]	@ (8003d4c <__NVIC_SetPriority+0x4c>)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	0112      	lsls	r2, r2, #4
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	440b      	add	r3, r1
 8003d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d28:	e00a      	b.n	8003d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4908      	ldr	r1, [pc, #32]	@ (8003d50 <__NVIC_SetPriority+0x50>)
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3b04      	subs	r3, #4
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	761a      	strb	r2, [r3, #24]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000e100 	.word	0xe000e100
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b089      	sub	sp, #36	@ 0x24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f1c3 0307 	rsb	r3, r3, #7
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	bf28      	it	cs
 8003d72:	2304      	movcs	r3, #4
 8003d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2b06      	cmp	r3, #6
 8003d7c:	d902      	bls.n	8003d84 <NVIC_EncodePriority+0x30>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	3b03      	subs	r3, #3
 8003d82:	e000      	b.n	8003d86 <NVIC_EncodePriority+0x32>
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	401a      	ands	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	fa01 f303 	lsl.w	r3, r1, r3
 8003da6:	43d9      	mvns	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	4313      	orrs	r3, r2
         );
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3724      	adds	r7, #36	@ 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dcc:	d301      	bcc.n	8003dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00f      	b.n	8003df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <SysTick_Config+0x40>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dda:	210f      	movs	r1, #15
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	f7ff ff8e 	bl	8003d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <SysTick_Config+0x40>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dea:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <SysTick_Config+0x40>)
 8003dec:	2207      	movs	r2, #7
 8003dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	e000e010 	.word	0xe000e010

08003e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff29 	bl	8003c60 <__NVIC_SetPriorityGrouping>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
 8003e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e28:	f7ff ff3e 	bl	8003ca8 <__NVIC_GetPriorityGrouping>
 8003e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	6978      	ldr	r0, [r7, #20]
 8003e34:	f7ff ff8e 	bl	8003d54 <NVIC_EncodePriority>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff5d 	bl	8003d00 <__NVIC_SetPriority>
}
 8003e46:	bf00      	nop
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff31 	bl	8003cc4 <__NVIC_EnableIRQ>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff ffa2 	bl	8003dbc <SysTick_Config>
 8003e78:	4603      	mov	r3, r0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e90:	f7ff fa2a 	bl	80032e8 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e099      	b.n	8003fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec0:	e00f      	b.n	8003ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec2:	f7ff fa11 	bl	80032e8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	d908      	bls.n	8003ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2203      	movs	r2, #3
 8003eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e078      	b.n	8003fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e8      	bne.n	8003ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4b38      	ldr	r3, [pc, #224]	@ (8003fdc <HAL_DMA_Init+0x158>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d107      	bne.n	8003f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	4313      	orrs	r3, r2
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d117      	bne.n	8003fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fb01 	bl	8004590 <DMA_CheckFifoParam>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2240      	movs	r2, #64	@ 0x40
 8003f98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e016      	b.n	8003fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fab8 	bl	8004524 <DMA_CalcBaseAndBitshift>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbc:	223f      	movs	r2, #63	@ 0x3f
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	f010803f 	.word	0xf010803f

08003fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_DMA_Start_IT+0x26>
 8004002:	2302      	movs	r3, #2
 8004004:	e040      	b.n	8004088 <HAL_DMA_Start_IT+0xa8>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d12f      	bne.n	800407a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2202      	movs	r2, #2
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa4a 	bl	80044c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004038:	223f      	movs	r2, #63	@ 0x3f
 800403a:	409a      	lsls	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0216 	orr.w	r2, r2, #22
 800404e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0208 	orr.w	r2, r2, #8
 8004066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e005      	b.n	8004086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004082:	2302      	movs	r3, #2
 8004084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004086:	7dfb      	ldrb	r3, [r7, #23]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800409e:	f7ff f923 	bl	80032e8 <HAL_GetTick>
 80040a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d008      	beq.n	80040c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2280      	movs	r2, #128	@ 0x80
 80040b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e052      	b.n	8004168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0216 	bic.w	r2, r2, #22
 80040d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <HAL_DMA_Abort+0x62>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0208 	bic.w	r2, r2, #8
 8004100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004112:	e013      	b.n	800413c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004114:	f7ff f8e8 	bl	80032e8 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b05      	cmp	r3, #5
 8004120:	d90c      	bls.n	800413c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2203      	movs	r2, #3
 800412c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e015      	b.n	8004168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e4      	bne.n	8004114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414e:	223f      	movs	r2, #63	@ 0x3f
 8004150:	409a      	lsls	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d004      	beq.n	800418e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2280      	movs	r2, #128	@ 0x80
 8004188:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e00c      	b.n	80041a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2205      	movs	r2, #5
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041c0:	4b8e      	ldr	r3, [pc, #568]	@ (80043fc <HAL_DMA_IRQHandler+0x248>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004400 <HAL_DMA_IRQHandler+0x24c>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	0a9b      	lsrs	r3, r3, #10
 80041cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	2208      	movs	r2, #8
 80041e0:	409a      	lsls	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01a      	beq.n	8004220 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0204 	bic.w	r2, r2, #4
 8004206:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420c:	2208      	movs	r2, #8
 800420e:	409a      	lsls	r2, r3
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004218:	f043 0201 	orr.w	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004224:	2201      	movs	r2, #1
 8004226:	409a      	lsls	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d012      	beq.n	8004256 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004242:	2201      	movs	r2, #1
 8004244:	409a      	lsls	r2, r3
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424e:	f043 0202 	orr.w	r2, r3, #2
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	2204      	movs	r2, #4
 800425c:	409a      	lsls	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d012      	beq.n	800428c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004278:	2204      	movs	r2, #4
 800427a:	409a      	lsls	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004284:	f043 0204 	orr.w	r2, r3, #4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004290:	2210      	movs	r2, #16
 8004292:	409a      	lsls	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d043      	beq.n	8004324 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d03c      	beq.n	8004324 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ae:	2210      	movs	r2, #16
 80042b0:	409a      	lsls	r2, r3
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d018      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d108      	bne.n	80042e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d024      	beq.n	8004324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
 80042e2:	e01f      	b.n	8004324 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01b      	beq.n	8004324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4798      	blx	r3
 80042f4:	e016      	b.n	8004324 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0208 	bic.w	r2, r2, #8
 8004312:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004328:	2220      	movs	r2, #32
 800432a:	409a      	lsls	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4013      	ands	r3, r2
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 808f 	beq.w	8004454 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8087 	beq.w	8004454 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434a:	2220      	movs	r2, #32
 800434c:	409a      	lsls	r2, r3
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b05      	cmp	r3, #5
 800435c:	d136      	bne.n	80043cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0216 	bic.w	r2, r2, #22
 800436c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800437c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <HAL_DMA_IRQHandler+0x1da>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0208 	bic.w	r2, r2, #8
 800439c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a2:	223f      	movs	r2, #63	@ 0x3f
 80043a4:	409a      	lsls	r2, r3
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d07e      	beq.n	80044c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
        }
        return;
 80043ca:	e079      	b.n	80044c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01d      	beq.n	8004416 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d031      	beq.n	8004454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
 80043f8:	e02c      	b.n	8004454 <HAL_DMA_IRQHandler+0x2a0>
 80043fa:	bf00      	nop
 80043fc:	20000004 	.word	0x20000004
 8004400:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d023      	beq.n	8004454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
 8004414:	e01e      	b.n	8004454 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10f      	bne.n	8004444 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0210 	bic.w	r2, r2, #16
 8004432:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004458:	2b00      	cmp	r3, #0
 800445a:	d032      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d022      	beq.n	80044ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2205      	movs	r2, #5
 800446c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	3301      	adds	r3, #1
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	429a      	cmp	r2, r3
 800448a:	d307      	bcc.n	800449c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f2      	bne.n	8004480 <HAL_DMA_IRQHandler+0x2cc>
 800449a:	e000      	b.n	800449e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800449c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
 80044be:	e000      	b.n	80044c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044c0:	bf00      	nop
    }
  }
}
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b40      	cmp	r3, #64	@ 0x40
 80044f4:	d108      	bne.n	8004508 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004506:	e007      	b.n	8004518 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	60da      	str	r2, [r3, #12]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	3b10      	subs	r3, #16
 8004534:	4a14      	ldr	r2, [pc, #80]	@ (8004588 <DMA_CalcBaseAndBitshift+0x64>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800453e:	4a13      	ldr	r2, [pc, #76]	@ (800458c <DMA_CalcBaseAndBitshift+0x68>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b03      	cmp	r3, #3
 8004550:	d909      	bls.n	8004566 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	1d1a      	adds	r2, r3, #4
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	659a      	str	r2, [r3, #88]	@ 0x58
 8004564:	e007      	b.n	8004576 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	aaaaaaab 	.word	0xaaaaaaab
 800458c:	0800bf08 	.word	0x0800bf08

08004590 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11f      	bne.n	80045ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d856      	bhi.n	800465e <DMA_CheckFifoParam+0xce>
 80045b0:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <DMA_CheckFifoParam+0x28>)
 80045b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b6:	bf00      	nop
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045db 	.word	0x080045db
 80045c0:	080045c9 	.word	0x080045c9
 80045c4:	0800465f 	.word	0x0800465f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d046      	beq.n	8004662 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d8:	e043      	b.n	8004662 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045e2:	d140      	bne.n	8004666 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e8:	e03d      	b.n	8004666 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f2:	d121      	bne.n	8004638 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d837      	bhi.n	800466a <DMA_CheckFifoParam+0xda>
 80045fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <DMA_CheckFifoParam+0x70>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	08004611 	.word	0x08004611
 8004604:	08004617 	.word	0x08004617
 8004608:	08004611 	.word	0x08004611
 800460c:	08004629 	.word	0x08004629
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
      break;
 8004614:	e030      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d025      	beq.n	800466e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004626:	e022      	b.n	800466e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004630:	d11f      	bne.n	8004672 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004636:	e01c      	b.n	8004672 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d903      	bls.n	8004646 <DMA_CheckFifoParam+0xb6>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d003      	beq.n	800464c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004644:	e018      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
      break;
 800464a:	e015      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00e      	beq.n	8004676 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	e00b      	b.n	8004676 <DMA_CheckFifoParam+0xe6>
      break;
 800465e:	bf00      	nop
 8004660:	e00a      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
      break;
 8004662:	bf00      	nop
 8004664:	e008      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
      break;
 8004666:	bf00      	nop
 8004668:	e006      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
      break;
 800466a:	bf00      	nop
 800466c:	e004      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
      break;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
      break;   
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <DMA_CheckFifoParam+0xe8>
      break;
 8004676:	bf00      	nop
    }
  } 
  
  return status; 
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop

08004688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004688:	b480      	push	{r7}
 800468a:	b089      	sub	sp, #36	@ 0x24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e165      	b.n	8004970 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046a4:	2201      	movs	r2, #1
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4013      	ands	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	429a      	cmp	r2, r3
 80046be:	f040 8154 	bne.w	800496a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d005      	beq.n	80046da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d130      	bne.n	800473c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	2203      	movs	r2, #3
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004710:	2201      	movs	r2, #1
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 0201 	and.w	r2, r3, #1
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4313      	orrs	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b03      	cmp	r3, #3
 8004746:	d017      	beq.n	8004778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d123      	bne.n	80047cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	08da      	lsrs	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3208      	adds	r2, #8
 800478c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	220f      	movs	r2, #15
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	08da      	lsrs	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3208      	adds	r2, #8
 80047c6:	69b9      	ldr	r1, [r7, #24]
 80047c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0203 	and.w	r2, r3, #3
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80ae 	beq.w	800496a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	4b5d      	ldr	r3, [pc, #372]	@ (8004988 <HAL_GPIO_Init+0x300>)
 8004814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004816:	4a5c      	ldr	r2, [pc, #368]	@ (8004988 <HAL_GPIO_Init+0x300>)
 8004818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800481c:	6453      	str	r3, [r2, #68]	@ 0x44
 800481e:	4b5a      	ldr	r3, [pc, #360]	@ (8004988 <HAL_GPIO_Init+0x300>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800482a:	4a58      	ldr	r2, [pc, #352]	@ (800498c <HAL_GPIO_Init+0x304>)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	3302      	adds	r3, #2
 8004832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	220f      	movs	r2, #15
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a4f      	ldr	r2, [pc, #316]	@ (8004990 <HAL_GPIO_Init+0x308>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d025      	beq.n	80048a2 <HAL_GPIO_Init+0x21a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a4e      	ldr	r2, [pc, #312]	@ (8004994 <HAL_GPIO_Init+0x30c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01f      	beq.n	800489e <HAL_GPIO_Init+0x216>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4d      	ldr	r2, [pc, #308]	@ (8004998 <HAL_GPIO_Init+0x310>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d019      	beq.n	800489a <HAL_GPIO_Init+0x212>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a4c      	ldr	r2, [pc, #304]	@ (800499c <HAL_GPIO_Init+0x314>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_GPIO_Init+0x20e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a4b      	ldr	r2, [pc, #300]	@ (80049a0 <HAL_GPIO_Init+0x318>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00d      	beq.n	8004892 <HAL_GPIO_Init+0x20a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a4a      	ldr	r2, [pc, #296]	@ (80049a4 <HAL_GPIO_Init+0x31c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d007      	beq.n	800488e <HAL_GPIO_Init+0x206>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a49      	ldr	r2, [pc, #292]	@ (80049a8 <HAL_GPIO_Init+0x320>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <HAL_GPIO_Init+0x202>
 8004886:	2306      	movs	r3, #6
 8004888:	e00c      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 800488a:	2307      	movs	r3, #7
 800488c:	e00a      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 800488e:	2305      	movs	r3, #5
 8004890:	e008      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 8004892:	2304      	movs	r3, #4
 8004894:	e006      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 8004896:	2303      	movs	r3, #3
 8004898:	e004      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 800489a:	2302      	movs	r3, #2
 800489c:	e002      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_GPIO_Init+0x21c>
 80048a2:	2300      	movs	r3, #0
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	f002 0203 	and.w	r2, r2, #3
 80048aa:	0092      	lsls	r2, r2, #2
 80048ac:	4093      	lsls	r3, r2
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b4:	4935      	ldr	r1, [pc, #212]	@ (800498c <HAL_GPIO_Init+0x304>)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	3302      	adds	r3, #2
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048c2:	4b3a      	ldr	r3, [pc, #232]	@ (80049ac <HAL_GPIO_Init+0x324>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048e6:	4a31      	ldr	r2, [pc, #196]	@ (80049ac <HAL_GPIO_Init+0x324>)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048ec:	4b2f      	ldr	r3, [pc, #188]	@ (80049ac <HAL_GPIO_Init+0x324>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004910:	4a26      	ldr	r2, [pc, #152]	@ (80049ac <HAL_GPIO_Init+0x324>)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004916:	4b25      	ldr	r3, [pc, #148]	@ (80049ac <HAL_GPIO_Init+0x324>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800493a:	4a1c      	ldr	r2, [pc, #112]	@ (80049ac <HAL_GPIO_Init+0x324>)
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004940:	4b1a      	ldr	r3, [pc, #104]	@ (80049ac <HAL_GPIO_Init+0x324>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004964:	4a11      	ldr	r2, [pc, #68]	@ (80049ac <HAL_GPIO_Init+0x324>)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b0f      	cmp	r3, #15
 8004974:	f67f ae96 	bls.w	80046a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3724      	adds	r7, #36	@ 0x24
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	40013800 	.word	0x40013800
 8004990:	40020000 	.word	0x40020000
 8004994:	40020400 	.word	0x40020400
 8004998:	40020800 	.word	0x40020800
 800499c:	40020c00 	.word	0x40020c00
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40021400 	.word	0x40021400
 80049a8:	40021800 	.word	0x40021800
 80049ac:	40013c00 	.word	0x40013c00

080049b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
 80049bc:	4613      	mov	r3, r2
 80049be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049c0:	787b      	ldrb	r3, [r7, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049cc:	e003      	b.n	80049d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	041a      	lsls	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	619a      	str	r2, [r3, #24]
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e12b      	b.n	8004c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fe f82e 	bl	8002a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2224      	movs	r2, #36	@ 0x24
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a48:	f000 fa02 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4a81      	ldr	r2, [pc, #516]	@ (8004c58 <HAL_I2C_Init+0x274>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d807      	bhi.n	8004a68 <HAL_I2C_Init+0x84>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a80      	ldr	r2, [pc, #512]	@ (8004c5c <HAL_I2C_Init+0x278>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bf94      	ite	ls
 8004a60:	2301      	movls	r3, #1
 8004a62:	2300      	movhi	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e006      	b.n	8004a76 <HAL_I2C_Init+0x92>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a7d      	ldr	r2, [pc, #500]	@ (8004c60 <HAL_I2C_Init+0x27c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	bf94      	ite	ls
 8004a70:	2301      	movls	r3, #1
 8004a72:	2300      	movhi	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0e7      	b.n	8004c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a78      	ldr	r2, [pc, #480]	@ (8004c64 <HAL_I2C_Init+0x280>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	0c9b      	lsrs	r3, r3, #18
 8004a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4a6a      	ldr	r2, [pc, #424]	@ (8004c58 <HAL_I2C_Init+0x274>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d802      	bhi.n	8004ab8 <HAL_I2C_Init+0xd4>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	e009      	b.n	8004acc <HAL_I2C_Init+0xe8>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	4a69      	ldr	r2, [pc, #420]	@ (8004c68 <HAL_I2C_Init+0x284>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	3301      	adds	r3, #1
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004ade:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	495c      	ldr	r1, [pc, #368]	@ (8004c58 <HAL_I2C_Init+0x274>)
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	d819      	bhi.n	8004b20 <HAL_I2C_Init+0x13c>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1e59      	subs	r1, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004afa:	1c59      	adds	r1, r3, #1
 8004afc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b00:	400b      	ands	r3, r1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_I2C_Init+0x138>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1e59      	subs	r1, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b14:	3301      	adds	r3, #1
 8004b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1a:	e051      	b.n	8004bc0 <HAL_I2C_Init+0x1dc>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	e04f      	b.n	8004bc0 <HAL_I2C_Init+0x1dc>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d111      	bne.n	8004b4c <HAL_I2C_Init+0x168>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1e58      	subs	r0, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	440b      	add	r3, r1
 8004b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e012      	b.n	8004b72 <HAL_I2C_Init+0x18e>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1e58      	subs	r0, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6859      	ldr	r1, [r3, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	0099      	lsls	r1, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b62:	3301      	adds	r3, #1
 8004b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_I2C_Init+0x196>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e022      	b.n	8004bc0 <HAL_I2C_Init+0x1dc>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10e      	bne.n	8004ba0 <HAL_I2C_Init+0x1bc>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1e58      	subs	r0, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6859      	ldr	r1, [r3, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	440b      	add	r3, r1
 8004b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b94:	3301      	adds	r3, #1
 8004b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b9e:	e00f      	b.n	8004bc0 <HAL_I2C_Init+0x1dc>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	1e58      	subs	r0, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	0099      	lsls	r1, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	6809      	ldr	r1, [r1, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69da      	ldr	r2, [r3, #28]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004bee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6911      	ldr	r1, [r2, #16]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68d2      	ldr	r2, [r2, #12]
 8004bfa:	4311      	orrs	r1, r2
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	430b      	orrs	r3, r1
 8004c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	000186a0 	.word	0x000186a0
 8004c5c:	001e847f 	.word	0x001e847f
 8004c60:	003d08ff 	.word	0x003d08ff
 8004c64:	431bde83 	.word	0x431bde83
 8004c68:	10624dd3 	.word	0x10624dd3

08004c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0cc      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b68      	ldr	r3, [pc, #416]	@ (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d90c      	bls.n	8004ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b65      	ldr	r3, [pc, #404]	@ (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b63      	ldr	r3, [pc, #396]	@ (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0b8      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d020      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d005      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc0:	4b59      	ldr	r3, [pc, #356]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4a58      	ldr	r2, [pc, #352]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd8:	4b53      	ldr	r3, [pc, #332]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a52      	ldr	r2, [pc, #328]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce4:	4b50      	ldr	r3, [pc, #320]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	494d      	ldr	r1, [pc, #308]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d044      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d107      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b47      	ldr	r3, [pc, #284]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d119      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e07f      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d003      	beq.n	8004d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e06f      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e067      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4a:	4b37      	ldr	r3, [pc, #220]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4934      	ldr	r1, [pc, #208]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d5c:	f7fe fac4 	bl	80032e8 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d62:	e00a      	b.n	8004d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d64:	f7fe fac0 	bl	80032e8 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e04f      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 020c 	and.w	r2, r3, #12
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d1eb      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b25      	ldr	r3, [pc, #148]	@ (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d20c      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b22      	ldr	r3, [pc, #136]	@ (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b20      	ldr	r3, [pc, #128]	@ (8004e24 <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e032      	b.n	8004e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc0:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4916      	ldr	r1, [pc, #88]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dde:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	490e      	ldr	r1, [pc, #56]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004df2:	f000 f855 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004df6:	4602      	mov	r2, r0
 8004df8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	490a      	ldr	r1, [pc, #40]	@ (8004e2c <HAL_RCC_ClockConfig+0x1c0>)
 8004e04:	5ccb      	ldrb	r3, [r1, r3]
 8004e06:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0a:	4a09      	ldr	r2, [pc, #36]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e0e:	4b09      	ldr	r3, [pc, #36]	@ (8004e34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fa24 	bl	8003260 <HAL_InitTick>

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40023c00 	.word	0x40023c00
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	0800bef0 	.word	0x0800bef0
 8004e30:	20000004 	.word	0x20000004
 8004e34:	20000008 	.word	0x20000008

08004e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e3c:	4b03      	ldr	r3, [pc, #12]	@ (8004e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000004 	.word	0x20000004

08004e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e54:	f7ff fff0 	bl	8004e38 <HAL_RCC_GetHCLKFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	0a9b      	lsrs	r3, r3, #10
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	4903      	ldr	r1, [pc, #12]	@ (8004e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40023800 	.word	0x40023800
 8004e74:	0800bf00 	.word	0x0800bf00

08004e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e7c:	f7ff ffdc 	bl	8004e38 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0b5b      	lsrs	r3, r3, #13
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4903      	ldr	r1, [pc, #12]	@ (8004e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	0800bf00 	.word	0x0800bf00

08004ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea4:	b0ae      	sub	sp, #184	@ 0xb8
 8004ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec6:	4bcb      	ldr	r3, [pc, #812]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	f200 8206 	bhi.w	80052e0 <HAL_RCC_GetSysClockFreq+0x440>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f11 	.word	0x08004f11
 8004ee0:	080052e1 	.word	0x080052e1
 8004ee4:	080052e1 	.word	0x080052e1
 8004ee8:	080052e1 	.word	0x080052e1
 8004eec:	08004f19 	.word	0x08004f19
 8004ef0:	080052e1 	.word	0x080052e1
 8004ef4:	080052e1 	.word	0x080052e1
 8004ef8:	080052e1 	.word	0x080052e1
 8004efc:	08004f21 	.word	0x08004f21
 8004f00:	080052e1 	.word	0x080052e1
 8004f04:	080052e1 	.word	0x080052e1
 8004f08:	080052e1 	.word	0x080052e1
 8004f0c:	08005111 	.word	0x08005111
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f10:	4bb9      	ldr	r3, [pc, #740]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004f16:	e1e7      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f18:	4bb8      	ldr	r3, [pc, #736]	@ (80051fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f1e:	e1e3      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f20:	4bb4      	ldr	r3, [pc, #720]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f2c:	4bb1      	ldr	r3, [pc, #708]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d071      	beq.n	800501c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f38:	4bae      	ldr	r3, [pc, #696]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f5e:	4622      	mov	r2, r4
 8004f60:	462b      	mov	r3, r5
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	0159      	lsls	r1, r3, #5
 8004f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f70:	0150      	lsls	r0, r2, #5
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4621      	mov	r1, r4
 8004f78:	1a51      	subs	r1, r2, r1
 8004f7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f82:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004f90:	4649      	mov	r1, r9
 8004f92:	018b      	lsls	r3, r1, #6
 8004f94:	4641      	mov	r1, r8
 8004f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	018a      	lsls	r2, r1, #6
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	1a51      	subs	r1, r2, r1
 8004fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004fb8:	4649      	mov	r1, r9
 8004fba:	00cb      	lsls	r3, r1, #3
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	00ca      	lsls	r2, r1, #3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4622      	mov	r2, r4
 8004fce:	189b      	adds	r3, r3, r2
 8004fd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	eb42 0303 	adc.w	r3, r2, r3
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fe8:	4629      	mov	r1, r5
 8004fea:	024b      	lsls	r3, r1, #9
 8004fec:	4621      	mov	r1, r4
 8004fee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	024a      	lsls	r2, r1, #9
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005008:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800500c:	f7fb fe5c 	bl	8000cc8 <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4613      	mov	r3, r2
 8005016:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800501a:	e067      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800501c:	4b75      	ldr	r3, [pc, #468]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	099b      	lsrs	r3, r3, #6
 8005022:	2200      	movs	r2, #0
 8005024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005028:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800502c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005036:	2300      	movs	r3, #0
 8005038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800503a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800503e:	4622      	mov	r2, r4
 8005040:	462b      	mov	r3, r5
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f04f 0100 	mov.w	r1, #0
 800504a:	0159      	lsls	r1, r3, #5
 800504c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005050:	0150      	lsls	r0, r2, #5
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4621      	mov	r1, r4
 8005058:	1a51      	subs	r1, r2, r1
 800505a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800505c:	4629      	mov	r1, r5
 800505e:	eb63 0301 	sbc.w	r3, r3, r1
 8005062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005070:	4649      	mov	r1, r9
 8005072:	018b      	lsls	r3, r1, #6
 8005074:	4641      	mov	r1, r8
 8005076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800507a:	4641      	mov	r1, r8
 800507c:	018a      	lsls	r2, r1, #6
 800507e:	4641      	mov	r1, r8
 8005080:	ebb2 0a01 	subs.w	sl, r2, r1
 8005084:	4649      	mov	r1, r9
 8005086:	eb63 0b01 	sbc.w	fp, r3, r1
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005096:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800509a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800509e:	4692      	mov	sl, r2
 80050a0:	469b      	mov	fp, r3
 80050a2:	4623      	mov	r3, r4
 80050a4:	eb1a 0303 	adds.w	r3, sl, r3
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	462b      	mov	r3, r5
 80050ac:	eb4b 0303 	adc.w	r3, fp, r3
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80050be:	4629      	mov	r1, r5
 80050c0:	028b      	lsls	r3, r1, #10
 80050c2:	4621      	mov	r1, r4
 80050c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050c8:	4621      	mov	r1, r4
 80050ca:	028a      	lsls	r2, r1, #10
 80050cc:	4610      	mov	r0, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050d4:	2200      	movs	r2, #0
 80050d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80050d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80050da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80050de:	f7fb fdf3 	bl	8000cc8 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4613      	mov	r3, r2
 80050e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050ec:	4b41      	ldr	r3, [pc, #260]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	3301      	adds	r3, #1
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80050fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005102:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800510e:	e0eb      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005110:	4b38      	ldr	r3, [pc, #224]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005118:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800511c:	4b35      	ldr	r3, [pc, #212]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d06b      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005128:	4b32      	ldr	r3, [pc, #200]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	2200      	movs	r2, #0
 8005130:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005132:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005134:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	663b      	str	r3, [r7, #96]	@ 0x60
 800513c:	2300      	movs	r3, #0
 800513e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005140:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005144:	4622      	mov	r2, r4
 8005146:	462b      	mov	r3, r5
 8005148:	f04f 0000 	mov.w	r0, #0
 800514c:	f04f 0100 	mov.w	r1, #0
 8005150:	0159      	lsls	r1, r3, #5
 8005152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005156:	0150      	lsls	r0, r2, #5
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4621      	mov	r1, r4
 800515e:	1a51      	subs	r1, r2, r1
 8005160:	61b9      	str	r1, [r7, #24]
 8005162:	4629      	mov	r1, r5
 8005164:	eb63 0301 	sbc.w	r3, r3, r1
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005176:	4659      	mov	r1, fp
 8005178:	018b      	lsls	r3, r1, #6
 800517a:	4651      	mov	r1, sl
 800517c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005180:	4651      	mov	r1, sl
 8005182:	018a      	lsls	r2, r1, #6
 8005184:	4651      	mov	r1, sl
 8005186:	ebb2 0801 	subs.w	r8, r2, r1
 800518a:	4659      	mov	r1, fp
 800518c:	eb63 0901 	sbc.w	r9, r3, r1
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800519c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051a4:	4690      	mov	r8, r2
 80051a6:	4699      	mov	r9, r3
 80051a8:	4623      	mov	r3, r4
 80051aa:	eb18 0303 	adds.w	r3, r8, r3
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	462b      	mov	r3, r5
 80051b2:	eb49 0303 	adc.w	r3, r9, r3
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80051c4:	4629      	mov	r1, r5
 80051c6:	024b      	lsls	r3, r1, #9
 80051c8:	4621      	mov	r1, r4
 80051ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051ce:	4621      	mov	r1, r4
 80051d0:	024a      	lsls	r2, r1, #9
 80051d2:	4610      	mov	r0, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051da:	2200      	movs	r2, #0
 80051dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80051e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051e4:	f7fb fd70 	bl	8000cc8 <__aeabi_uldivmod>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4613      	mov	r3, r2
 80051ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051f2:	e065      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x420>
 80051f4:	40023800 	.word	0x40023800
 80051f8:	00f42400 	.word	0x00f42400
 80051fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005200:	4b3d      	ldr	r3, [pc, #244]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	2200      	movs	r2, #0
 8005208:	4618      	mov	r0, r3
 800520a:	4611      	mov	r1, r2
 800520c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005210:	653b      	str	r3, [r7, #80]	@ 0x50
 8005212:	2300      	movs	r3, #0
 8005214:	657b      	str	r3, [r7, #84]	@ 0x54
 8005216:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800521a:	4642      	mov	r2, r8
 800521c:	464b      	mov	r3, r9
 800521e:	f04f 0000 	mov.w	r0, #0
 8005222:	f04f 0100 	mov.w	r1, #0
 8005226:	0159      	lsls	r1, r3, #5
 8005228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800522c:	0150      	lsls	r0, r2, #5
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4641      	mov	r1, r8
 8005234:	1a51      	subs	r1, r2, r1
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	4649      	mov	r1, r9
 800523a:	eb63 0301 	sbc.w	r3, r3, r1
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800524c:	4659      	mov	r1, fp
 800524e:	018b      	lsls	r3, r1, #6
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005256:	4651      	mov	r1, sl
 8005258:	018a      	lsls	r2, r1, #6
 800525a:	4651      	mov	r1, sl
 800525c:	1a54      	subs	r4, r2, r1
 800525e:	4659      	mov	r1, fp
 8005260:	eb63 0501 	sbc.w	r5, r3, r1
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	00eb      	lsls	r3, r5, #3
 800526e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005272:	00e2      	lsls	r2, r4, #3
 8005274:	4614      	mov	r4, r2
 8005276:	461d      	mov	r5, r3
 8005278:	4643      	mov	r3, r8
 800527a:	18e3      	adds	r3, r4, r3
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	464b      	mov	r3, r9
 8005280:	eb45 0303 	adc.w	r3, r5, r3
 8005284:	607b      	str	r3, [r7, #4]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005292:	4629      	mov	r1, r5
 8005294:	028b      	lsls	r3, r1, #10
 8005296:	4621      	mov	r1, r4
 8005298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800529c:	4621      	mov	r1, r4
 800529e:	028a      	lsls	r2, r1, #10
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052a8:	2200      	movs	r2, #0
 80052aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80052ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052b2:	f7fb fd09 	bl	8000cc8 <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4613      	mov	r3, r2
 80052bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80052c0:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	0f1b      	lsrs	r3, r3, #28
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80052ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052de:	e003      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052e0:	4b06      	ldr	r3, [pc, #24]	@ (80052fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80052e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	37b8      	adds	r7, #184	@ 0xb8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800
 80052fc:	00f42400 	.word	0x00f42400

08005300 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e28d      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8083 	beq.w	8005426 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005320:	4b94      	ldr	r3, [pc, #592]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 030c 	and.w	r3, r3, #12
 8005328:	2b04      	cmp	r3, #4
 800532a:	d019      	beq.n	8005360 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800532c:	4b91      	ldr	r3, [pc, #580]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005334:	2b08      	cmp	r3, #8
 8005336:	d106      	bne.n	8005346 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005338:	4b8e      	ldr	r3, [pc, #568]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005340:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005344:	d00c      	beq.n	8005360 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005346:	4b8b      	ldr	r3, [pc, #556]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d112      	bne.n	8005378 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005352:	4b88      	ldr	r3, [pc, #544]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800535a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800535e:	d10b      	bne.n	8005378 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005360:	4b84      	ldr	r3, [pc, #528]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d05b      	beq.n	8005424 <HAL_RCC_OscConfig+0x124>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d157      	bne.n	8005424 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e25a      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005380:	d106      	bne.n	8005390 <HAL_RCC_OscConfig+0x90>
 8005382:	4b7c      	ldr	r3, [pc, #496]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a7b      	ldr	r2, [pc, #492]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e01d      	b.n	80053cc <HAL_RCC_OscConfig+0xcc>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005398:	d10c      	bne.n	80053b4 <HAL_RCC_OscConfig+0xb4>
 800539a:	4b76      	ldr	r3, [pc, #472]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a75      	ldr	r2, [pc, #468]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80053a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b73      	ldr	r3, [pc, #460]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a72      	ldr	r2, [pc, #456]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e00b      	b.n	80053cc <HAL_RCC_OscConfig+0xcc>
 80053b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80053ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	4b6c      	ldr	r3, [pc, #432]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a6b      	ldr	r2, [pc, #428]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80053c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d013      	beq.n	80053fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fd ff88 	bl	80032e8 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fd ff84 	bl	80032e8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	@ 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e21f      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	4b61      	ldr	r3, [pc, #388]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0xdc>
 80053fa:	e014      	b.n	8005426 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fd ff74 	bl	80032e8 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005404:	f7fd ff70 	bl	80032e8 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	@ 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e20b      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005416:	4b57      	ldr	r3, [pc, #348]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x104>
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d06f      	beq.n	8005512 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005432:	4b50      	ldr	r3, [pc, #320]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 030c 	and.w	r3, r3, #12
 800543a:	2b00      	cmp	r3, #0
 800543c:	d017      	beq.n	800546e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800543e:	4b4d      	ldr	r3, [pc, #308]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005446:	2b08      	cmp	r3, #8
 8005448:	d105      	bne.n	8005456 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800544a:	4b4a      	ldr	r3, [pc, #296]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005456:	4b47      	ldr	r3, [pc, #284]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800545e:	2b0c      	cmp	r3, #12
 8005460:	d11c      	bne.n	800549c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005462:	4b44      	ldr	r3, [pc, #272]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d116      	bne.n	800549c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800546e:	4b41      	ldr	r3, [pc, #260]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_RCC_OscConfig+0x186>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d001      	beq.n	8005486 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e1d3      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005486:	4b3b      	ldr	r3, [pc, #236]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4937      	ldr	r1, [pc, #220]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549a:	e03a      	b.n	8005512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d020      	beq.n	80054e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054a4:	4b34      	ldr	r3, [pc, #208]	@ (8005578 <HAL_RCC_OscConfig+0x278>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054aa:	f7fd ff1d 	bl	80032e8 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b2:	f7fd ff19 	bl	80032e8 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e1b4      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0f0      	beq.n	80054b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d0:	4b28      	ldr	r3, [pc, #160]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	4925      	ldr	r1, [pc, #148]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	600b      	str	r3, [r1, #0]
 80054e4:	e015      	b.n	8005512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054e6:	4b24      	ldr	r3, [pc, #144]	@ (8005578 <HAL_RCC_OscConfig+0x278>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ec:	f7fd fefc 	bl	80032e8 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054f4:	f7fd fef8 	bl	80032e8 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e193      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005506:	4b1b      	ldr	r3, [pc, #108]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d036      	beq.n	800558c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d016      	beq.n	8005554 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005526:	4b15      	ldr	r3, [pc, #84]	@ (800557c <HAL_RCC_OscConfig+0x27c>)
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fd fedc 	bl	80032e8 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005534:	f7fd fed8 	bl	80032e8 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e173      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <HAL_RCC_OscConfig+0x274>)
 8005548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0x234>
 8005552:	e01b      	b.n	800558c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005554:	4b09      	ldr	r3, [pc, #36]	@ (800557c <HAL_RCC_OscConfig+0x27c>)
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fd fec5 	bl	80032e8 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005560:	e00e      	b.n	8005580 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005562:	f7fd fec1 	bl	80032e8 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d907      	bls.n	8005580 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e15c      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
 8005574:	40023800 	.word	0x40023800
 8005578:	42470000 	.word	0x42470000
 800557c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005580:	4b8a      	ldr	r3, [pc, #552]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ea      	bne.n	8005562 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8097 	beq.w	80056c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559a:	2300      	movs	r3, #0
 800559c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559e:	4b83      	ldr	r3, [pc, #524]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10f      	bne.n	80055ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055aa:	2300      	movs	r3, #0
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	4b7f      	ldr	r3, [pc, #508]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	4a7e      	ldr	r2, [pc, #504]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 80055b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80055ba:	4b7c      	ldr	r3, [pc, #496]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c6:	2301      	movs	r3, #1
 80055c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ca:	4b79      	ldr	r3, [pc, #484]	@ (80057b0 <HAL_RCC_OscConfig+0x4b0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d118      	bne.n	8005608 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d6:	4b76      	ldr	r3, [pc, #472]	@ (80057b0 <HAL_RCC_OscConfig+0x4b0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a75      	ldr	r2, [pc, #468]	@ (80057b0 <HAL_RCC_OscConfig+0x4b0>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e2:	f7fd fe81 	bl	80032e8 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ea:	f7fd fe7d 	bl	80032e8 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e118      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fc:	4b6c      	ldr	r3, [pc, #432]	@ (80057b0 <HAL_RCC_OscConfig+0x4b0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d106      	bne.n	800561e <HAL_RCC_OscConfig+0x31e>
 8005610:	4b66      	ldr	r3, [pc, #408]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005614:	4a65      	ldr	r2, [pc, #404]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005616:	f043 0301 	orr.w	r3, r3, #1
 800561a:	6713      	str	r3, [r2, #112]	@ 0x70
 800561c:	e01c      	b.n	8005658 <HAL_RCC_OscConfig+0x358>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2b05      	cmp	r3, #5
 8005624:	d10c      	bne.n	8005640 <HAL_RCC_OscConfig+0x340>
 8005626:	4b61      	ldr	r3, [pc, #388]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562a:	4a60      	ldr	r2, [pc, #384]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 800562c:	f043 0304 	orr.w	r3, r3, #4
 8005630:	6713      	str	r3, [r2, #112]	@ 0x70
 8005632:	4b5e      	ldr	r3, [pc, #376]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005636:	4a5d      	ldr	r2, [pc, #372]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	6713      	str	r3, [r2, #112]	@ 0x70
 800563e:	e00b      	b.n	8005658 <HAL_RCC_OscConfig+0x358>
 8005640:	4b5a      	ldr	r3, [pc, #360]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005644:	4a59      	ldr	r2, [pc, #356]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	6713      	str	r3, [r2, #112]	@ 0x70
 800564c:	4b57      	ldr	r3, [pc, #348]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005650:	4a56      	ldr	r2, [pc, #344]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005652:	f023 0304 	bic.w	r3, r3, #4
 8005656:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d015      	beq.n	800568c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fd fe42 	bl	80032e8 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005666:	e00a      	b.n	800567e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005668:	f7fd fe3e 	bl	80032e8 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e0d7      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800567e:	4b4b      	ldr	r3, [pc, #300]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0ee      	beq.n	8005668 <HAL_RCC_OscConfig+0x368>
 800568a:	e014      	b.n	80056b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568c:	f7fd fe2c 	bl	80032e8 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005692:	e00a      	b.n	80056aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005694:	f7fd fe28 	bl	80032e8 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e0c1      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056aa:	4b40      	ldr	r3, [pc, #256]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1ee      	bne.n	8005694 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d105      	bne.n	80056c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056bc:	4b3b      	ldr	r3, [pc, #236]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 80056be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c0:	4a3a      	ldr	r2, [pc, #232]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 80056c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80ad 	beq.w	800582c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056d2:	4b36      	ldr	r3, [pc, #216]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d060      	beq.n	80057a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d145      	bne.n	8005772 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e6:	4b33      	ldr	r3, [pc, #204]	@ (80057b4 <HAL_RCC_OscConfig+0x4b4>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fd fdfc 	bl	80032e8 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f4:	f7fd fdf8 	bl	80032e8 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e093      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005706:	4b29      	ldr	r3, [pc, #164]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f0      	bne.n	80056f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69da      	ldr	r2, [r3, #28]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	019b      	lsls	r3, r3, #6
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	3b01      	subs	r3, #1
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005734:	061b      	lsls	r3, r3, #24
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573c:	071b      	lsls	r3, r3, #28
 800573e:	491b      	ldr	r1, [pc, #108]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005740:	4313      	orrs	r3, r2
 8005742:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005744:	4b1b      	ldr	r3, [pc, #108]	@ (80057b4 <HAL_RCC_OscConfig+0x4b4>)
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574a:	f7fd fdcd 	bl	80032e8 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005752:	f7fd fdc9 	bl	80032e8 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e064      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005764:	4b11      	ldr	r3, [pc, #68]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f0      	beq.n	8005752 <HAL_RCC_OscConfig+0x452>
 8005770:	e05c      	b.n	800582c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005772:	4b10      	ldr	r3, [pc, #64]	@ (80057b4 <HAL_RCC_OscConfig+0x4b4>)
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fd fdb6 	bl	80032e8 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005780:	f7fd fdb2 	bl	80032e8 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e04d      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005792:	4b06      	ldr	r3, [pc, #24]	@ (80057ac <HAL_RCC_OscConfig+0x4ac>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x480>
 800579e:	e045      	b.n	800582c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d107      	bne.n	80057b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e040      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
 80057ac:	40023800 	.word	0x40023800
 80057b0:	40007000 	.word	0x40007000
 80057b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005838 <HAL_RCC_OscConfig+0x538>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d030      	beq.n	8005828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d129      	bne.n	8005828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057de:	429a      	cmp	r2, r3
 80057e0:	d122      	bne.n	8005828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057e8:	4013      	ands	r3, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d119      	bne.n	8005828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	3b01      	subs	r3, #1
 8005802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005804:	429a      	cmp	r2, r3
 8005806:	d10f      	bne.n	8005828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d107      	bne.n	8005828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005822:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005824:	429a      	cmp	r2, r3
 8005826:	d001      	beq.n	800582c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800

0800583c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e07b      	b.n	8005946 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d108      	bne.n	8005868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800585e:	d009      	beq.n	8005874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	61da      	str	r2, [r3, #28]
 8005866:	e005      	b.n	8005874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fd f934 	bl	8002afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f8:	ea42 0103 	orr.w	r1, r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	f003 0104 	and.w	r1, r3, #4
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	f003 0210 	and.w	r2, r3, #16
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005934:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e041      	b.n	80059e4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7fd f909 	bl	8002b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3304      	adds	r3, #4
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f000 fa7d 	bl	8005e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d001      	beq.n	8005a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e04e      	b.n	8005aa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a23      	ldr	r2, [pc, #140]	@ (8005ab0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d022      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x80>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2e:	d01d      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x80>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d018      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x80>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x80>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1c      	ldr	r2, [pc, #112]	@ (8005abc <HAL_TIM_Base_Start_IT+0xd0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00e      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x80>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d009      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x80>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ac4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_TIM_Base_Start_IT+0x80>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d111      	bne.n	8005a90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b06      	cmp	r3, #6
 8005a7c:	d010      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0201 	orr.w	r2, r2, #1
 8005a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8e:	e007      	b.n	8005aa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40000c00 	.word	0x40000c00
 8005ac0:	40010400 	.word	0x40010400
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40001800 	.word	0x40001800

08005acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d020      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01b      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0202 	mvn.w	r2, #2
 8005b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f999 	bl	8005e4e <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f98b 	bl	8005e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f99c 	bl	8005e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d020      	beq.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01b      	beq.n	8005b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0204 	mvn.w	r2, #4
 8005b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f973 	bl	8005e4e <HAL_TIM_IC_CaptureCallback>
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f965 	bl	8005e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f976 	bl	8005e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d020      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01b      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0208 	mvn.w	r2, #8
 8005b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f94d 	bl	8005e4e <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f93f 	bl	8005e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f950 	bl	8005e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d020      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01b      	beq.n	8005c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0210 	mvn.w	r2, #16
 8005be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2208      	movs	r2, #8
 8005bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f927 	bl	8005e4e <HAL_TIM_IC_CaptureCallback>
 8005c00:	e005      	b.n	8005c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f919 	bl	8005e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f92a 	bl	8005e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00c      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0201 	mvn.w	r2, #1
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fc f9dc 	bl	8001ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00c      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fae4 	bl	8006224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00c      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d007      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f8fb 	bl	8005e76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0220 	mvn.w	r2, #32
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fab6 	bl	8006210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e0b4      	b.n	8005e32 <HAL_TIM_ConfigClockSource+0x186>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d00:	d03e      	beq.n	8005d80 <HAL_TIM_ConfigClockSource+0xd4>
 8005d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d06:	f200 8087 	bhi.w	8005e18 <HAL_TIM_ConfigClockSource+0x16c>
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0e:	f000 8086 	beq.w	8005e1e <HAL_TIM_ConfigClockSource+0x172>
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d16:	d87f      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b70      	cmp	r3, #112	@ 0x70
 8005d1a:	d01a      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0xa6>
 8005d1c:	2b70      	cmp	r3, #112	@ 0x70
 8005d1e:	d87b      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b60      	cmp	r3, #96	@ 0x60
 8005d22:	d050      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x11a>
 8005d24:	2b60      	cmp	r3, #96	@ 0x60
 8005d26:	d877      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b50      	cmp	r3, #80	@ 0x50
 8005d2a:	d03c      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0xfa>
 8005d2c:	2b50      	cmp	r3, #80	@ 0x50
 8005d2e:	d873      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	d058      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x13a>
 8005d34:	2b40      	cmp	r3, #64	@ 0x40
 8005d36:	d86f      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x16c>
 8005d38:	2b30      	cmp	r3, #48	@ 0x30
 8005d3a:	d064      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x15a>
 8005d3c:	2b30      	cmp	r3, #48	@ 0x30
 8005d3e:	d86b      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x16c>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d060      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x15a>
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d867      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x16c>
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d05c      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x15a>
 8005d4c:	2b10      	cmp	r3, #16
 8005d4e:	d05a      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x15a>
 8005d50:	e062      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d62:	f000 f9b9 	bl	80060d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	609a      	str	r2, [r3, #8]
      break;
 8005d7e:	e04f      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d90:	f000 f9a2 	bl	80060d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005da2:	609a      	str	r2, [r3, #8]
      break;
 8005da4:	e03c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	461a      	mov	r2, r3
 8005db4:	f000 f916 	bl	8005fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2150      	movs	r1, #80	@ 0x50
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f96f 	bl	80060a2 <TIM_ITRx_SetConfig>
      break;
 8005dc4:	e02c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f000 f935 	bl	8006042 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2160      	movs	r1, #96	@ 0x60
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f95f 	bl	80060a2 <TIM_ITRx_SetConfig>
      break;
 8005de4:	e01c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	461a      	mov	r2, r3
 8005df4:	f000 f8f6 	bl	8005fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2140      	movs	r1, #64	@ 0x40
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f94f 	bl	80060a2 <TIM_ITRx_SetConfig>
      break;
 8005e04:	e00c      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4610      	mov	r0, r2
 8005e12:	f000 f946 	bl	80060a2 <TIM_ITRx_SetConfig>
      break;
 8005e16:	e003      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e000      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
	...

08005e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a46      	ldr	r2, [pc, #280]	@ (8005fb8 <TIM_Base_SetConfig+0x12c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eaa:	d00f      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a43      	ldr	r2, [pc, #268]	@ (8005fbc <TIM_Base_SetConfig+0x130>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a42      	ldr	r2, [pc, #264]	@ (8005fc0 <TIM_Base_SetConfig+0x134>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a41      	ldr	r2, [pc, #260]	@ (8005fc4 <TIM_Base_SetConfig+0x138>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a40      	ldr	r2, [pc, #256]	@ (8005fc8 <TIM_Base_SetConfig+0x13c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d108      	bne.n	8005ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a35      	ldr	r2, [pc, #212]	@ (8005fb8 <TIM_Base_SetConfig+0x12c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d02b      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eec:	d027      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a32      	ldr	r2, [pc, #200]	@ (8005fbc <TIM_Base_SetConfig+0x130>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d023      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a31      	ldr	r2, [pc, #196]	@ (8005fc0 <TIM_Base_SetConfig+0x134>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d01f      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a30      	ldr	r2, [pc, #192]	@ (8005fc4 <TIM_Base_SetConfig+0x138>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01b      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2f      	ldr	r2, [pc, #188]	@ (8005fc8 <TIM_Base_SetConfig+0x13c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d017      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2e      	ldr	r2, [pc, #184]	@ (8005fcc <TIM_Base_SetConfig+0x140>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2d      	ldr	r2, [pc, #180]	@ (8005fd0 <TIM_Base_SetConfig+0x144>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2c      	ldr	r2, [pc, #176]	@ (8005fd4 <TIM_Base_SetConfig+0x148>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2b      	ldr	r2, [pc, #172]	@ (8005fd8 <TIM_Base_SetConfig+0x14c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2a      	ldr	r2, [pc, #168]	@ (8005fdc <TIM_Base_SetConfig+0x150>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a29      	ldr	r2, [pc, #164]	@ (8005fe0 <TIM_Base_SetConfig+0x154>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d108      	bne.n	8005f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a10      	ldr	r2, [pc, #64]	@ (8005fb8 <TIM_Base_SetConfig+0x12c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_Base_SetConfig+0xf8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a12      	ldr	r2, [pc, #72]	@ (8005fc8 <TIM_Base_SetConfig+0x13c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d103      	bne.n	8005f8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d105      	bne.n	8005faa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f023 0201 	bic.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	611a      	str	r2, [r3, #16]
  }
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40000c00 	.word	0x40000c00
 8005fc8:	40010400 	.word	0x40010400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	40001800 	.word	0x40001800
 8005fdc:	40001c00 	.word	0x40001c00
 8005fe0:	40002000 	.word	0x40002000

08005fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f023 0201 	bic.w	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800600e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f023 030a 	bic.w	r3, r3, #10
 8006020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006042:	b480      	push	{r7}
 8006044:	b087      	sub	sp, #28
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f023 0210 	bic.w	r2, r3, #16
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800606c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	031b      	lsls	r3, r3, #12
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800607e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	f043 0307 	orr.w	r3, r3, #7
 80060c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	609a      	str	r2, [r3, #8]
}
 80060cc:	bf00      	nop
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	021a      	lsls	r2, r3, #8
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4313      	orrs	r3, r2
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800612c:	2302      	movs	r3, #2
 800612e:	e05a      	b.n	80061e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a21      	ldr	r2, [pc, #132]	@ (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d022      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617c:	d01d      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1d      	ldr	r2, [pc, #116]	@ (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d018      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1b      	ldr	r2, [pc, #108]	@ (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1a      	ldr	r2, [pc, #104]	@ (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00e      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a18      	ldr	r2, [pc, #96]	@ (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d009      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a17      	ldr	r2, [pc, #92]	@ (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d004      	beq.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a15      	ldr	r2, [pc, #84]	@ (800620c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d10c      	bne.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40010000 	.word	0x40010000
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40000800 	.word	0x40000800
 8006200:	40000c00 	.word	0x40000c00
 8006204:	40010400 	.word	0x40010400
 8006208:	40014000 	.word	0x40014000
 800620c:	40001800 	.word	0x40001800

08006210 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e042      	b.n	80062d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fc fcf6 	bl	8002c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	@ 0x24
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800627a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 ffe7 	bl	8007250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08a      	sub	sp, #40	@ 0x28
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d175      	bne.n	80063e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_UART_Transmit+0x2c>
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e06e      	b.n	80063e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2221      	movs	r2, #33	@ 0x21
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006316:	f7fc ffe7 	bl	80032e8 <HAL_GetTick>
 800631a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006330:	d108      	bne.n	8006344 <HAL_UART_Transmit+0x6c>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	e003      	b.n	800634c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006348:	2300      	movs	r3, #0
 800634a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800634c:	e02e      	b.n	80063ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2200      	movs	r2, #0
 8006356:	2180      	movs	r1, #128	@ 0x80
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fcbf 	bl	8006cdc <UART_WaitOnFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e03a      	b.n	80063e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10b      	bne.n	800638e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	3302      	adds	r3, #2
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	e007      	b.n	800639e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	781a      	ldrb	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	3301      	adds	r3, #1
 800639c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1cb      	bne.n	800634e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2200      	movs	r2, #0
 80063be:	2140      	movs	r1, #64	@ 0x40
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fc8b 	bl	8006cdc <UART_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e006      	b.n	80063e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e000      	b.n	80063e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
  }
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b08a      	sub	sp, #40	@ 0x28
 80063f2:	af02      	add	r7, sp, #8
 80063f4:	60f8      	str	r0, [r7, #12]
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	603b      	str	r3, [r7, #0]
 80063fa:	4613      	mov	r3, r2
 80063fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b20      	cmp	r3, #32
 800640c:	f040 8081 	bne.w	8006512 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_UART_Receive+0x2e>
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e079      	b.n	8006514 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2222      	movs	r2, #34	@ 0x22
 800642a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006434:	f7fc ff58 	bl	80032e8 <HAL_GetTick>
 8006438:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	88fa      	ldrh	r2, [r7, #6]
 800643e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	88fa      	ldrh	r2, [r7, #6]
 8006444:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800644e:	d108      	bne.n	8006462 <HAL_UART_Receive+0x74>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	61bb      	str	r3, [r7, #24]
 8006460:	e003      	b.n	800646a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800646a:	e047      	b.n	80064fc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	2200      	movs	r2, #0
 8006474:	2120      	movs	r1, #32
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fc30 	bl	8006cdc <UART_WaitOnFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e042      	b.n	8006514 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10c      	bne.n	80064ae <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	3302      	adds	r3, #2
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	e01f      	b.n	80064ee <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b6:	d007      	beq.n	80064c8 <HAL_UART_Receive+0xda>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <HAL_UART_Receive+0xe8>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e008      	b.n	80064e8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	3301      	adds	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1b2      	bne.n	800646c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2220      	movs	r2, #32
 800650a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e000      	b.n	8006514 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006512:	2302      	movs	r3, #2
  }
}
 8006514:	4618      	mov	r0, r3
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b20      	cmp	r3, #32
 8006534:	d112      	bne.n	800655c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_UART_Receive_DMA+0x26>
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e00b      	b.n	800655e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800654c:	88fb      	ldrh	r3, [r7, #6]
 800654e:	461a      	mov	r2, r3
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fc1c 	bl	8006d90 <UART_Start_Receive_DMA>
 8006558:	4603      	mov	r3, r0
 800655a:	e000      	b.n	800655e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
  }
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b0ba      	sub	sp, #232	@ 0xe8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800658e:	2300      	movs	r3, #0
 8006590:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006594:	2300      	movs	r3, #0
 8006596:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80065a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10f      	bne.n	80065ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d009      	beq.n	80065ce <HAL_UART_IRQHandler+0x66>
 80065ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fd83 	bl	80070d2 <UART_Receive_IT>
      return;
 80065cc:	e25b      	b.n	8006a86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 80de 	beq.w	8006794 <HAL_UART_IRQHandler+0x22c>
 80065d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80d1 	beq.w	8006794 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <HAL_UART_IRQHandler+0xae>
 80065fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660e:	f043 0201 	orr.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <HAL_UART_IRQHandler+0xd2>
 8006622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006632:	f043 0202 	orr.w	r2, r3, #2
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00b      	beq.n	800665e <HAL_UART_IRQHandler+0xf6>
 8006646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006656:	f043 0204 	orr.w	r2, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d011      	beq.n	800668e <HAL_UART_IRQHandler+0x126>
 800666a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d105      	bne.n	8006682 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006686:	f043 0208 	orr.w	r2, r3, #8
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 81f2 	beq.w	8006a7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d008      	beq.n	80066b6 <HAL_UART_IRQHandler+0x14e>
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fd0e 	bl	80070d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c0:	2b40      	cmp	r3, #64	@ 0x40
 80066c2:	bf0c      	ite	eq
 80066c4:	2301      	moveq	r3, #1
 80066c6:	2300      	movne	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <HAL_UART_IRQHandler+0x17a>
 80066da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d04f      	beq.n	8006782 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fc16 	bl	8006f14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f2:	2b40      	cmp	r3, #64	@ 0x40
 80066f4:	d141      	bne.n	800677a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3314      	adds	r3, #20
 80066fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800670c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006714:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3314      	adds	r3, #20
 800671e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006722:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006726:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800672e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800673a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1d9      	bne.n	80066f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d013      	beq.n	8006772 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674e:	4a7e      	ldr	r2, [pc, #504]	@ (8006948 <HAL_UART_IRQHandler+0x3e0>)
 8006750:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006756:	4618      	mov	r0, r3
 8006758:	f7fd fd0a 	bl	8004170 <HAL_DMA_Abort_IT>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d016      	beq.n	8006790 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800676c:	4610      	mov	r0, r2
 800676e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006770:	e00e      	b.n	8006790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f99e 	bl	8006ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006778:	e00a      	b.n	8006790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f99a 	bl	8006ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006780:	e006      	b.n	8006790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f996 	bl	8006ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800678e:	e175      	b.n	8006a7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	bf00      	nop
    return;
 8006792:	e173      	b.n	8006a7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006798:	2b01      	cmp	r3, #1
 800679a:	f040 814f 	bne.w	8006a3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800679e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a2:	f003 0310 	and.w	r3, r3, #16
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 8148 	beq.w	8006a3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 8141 	beq.w	8006a3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067ba:	2300      	movs	r3, #0
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	60bb      	str	r3, [r7, #8]
 80067ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067da:	2b40      	cmp	r3, #64	@ 0x40
 80067dc:	f040 80b6 	bne.w	800694c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 8145 	beq.w	8006a80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067fe:	429a      	cmp	r2, r3
 8006800:	f080 813e 	bcs.w	8006a80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800680a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006816:	f000 8088 	beq.w	800692a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	330c      	adds	r3, #12
 8006820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006830:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006838:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	330c      	adds	r3, #12
 8006842:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006846:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800684a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006852:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800685e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1d9      	bne.n	800681a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3314      	adds	r3, #20
 800686c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3314      	adds	r3, #20
 8006886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800688a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800688e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006890:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006892:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800689c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e1      	bne.n	8006866 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3314      	adds	r3, #20
 80068a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3314      	adds	r3, #20
 80068c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e3      	bne.n	80068a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	330c      	adds	r3, #12
 80068ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068fa:	f023 0310 	bic.w	r3, r3, #16
 80068fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800690c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800690e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006912:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800691a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e3      	bne.n	80068e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006924:	4618      	mov	r0, r3
 8006926:	f7fd fbb3 	bl	8004090 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2202      	movs	r2, #2
 800692e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006938:	b29b      	uxth	r3, r3
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	b29b      	uxth	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f8c1 	bl	8006ac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006946:	e09b      	b.n	8006a80 <HAL_UART_IRQHandler+0x518>
 8006948:	08006fdb 	.word	0x08006fdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006954:	b29b      	uxth	r3, r3
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 808e 	beq.w	8006a84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8089 	beq.w	8006a84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006988:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	330c      	adds	r3, #12
 8006992:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006996:	647a      	str	r2, [r7, #68]	@ 0x44
 8006998:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800699c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e3      	bne.n	8006972 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3314      	adds	r3, #20
 80069b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	623b      	str	r3, [r7, #32]
   return(result);
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3314      	adds	r3, #20
 80069ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80069ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80069d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e3      	bne.n	80069aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f023 0310 	bic.w	r3, r3, #16
 8006a06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a14:	61fa      	str	r2, [r7, #28]
 8006a16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	69b9      	ldr	r1, [r7, #24]
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	617b      	str	r3, [r7, #20]
   return(result);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e3      	bne.n	80069f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f847 	bl	8006ac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a3a:	e023      	b.n	8006a84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d009      	beq.n	8006a5c <HAL_UART_IRQHandler+0x4f4>
 8006a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fad4 	bl	8007002 <UART_Transmit_IT>
    return;
 8006a5a:	e014      	b.n	8006a86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00e      	beq.n	8006a86 <HAL_UART_IRQHandler+0x51e>
 8006a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb14 	bl	80070a2 <UART_EndTransmit_IT>
    return;
 8006a7a:	e004      	b.n	8006a86 <HAL_UART_IRQHandler+0x51e>
    return;
 8006a7c:	bf00      	nop
 8006a7e:	e002      	b.n	8006a86 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a80:	bf00      	nop
 8006a82:	e000      	b.n	8006a86 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a84:	bf00      	nop
  }
}
 8006a86:	37e8      	adds	r7, #232	@ 0xe8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b09c      	sub	sp, #112	@ 0x70
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d172      	bne.n	8006be2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006afe:	2200      	movs	r2, #0
 8006b00:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b22:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b24:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e5      	bne.n	8006b02 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3314      	adds	r3, #20
 8006b54:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b56:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e5      	bne.n	8006b36 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3314      	adds	r3, #20
 8006b70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	623b      	str	r3, [r7, #32]
   return(result);
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b80:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e5      	bne.n	8006b6a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d119      	bne.n	8006be2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f023 0310 	bic.w	r3, r3, #16
 8006bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	330c      	adds	r3, #12
 8006bcc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006bce:	61fa      	str	r2, [r7, #28]
 8006bd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	69b9      	ldr	r1, [r7, #24]
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	617b      	str	r3, [r7, #20]
   return(result);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e5      	bne.n	8006bae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006be4:	2200      	movs	r2, #0
 8006be6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d106      	bne.n	8006bfe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bf2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006bf8:	f7ff ff66 	bl	8006ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bfc:	e002      	b.n	8006c04 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006bfe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c00:	f7fb fa44 	bl	800208c <HAL_UART_RxCpltCallback>
}
 8006c04:	bf00      	nop
 8006c06:	3770      	adds	r7, #112	@ 0x70
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d108      	bne.n	8006c3a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4619      	mov	r1, r3
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff ff48 	bl	8006ac8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c38:	e002      	b.n	8006c40 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff ff30 	bl	8006aa0 <HAL_UART_RxHalfCpltCallback>
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c58:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c64:	2b80      	cmp	r3, #128	@ 0x80
 8006c66:	bf0c      	ite	eq
 8006c68:	2301      	moveq	r3, #1
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b21      	cmp	r3, #33	@ 0x21
 8006c7a:	d108      	bne.n	8006c8e <UART_DMAError+0x46>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2200      	movs	r2, #0
 8006c86:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006c88:	68b8      	ldr	r0, [r7, #8]
 8006c8a:	f000 f91b 	bl	8006ec4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c98:	2b40      	cmp	r3, #64	@ 0x40
 8006c9a:	bf0c      	ite	eq
 8006c9c:	2301      	moveq	r3, #1
 8006c9e:	2300      	movne	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b22      	cmp	r3, #34	@ 0x22
 8006cae:	d108      	bne.n	8006cc2 <UART_DMAError+0x7a>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006cbc:	68b8      	ldr	r0, [r7, #8]
 8006cbe:	f000 f929 	bl	8006f14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc6:	f043 0210 	orr.w	r2, r3, #16
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cce:	68b8      	ldr	r0, [r7, #8]
 8006cd0:	f7ff fef0 	bl	8006ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cec:	e03b      	b.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf4:	d037      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf6:	f7fc faf7 	bl	80032e8 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	6a3a      	ldr	r2, [r7, #32]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d302      	bcc.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e03a      	b.n	8006d86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d023      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b80      	cmp	r3, #128	@ 0x80
 8006d22:	d020      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b40      	cmp	r3, #64	@ 0x40
 8006d28:	d01d      	beq.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d116      	bne.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d38:	2300      	movs	r3, #0
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f8e0 	bl	8006f14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2208      	movs	r2, #8
 8006d58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e00f      	b.n	8006d86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	bf0c      	ite	eq
 8006d76:	2301      	moveq	r3, #1
 8006d78:	2300      	movne	r3, #0
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d0b4      	beq.n	8006cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b098      	sub	sp, #96	@ 0x60
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	88fa      	ldrh	r2, [r7, #6]
 8006da8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2222      	movs	r2, #34	@ 0x22
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8006eb8 <UART_Start_Receive_DMA+0x128>)
 8006dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8006ebc <UART_Start_Receive_DMA+0x12c>)
 8006dc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dcc:	4a3c      	ldr	r2, [pc, #240]	@ (8006ec0 <UART_Start_Receive_DMA+0x130>)
 8006dce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006dd8:	f107 0308 	add.w	r3, r7, #8
 8006ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3304      	adds	r3, #4
 8006de8:	4619      	mov	r1, r3
 8006dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	f7fd f8f6 	bl	8003fe0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006df4:	2300      	movs	r3, #0
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d019      	beq.n	8006e46 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	330c      	adds	r3, #12
 8006e18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e32:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006e34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006e38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e5      	bne.n	8006e12 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3314      	adds	r3, #20
 8006e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3314      	adds	r3, #20
 8006e64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e66:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006e68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e5      	bne.n	8006e46 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3314      	adds	r3, #20
 8006e80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	617b      	str	r3, [r7, #20]
   return(result);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e90:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3314      	adds	r3, #20
 8006e98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6a39      	ldr	r1, [r7, #32]
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e5      	bne.n	8006e7a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3760      	adds	r7, #96	@ 0x60
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	08006ae1 	.word	0x08006ae1
 8006ebc:	08006c0d 	.word	0x08006c0d
 8006ec0:	08006c49 	.word	0x08006c49

08006ec4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b089      	sub	sp, #36	@ 0x24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	330c      	adds	r3, #12
 8006ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	61ba      	str	r2, [r7, #24]
 8006eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6979      	ldr	r1, [r7, #20]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006f08:	bf00      	nop
 8006f0a:	3724      	adds	r7, #36	@ 0x24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b095      	sub	sp, #84	@ 0x54
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	330c      	adds	r3, #12
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e5      	bne.n	8006f1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3314      	adds	r3, #20
 8006f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f023 0301 	bic.w	r3, r3, #1
 8006f66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3314      	adds	r3, #20
 8006f6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e5      	bne.n	8006f50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d119      	bne.n	8006fc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f023 0310 	bic.w	r3, r3, #16
 8006fa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	330c      	adds	r3, #12
 8006faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fac:	61ba      	str	r2, [r7, #24]
 8006fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6979      	ldr	r1, [r7, #20]
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e5      	bne.n	8006f8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fce:	bf00      	nop
 8006fd0:	3754      	adds	r7, #84	@ 0x54
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fd5d 	bl	8006ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ffa:	bf00      	nop
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007002:	b480      	push	{r7}
 8007004:	b085      	sub	sp, #20
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b21      	cmp	r3, #33	@ 0x21
 8007014:	d13e      	bne.n	8007094 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701e:	d114      	bne.n	800704a <UART_Transmit_IT+0x48>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d110      	bne.n	800704a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800703c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	1c9a      	adds	r2, r3, #2
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	621a      	str	r2, [r3, #32]
 8007048:	e008      	b.n	800705c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	1c59      	adds	r1, r3, #1
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6211      	str	r1, [r2, #32]
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29b      	uxth	r3, r3
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4619      	mov	r1, r3
 800706a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10f      	bne.n	8007090 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800707e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800708e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	e000      	b.n	8007096 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fce2 	bl	8006a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b08c      	sub	sp, #48	@ 0x30
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b22      	cmp	r3, #34	@ 0x22
 80070e4:	f040 80ae 	bne.w	8007244 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070f0:	d117      	bne.n	8007122 <UART_Receive_IT+0x50>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d113      	bne.n	8007122 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007102:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007110:	b29a      	uxth	r2, r3
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711a:	1c9a      	adds	r2, r3, #2
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007120:	e026      	b.n	8007170 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007126:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007134:	d007      	beq.n	8007146 <UART_Receive_IT+0x74>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <UART_Receive_IT+0x82>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	b2da      	uxtb	r2, r3
 800714e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	e008      	b.n	8007166 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007160:	b2da      	uxtb	r2, r3
 8007162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007164:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29b      	uxth	r3, r3
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	4619      	mov	r1, r3
 800717e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007180:	2b00      	cmp	r3, #0
 8007182:	d15d      	bne.n	8007240 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0220 	bic.w	r2, r2, #32
 8007192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0201 	bic.w	r2, r2, #1
 80071b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d135      	bne.n	8007236 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	613b      	str	r3, [r7, #16]
   return(result);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f023 0310 	bic.w	r3, r3, #16
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	330c      	adds	r3, #12
 80071ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f0:	623a      	str	r2, [r7, #32]
 80071f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f4:	69f9      	ldr	r1, [r7, #28]
 80071f6:	6a3a      	ldr	r2, [r7, #32]
 80071f8:	e841 2300 	strex	r3, r2, [r1]
 80071fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e5      	bne.n	80071d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0310 	and.w	r3, r3, #16
 800720e:	2b10      	cmp	r3, #16
 8007210:	d10a      	bne.n	8007228 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff fc4a 	bl	8006ac8 <HAL_UARTEx_RxEventCallback>
 8007234:	e002      	b.n	800723c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fa ff28 	bl	800208c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	e002      	b.n	8007246 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	e000      	b.n	8007246 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007244:	2302      	movs	r3, #2
  }
}
 8007246:	4618      	mov	r0, r3
 8007248:	3730      	adds	r7, #48	@ 0x30
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007254:	b0c0      	sub	sp, #256	@ 0x100
 8007256:	af00      	add	r7, sp, #0
 8007258:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726c:	68d9      	ldr	r1, [r3, #12]
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	ea40 0301 	orr.w	r3, r0, r1
 8007278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	431a      	orrs	r2, r3
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	431a      	orrs	r2, r3
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	4313      	orrs	r3, r2
 8007298:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072a8:	f021 010c 	bic.w	r1, r1, #12
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072b6:	430b      	orrs	r3, r1
 80072b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ca:	6999      	ldr	r1, [r3, #24]
 80072cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	ea40 0301 	orr.w	r3, r0, r1
 80072d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	4b8f      	ldr	r3, [pc, #572]	@ (800751c <UART_SetConfig+0x2cc>)
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d005      	beq.n	80072f0 <UART_SetConfig+0xa0>
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4b8d      	ldr	r3, [pc, #564]	@ (8007520 <UART_SetConfig+0x2d0>)
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d104      	bne.n	80072fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072f0:	f7fd fdc2 	bl	8004e78 <HAL_RCC_GetPCLK2Freq>
 80072f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072f8:	e003      	b.n	8007302 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072fa:	f7fd fda9 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 80072fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800730c:	f040 810c 	bne.w	8007528 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007314:	2200      	movs	r2, #0
 8007316:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800731a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800731e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007322:	4622      	mov	r2, r4
 8007324:	462b      	mov	r3, r5
 8007326:	1891      	adds	r1, r2, r2
 8007328:	65b9      	str	r1, [r7, #88]	@ 0x58
 800732a:	415b      	adcs	r3, r3
 800732c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800732e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007332:	4621      	mov	r1, r4
 8007334:	eb12 0801 	adds.w	r8, r2, r1
 8007338:	4629      	mov	r1, r5
 800733a:	eb43 0901 	adc.w	r9, r3, r1
 800733e:	f04f 0200 	mov.w	r2, #0
 8007342:	f04f 0300 	mov.w	r3, #0
 8007346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800734a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800734e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007352:	4690      	mov	r8, r2
 8007354:	4699      	mov	r9, r3
 8007356:	4623      	mov	r3, r4
 8007358:	eb18 0303 	adds.w	r3, r8, r3
 800735c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007360:	462b      	mov	r3, r5
 8007362:	eb49 0303 	adc.w	r3, r9, r3
 8007366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800736a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007376:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800737a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800737e:	460b      	mov	r3, r1
 8007380:	18db      	adds	r3, r3, r3
 8007382:	653b      	str	r3, [r7, #80]	@ 0x50
 8007384:	4613      	mov	r3, r2
 8007386:	eb42 0303 	adc.w	r3, r2, r3
 800738a:	657b      	str	r3, [r7, #84]	@ 0x54
 800738c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007390:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007394:	f7f9 fc98 	bl	8000cc8 <__aeabi_uldivmod>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4b61      	ldr	r3, [pc, #388]	@ (8007524 <UART_SetConfig+0x2d4>)
 800739e:	fba3 2302 	umull	r2, r3, r3, r2
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	011c      	lsls	r4, r3, #4
 80073a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073b8:	4642      	mov	r2, r8
 80073ba:	464b      	mov	r3, r9
 80073bc:	1891      	adds	r1, r2, r2
 80073be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073c0:	415b      	adcs	r3, r3
 80073c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073c8:	4641      	mov	r1, r8
 80073ca:	eb12 0a01 	adds.w	sl, r2, r1
 80073ce:	4649      	mov	r1, r9
 80073d0:	eb43 0b01 	adc.w	fp, r3, r1
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073e8:	4692      	mov	sl, r2
 80073ea:	469b      	mov	fp, r3
 80073ec:	4643      	mov	r3, r8
 80073ee:	eb1a 0303 	adds.w	r3, sl, r3
 80073f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073f6:	464b      	mov	r3, r9
 80073f8:	eb4b 0303 	adc.w	r3, fp, r3
 80073fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800740c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007414:	460b      	mov	r3, r1
 8007416:	18db      	adds	r3, r3, r3
 8007418:	643b      	str	r3, [r7, #64]	@ 0x40
 800741a:	4613      	mov	r3, r2
 800741c:	eb42 0303 	adc.w	r3, r2, r3
 8007420:	647b      	str	r3, [r7, #68]	@ 0x44
 8007422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800742a:	f7f9 fc4d 	bl	8000cc8 <__aeabi_uldivmod>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4611      	mov	r1, r2
 8007434:	4b3b      	ldr	r3, [pc, #236]	@ (8007524 <UART_SetConfig+0x2d4>)
 8007436:	fba3 2301 	umull	r2, r3, r3, r1
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	2264      	movs	r2, #100	@ 0x64
 800743e:	fb02 f303 	mul.w	r3, r2, r3
 8007442:	1acb      	subs	r3, r1, r3
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800744a:	4b36      	ldr	r3, [pc, #216]	@ (8007524 <UART_SetConfig+0x2d4>)
 800744c:	fba3 2302 	umull	r2, r3, r3, r2
 8007450:	095b      	lsrs	r3, r3, #5
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007458:	441c      	add	r4, r3
 800745a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800745e:	2200      	movs	r2, #0
 8007460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007464:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007468:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800746c:	4642      	mov	r2, r8
 800746e:	464b      	mov	r3, r9
 8007470:	1891      	adds	r1, r2, r2
 8007472:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007474:	415b      	adcs	r3, r3
 8007476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800747c:	4641      	mov	r1, r8
 800747e:	1851      	adds	r1, r2, r1
 8007480:	6339      	str	r1, [r7, #48]	@ 0x30
 8007482:	4649      	mov	r1, r9
 8007484:	414b      	adcs	r3, r1
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007494:	4659      	mov	r1, fp
 8007496:	00cb      	lsls	r3, r1, #3
 8007498:	4651      	mov	r1, sl
 800749a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800749e:	4651      	mov	r1, sl
 80074a0:	00ca      	lsls	r2, r1, #3
 80074a2:	4610      	mov	r0, r2
 80074a4:	4619      	mov	r1, r3
 80074a6:	4603      	mov	r3, r0
 80074a8:	4642      	mov	r2, r8
 80074aa:	189b      	adds	r3, r3, r2
 80074ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074b0:	464b      	mov	r3, r9
 80074b2:	460a      	mov	r2, r1
 80074b4:	eb42 0303 	adc.w	r3, r2, r3
 80074b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074d0:	460b      	mov	r3, r1
 80074d2:	18db      	adds	r3, r3, r3
 80074d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074d6:	4613      	mov	r3, r2
 80074d8:	eb42 0303 	adc.w	r3, r2, r3
 80074dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074e6:	f7f9 fbef 	bl	8000cc8 <__aeabi_uldivmod>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <UART_SetConfig+0x2d4>)
 80074f0:	fba3 1302 	umull	r1, r3, r3, r2
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	2164      	movs	r1, #100	@ 0x64
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	3332      	adds	r3, #50	@ 0x32
 8007502:	4a08      	ldr	r2, [pc, #32]	@ (8007524 <UART_SetConfig+0x2d4>)
 8007504:	fba2 2303 	umull	r2, r3, r2, r3
 8007508:	095b      	lsrs	r3, r3, #5
 800750a:	f003 0207 	and.w	r2, r3, #7
 800750e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4422      	add	r2, r4
 8007516:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007518:	e106      	b.n	8007728 <UART_SetConfig+0x4d8>
 800751a:	bf00      	nop
 800751c:	40011000 	.word	0x40011000
 8007520:	40011400 	.word	0x40011400
 8007524:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800752c:	2200      	movs	r2, #0
 800752e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007532:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007536:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800753a:	4642      	mov	r2, r8
 800753c:	464b      	mov	r3, r9
 800753e:	1891      	adds	r1, r2, r2
 8007540:	6239      	str	r1, [r7, #32]
 8007542:	415b      	adcs	r3, r3
 8007544:	627b      	str	r3, [r7, #36]	@ 0x24
 8007546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800754a:	4641      	mov	r1, r8
 800754c:	1854      	adds	r4, r2, r1
 800754e:	4649      	mov	r1, r9
 8007550:	eb43 0501 	adc.w	r5, r3, r1
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	00eb      	lsls	r3, r5, #3
 800755e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007562:	00e2      	lsls	r2, r4, #3
 8007564:	4614      	mov	r4, r2
 8007566:	461d      	mov	r5, r3
 8007568:	4643      	mov	r3, r8
 800756a:	18e3      	adds	r3, r4, r3
 800756c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007570:	464b      	mov	r3, r9
 8007572:	eb45 0303 	adc.w	r3, r5, r3
 8007576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800757a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007586:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007596:	4629      	mov	r1, r5
 8007598:	008b      	lsls	r3, r1, #2
 800759a:	4621      	mov	r1, r4
 800759c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a0:	4621      	mov	r1, r4
 80075a2:	008a      	lsls	r2, r1, #2
 80075a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075a8:	f7f9 fb8e 	bl	8000cc8 <__aeabi_uldivmod>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4b60      	ldr	r3, [pc, #384]	@ (8007734 <UART_SetConfig+0x4e4>)
 80075b2:	fba3 2302 	umull	r2, r3, r3, r2
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	011c      	lsls	r4, r3, #4
 80075ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075be:	2200      	movs	r2, #0
 80075c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075cc:	4642      	mov	r2, r8
 80075ce:	464b      	mov	r3, r9
 80075d0:	1891      	adds	r1, r2, r2
 80075d2:	61b9      	str	r1, [r7, #24]
 80075d4:	415b      	adcs	r3, r3
 80075d6:	61fb      	str	r3, [r7, #28]
 80075d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075dc:	4641      	mov	r1, r8
 80075de:	1851      	adds	r1, r2, r1
 80075e0:	6139      	str	r1, [r7, #16]
 80075e2:	4649      	mov	r1, r9
 80075e4:	414b      	adcs	r3, r1
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075f4:	4659      	mov	r1, fp
 80075f6:	00cb      	lsls	r3, r1, #3
 80075f8:	4651      	mov	r1, sl
 80075fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075fe:	4651      	mov	r1, sl
 8007600:	00ca      	lsls	r2, r1, #3
 8007602:	4610      	mov	r0, r2
 8007604:	4619      	mov	r1, r3
 8007606:	4603      	mov	r3, r0
 8007608:	4642      	mov	r2, r8
 800760a:	189b      	adds	r3, r3, r2
 800760c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007610:	464b      	mov	r3, r9
 8007612:	460a      	mov	r2, r1
 8007614:	eb42 0303 	adc.w	r3, r2, r3
 8007618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007626:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007628:	f04f 0200 	mov.w	r2, #0
 800762c:	f04f 0300 	mov.w	r3, #0
 8007630:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007634:	4649      	mov	r1, r9
 8007636:	008b      	lsls	r3, r1, #2
 8007638:	4641      	mov	r1, r8
 800763a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800763e:	4641      	mov	r1, r8
 8007640:	008a      	lsls	r2, r1, #2
 8007642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007646:	f7f9 fb3f 	bl	8000cc8 <__aeabi_uldivmod>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4611      	mov	r1, r2
 8007650:	4b38      	ldr	r3, [pc, #224]	@ (8007734 <UART_SetConfig+0x4e4>)
 8007652:	fba3 2301 	umull	r2, r3, r3, r1
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	2264      	movs	r2, #100	@ 0x64
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	1acb      	subs	r3, r1, r3
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	3332      	adds	r3, #50	@ 0x32
 8007664:	4a33      	ldr	r2, [pc, #204]	@ (8007734 <UART_SetConfig+0x4e4>)
 8007666:	fba2 2303 	umull	r2, r3, r2, r3
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007670:	441c      	add	r4, r3
 8007672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007676:	2200      	movs	r2, #0
 8007678:	673b      	str	r3, [r7, #112]	@ 0x70
 800767a:	677a      	str	r2, [r7, #116]	@ 0x74
 800767c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007680:	4642      	mov	r2, r8
 8007682:	464b      	mov	r3, r9
 8007684:	1891      	adds	r1, r2, r2
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	415b      	adcs	r3, r3
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007690:	4641      	mov	r1, r8
 8007692:	1851      	adds	r1, r2, r1
 8007694:	6039      	str	r1, [r7, #0]
 8007696:	4649      	mov	r1, r9
 8007698:	414b      	adcs	r3, r1
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076a8:	4659      	mov	r1, fp
 80076aa:	00cb      	lsls	r3, r1, #3
 80076ac:	4651      	mov	r1, sl
 80076ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076b2:	4651      	mov	r1, sl
 80076b4:	00ca      	lsls	r2, r1, #3
 80076b6:	4610      	mov	r0, r2
 80076b8:	4619      	mov	r1, r3
 80076ba:	4603      	mov	r3, r0
 80076bc:	4642      	mov	r2, r8
 80076be:	189b      	adds	r3, r3, r2
 80076c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076c2:	464b      	mov	r3, r9
 80076c4:	460a      	mov	r2, r1
 80076c6:	eb42 0303 	adc.w	r3, r2, r3
 80076ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80076d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80076d8:	f04f 0200 	mov.w	r2, #0
 80076dc:	f04f 0300 	mov.w	r3, #0
 80076e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076e4:	4649      	mov	r1, r9
 80076e6:	008b      	lsls	r3, r1, #2
 80076e8:	4641      	mov	r1, r8
 80076ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ee:	4641      	mov	r1, r8
 80076f0:	008a      	lsls	r2, r1, #2
 80076f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076f6:	f7f9 fae7 	bl	8000cc8 <__aeabi_uldivmod>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007734 <UART_SetConfig+0x4e4>)
 8007700:	fba3 1302 	umull	r1, r3, r3, r2
 8007704:	095b      	lsrs	r3, r3, #5
 8007706:	2164      	movs	r1, #100	@ 0x64
 8007708:	fb01 f303 	mul.w	r3, r1, r3
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	3332      	adds	r3, #50	@ 0x32
 8007712:	4a08      	ldr	r2, [pc, #32]	@ (8007734 <UART_SetConfig+0x4e4>)
 8007714:	fba2 2303 	umull	r2, r3, r2, r3
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	f003 020f 	and.w	r2, r3, #15
 800771e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4422      	add	r2, r4
 8007726:	609a      	str	r2, [r3, #8]
}
 8007728:	bf00      	nop
 800772a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800772e:	46bd      	mov	sp, r7
 8007730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007734:	51eb851f 	.word	0x51eb851f

08007738 <malloc>:
 8007738:	4b02      	ldr	r3, [pc, #8]	@ (8007744 <malloc+0xc>)
 800773a:	4601      	mov	r1, r0
 800773c:	6818      	ldr	r0, [r3, #0]
 800773e:	f000 b825 	b.w	800778c <_malloc_r>
 8007742:	bf00      	nop
 8007744:	20000188 	.word	0x20000188

08007748 <sbrk_aligned>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	4e0f      	ldr	r6, [pc, #60]	@ (8007788 <sbrk_aligned+0x40>)
 800774c:	460c      	mov	r4, r1
 800774e:	6831      	ldr	r1, [r6, #0]
 8007750:	4605      	mov	r5, r0
 8007752:	b911      	cbnz	r1, 800775a <sbrk_aligned+0x12>
 8007754:	f001 fe92 	bl	800947c <_sbrk_r>
 8007758:	6030      	str	r0, [r6, #0]
 800775a:	4621      	mov	r1, r4
 800775c:	4628      	mov	r0, r5
 800775e:	f001 fe8d 	bl	800947c <_sbrk_r>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d103      	bne.n	800776e <sbrk_aligned+0x26>
 8007766:	f04f 34ff 	mov.w	r4, #4294967295
 800776a:	4620      	mov	r0, r4
 800776c:	bd70      	pop	{r4, r5, r6, pc}
 800776e:	1cc4      	adds	r4, r0, #3
 8007770:	f024 0403 	bic.w	r4, r4, #3
 8007774:	42a0      	cmp	r0, r4
 8007776:	d0f8      	beq.n	800776a <sbrk_aligned+0x22>
 8007778:	1a21      	subs	r1, r4, r0
 800777a:	4628      	mov	r0, r5
 800777c:	f001 fe7e 	bl	800947c <_sbrk_r>
 8007780:	3001      	adds	r0, #1
 8007782:	d1f2      	bne.n	800776a <sbrk_aligned+0x22>
 8007784:	e7ef      	b.n	8007766 <sbrk_aligned+0x1e>
 8007786:	bf00      	nop
 8007788:	20000834 	.word	0x20000834

0800778c <_malloc_r>:
 800778c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007790:	1ccd      	adds	r5, r1, #3
 8007792:	f025 0503 	bic.w	r5, r5, #3
 8007796:	3508      	adds	r5, #8
 8007798:	2d0c      	cmp	r5, #12
 800779a:	bf38      	it	cc
 800779c:	250c      	movcc	r5, #12
 800779e:	2d00      	cmp	r5, #0
 80077a0:	4606      	mov	r6, r0
 80077a2:	db01      	blt.n	80077a8 <_malloc_r+0x1c>
 80077a4:	42a9      	cmp	r1, r5
 80077a6:	d904      	bls.n	80077b2 <_malloc_r+0x26>
 80077a8:	230c      	movs	r3, #12
 80077aa:	6033      	str	r3, [r6, #0]
 80077ac:	2000      	movs	r0, #0
 80077ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007888 <_malloc_r+0xfc>
 80077b6:	f000 f869 	bl	800788c <__malloc_lock>
 80077ba:	f8d8 3000 	ldr.w	r3, [r8]
 80077be:	461c      	mov	r4, r3
 80077c0:	bb44      	cbnz	r4, 8007814 <_malloc_r+0x88>
 80077c2:	4629      	mov	r1, r5
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff ffbf 	bl	8007748 <sbrk_aligned>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	4604      	mov	r4, r0
 80077ce:	d158      	bne.n	8007882 <_malloc_r+0xf6>
 80077d0:	f8d8 4000 	ldr.w	r4, [r8]
 80077d4:	4627      	mov	r7, r4
 80077d6:	2f00      	cmp	r7, #0
 80077d8:	d143      	bne.n	8007862 <_malloc_r+0xd6>
 80077da:	2c00      	cmp	r4, #0
 80077dc:	d04b      	beq.n	8007876 <_malloc_r+0xea>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	4639      	mov	r1, r7
 80077e2:	4630      	mov	r0, r6
 80077e4:	eb04 0903 	add.w	r9, r4, r3
 80077e8:	f001 fe48 	bl	800947c <_sbrk_r>
 80077ec:	4581      	cmp	r9, r0
 80077ee:	d142      	bne.n	8007876 <_malloc_r+0xea>
 80077f0:	6821      	ldr	r1, [r4, #0]
 80077f2:	1a6d      	subs	r5, r5, r1
 80077f4:	4629      	mov	r1, r5
 80077f6:	4630      	mov	r0, r6
 80077f8:	f7ff ffa6 	bl	8007748 <sbrk_aligned>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d03a      	beq.n	8007876 <_malloc_r+0xea>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	442b      	add	r3, r5
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	f8d8 3000 	ldr.w	r3, [r8]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	bb62      	cbnz	r2, 8007868 <_malloc_r+0xdc>
 800780e:	f8c8 7000 	str.w	r7, [r8]
 8007812:	e00f      	b.n	8007834 <_malloc_r+0xa8>
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	1b52      	subs	r2, r2, r5
 8007818:	d420      	bmi.n	800785c <_malloc_r+0xd0>
 800781a:	2a0b      	cmp	r2, #11
 800781c:	d917      	bls.n	800784e <_malloc_r+0xc2>
 800781e:	1961      	adds	r1, r4, r5
 8007820:	42a3      	cmp	r3, r4
 8007822:	6025      	str	r5, [r4, #0]
 8007824:	bf18      	it	ne
 8007826:	6059      	strne	r1, [r3, #4]
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	bf08      	it	eq
 800782c:	f8c8 1000 	streq.w	r1, [r8]
 8007830:	5162      	str	r2, [r4, r5]
 8007832:	604b      	str	r3, [r1, #4]
 8007834:	4630      	mov	r0, r6
 8007836:	f000 f82f 	bl	8007898 <__malloc_unlock>
 800783a:	f104 000b 	add.w	r0, r4, #11
 800783e:	1d23      	adds	r3, r4, #4
 8007840:	f020 0007 	bic.w	r0, r0, #7
 8007844:	1ac2      	subs	r2, r0, r3
 8007846:	bf1c      	itt	ne
 8007848:	1a1b      	subne	r3, r3, r0
 800784a:	50a3      	strne	r3, [r4, r2]
 800784c:	e7af      	b.n	80077ae <_malloc_r+0x22>
 800784e:	6862      	ldr	r2, [r4, #4]
 8007850:	42a3      	cmp	r3, r4
 8007852:	bf0c      	ite	eq
 8007854:	f8c8 2000 	streq.w	r2, [r8]
 8007858:	605a      	strne	r2, [r3, #4]
 800785a:	e7eb      	b.n	8007834 <_malloc_r+0xa8>
 800785c:	4623      	mov	r3, r4
 800785e:	6864      	ldr	r4, [r4, #4]
 8007860:	e7ae      	b.n	80077c0 <_malloc_r+0x34>
 8007862:	463c      	mov	r4, r7
 8007864:	687f      	ldr	r7, [r7, #4]
 8007866:	e7b6      	b.n	80077d6 <_malloc_r+0x4a>
 8007868:	461a      	mov	r2, r3
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	42a3      	cmp	r3, r4
 800786e:	d1fb      	bne.n	8007868 <_malloc_r+0xdc>
 8007870:	2300      	movs	r3, #0
 8007872:	6053      	str	r3, [r2, #4]
 8007874:	e7de      	b.n	8007834 <_malloc_r+0xa8>
 8007876:	230c      	movs	r3, #12
 8007878:	6033      	str	r3, [r6, #0]
 800787a:	4630      	mov	r0, r6
 800787c:	f000 f80c 	bl	8007898 <__malloc_unlock>
 8007880:	e794      	b.n	80077ac <_malloc_r+0x20>
 8007882:	6005      	str	r5, [r0, #0]
 8007884:	e7d6      	b.n	8007834 <_malloc_r+0xa8>
 8007886:	bf00      	nop
 8007888:	20000838 	.word	0x20000838

0800788c <__malloc_lock>:
 800788c:	4801      	ldr	r0, [pc, #4]	@ (8007894 <__malloc_lock+0x8>)
 800788e:	f001 be42 	b.w	8009516 <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	2000097c 	.word	0x2000097c

08007898 <__malloc_unlock>:
 8007898:	4801      	ldr	r0, [pc, #4]	@ (80078a0 <__malloc_unlock+0x8>)
 800789a:	f001 be3d 	b.w	8009518 <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	2000097c 	.word	0x2000097c

080078a4 <sulp>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4604      	mov	r4, r0
 80078a8:	460d      	mov	r5, r1
 80078aa:	ec45 4b10 	vmov	d0, r4, r5
 80078ae:	4616      	mov	r6, r2
 80078b0:	f003 fba8 	bl	800b004 <__ulp>
 80078b4:	ec51 0b10 	vmov	r0, r1, d0
 80078b8:	b17e      	cbz	r6, 80078da <sulp+0x36>
 80078ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	dd09      	ble.n	80078da <sulp+0x36>
 80078c6:	051b      	lsls	r3, r3, #20
 80078c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80078cc:	2400      	movs	r4, #0
 80078ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80078d2:	4622      	mov	r2, r4
 80078d4:	462b      	mov	r3, r5
 80078d6:	f7f8 feaf 	bl	8000638 <__aeabi_dmul>
 80078da:	ec41 0b10 	vmov	d0, r0, r1
 80078de:	bd70      	pop	{r4, r5, r6, pc}

080078e0 <_strtod_l>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	b09f      	sub	sp, #124	@ 0x7c
 80078e6:	460c      	mov	r4, r1
 80078e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80078ea:	2200      	movs	r2, #0
 80078ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80078ee:	9005      	str	r0, [sp, #20]
 80078f0:	f04f 0a00 	mov.w	sl, #0
 80078f4:	f04f 0b00 	mov.w	fp, #0
 80078f8:	460a      	mov	r2, r1
 80078fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80078fc:	7811      	ldrb	r1, [r2, #0]
 80078fe:	292b      	cmp	r1, #43	@ 0x2b
 8007900:	d04a      	beq.n	8007998 <_strtod_l+0xb8>
 8007902:	d838      	bhi.n	8007976 <_strtod_l+0x96>
 8007904:	290d      	cmp	r1, #13
 8007906:	d832      	bhi.n	800796e <_strtod_l+0x8e>
 8007908:	2908      	cmp	r1, #8
 800790a:	d832      	bhi.n	8007972 <_strtod_l+0x92>
 800790c:	2900      	cmp	r1, #0
 800790e:	d03b      	beq.n	8007988 <_strtod_l+0xa8>
 8007910:	2200      	movs	r2, #0
 8007912:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007914:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007916:	782a      	ldrb	r2, [r5, #0]
 8007918:	2a30      	cmp	r2, #48	@ 0x30
 800791a:	f040 80b3 	bne.w	8007a84 <_strtod_l+0x1a4>
 800791e:	786a      	ldrb	r2, [r5, #1]
 8007920:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007924:	2a58      	cmp	r2, #88	@ 0x58
 8007926:	d16e      	bne.n	8007a06 <_strtod_l+0x126>
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	4a8e      	ldr	r2, [pc, #568]	@ (8007b6c <_strtod_l+0x28c>)
 8007934:	9805      	ldr	r0, [sp, #20]
 8007936:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007938:	a919      	add	r1, sp, #100	@ 0x64
 800793a:	f002 fd0b 	bl	800a354 <__gethex>
 800793e:	f010 060f 	ands.w	r6, r0, #15
 8007942:	4604      	mov	r4, r0
 8007944:	d005      	beq.n	8007952 <_strtod_l+0x72>
 8007946:	2e06      	cmp	r6, #6
 8007948:	d128      	bne.n	800799c <_strtod_l+0xbc>
 800794a:	3501      	adds	r5, #1
 800794c:	2300      	movs	r3, #0
 800794e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007952:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 858e 	bne.w	8008476 <_strtod_l+0xb96>
 800795a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800795c:	b1cb      	cbz	r3, 8007992 <_strtod_l+0xb2>
 800795e:	4652      	mov	r2, sl
 8007960:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007964:	ec43 2b10 	vmov	d0, r2, r3
 8007968:	b01f      	add	sp, #124	@ 0x7c
 800796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796e:	2920      	cmp	r1, #32
 8007970:	d1ce      	bne.n	8007910 <_strtod_l+0x30>
 8007972:	3201      	adds	r2, #1
 8007974:	e7c1      	b.n	80078fa <_strtod_l+0x1a>
 8007976:	292d      	cmp	r1, #45	@ 0x2d
 8007978:	d1ca      	bne.n	8007910 <_strtod_l+0x30>
 800797a:	2101      	movs	r1, #1
 800797c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800797e:	1c51      	adds	r1, r2, #1
 8007980:	9119      	str	r1, [sp, #100]	@ 0x64
 8007982:	7852      	ldrb	r2, [r2, #1]
 8007984:	2a00      	cmp	r2, #0
 8007986:	d1c5      	bne.n	8007914 <_strtod_l+0x34>
 8007988:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800798a:	9419      	str	r4, [sp, #100]	@ 0x64
 800798c:	2b00      	cmp	r3, #0
 800798e:	f040 8570 	bne.w	8008472 <_strtod_l+0xb92>
 8007992:	4652      	mov	r2, sl
 8007994:	465b      	mov	r3, fp
 8007996:	e7e5      	b.n	8007964 <_strtod_l+0x84>
 8007998:	2100      	movs	r1, #0
 800799a:	e7ef      	b.n	800797c <_strtod_l+0x9c>
 800799c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800799e:	b13a      	cbz	r2, 80079b0 <_strtod_l+0xd0>
 80079a0:	2135      	movs	r1, #53	@ 0x35
 80079a2:	a81c      	add	r0, sp, #112	@ 0x70
 80079a4:	f003 fc28 	bl	800b1f8 <__copybits>
 80079a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079aa:	9805      	ldr	r0, [sp, #20]
 80079ac:	f002 fff6 	bl	800a99c <_Bfree>
 80079b0:	3e01      	subs	r6, #1
 80079b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80079b4:	2e04      	cmp	r6, #4
 80079b6:	d806      	bhi.n	80079c6 <_strtod_l+0xe6>
 80079b8:	e8df f006 	tbb	[pc, r6]
 80079bc:	201d0314 	.word	0x201d0314
 80079c0:	14          	.byte	0x14
 80079c1:	00          	.byte	0x00
 80079c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80079c6:	05e1      	lsls	r1, r4, #23
 80079c8:	bf48      	it	mi
 80079ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80079ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079d2:	0d1b      	lsrs	r3, r3, #20
 80079d4:	051b      	lsls	r3, r3, #20
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1bb      	bne.n	8007952 <_strtod_l+0x72>
 80079da:	f001 fd71 	bl	80094c0 <__errno>
 80079de:	2322      	movs	r3, #34	@ 0x22
 80079e0:	6003      	str	r3, [r0, #0]
 80079e2:	e7b6      	b.n	8007952 <_strtod_l+0x72>
 80079e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80079e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80079ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80079f4:	e7e7      	b.n	80079c6 <_strtod_l+0xe6>
 80079f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007b74 <_strtod_l+0x294>
 80079fa:	e7e4      	b.n	80079c6 <_strtod_l+0xe6>
 80079fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007a00:	f04f 3aff 	mov.w	sl, #4294967295
 8007a04:	e7df      	b.n	80079c6 <_strtod_l+0xe6>
 8007a06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b30      	cmp	r3, #48	@ 0x30
 8007a10:	d0f9      	beq.n	8007a06 <_strtod_l+0x126>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d09d      	beq.n	8007952 <_strtod_l+0x72>
 8007a16:	2301      	movs	r3, #1
 8007a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a1e:	2300      	movs	r3, #0
 8007a20:	9308      	str	r3, [sp, #32]
 8007a22:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a24:	461f      	mov	r7, r3
 8007a26:	220a      	movs	r2, #10
 8007a28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a2a:	7805      	ldrb	r5, [r0, #0]
 8007a2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007a30:	b2d9      	uxtb	r1, r3
 8007a32:	2909      	cmp	r1, #9
 8007a34:	d928      	bls.n	8007a88 <_strtod_l+0x1a8>
 8007a36:	494e      	ldr	r1, [pc, #312]	@ (8007b70 <_strtod_l+0x290>)
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f001 fcd4 	bl	80093e6 <strncmp>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d032      	beq.n	8007aa8 <_strtod_l+0x1c8>
 8007a42:	2000      	movs	r0, #0
 8007a44:	462a      	mov	r2, r5
 8007a46:	4681      	mov	r9, r0
 8007a48:	463d      	mov	r5, r7
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2a65      	cmp	r2, #101	@ 0x65
 8007a4e:	d001      	beq.n	8007a54 <_strtod_l+0x174>
 8007a50:	2a45      	cmp	r2, #69	@ 0x45
 8007a52:	d114      	bne.n	8007a7e <_strtod_l+0x19e>
 8007a54:	b91d      	cbnz	r5, 8007a5e <_strtod_l+0x17e>
 8007a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a58:	4302      	orrs	r2, r0
 8007a5a:	d095      	beq.n	8007988 <_strtod_l+0xa8>
 8007a5c:	2500      	movs	r5, #0
 8007a5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007a60:	1c62      	adds	r2, r4, #1
 8007a62:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a64:	7862      	ldrb	r2, [r4, #1]
 8007a66:	2a2b      	cmp	r2, #43	@ 0x2b
 8007a68:	d077      	beq.n	8007b5a <_strtod_l+0x27a>
 8007a6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a6c:	d07b      	beq.n	8007b66 <_strtod_l+0x286>
 8007a6e:	f04f 0c00 	mov.w	ip, #0
 8007a72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007a76:	2909      	cmp	r1, #9
 8007a78:	f240 8082 	bls.w	8007b80 <_strtod_l+0x2a0>
 8007a7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8007a7e:	f04f 0800 	mov.w	r8, #0
 8007a82:	e0a2      	b.n	8007bca <_strtod_l+0x2ea>
 8007a84:	2300      	movs	r3, #0
 8007a86:	e7c7      	b.n	8007a18 <_strtod_l+0x138>
 8007a88:	2f08      	cmp	r7, #8
 8007a8a:	bfd5      	itete	le
 8007a8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007a8e:	9908      	ldrgt	r1, [sp, #32]
 8007a90:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007a98:	f100 0001 	add.w	r0, r0, #1
 8007a9c:	bfd4      	ite	le
 8007a9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007aa0:	9308      	strgt	r3, [sp, #32]
 8007aa2:	3701      	adds	r7, #1
 8007aa4:	9019      	str	r0, [sp, #100]	@ 0x64
 8007aa6:	e7bf      	b.n	8007a28 <_strtod_l+0x148>
 8007aa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	9219      	str	r2, [sp, #100]	@ 0x64
 8007aae:	785a      	ldrb	r2, [r3, #1]
 8007ab0:	b37f      	cbz	r7, 8007b12 <_strtod_l+0x232>
 8007ab2:	4681      	mov	r9, r0
 8007ab4:	463d      	mov	r5, r7
 8007ab6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007aba:	2b09      	cmp	r3, #9
 8007abc:	d912      	bls.n	8007ae4 <_strtod_l+0x204>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e7c4      	b.n	8007a4c <_strtod_l+0x16c>
 8007ac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ac8:	785a      	ldrb	r2, [r3, #1]
 8007aca:	3001      	adds	r0, #1
 8007acc:	2a30      	cmp	r2, #48	@ 0x30
 8007ace:	d0f8      	beq.n	8007ac2 <_strtod_l+0x1e2>
 8007ad0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	f200 84d3 	bhi.w	8008480 <_strtod_l+0xba0>
 8007ada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007adc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ade:	4681      	mov	r9, r0
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	3a30      	subs	r2, #48	@ 0x30
 8007ae6:	f100 0301 	add.w	r3, r0, #1
 8007aea:	d02a      	beq.n	8007b42 <_strtod_l+0x262>
 8007aec:	4499      	add	r9, r3
 8007aee:	eb00 0c05 	add.w	ip, r0, r5
 8007af2:	462b      	mov	r3, r5
 8007af4:	210a      	movs	r1, #10
 8007af6:	4563      	cmp	r3, ip
 8007af8:	d10d      	bne.n	8007b16 <_strtod_l+0x236>
 8007afa:	1c69      	adds	r1, r5, #1
 8007afc:	4401      	add	r1, r0
 8007afe:	4428      	add	r0, r5
 8007b00:	2808      	cmp	r0, #8
 8007b02:	dc16      	bgt.n	8007b32 <_strtod_l+0x252>
 8007b04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b06:	230a      	movs	r3, #10
 8007b08:	fb03 2300 	mla	r3, r3, r0, r2
 8007b0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e018      	b.n	8007b44 <_strtod_l+0x264>
 8007b12:	4638      	mov	r0, r7
 8007b14:	e7da      	b.n	8007acc <_strtod_l+0x1ec>
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	f103 0301 	add.w	r3, r3, #1
 8007b1c:	dc03      	bgt.n	8007b26 <_strtod_l+0x246>
 8007b1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007b20:	434e      	muls	r6, r1
 8007b22:	960a      	str	r6, [sp, #40]	@ 0x28
 8007b24:	e7e7      	b.n	8007af6 <_strtod_l+0x216>
 8007b26:	2b10      	cmp	r3, #16
 8007b28:	bfde      	ittt	le
 8007b2a:	9e08      	ldrle	r6, [sp, #32]
 8007b2c:	434e      	mulle	r6, r1
 8007b2e:	9608      	strle	r6, [sp, #32]
 8007b30:	e7e1      	b.n	8007af6 <_strtod_l+0x216>
 8007b32:	280f      	cmp	r0, #15
 8007b34:	dceb      	bgt.n	8007b0e <_strtod_l+0x22e>
 8007b36:	9808      	ldr	r0, [sp, #32]
 8007b38:	230a      	movs	r3, #10
 8007b3a:	fb03 2300 	mla	r3, r3, r0, r2
 8007b3e:	9308      	str	r3, [sp, #32]
 8007b40:	e7e5      	b.n	8007b0e <_strtod_l+0x22e>
 8007b42:	4629      	mov	r1, r5
 8007b44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b46:	1c50      	adds	r0, r2, #1
 8007b48:	9019      	str	r0, [sp, #100]	@ 0x64
 8007b4a:	7852      	ldrb	r2, [r2, #1]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	460d      	mov	r5, r1
 8007b50:	e7b1      	b.n	8007ab6 <_strtod_l+0x1d6>
 8007b52:	f04f 0900 	mov.w	r9, #0
 8007b56:	2301      	movs	r3, #1
 8007b58:	e77d      	b.n	8007a56 <_strtod_l+0x176>
 8007b5a:	f04f 0c00 	mov.w	ip, #0
 8007b5e:	1ca2      	adds	r2, r4, #2
 8007b60:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b62:	78a2      	ldrb	r2, [r4, #2]
 8007b64:	e785      	b.n	8007a72 <_strtod_l+0x192>
 8007b66:	f04f 0c01 	mov.w	ip, #1
 8007b6a:	e7f8      	b.n	8007b5e <_strtod_l+0x27e>
 8007b6c:	0800bf28 	.word	0x0800bf28
 8007b70:	0800bf10 	.word	0x0800bf10
 8007b74:	7ff00000 	.word	0x7ff00000
 8007b78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b7a:	1c51      	adds	r1, r2, #1
 8007b7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b7e:	7852      	ldrb	r2, [r2, #1]
 8007b80:	2a30      	cmp	r2, #48	@ 0x30
 8007b82:	d0f9      	beq.n	8007b78 <_strtod_l+0x298>
 8007b84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007b88:	2908      	cmp	r1, #8
 8007b8a:	f63f af78 	bhi.w	8007a7e <_strtod_l+0x19e>
 8007b8e:	3a30      	subs	r2, #48	@ 0x30
 8007b90:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007b96:	f04f 080a 	mov.w	r8, #10
 8007b9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b9c:	1c56      	adds	r6, r2, #1
 8007b9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007ba0:	7852      	ldrb	r2, [r2, #1]
 8007ba2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007ba6:	f1be 0f09 	cmp.w	lr, #9
 8007baa:	d939      	bls.n	8007c20 <_strtod_l+0x340>
 8007bac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007bae:	1a76      	subs	r6, r6, r1
 8007bb0:	2e08      	cmp	r6, #8
 8007bb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007bb6:	dc03      	bgt.n	8007bc0 <_strtod_l+0x2e0>
 8007bb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007bba:	4588      	cmp	r8, r1
 8007bbc:	bfa8      	it	ge
 8007bbe:	4688      	movge	r8, r1
 8007bc0:	f1bc 0f00 	cmp.w	ip, #0
 8007bc4:	d001      	beq.n	8007bca <_strtod_l+0x2ea>
 8007bc6:	f1c8 0800 	rsb	r8, r8, #0
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	d14e      	bne.n	8007c6c <_strtod_l+0x38c>
 8007bce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bd0:	4308      	orrs	r0, r1
 8007bd2:	f47f aebe 	bne.w	8007952 <_strtod_l+0x72>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f47f aed6 	bne.w	8007988 <_strtod_l+0xa8>
 8007bdc:	2a69      	cmp	r2, #105	@ 0x69
 8007bde:	d028      	beq.n	8007c32 <_strtod_l+0x352>
 8007be0:	dc25      	bgt.n	8007c2e <_strtod_l+0x34e>
 8007be2:	2a49      	cmp	r2, #73	@ 0x49
 8007be4:	d025      	beq.n	8007c32 <_strtod_l+0x352>
 8007be6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007be8:	f47f aece 	bne.w	8007988 <_strtod_l+0xa8>
 8007bec:	499b      	ldr	r1, [pc, #620]	@ (8007e5c <_strtod_l+0x57c>)
 8007bee:	a819      	add	r0, sp, #100	@ 0x64
 8007bf0:	f002 fdd2 	bl	800a798 <__match>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f43f aec7 	beq.w	8007988 <_strtod_l+0xa8>
 8007bfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b28      	cmp	r3, #40	@ 0x28
 8007c00:	d12e      	bne.n	8007c60 <_strtod_l+0x380>
 8007c02:	4997      	ldr	r1, [pc, #604]	@ (8007e60 <_strtod_l+0x580>)
 8007c04:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c06:	a819      	add	r0, sp, #100	@ 0x64
 8007c08:	f002 fdda 	bl	800a7c0 <__hexnan>
 8007c0c:	2805      	cmp	r0, #5
 8007c0e:	d127      	bne.n	8007c60 <_strtod_l+0x380>
 8007c10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007c16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007c1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007c1e:	e698      	b.n	8007952 <_strtod_l+0x72>
 8007c20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007c22:	fb08 2101 	mla	r1, r8, r1, r2
 8007c26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007c2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c2c:	e7b5      	b.n	8007b9a <_strtod_l+0x2ba>
 8007c2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c30:	e7da      	b.n	8007be8 <_strtod_l+0x308>
 8007c32:	498c      	ldr	r1, [pc, #560]	@ (8007e64 <_strtod_l+0x584>)
 8007c34:	a819      	add	r0, sp, #100	@ 0x64
 8007c36:	f002 fdaf 	bl	800a798 <__match>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f43f aea4 	beq.w	8007988 <_strtod_l+0xa8>
 8007c40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c42:	4989      	ldr	r1, [pc, #548]	@ (8007e68 <_strtod_l+0x588>)
 8007c44:	3b01      	subs	r3, #1
 8007c46:	a819      	add	r0, sp, #100	@ 0x64
 8007c48:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c4a:	f002 fda5 	bl	800a798 <__match>
 8007c4e:	b910      	cbnz	r0, 8007c56 <_strtod_l+0x376>
 8007c50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c52:	3301      	adds	r3, #1
 8007c54:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007e78 <_strtod_l+0x598>
 8007c5a:	f04f 0a00 	mov.w	sl, #0
 8007c5e:	e678      	b.n	8007952 <_strtod_l+0x72>
 8007c60:	4882      	ldr	r0, [pc, #520]	@ (8007e6c <_strtod_l+0x58c>)
 8007c62:	f001 fc69 	bl	8009538 <nan>
 8007c66:	ec5b ab10 	vmov	sl, fp, d0
 8007c6a:	e672      	b.n	8007952 <_strtod_l+0x72>
 8007c6c:	eba8 0309 	sub.w	r3, r8, r9
 8007c70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c74:	2f00      	cmp	r7, #0
 8007c76:	bf08      	it	eq
 8007c78:	462f      	moveq	r7, r5
 8007c7a:	2d10      	cmp	r5, #16
 8007c7c:	462c      	mov	r4, r5
 8007c7e:	bfa8      	it	ge
 8007c80:	2410      	movge	r4, #16
 8007c82:	f7f8 fc5f 	bl	8000544 <__aeabi_ui2d>
 8007c86:	2d09      	cmp	r5, #9
 8007c88:	4682      	mov	sl, r0
 8007c8a:	468b      	mov	fp, r1
 8007c8c:	dc13      	bgt.n	8007cb6 <_strtod_l+0x3d6>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f43f ae5e 	beq.w	8007952 <_strtod_l+0x72>
 8007c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c98:	dd78      	ble.n	8007d8c <_strtod_l+0x4ac>
 8007c9a:	2b16      	cmp	r3, #22
 8007c9c:	dc5f      	bgt.n	8007d5e <_strtod_l+0x47e>
 8007c9e:	4974      	ldr	r1, [pc, #464]	@ (8007e70 <_strtod_l+0x590>)
 8007ca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ca8:	4652      	mov	r2, sl
 8007caa:	465b      	mov	r3, fp
 8007cac:	f7f8 fcc4 	bl	8000638 <__aeabi_dmul>
 8007cb0:	4682      	mov	sl, r0
 8007cb2:	468b      	mov	fp, r1
 8007cb4:	e64d      	b.n	8007952 <_strtod_l+0x72>
 8007cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8007e70 <_strtod_l+0x590>)
 8007cb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007cc0:	f7f8 fcba 	bl	8000638 <__aeabi_dmul>
 8007cc4:	4682      	mov	sl, r0
 8007cc6:	9808      	ldr	r0, [sp, #32]
 8007cc8:	468b      	mov	fp, r1
 8007cca:	f7f8 fc3b 	bl	8000544 <__aeabi_ui2d>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	4659      	mov	r1, fp
 8007cd6:	f7f8 faf9 	bl	80002cc <__adddf3>
 8007cda:	2d0f      	cmp	r5, #15
 8007cdc:	4682      	mov	sl, r0
 8007cde:	468b      	mov	fp, r1
 8007ce0:	ddd5      	ble.n	8007c8e <_strtod_l+0x3ae>
 8007ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce4:	1b2c      	subs	r4, r5, r4
 8007ce6:	441c      	add	r4, r3
 8007ce8:	2c00      	cmp	r4, #0
 8007cea:	f340 8096 	ble.w	8007e1a <_strtod_l+0x53a>
 8007cee:	f014 030f 	ands.w	r3, r4, #15
 8007cf2:	d00a      	beq.n	8007d0a <_strtod_l+0x42a>
 8007cf4:	495e      	ldr	r1, [pc, #376]	@ (8007e70 <_strtod_l+0x590>)
 8007cf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d02:	f7f8 fc99 	bl	8000638 <__aeabi_dmul>
 8007d06:	4682      	mov	sl, r0
 8007d08:	468b      	mov	fp, r1
 8007d0a:	f034 040f 	bics.w	r4, r4, #15
 8007d0e:	d073      	beq.n	8007df8 <_strtod_l+0x518>
 8007d10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007d14:	dd48      	ble.n	8007da8 <_strtod_l+0x4c8>
 8007d16:	2400      	movs	r4, #0
 8007d18:	46a0      	mov	r8, r4
 8007d1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d1c:	46a1      	mov	r9, r4
 8007d1e:	9a05      	ldr	r2, [sp, #20]
 8007d20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007e78 <_strtod_l+0x598>
 8007d24:	2322      	movs	r3, #34	@ 0x22
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	f04f 0a00 	mov.w	sl, #0
 8007d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f43f ae0f 	beq.w	8007952 <_strtod_l+0x72>
 8007d34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d36:	9805      	ldr	r0, [sp, #20]
 8007d38:	f002 fe30 	bl	800a99c <_Bfree>
 8007d3c:	9805      	ldr	r0, [sp, #20]
 8007d3e:	4649      	mov	r1, r9
 8007d40:	f002 fe2c 	bl	800a99c <_Bfree>
 8007d44:	9805      	ldr	r0, [sp, #20]
 8007d46:	4641      	mov	r1, r8
 8007d48:	f002 fe28 	bl	800a99c <_Bfree>
 8007d4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d4e:	9805      	ldr	r0, [sp, #20]
 8007d50:	f002 fe24 	bl	800a99c <_Bfree>
 8007d54:	9805      	ldr	r0, [sp, #20]
 8007d56:	4621      	mov	r1, r4
 8007d58:	f002 fe20 	bl	800a99c <_Bfree>
 8007d5c:	e5f9      	b.n	8007952 <_strtod_l+0x72>
 8007d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007d64:	4293      	cmp	r3, r2
 8007d66:	dbbc      	blt.n	8007ce2 <_strtod_l+0x402>
 8007d68:	4c41      	ldr	r4, [pc, #260]	@ (8007e70 <_strtod_l+0x590>)
 8007d6a:	f1c5 050f 	rsb	r5, r5, #15
 8007d6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d72:	4652      	mov	r2, sl
 8007d74:	465b      	mov	r3, fp
 8007d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d7a:	f7f8 fc5d 	bl	8000638 <__aeabi_dmul>
 8007d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d80:	1b5d      	subs	r5, r3, r5
 8007d82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d8a:	e78f      	b.n	8007cac <_strtod_l+0x3cc>
 8007d8c:	3316      	adds	r3, #22
 8007d8e:	dba8      	blt.n	8007ce2 <_strtod_l+0x402>
 8007d90:	4b37      	ldr	r3, [pc, #220]	@ (8007e70 <_strtod_l+0x590>)
 8007d92:	eba9 0808 	sub.w	r8, r9, r8
 8007d96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007d9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007d9e:	4650      	mov	r0, sl
 8007da0:	4659      	mov	r1, fp
 8007da2:	f7f8 fd73 	bl	800088c <__aeabi_ddiv>
 8007da6:	e783      	b.n	8007cb0 <_strtod_l+0x3d0>
 8007da8:	4b32      	ldr	r3, [pc, #200]	@ (8007e74 <_strtod_l+0x594>)
 8007daa:	9308      	str	r3, [sp, #32]
 8007dac:	2300      	movs	r3, #0
 8007dae:	1124      	asrs	r4, r4, #4
 8007db0:	4650      	mov	r0, sl
 8007db2:	4659      	mov	r1, fp
 8007db4:	461e      	mov	r6, r3
 8007db6:	2c01      	cmp	r4, #1
 8007db8:	dc21      	bgt.n	8007dfe <_strtod_l+0x51e>
 8007dba:	b10b      	cbz	r3, 8007dc0 <_strtod_l+0x4e0>
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	492c      	ldr	r1, [pc, #176]	@ (8007e74 <_strtod_l+0x594>)
 8007dc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007dc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007dca:	4652      	mov	r2, sl
 8007dcc:	465b      	mov	r3, fp
 8007dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dd2:	f7f8 fc31 	bl	8000638 <__aeabi_dmul>
 8007dd6:	4b28      	ldr	r3, [pc, #160]	@ (8007e78 <_strtod_l+0x598>)
 8007dd8:	460a      	mov	r2, r1
 8007dda:	400b      	ands	r3, r1
 8007ddc:	4927      	ldr	r1, [pc, #156]	@ (8007e7c <_strtod_l+0x59c>)
 8007dde:	428b      	cmp	r3, r1
 8007de0:	4682      	mov	sl, r0
 8007de2:	d898      	bhi.n	8007d16 <_strtod_l+0x436>
 8007de4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007de8:	428b      	cmp	r3, r1
 8007dea:	bf86      	itte	hi
 8007dec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007e80 <_strtod_l+0x5a0>
 8007df0:	f04f 3aff 	movhi.w	sl, #4294967295
 8007df4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9308      	str	r3, [sp, #32]
 8007dfc:	e07a      	b.n	8007ef4 <_strtod_l+0x614>
 8007dfe:	07e2      	lsls	r2, r4, #31
 8007e00:	d505      	bpl.n	8007e0e <_strtod_l+0x52e>
 8007e02:	9b08      	ldr	r3, [sp, #32]
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	f7f8 fc16 	bl	8000638 <__aeabi_dmul>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	9a08      	ldr	r2, [sp, #32]
 8007e10:	3208      	adds	r2, #8
 8007e12:	3601      	adds	r6, #1
 8007e14:	1064      	asrs	r4, r4, #1
 8007e16:	9208      	str	r2, [sp, #32]
 8007e18:	e7cd      	b.n	8007db6 <_strtod_l+0x4d6>
 8007e1a:	d0ed      	beq.n	8007df8 <_strtod_l+0x518>
 8007e1c:	4264      	negs	r4, r4
 8007e1e:	f014 020f 	ands.w	r2, r4, #15
 8007e22:	d00a      	beq.n	8007e3a <_strtod_l+0x55a>
 8007e24:	4b12      	ldr	r3, [pc, #72]	@ (8007e70 <_strtod_l+0x590>)
 8007e26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	4659      	mov	r1, fp
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 fd2b 	bl	800088c <__aeabi_ddiv>
 8007e36:	4682      	mov	sl, r0
 8007e38:	468b      	mov	fp, r1
 8007e3a:	1124      	asrs	r4, r4, #4
 8007e3c:	d0dc      	beq.n	8007df8 <_strtod_l+0x518>
 8007e3e:	2c1f      	cmp	r4, #31
 8007e40:	dd20      	ble.n	8007e84 <_strtod_l+0x5a4>
 8007e42:	2400      	movs	r4, #0
 8007e44:	46a0      	mov	r8, r4
 8007e46:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e48:	46a1      	mov	r9, r4
 8007e4a:	9a05      	ldr	r2, [sp, #20]
 8007e4c:	2322      	movs	r3, #34	@ 0x22
 8007e4e:	f04f 0a00 	mov.w	sl, #0
 8007e52:	f04f 0b00 	mov.w	fp, #0
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	e768      	b.n	8007d2c <_strtod_l+0x44c>
 8007e5a:	bf00      	nop
 8007e5c:	0800bf75 	.word	0x0800bf75
 8007e60:	0800bf14 	.word	0x0800bf14
 8007e64:	0800bf6d 	.word	0x0800bf6d
 8007e68:	0800bfac 	.word	0x0800bfac
 8007e6c:	0800c33d 	.word	0x0800c33d
 8007e70:	0800c128 	.word	0x0800c128
 8007e74:	0800c100 	.word	0x0800c100
 8007e78:	7ff00000 	.word	0x7ff00000
 8007e7c:	7ca00000 	.word	0x7ca00000
 8007e80:	7fefffff 	.word	0x7fefffff
 8007e84:	f014 0310 	ands.w	r3, r4, #16
 8007e88:	bf18      	it	ne
 8007e8a:	236a      	movne	r3, #106	@ 0x6a
 8007e8c:	4ea9      	ldr	r6, [pc, #676]	@ (8008134 <_strtod_l+0x854>)
 8007e8e:	9308      	str	r3, [sp, #32]
 8007e90:	4650      	mov	r0, sl
 8007e92:	4659      	mov	r1, fp
 8007e94:	2300      	movs	r3, #0
 8007e96:	07e2      	lsls	r2, r4, #31
 8007e98:	d504      	bpl.n	8007ea4 <_strtod_l+0x5c4>
 8007e9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e9e:	f7f8 fbcb 	bl	8000638 <__aeabi_dmul>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	1064      	asrs	r4, r4, #1
 8007ea6:	f106 0608 	add.w	r6, r6, #8
 8007eaa:	d1f4      	bne.n	8007e96 <_strtod_l+0x5b6>
 8007eac:	b10b      	cbz	r3, 8007eb2 <_strtod_l+0x5d2>
 8007eae:	4682      	mov	sl, r0
 8007eb0:	468b      	mov	fp, r1
 8007eb2:	9b08      	ldr	r3, [sp, #32]
 8007eb4:	b1b3      	cbz	r3, 8007ee4 <_strtod_l+0x604>
 8007eb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007eba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	4659      	mov	r1, fp
 8007ec2:	dd0f      	ble.n	8007ee4 <_strtod_l+0x604>
 8007ec4:	2b1f      	cmp	r3, #31
 8007ec6:	dd55      	ble.n	8007f74 <_strtod_l+0x694>
 8007ec8:	2b34      	cmp	r3, #52	@ 0x34
 8007eca:	bfde      	ittt	le
 8007ecc:	f04f 33ff 	movle.w	r3, #4294967295
 8007ed0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007ed4:	4093      	lslle	r3, r2
 8007ed6:	f04f 0a00 	mov.w	sl, #0
 8007eda:	bfcc      	ite	gt
 8007edc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ee0:	ea03 0b01 	andle.w	fp, r3, r1
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4650      	mov	r0, sl
 8007eea:	4659      	mov	r1, fp
 8007eec:	f7f8 fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d1a6      	bne.n	8007e42 <_strtod_l+0x562>
 8007ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007efa:	9805      	ldr	r0, [sp, #20]
 8007efc:	462b      	mov	r3, r5
 8007efe:	463a      	mov	r2, r7
 8007f00:	f002 fdb4 	bl	800aa6c <__s2b>
 8007f04:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f43f af05 	beq.w	8007d16 <_strtod_l+0x436>
 8007f0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	eba9 0308 	sub.w	r3, r9, r8
 8007f14:	bfa8      	it	ge
 8007f16:	2300      	movge	r3, #0
 8007f18:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f1a:	2400      	movs	r4, #0
 8007f1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f20:	9316      	str	r3, [sp, #88]	@ 0x58
 8007f22:	46a0      	mov	r8, r4
 8007f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f26:	9805      	ldr	r0, [sp, #20]
 8007f28:	6859      	ldr	r1, [r3, #4]
 8007f2a:	f002 fcf7 	bl	800a91c <_Balloc>
 8007f2e:	4681      	mov	r9, r0
 8007f30:	2800      	cmp	r0, #0
 8007f32:	f43f aef4 	beq.w	8007d1e <_strtod_l+0x43e>
 8007f36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	3202      	adds	r2, #2
 8007f3c:	f103 010c 	add.w	r1, r3, #12
 8007f40:	0092      	lsls	r2, r2, #2
 8007f42:	300c      	adds	r0, #12
 8007f44:	f001 fae9 	bl	800951a <memcpy>
 8007f48:	ec4b ab10 	vmov	d0, sl, fp
 8007f4c:	9805      	ldr	r0, [sp, #20]
 8007f4e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f50:	a91b      	add	r1, sp, #108	@ 0x6c
 8007f52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f56:	f003 f8c5 	bl	800b0e4 <__d2b>
 8007f5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	f43f aede 	beq.w	8007d1e <_strtod_l+0x43e>
 8007f62:	9805      	ldr	r0, [sp, #20]
 8007f64:	2101      	movs	r1, #1
 8007f66:	f002 fe17 	bl	800ab98 <__i2b>
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	b948      	cbnz	r0, 8007f82 <_strtod_l+0x6a2>
 8007f6e:	f04f 0800 	mov.w	r8, #0
 8007f72:	e6d4      	b.n	8007d1e <_strtod_l+0x43e>
 8007f74:	f04f 32ff 	mov.w	r2, #4294967295
 8007f78:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7c:	ea03 0a0a 	and.w	sl, r3, sl
 8007f80:	e7b0      	b.n	8007ee4 <_strtod_l+0x604>
 8007f82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007f84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	bfab      	itete	ge
 8007f8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007f8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007f8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007f90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007f92:	bfac      	ite	ge
 8007f94:	18ef      	addge	r7, r5, r3
 8007f96:	1b5e      	sublt	r6, r3, r5
 8007f98:	9b08      	ldr	r3, [sp, #32]
 8007f9a:	1aed      	subs	r5, r5, r3
 8007f9c:	4415      	add	r5, r2
 8007f9e:	4b66      	ldr	r3, [pc, #408]	@ (8008138 <_strtod_l+0x858>)
 8007fa0:	3d01      	subs	r5, #1
 8007fa2:	429d      	cmp	r5, r3
 8007fa4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007fa8:	da50      	bge.n	800804c <_strtod_l+0x76c>
 8007faa:	1b5b      	subs	r3, r3, r5
 8007fac:	2b1f      	cmp	r3, #31
 8007fae:	eba2 0203 	sub.w	r2, r2, r3
 8007fb2:	f04f 0101 	mov.w	r1, #1
 8007fb6:	dc3d      	bgt.n	8008034 <_strtod_l+0x754>
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fc2:	18bd      	adds	r5, r7, r2
 8007fc4:	9b08      	ldr	r3, [sp, #32]
 8007fc6:	42af      	cmp	r7, r5
 8007fc8:	4416      	add	r6, r2
 8007fca:	441e      	add	r6, r3
 8007fcc:	463b      	mov	r3, r7
 8007fce:	bfa8      	it	ge
 8007fd0:	462b      	movge	r3, r5
 8007fd2:	42b3      	cmp	r3, r6
 8007fd4:	bfa8      	it	ge
 8007fd6:	4633      	movge	r3, r6
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfc2      	ittt	gt
 8007fdc:	1aed      	subgt	r5, r5, r3
 8007fde:	1af6      	subgt	r6, r6, r3
 8007fe0:	1aff      	subgt	r7, r7, r3
 8007fe2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dd16      	ble.n	8008016 <_strtod_l+0x736>
 8007fe8:	4641      	mov	r1, r8
 8007fea:	9805      	ldr	r0, [sp, #20]
 8007fec:	461a      	mov	r2, r3
 8007fee:	f002 fe93 	bl	800ad18 <__pow5mult>
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d0ba      	beq.n	8007f6e <_strtod_l+0x68e>
 8007ff8:	4601      	mov	r1, r0
 8007ffa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ffc:	9805      	ldr	r0, [sp, #20]
 8007ffe:	f002 fde1 	bl	800abc4 <__multiply>
 8008002:	900e      	str	r0, [sp, #56]	@ 0x38
 8008004:	2800      	cmp	r0, #0
 8008006:	f43f ae8a 	beq.w	8007d1e <_strtod_l+0x43e>
 800800a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800800c:	9805      	ldr	r0, [sp, #20]
 800800e:	f002 fcc5 	bl	800a99c <_Bfree>
 8008012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008014:	931a      	str	r3, [sp, #104]	@ 0x68
 8008016:	2d00      	cmp	r5, #0
 8008018:	dc1d      	bgt.n	8008056 <_strtod_l+0x776>
 800801a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	dd23      	ble.n	8008068 <_strtod_l+0x788>
 8008020:	4649      	mov	r1, r9
 8008022:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008024:	9805      	ldr	r0, [sp, #20]
 8008026:	f002 fe77 	bl	800ad18 <__pow5mult>
 800802a:	4681      	mov	r9, r0
 800802c:	b9e0      	cbnz	r0, 8008068 <_strtod_l+0x788>
 800802e:	f04f 0900 	mov.w	r9, #0
 8008032:	e674      	b.n	8007d1e <_strtod_l+0x43e>
 8008034:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008038:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800803c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008040:	35e2      	adds	r5, #226	@ 0xe2
 8008042:	fa01 f305 	lsl.w	r3, r1, r5
 8008046:	9310      	str	r3, [sp, #64]	@ 0x40
 8008048:	9113      	str	r1, [sp, #76]	@ 0x4c
 800804a:	e7ba      	b.n	8007fc2 <_strtod_l+0x6e2>
 800804c:	2300      	movs	r3, #0
 800804e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008050:	2301      	movs	r3, #1
 8008052:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008054:	e7b5      	b.n	8007fc2 <_strtod_l+0x6e2>
 8008056:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008058:	9805      	ldr	r0, [sp, #20]
 800805a:	462a      	mov	r2, r5
 800805c:	f002 feb6 	bl	800adcc <__lshift>
 8008060:	901a      	str	r0, [sp, #104]	@ 0x68
 8008062:	2800      	cmp	r0, #0
 8008064:	d1d9      	bne.n	800801a <_strtod_l+0x73a>
 8008066:	e65a      	b.n	8007d1e <_strtod_l+0x43e>
 8008068:	2e00      	cmp	r6, #0
 800806a:	dd07      	ble.n	800807c <_strtod_l+0x79c>
 800806c:	4649      	mov	r1, r9
 800806e:	9805      	ldr	r0, [sp, #20]
 8008070:	4632      	mov	r2, r6
 8008072:	f002 feab 	bl	800adcc <__lshift>
 8008076:	4681      	mov	r9, r0
 8008078:	2800      	cmp	r0, #0
 800807a:	d0d8      	beq.n	800802e <_strtod_l+0x74e>
 800807c:	2f00      	cmp	r7, #0
 800807e:	dd08      	ble.n	8008092 <_strtod_l+0x7b2>
 8008080:	4641      	mov	r1, r8
 8008082:	9805      	ldr	r0, [sp, #20]
 8008084:	463a      	mov	r2, r7
 8008086:	f002 fea1 	bl	800adcc <__lshift>
 800808a:	4680      	mov	r8, r0
 800808c:	2800      	cmp	r0, #0
 800808e:	f43f ae46 	beq.w	8007d1e <_strtod_l+0x43e>
 8008092:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008094:	9805      	ldr	r0, [sp, #20]
 8008096:	464a      	mov	r2, r9
 8008098:	f002 ff20 	bl	800aedc <__mdiff>
 800809c:	4604      	mov	r4, r0
 800809e:	2800      	cmp	r0, #0
 80080a0:	f43f ae3d 	beq.w	8007d1e <_strtod_l+0x43e>
 80080a4:	68c3      	ldr	r3, [r0, #12]
 80080a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080a8:	2300      	movs	r3, #0
 80080aa:	60c3      	str	r3, [r0, #12]
 80080ac:	4641      	mov	r1, r8
 80080ae:	f002 fef9 	bl	800aea4 <__mcmp>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	da46      	bge.n	8008144 <_strtod_l+0x864>
 80080b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080b8:	ea53 030a 	orrs.w	r3, r3, sl
 80080bc:	d16c      	bne.n	8008198 <_strtod_l+0x8b8>
 80080be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d168      	bne.n	8008198 <_strtod_l+0x8b8>
 80080c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080ca:	0d1b      	lsrs	r3, r3, #20
 80080cc:	051b      	lsls	r3, r3, #20
 80080ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080d2:	d961      	bls.n	8008198 <_strtod_l+0x8b8>
 80080d4:	6963      	ldr	r3, [r4, #20]
 80080d6:	b913      	cbnz	r3, 80080de <_strtod_l+0x7fe>
 80080d8:	6923      	ldr	r3, [r4, #16]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	dd5c      	ble.n	8008198 <_strtod_l+0x8b8>
 80080de:	4621      	mov	r1, r4
 80080e0:	2201      	movs	r2, #1
 80080e2:	9805      	ldr	r0, [sp, #20]
 80080e4:	f002 fe72 	bl	800adcc <__lshift>
 80080e8:	4641      	mov	r1, r8
 80080ea:	4604      	mov	r4, r0
 80080ec:	f002 feda 	bl	800aea4 <__mcmp>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	dd51      	ble.n	8008198 <_strtod_l+0x8b8>
 80080f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080f8:	9a08      	ldr	r2, [sp, #32]
 80080fa:	0d1b      	lsrs	r3, r3, #20
 80080fc:	051b      	lsls	r3, r3, #20
 80080fe:	2a00      	cmp	r2, #0
 8008100:	d06b      	beq.n	80081da <_strtod_l+0x8fa>
 8008102:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008106:	d868      	bhi.n	80081da <_strtod_l+0x8fa>
 8008108:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800810c:	f67f ae9d 	bls.w	8007e4a <_strtod_l+0x56a>
 8008110:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <_strtod_l+0x85c>)
 8008112:	4650      	mov	r0, sl
 8008114:	4659      	mov	r1, fp
 8008116:	2200      	movs	r2, #0
 8008118:	f7f8 fa8e 	bl	8000638 <__aeabi_dmul>
 800811c:	4b08      	ldr	r3, [pc, #32]	@ (8008140 <_strtod_l+0x860>)
 800811e:	400b      	ands	r3, r1
 8008120:	4682      	mov	sl, r0
 8008122:	468b      	mov	fp, r1
 8008124:	2b00      	cmp	r3, #0
 8008126:	f47f ae05 	bne.w	8007d34 <_strtod_l+0x454>
 800812a:	9a05      	ldr	r2, [sp, #20]
 800812c:	2322      	movs	r3, #34	@ 0x22
 800812e:	6013      	str	r3, [r2, #0]
 8008130:	e600      	b.n	8007d34 <_strtod_l+0x454>
 8008132:	bf00      	nop
 8008134:	0800bf40 	.word	0x0800bf40
 8008138:	fffffc02 	.word	0xfffffc02
 800813c:	39500000 	.word	0x39500000
 8008140:	7ff00000 	.word	0x7ff00000
 8008144:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008148:	d165      	bne.n	8008216 <_strtod_l+0x936>
 800814a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800814c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008150:	b35a      	cbz	r2, 80081aa <_strtod_l+0x8ca>
 8008152:	4a9f      	ldr	r2, [pc, #636]	@ (80083d0 <_strtod_l+0xaf0>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d12b      	bne.n	80081b0 <_strtod_l+0x8d0>
 8008158:	9b08      	ldr	r3, [sp, #32]
 800815a:	4651      	mov	r1, sl
 800815c:	b303      	cbz	r3, 80081a0 <_strtod_l+0x8c0>
 800815e:	4b9d      	ldr	r3, [pc, #628]	@ (80083d4 <_strtod_l+0xaf4>)
 8008160:	465a      	mov	r2, fp
 8008162:	4013      	ands	r3, r2
 8008164:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008168:	f04f 32ff 	mov.w	r2, #4294967295
 800816c:	d81b      	bhi.n	80081a6 <_strtod_l+0x8c6>
 800816e:	0d1b      	lsrs	r3, r3, #20
 8008170:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008174:	fa02 f303 	lsl.w	r3, r2, r3
 8008178:	4299      	cmp	r1, r3
 800817a:	d119      	bne.n	80081b0 <_strtod_l+0x8d0>
 800817c:	4b96      	ldr	r3, [pc, #600]	@ (80083d8 <_strtod_l+0xaf8>)
 800817e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008180:	429a      	cmp	r2, r3
 8008182:	d102      	bne.n	800818a <_strtod_l+0x8aa>
 8008184:	3101      	adds	r1, #1
 8008186:	f43f adca 	beq.w	8007d1e <_strtod_l+0x43e>
 800818a:	4b92      	ldr	r3, [pc, #584]	@ (80083d4 <_strtod_l+0xaf4>)
 800818c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800818e:	401a      	ands	r2, r3
 8008190:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008194:	f04f 0a00 	mov.w	sl, #0
 8008198:	9b08      	ldr	r3, [sp, #32]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1b8      	bne.n	8008110 <_strtod_l+0x830>
 800819e:	e5c9      	b.n	8007d34 <_strtod_l+0x454>
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295
 80081a4:	e7e8      	b.n	8008178 <_strtod_l+0x898>
 80081a6:	4613      	mov	r3, r2
 80081a8:	e7e6      	b.n	8008178 <_strtod_l+0x898>
 80081aa:	ea53 030a 	orrs.w	r3, r3, sl
 80081ae:	d0a1      	beq.n	80080f4 <_strtod_l+0x814>
 80081b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081b2:	b1db      	cbz	r3, 80081ec <_strtod_l+0x90c>
 80081b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081b6:	4213      	tst	r3, r2
 80081b8:	d0ee      	beq.n	8008198 <_strtod_l+0x8b8>
 80081ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081bc:	9a08      	ldr	r2, [sp, #32]
 80081be:	4650      	mov	r0, sl
 80081c0:	4659      	mov	r1, fp
 80081c2:	b1bb      	cbz	r3, 80081f4 <_strtod_l+0x914>
 80081c4:	f7ff fb6e 	bl	80078a4 <sulp>
 80081c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081cc:	ec53 2b10 	vmov	r2, r3, d0
 80081d0:	f7f8 f87c 	bl	80002cc <__adddf3>
 80081d4:	4682      	mov	sl, r0
 80081d6:	468b      	mov	fp, r1
 80081d8:	e7de      	b.n	8008198 <_strtod_l+0x8b8>
 80081da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80081de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80081e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80081e6:	f04f 3aff 	mov.w	sl, #4294967295
 80081ea:	e7d5      	b.n	8008198 <_strtod_l+0x8b8>
 80081ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081ee:	ea13 0f0a 	tst.w	r3, sl
 80081f2:	e7e1      	b.n	80081b8 <_strtod_l+0x8d8>
 80081f4:	f7ff fb56 	bl	80078a4 <sulp>
 80081f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081fc:	ec53 2b10 	vmov	r2, r3, d0
 8008200:	f7f8 f862 	bl	80002c8 <__aeabi_dsub>
 8008204:	2200      	movs	r2, #0
 8008206:	2300      	movs	r3, #0
 8008208:	4682      	mov	sl, r0
 800820a:	468b      	mov	fp, r1
 800820c:	f7f8 fc7c 	bl	8000b08 <__aeabi_dcmpeq>
 8008210:	2800      	cmp	r0, #0
 8008212:	d0c1      	beq.n	8008198 <_strtod_l+0x8b8>
 8008214:	e619      	b.n	8007e4a <_strtod_l+0x56a>
 8008216:	4641      	mov	r1, r8
 8008218:	4620      	mov	r0, r4
 800821a:	f002 ffbb 	bl	800b194 <__ratio>
 800821e:	ec57 6b10 	vmov	r6, r7, d0
 8008222:	2200      	movs	r2, #0
 8008224:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7f8 fc80 	bl	8000b30 <__aeabi_dcmple>
 8008230:	2800      	cmp	r0, #0
 8008232:	d06f      	beq.n	8008314 <_strtod_l+0xa34>
 8008234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d17a      	bne.n	8008330 <_strtod_l+0xa50>
 800823a:	f1ba 0f00 	cmp.w	sl, #0
 800823e:	d158      	bne.n	80082f2 <_strtod_l+0xa12>
 8008240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008246:	2b00      	cmp	r3, #0
 8008248:	d15a      	bne.n	8008300 <_strtod_l+0xa20>
 800824a:	4b64      	ldr	r3, [pc, #400]	@ (80083dc <_strtod_l+0xafc>)
 800824c:	2200      	movs	r2, #0
 800824e:	4630      	mov	r0, r6
 8008250:	4639      	mov	r1, r7
 8008252:	f7f8 fc63 	bl	8000b1c <__aeabi_dcmplt>
 8008256:	2800      	cmp	r0, #0
 8008258:	d159      	bne.n	800830e <_strtod_l+0xa2e>
 800825a:	4630      	mov	r0, r6
 800825c:	4639      	mov	r1, r7
 800825e:	4b60      	ldr	r3, [pc, #384]	@ (80083e0 <_strtod_l+0xb00>)
 8008260:	2200      	movs	r2, #0
 8008262:	f7f8 f9e9 	bl	8000638 <__aeabi_dmul>
 8008266:	4606      	mov	r6, r0
 8008268:	460f      	mov	r7, r1
 800826a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800826e:	9606      	str	r6, [sp, #24]
 8008270:	9307      	str	r3, [sp, #28]
 8008272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008276:	4d57      	ldr	r5, [pc, #348]	@ (80083d4 <_strtod_l+0xaf4>)
 8008278:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800827c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800827e:	401d      	ands	r5, r3
 8008280:	4b58      	ldr	r3, [pc, #352]	@ (80083e4 <_strtod_l+0xb04>)
 8008282:	429d      	cmp	r5, r3
 8008284:	f040 80b2 	bne.w	80083ec <_strtod_l+0xb0c>
 8008288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800828a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800828e:	ec4b ab10 	vmov	d0, sl, fp
 8008292:	f002 feb7 	bl	800b004 <__ulp>
 8008296:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800829a:	ec51 0b10 	vmov	r0, r1, d0
 800829e:	f7f8 f9cb 	bl	8000638 <__aeabi_dmul>
 80082a2:	4652      	mov	r2, sl
 80082a4:	465b      	mov	r3, fp
 80082a6:	f7f8 f811 	bl	80002cc <__adddf3>
 80082aa:	460b      	mov	r3, r1
 80082ac:	4949      	ldr	r1, [pc, #292]	@ (80083d4 <_strtod_l+0xaf4>)
 80082ae:	4a4e      	ldr	r2, [pc, #312]	@ (80083e8 <_strtod_l+0xb08>)
 80082b0:	4019      	ands	r1, r3
 80082b2:	4291      	cmp	r1, r2
 80082b4:	4682      	mov	sl, r0
 80082b6:	d942      	bls.n	800833e <_strtod_l+0xa5e>
 80082b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082ba:	4b47      	ldr	r3, [pc, #284]	@ (80083d8 <_strtod_l+0xaf8>)
 80082bc:	429a      	cmp	r2, r3
 80082be:	d103      	bne.n	80082c8 <_strtod_l+0x9e8>
 80082c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082c2:	3301      	adds	r3, #1
 80082c4:	f43f ad2b 	beq.w	8007d1e <_strtod_l+0x43e>
 80082c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80083d8 <_strtod_l+0xaf8>
 80082cc:	f04f 3aff 	mov.w	sl, #4294967295
 80082d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082d2:	9805      	ldr	r0, [sp, #20]
 80082d4:	f002 fb62 	bl	800a99c <_Bfree>
 80082d8:	9805      	ldr	r0, [sp, #20]
 80082da:	4649      	mov	r1, r9
 80082dc:	f002 fb5e 	bl	800a99c <_Bfree>
 80082e0:	9805      	ldr	r0, [sp, #20]
 80082e2:	4641      	mov	r1, r8
 80082e4:	f002 fb5a 	bl	800a99c <_Bfree>
 80082e8:	9805      	ldr	r0, [sp, #20]
 80082ea:	4621      	mov	r1, r4
 80082ec:	f002 fb56 	bl	800a99c <_Bfree>
 80082f0:	e618      	b.n	8007f24 <_strtod_l+0x644>
 80082f2:	f1ba 0f01 	cmp.w	sl, #1
 80082f6:	d103      	bne.n	8008300 <_strtod_l+0xa20>
 80082f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f43f ada5 	beq.w	8007e4a <_strtod_l+0x56a>
 8008300:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80083b0 <_strtod_l+0xad0>
 8008304:	4f35      	ldr	r7, [pc, #212]	@ (80083dc <_strtod_l+0xafc>)
 8008306:	ed8d 7b06 	vstr	d7, [sp, #24]
 800830a:	2600      	movs	r6, #0
 800830c:	e7b1      	b.n	8008272 <_strtod_l+0x992>
 800830e:	4f34      	ldr	r7, [pc, #208]	@ (80083e0 <_strtod_l+0xb00>)
 8008310:	2600      	movs	r6, #0
 8008312:	e7aa      	b.n	800826a <_strtod_l+0x98a>
 8008314:	4b32      	ldr	r3, [pc, #200]	@ (80083e0 <_strtod_l+0xb00>)
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	2200      	movs	r2, #0
 800831c:	f7f8 f98c 	bl	8000638 <__aeabi_dmul>
 8008320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d09f      	beq.n	800826a <_strtod_l+0x98a>
 800832a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800832e:	e7a0      	b.n	8008272 <_strtod_l+0x992>
 8008330:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80083b8 <_strtod_l+0xad8>
 8008334:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008338:	ec57 6b17 	vmov	r6, r7, d7
 800833c:	e799      	b.n	8008272 <_strtod_l+0x992>
 800833e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008342:	9b08      	ldr	r3, [sp, #32]
 8008344:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1c1      	bne.n	80082d0 <_strtod_l+0x9f0>
 800834c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008350:	0d1b      	lsrs	r3, r3, #20
 8008352:	051b      	lsls	r3, r3, #20
 8008354:	429d      	cmp	r5, r3
 8008356:	d1bb      	bne.n	80082d0 <_strtod_l+0x9f0>
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fccc 	bl	8000cf8 <__aeabi_d2lz>
 8008360:	f7f8 f93c 	bl	80005dc <__aeabi_l2d>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f7 ffac 	bl	80002c8 <__aeabi_dsub>
 8008370:	460b      	mov	r3, r1
 8008372:	4602      	mov	r2, r0
 8008374:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008378:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800837c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800837e:	ea46 060a 	orr.w	r6, r6, sl
 8008382:	431e      	orrs	r6, r3
 8008384:	d06f      	beq.n	8008466 <_strtod_l+0xb86>
 8008386:	a30e      	add	r3, pc, #56	@ (adr r3, 80083c0 <_strtod_l+0xae0>)
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	f7f8 fbc6 	bl	8000b1c <__aeabi_dcmplt>
 8008390:	2800      	cmp	r0, #0
 8008392:	f47f accf 	bne.w	8007d34 <_strtod_l+0x454>
 8008396:	a30c      	add	r3, pc, #48	@ (adr r3, 80083c8 <_strtod_l+0xae8>)
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083a0:	f7f8 fbda 	bl	8000b58 <__aeabi_dcmpgt>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d093      	beq.n	80082d0 <_strtod_l+0x9f0>
 80083a8:	e4c4      	b.n	8007d34 <_strtod_l+0x454>
 80083aa:	bf00      	nop
 80083ac:	f3af 8000 	nop.w
 80083b0:	00000000 	.word	0x00000000
 80083b4:	bff00000 	.word	0xbff00000
 80083b8:	00000000 	.word	0x00000000
 80083bc:	3ff00000 	.word	0x3ff00000
 80083c0:	94a03595 	.word	0x94a03595
 80083c4:	3fdfffff 	.word	0x3fdfffff
 80083c8:	35afe535 	.word	0x35afe535
 80083cc:	3fe00000 	.word	0x3fe00000
 80083d0:	000fffff 	.word	0x000fffff
 80083d4:	7ff00000 	.word	0x7ff00000
 80083d8:	7fefffff 	.word	0x7fefffff
 80083dc:	3ff00000 	.word	0x3ff00000
 80083e0:	3fe00000 	.word	0x3fe00000
 80083e4:	7fe00000 	.word	0x7fe00000
 80083e8:	7c9fffff 	.word	0x7c9fffff
 80083ec:	9b08      	ldr	r3, [sp, #32]
 80083ee:	b323      	cbz	r3, 800843a <_strtod_l+0xb5a>
 80083f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80083f4:	d821      	bhi.n	800843a <_strtod_l+0xb5a>
 80083f6:	a328      	add	r3, pc, #160	@ (adr r3, 8008498 <_strtod_l+0xbb8>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	4630      	mov	r0, r6
 80083fe:	4639      	mov	r1, r7
 8008400:	f7f8 fb96 	bl	8000b30 <__aeabi_dcmple>
 8008404:	b1a0      	cbz	r0, 8008430 <_strtod_l+0xb50>
 8008406:	4639      	mov	r1, r7
 8008408:	4630      	mov	r0, r6
 800840a:	f7f8 fbed 	bl	8000be8 <__aeabi_d2uiz>
 800840e:	2801      	cmp	r0, #1
 8008410:	bf38      	it	cc
 8008412:	2001      	movcc	r0, #1
 8008414:	f7f8 f896 	bl	8000544 <__aeabi_ui2d>
 8008418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800841a:	4606      	mov	r6, r0
 800841c:	460f      	mov	r7, r1
 800841e:	b9fb      	cbnz	r3, 8008460 <_strtod_l+0xb80>
 8008420:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008424:	9014      	str	r0, [sp, #80]	@ 0x50
 8008426:	9315      	str	r3, [sp, #84]	@ 0x54
 8008428:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800842c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008430:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008432:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008436:	1b5b      	subs	r3, r3, r5
 8008438:	9311      	str	r3, [sp, #68]	@ 0x44
 800843a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800843e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008442:	f002 fddf 	bl	800b004 <__ulp>
 8008446:	4650      	mov	r0, sl
 8008448:	ec53 2b10 	vmov	r2, r3, d0
 800844c:	4659      	mov	r1, fp
 800844e:	f7f8 f8f3 	bl	8000638 <__aeabi_dmul>
 8008452:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008456:	f7f7 ff39 	bl	80002cc <__adddf3>
 800845a:	4682      	mov	sl, r0
 800845c:	468b      	mov	fp, r1
 800845e:	e770      	b.n	8008342 <_strtod_l+0xa62>
 8008460:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008464:	e7e0      	b.n	8008428 <_strtod_l+0xb48>
 8008466:	a30e      	add	r3, pc, #56	@ (adr r3, 80084a0 <_strtod_l+0xbc0>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	f7f8 fb56 	bl	8000b1c <__aeabi_dcmplt>
 8008470:	e798      	b.n	80083a4 <_strtod_l+0xac4>
 8008472:	2300      	movs	r3, #0
 8008474:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008476:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	f7ff ba6d 	b.w	800795a <_strtod_l+0x7a>
 8008480:	2a65      	cmp	r2, #101	@ 0x65
 8008482:	f43f ab66 	beq.w	8007b52 <_strtod_l+0x272>
 8008486:	2a45      	cmp	r2, #69	@ 0x45
 8008488:	f43f ab63 	beq.w	8007b52 <_strtod_l+0x272>
 800848c:	2301      	movs	r3, #1
 800848e:	f7ff bb9e 	b.w	8007bce <_strtod_l+0x2ee>
 8008492:	bf00      	nop
 8008494:	f3af 8000 	nop.w
 8008498:	ffc00000 	.word	0xffc00000
 800849c:	41dfffff 	.word	0x41dfffff
 80084a0:	94a03595 	.word	0x94a03595
 80084a4:	3fcfffff 	.word	0x3fcfffff

080084a8 <_strtod_r>:
 80084a8:	4b01      	ldr	r3, [pc, #4]	@ (80084b0 <_strtod_r+0x8>)
 80084aa:	f7ff ba19 	b.w	80078e0 <_strtod_l>
 80084ae:	bf00      	nop
 80084b0:	2000001c 	.word	0x2000001c

080084b4 <__cvt>:
 80084b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084b8:	ec57 6b10 	vmov	r6, r7, d0
 80084bc:	2f00      	cmp	r7, #0
 80084be:	460c      	mov	r4, r1
 80084c0:	4619      	mov	r1, r3
 80084c2:	463b      	mov	r3, r7
 80084c4:	bfbb      	ittet	lt
 80084c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80084ca:	461f      	movlt	r7, r3
 80084cc:	2300      	movge	r3, #0
 80084ce:	232d      	movlt	r3, #45	@ 0x2d
 80084d0:	700b      	strb	r3, [r1, #0]
 80084d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80084d8:	4691      	mov	r9, r2
 80084da:	f023 0820 	bic.w	r8, r3, #32
 80084de:	bfbc      	itt	lt
 80084e0:	4632      	movlt	r2, r6
 80084e2:	4616      	movlt	r6, r2
 80084e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084e8:	d005      	beq.n	80084f6 <__cvt+0x42>
 80084ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80084ee:	d100      	bne.n	80084f2 <__cvt+0x3e>
 80084f0:	3401      	adds	r4, #1
 80084f2:	2102      	movs	r1, #2
 80084f4:	e000      	b.n	80084f8 <__cvt+0x44>
 80084f6:	2103      	movs	r1, #3
 80084f8:	ab03      	add	r3, sp, #12
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	ab02      	add	r3, sp, #8
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	ec47 6b10 	vmov	d0, r6, r7
 8008504:	4653      	mov	r3, sl
 8008506:	4622      	mov	r2, r4
 8008508:	f001 f8ae 	bl	8009668 <_dtoa_r>
 800850c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008510:	4605      	mov	r5, r0
 8008512:	d119      	bne.n	8008548 <__cvt+0x94>
 8008514:	f019 0f01 	tst.w	r9, #1
 8008518:	d00e      	beq.n	8008538 <__cvt+0x84>
 800851a:	eb00 0904 	add.w	r9, r0, r4
 800851e:	2200      	movs	r2, #0
 8008520:	2300      	movs	r3, #0
 8008522:	4630      	mov	r0, r6
 8008524:	4639      	mov	r1, r7
 8008526:	f7f8 faef 	bl	8000b08 <__aeabi_dcmpeq>
 800852a:	b108      	cbz	r0, 8008530 <__cvt+0x7c>
 800852c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008530:	2230      	movs	r2, #48	@ 0x30
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	454b      	cmp	r3, r9
 8008536:	d31e      	bcc.n	8008576 <__cvt+0xc2>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800853c:	1b5b      	subs	r3, r3, r5
 800853e:	4628      	mov	r0, r5
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	b004      	add	sp, #16
 8008544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008548:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800854c:	eb00 0904 	add.w	r9, r0, r4
 8008550:	d1e5      	bne.n	800851e <__cvt+0x6a>
 8008552:	7803      	ldrb	r3, [r0, #0]
 8008554:	2b30      	cmp	r3, #48	@ 0x30
 8008556:	d10a      	bne.n	800856e <__cvt+0xba>
 8008558:	2200      	movs	r2, #0
 800855a:	2300      	movs	r3, #0
 800855c:	4630      	mov	r0, r6
 800855e:	4639      	mov	r1, r7
 8008560:	f7f8 fad2 	bl	8000b08 <__aeabi_dcmpeq>
 8008564:	b918      	cbnz	r0, 800856e <__cvt+0xba>
 8008566:	f1c4 0401 	rsb	r4, r4, #1
 800856a:	f8ca 4000 	str.w	r4, [sl]
 800856e:	f8da 3000 	ldr.w	r3, [sl]
 8008572:	4499      	add	r9, r3
 8008574:	e7d3      	b.n	800851e <__cvt+0x6a>
 8008576:	1c59      	adds	r1, r3, #1
 8008578:	9103      	str	r1, [sp, #12]
 800857a:	701a      	strb	r2, [r3, #0]
 800857c:	e7d9      	b.n	8008532 <__cvt+0x7e>

0800857e <__exponent>:
 800857e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008580:	2900      	cmp	r1, #0
 8008582:	bfba      	itte	lt
 8008584:	4249      	neglt	r1, r1
 8008586:	232d      	movlt	r3, #45	@ 0x2d
 8008588:	232b      	movge	r3, #43	@ 0x2b
 800858a:	2909      	cmp	r1, #9
 800858c:	7002      	strb	r2, [r0, #0]
 800858e:	7043      	strb	r3, [r0, #1]
 8008590:	dd29      	ble.n	80085e6 <__exponent+0x68>
 8008592:	f10d 0307 	add.w	r3, sp, #7
 8008596:	461d      	mov	r5, r3
 8008598:	270a      	movs	r7, #10
 800859a:	461a      	mov	r2, r3
 800859c:	fbb1 f6f7 	udiv	r6, r1, r7
 80085a0:	fb07 1416 	mls	r4, r7, r6, r1
 80085a4:	3430      	adds	r4, #48	@ 0x30
 80085a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80085aa:	460c      	mov	r4, r1
 80085ac:	2c63      	cmp	r4, #99	@ 0x63
 80085ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80085b2:	4631      	mov	r1, r6
 80085b4:	dcf1      	bgt.n	800859a <__exponent+0x1c>
 80085b6:	3130      	adds	r1, #48	@ 0x30
 80085b8:	1e94      	subs	r4, r2, #2
 80085ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085be:	1c41      	adds	r1, r0, #1
 80085c0:	4623      	mov	r3, r4
 80085c2:	42ab      	cmp	r3, r5
 80085c4:	d30a      	bcc.n	80085dc <__exponent+0x5e>
 80085c6:	f10d 0309 	add.w	r3, sp, #9
 80085ca:	1a9b      	subs	r3, r3, r2
 80085cc:	42ac      	cmp	r4, r5
 80085ce:	bf88      	it	hi
 80085d0:	2300      	movhi	r3, #0
 80085d2:	3302      	adds	r3, #2
 80085d4:	4403      	add	r3, r0
 80085d6:	1a18      	subs	r0, r3, r0
 80085d8:	b003      	add	sp, #12
 80085da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80085e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80085e4:	e7ed      	b.n	80085c2 <__exponent+0x44>
 80085e6:	2330      	movs	r3, #48	@ 0x30
 80085e8:	3130      	adds	r1, #48	@ 0x30
 80085ea:	7083      	strb	r3, [r0, #2]
 80085ec:	70c1      	strb	r1, [r0, #3]
 80085ee:	1d03      	adds	r3, r0, #4
 80085f0:	e7f1      	b.n	80085d6 <__exponent+0x58>
	...

080085f4 <_printf_float>:
 80085f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	b08d      	sub	sp, #52	@ 0x34
 80085fa:	460c      	mov	r4, r1
 80085fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008600:	4616      	mov	r6, r2
 8008602:	461f      	mov	r7, r3
 8008604:	4605      	mov	r5, r0
 8008606:	f000 ff01 	bl	800940c <_localeconv_r>
 800860a:	6803      	ldr	r3, [r0, #0]
 800860c:	9304      	str	r3, [sp, #16]
 800860e:	4618      	mov	r0, r3
 8008610:	f7f7 fe4e 	bl	80002b0 <strlen>
 8008614:	2300      	movs	r3, #0
 8008616:	930a      	str	r3, [sp, #40]	@ 0x28
 8008618:	f8d8 3000 	ldr.w	r3, [r8]
 800861c:	9005      	str	r0, [sp, #20]
 800861e:	3307      	adds	r3, #7
 8008620:	f023 0307 	bic.w	r3, r3, #7
 8008624:	f103 0208 	add.w	r2, r3, #8
 8008628:	f894 a018 	ldrb.w	sl, [r4, #24]
 800862c:	f8d4 b000 	ldr.w	fp, [r4]
 8008630:	f8c8 2000 	str.w	r2, [r8]
 8008634:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008638:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800863c:	9307      	str	r3, [sp, #28]
 800863e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008642:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800864a:	4b9c      	ldr	r3, [pc, #624]	@ (80088bc <_printf_float+0x2c8>)
 800864c:	f04f 32ff 	mov.w	r2, #4294967295
 8008650:	f7f8 fa8c 	bl	8000b6c <__aeabi_dcmpun>
 8008654:	bb70      	cbnz	r0, 80086b4 <_printf_float+0xc0>
 8008656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800865a:	4b98      	ldr	r3, [pc, #608]	@ (80088bc <_printf_float+0x2c8>)
 800865c:	f04f 32ff 	mov.w	r2, #4294967295
 8008660:	f7f8 fa66 	bl	8000b30 <__aeabi_dcmple>
 8008664:	bb30      	cbnz	r0, 80086b4 <_printf_float+0xc0>
 8008666:	2200      	movs	r2, #0
 8008668:	2300      	movs	r3, #0
 800866a:	4640      	mov	r0, r8
 800866c:	4649      	mov	r1, r9
 800866e:	f7f8 fa55 	bl	8000b1c <__aeabi_dcmplt>
 8008672:	b110      	cbz	r0, 800867a <_printf_float+0x86>
 8008674:	232d      	movs	r3, #45	@ 0x2d
 8008676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800867a:	4a91      	ldr	r2, [pc, #580]	@ (80088c0 <_printf_float+0x2cc>)
 800867c:	4b91      	ldr	r3, [pc, #580]	@ (80088c4 <_printf_float+0x2d0>)
 800867e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008682:	bf94      	ite	ls
 8008684:	4690      	movls	r8, r2
 8008686:	4698      	movhi	r8, r3
 8008688:	2303      	movs	r3, #3
 800868a:	6123      	str	r3, [r4, #16]
 800868c:	f02b 0304 	bic.w	r3, fp, #4
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	f04f 0900 	mov.w	r9, #0
 8008696:	9700      	str	r7, [sp, #0]
 8008698:	4633      	mov	r3, r6
 800869a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800869c:	4621      	mov	r1, r4
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f9d2 	bl	8008a48 <_printf_common>
 80086a4:	3001      	adds	r0, #1
 80086a6:	f040 808d 	bne.w	80087c4 <_printf_float+0x1d0>
 80086aa:	f04f 30ff 	mov.w	r0, #4294967295
 80086ae:	b00d      	add	sp, #52	@ 0x34
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	4642      	mov	r2, r8
 80086b6:	464b      	mov	r3, r9
 80086b8:	4640      	mov	r0, r8
 80086ba:	4649      	mov	r1, r9
 80086bc:	f7f8 fa56 	bl	8000b6c <__aeabi_dcmpun>
 80086c0:	b140      	cbz	r0, 80086d4 <_printf_float+0xe0>
 80086c2:	464b      	mov	r3, r9
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bfbc      	itt	lt
 80086c8:	232d      	movlt	r3, #45	@ 0x2d
 80086ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80086ce:	4a7e      	ldr	r2, [pc, #504]	@ (80088c8 <_printf_float+0x2d4>)
 80086d0:	4b7e      	ldr	r3, [pc, #504]	@ (80088cc <_printf_float+0x2d8>)
 80086d2:	e7d4      	b.n	800867e <_printf_float+0x8a>
 80086d4:	6863      	ldr	r3, [r4, #4]
 80086d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80086da:	9206      	str	r2, [sp, #24]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	d13b      	bne.n	8008758 <_printf_float+0x164>
 80086e0:	2306      	movs	r3, #6
 80086e2:	6063      	str	r3, [r4, #4]
 80086e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80086e8:	2300      	movs	r3, #0
 80086ea:	6022      	str	r2, [r4, #0]
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80086f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80086f4:	ab09      	add	r3, sp, #36	@ 0x24
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	6861      	ldr	r1, [r4, #4]
 80086fa:	ec49 8b10 	vmov	d0, r8, r9
 80086fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008702:	4628      	mov	r0, r5
 8008704:	f7ff fed6 	bl	80084b4 <__cvt>
 8008708:	9b06      	ldr	r3, [sp, #24]
 800870a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800870c:	2b47      	cmp	r3, #71	@ 0x47
 800870e:	4680      	mov	r8, r0
 8008710:	d129      	bne.n	8008766 <_printf_float+0x172>
 8008712:	1cc8      	adds	r0, r1, #3
 8008714:	db02      	blt.n	800871c <_printf_float+0x128>
 8008716:	6863      	ldr	r3, [r4, #4]
 8008718:	4299      	cmp	r1, r3
 800871a:	dd41      	ble.n	80087a0 <_printf_float+0x1ac>
 800871c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008720:	fa5f fa8a 	uxtb.w	sl, sl
 8008724:	3901      	subs	r1, #1
 8008726:	4652      	mov	r2, sl
 8008728:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800872c:	9109      	str	r1, [sp, #36]	@ 0x24
 800872e:	f7ff ff26 	bl	800857e <__exponent>
 8008732:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008734:	1813      	adds	r3, r2, r0
 8008736:	2a01      	cmp	r2, #1
 8008738:	4681      	mov	r9, r0
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	dc02      	bgt.n	8008744 <_printf_float+0x150>
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	07d2      	lsls	r2, r2, #31
 8008742:	d501      	bpl.n	8008748 <_printf_float+0x154>
 8008744:	3301      	adds	r3, #1
 8008746:	6123      	str	r3, [r4, #16]
 8008748:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0a2      	beq.n	8008696 <_printf_float+0xa2>
 8008750:	232d      	movs	r3, #45	@ 0x2d
 8008752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008756:	e79e      	b.n	8008696 <_printf_float+0xa2>
 8008758:	9a06      	ldr	r2, [sp, #24]
 800875a:	2a47      	cmp	r2, #71	@ 0x47
 800875c:	d1c2      	bne.n	80086e4 <_printf_float+0xf0>
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1c0      	bne.n	80086e4 <_printf_float+0xf0>
 8008762:	2301      	movs	r3, #1
 8008764:	e7bd      	b.n	80086e2 <_printf_float+0xee>
 8008766:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800876a:	d9db      	bls.n	8008724 <_printf_float+0x130>
 800876c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008770:	d118      	bne.n	80087a4 <_printf_float+0x1b0>
 8008772:	2900      	cmp	r1, #0
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	dd0b      	ble.n	8008790 <_printf_float+0x19c>
 8008778:	6121      	str	r1, [r4, #16]
 800877a:	b913      	cbnz	r3, 8008782 <_printf_float+0x18e>
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	07d0      	lsls	r0, r2, #31
 8008780:	d502      	bpl.n	8008788 <_printf_float+0x194>
 8008782:	3301      	adds	r3, #1
 8008784:	440b      	add	r3, r1
 8008786:	6123      	str	r3, [r4, #16]
 8008788:	65a1      	str	r1, [r4, #88]	@ 0x58
 800878a:	f04f 0900 	mov.w	r9, #0
 800878e:	e7db      	b.n	8008748 <_printf_float+0x154>
 8008790:	b913      	cbnz	r3, 8008798 <_printf_float+0x1a4>
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	07d2      	lsls	r2, r2, #31
 8008796:	d501      	bpl.n	800879c <_printf_float+0x1a8>
 8008798:	3302      	adds	r3, #2
 800879a:	e7f4      	b.n	8008786 <_printf_float+0x192>
 800879c:	2301      	movs	r3, #1
 800879e:	e7f2      	b.n	8008786 <_printf_float+0x192>
 80087a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80087a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087a6:	4299      	cmp	r1, r3
 80087a8:	db05      	blt.n	80087b6 <_printf_float+0x1c2>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	6121      	str	r1, [r4, #16]
 80087ae:	07d8      	lsls	r0, r3, #31
 80087b0:	d5ea      	bpl.n	8008788 <_printf_float+0x194>
 80087b2:	1c4b      	adds	r3, r1, #1
 80087b4:	e7e7      	b.n	8008786 <_printf_float+0x192>
 80087b6:	2900      	cmp	r1, #0
 80087b8:	bfd4      	ite	le
 80087ba:	f1c1 0202 	rsble	r2, r1, #2
 80087be:	2201      	movgt	r2, #1
 80087c0:	4413      	add	r3, r2
 80087c2:	e7e0      	b.n	8008786 <_printf_float+0x192>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	055a      	lsls	r2, r3, #21
 80087c8:	d407      	bmi.n	80087da <_printf_float+0x1e6>
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	4642      	mov	r2, r8
 80087ce:	4631      	mov	r1, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	47b8      	blx	r7
 80087d4:	3001      	adds	r0, #1
 80087d6:	d12b      	bne.n	8008830 <_printf_float+0x23c>
 80087d8:	e767      	b.n	80086aa <_printf_float+0xb6>
 80087da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80087de:	f240 80dd 	bls.w	800899c <_printf_float+0x3a8>
 80087e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80087e6:	2200      	movs	r2, #0
 80087e8:	2300      	movs	r3, #0
 80087ea:	f7f8 f98d 	bl	8000b08 <__aeabi_dcmpeq>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d033      	beq.n	800885a <_printf_float+0x266>
 80087f2:	4a37      	ldr	r2, [pc, #220]	@ (80088d0 <_printf_float+0x2dc>)
 80087f4:	2301      	movs	r3, #1
 80087f6:	4631      	mov	r1, r6
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b8      	blx	r7
 80087fc:	3001      	adds	r0, #1
 80087fe:	f43f af54 	beq.w	80086aa <_printf_float+0xb6>
 8008802:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008806:	4543      	cmp	r3, r8
 8008808:	db02      	blt.n	8008810 <_printf_float+0x21c>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	07d8      	lsls	r0, r3, #31
 800880e:	d50f      	bpl.n	8008830 <_printf_float+0x23c>
 8008810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008814:	4631      	mov	r1, r6
 8008816:	4628      	mov	r0, r5
 8008818:	47b8      	blx	r7
 800881a:	3001      	adds	r0, #1
 800881c:	f43f af45 	beq.w	80086aa <_printf_float+0xb6>
 8008820:	f04f 0900 	mov.w	r9, #0
 8008824:	f108 38ff 	add.w	r8, r8, #4294967295
 8008828:	f104 0a1a 	add.w	sl, r4, #26
 800882c:	45c8      	cmp	r8, r9
 800882e:	dc09      	bgt.n	8008844 <_printf_float+0x250>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	079b      	lsls	r3, r3, #30
 8008834:	f100 8103 	bmi.w	8008a3e <_printf_float+0x44a>
 8008838:	68e0      	ldr	r0, [r4, #12]
 800883a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800883c:	4298      	cmp	r0, r3
 800883e:	bfb8      	it	lt
 8008840:	4618      	movlt	r0, r3
 8008842:	e734      	b.n	80086ae <_printf_float+0xba>
 8008844:	2301      	movs	r3, #1
 8008846:	4652      	mov	r2, sl
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	f43f af2b 	beq.w	80086aa <_printf_float+0xb6>
 8008854:	f109 0901 	add.w	r9, r9, #1
 8008858:	e7e8      	b.n	800882c <_printf_float+0x238>
 800885a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	dc39      	bgt.n	80088d4 <_printf_float+0x2e0>
 8008860:	4a1b      	ldr	r2, [pc, #108]	@ (80088d0 <_printf_float+0x2dc>)
 8008862:	2301      	movs	r3, #1
 8008864:	4631      	mov	r1, r6
 8008866:	4628      	mov	r0, r5
 8008868:	47b8      	blx	r7
 800886a:	3001      	adds	r0, #1
 800886c:	f43f af1d 	beq.w	80086aa <_printf_float+0xb6>
 8008870:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008874:	ea59 0303 	orrs.w	r3, r9, r3
 8008878:	d102      	bne.n	8008880 <_printf_float+0x28c>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	07d9      	lsls	r1, r3, #31
 800887e:	d5d7      	bpl.n	8008830 <_printf_float+0x23c>
 8008880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008884:	4631      	mov	r1, r6
 8008886:	4628      	mov	r0, r5
 8008888:	47b8      	blx	r7
 800888a:	3001      	adds	r0, #1
 800888c:	f43f af0d 	beq.w	80086aa <_printf_float+0xb6>
 8008890:	f04f 0a00 	mov.w	sl, #0
 8008894:	f104 0b1a 	add.w	fp, r4, #26
 8008898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800889a:	425b      	negs	r3, r3
 800889c:	4553      	cmp	r3, sl
 800889e:	dc01      	bgt.n	80088a4 <_printf_float+0x2b0>
 80088a0:	464b      	mov	r3, r9
 80088a2:	e793      	b.n	80087cc <_printf_float+0x1d8>
 80088a4:	2301      	movs	r3, #1
 80088a6:	465a      	mov	r2, fp
 80088a8:	4631      	mov	r1, r6
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b8      	blx	r7
 80088ae:	3001      	adds	r0, #1
 80088b0:	f43f aefb 	beq.w	80086aa <_printf_float+0xb6>
 80088b4:	f10a 0a01 	add.w	sl, sl, #1
 80088b8:	e7ee      	b.n	8008898 <_printf_float+0x2a4>
 80088ba:	bf00      	nop
 80088bc:	7fefffff 	.word	0x7fefffff
 80088c0:	0800bf68 	.word	0x0800bf68
 80088c4:	0800bf6c 	.word	0x0800bf6c
 80088c8:	0800bf70 	.word	0x0800bf70
 80088cc:	0800bf74 	.word	0x0800bf74
 80088d0:	0800bf78 	.word	0x0800bf78
 80088d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088da:	4553      	cmp	r3, sl
 80088dc:	bfa8      	it	ge
 80088de:	4653      	movge	r3, sl
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	4699      	mov	r9, r3
 80088e4:	dc36      	bgt.n	8008954 <_printf_float+0x360>
 80088e6:	f04f 0b00 	mov.w	fp, #0
 80088ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ee:	f104 021a 	add.w	r2, r4, #26
 80088f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088f4:	9306      	str	r3, [sp, #24]
 80088f6:	eba3 0309 	sub.w	r3, r3, r9
 80088fa:	455b      	cmp	r3, fp
 80088fc:	dc31      	bgt.n	8008962 <_printf_float+0x36e>
 80088fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008900:	459a      	cmp	sl, r3
 8008902:	dc3a      	bgt.n	800897a <_printf_float+0x386>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	07da      	lsls	r2, r3, #31
 8008908:	d437      	bmi.n	800897a <_printf_float+0x386>
 800890a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800890c:	ebaa 0903 	sub.w	r9, sl, r3
 8008910:	9b06      	ldr	r3, [sp, #24]
 8008912:	ebaa 0303 	sub.w	r3, sl, r3
 8008916:	4599      	cmp	r9, r3
 8008918:	bfa8      	it	ge
 800891a:	4699      	movge	r9, r3
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	dc33      	bgt.n	800898a <_printf_float+0x396>
 8008922:	f04f 0800 	mov.w	r8, #0
 8008926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800892a:	f104 0b1a 	add.w	fp, r4, #26
 800892e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008930:	ebaa 0303 	sub.w	r3, sl, r3
 8008934:	eba3 0309 	sub.w	r3, r3, r9
 8008938:	4543      	cmp	r3, r8
 800893a:	f77f af79 	ble.w	8008830 <_printf_float+0x23c>
 800893e:	2301      	movs	r3, #1
 8008940:	465a      	mov	r2, fp
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	47b8      	blx	r7
 8008948:	3001      	adds	r0, #1
 800894a:	f43f aeae 	beq.w	80086aa <_printf_float+0xb6>
 800894e:	f108 0801 	add.w	r8, r8, #1
 8008952:	e7ec      	b.n	800892e <_printf_float+0x33a>
 8008954:	4642      	mov	r2, r8
 8008956:	4631      	mov	r1, r6
 8008958:	4628      	mov	r0, r5
 800895a:	47b8      	blx	r7
 800895c:	3001      	adds	r0, #1
 800895e:	d1c2      	bne.n	80088e6 <_printf_float+0x2f2>
 8008960:	e6a3      	b.n	80086aa <_printf_float+0xb6>
 8008962:	2301      	movs	r3, #1
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	9206      	str	r2, [sp, #24]
 800896a:	47b8      	blx	r7
 800896c:	3001      	adds	r0, #1
 800896e:	f43f ae9c 	beq.w	80086aa <_printf_float+0xb6>
 8008972:	9a06      	ldr	r2, [sp, #24]
 8008974:	f10b 0b01 	add.w	fp, fp, #1
 8008978:	e7bb      	b.n	80088f2 <_printf_float+0x2fe>
 800897a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800897e:	4631      	mov	r1, r6
 8008980:	4628      	mov	r0, r5
 8008982:	47b8      	blx	r7
 8008984:	3001      	adds	r0, #1
 8008986:	d1c0      	bne.n	800890a <_printf_float+0x316>
 8008988:	e68f      	b.n	80086aa <_printf_float+0xb6>
 800898a:	9a06      	ldr	r2, [sp, #24]
 800898c:	464b      	mov	r3, r9
 800898e:	4442      	add	r2, r8
 8008990:	4631      	mov	r1, r6
 8008992:	4628      	mov	r0, r5
 8008994:	47b8      	blx	r7
 8008996:	3001      	adds	r0, #1
 8008998:	d1c3      	bne.n	8008922 <_printf_float+0x32e>
 800899a:	e686      	b.n	80086aa <_printf_float+0xb6>
 800899c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089a0:	f1ba 0f01 	cmp.w	sl, #1
 80089a4:	dc01      	bgt.n	80089aa <_printf_float+0x3b6>
 80089a6:	07db      	lsls	r3, r3, #31
 80089a8:	d536      	bpl.n	8008a18 <_printf_float+0x424>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4642      	mov	r2, r8
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	f43f ae78 	beq.w	80086aa <_printf_float+0xb6>
 80089ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089be:	4631      	mov	r1, r6
 80089c0:	4628      	mov	r0, r5
 80089c2:	47b8      	blx	r7
 80089c4:	3001      	adds	r0, #1
 80089c6:	f43f ae70 	beq.w	80086aa <_printf_float+0xb6>
 80089ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80089ce:	2200      	movs	r2, #0
 80089d0:	2300      	movs	r3, #0
 80089d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089d6:	f7f8 f897 	bl	8000b08 <__aeabi_dcmpeq>
 80089da:	b9c0      	cbnz	r0, 8008a0e <_printf_float+0x41a>
 80089dc:	4653      	mov	r3, sl
 80089de:	f108 0201 	add.w	r2, r8, #1
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b8      	blx	r7
 80089e8:	3001      	adds	r0, #1
 80089ea:	d10c      	bne.n	8008a06 <_printf_float+0x412>
 80089ec:	e65d      	b.n	80086aa <_printf_float+0xb6>
 80089ee:	2301      	movs	r3, #1
 80089f0:	465a      	mov	r2, fp
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	f43f ae56 	beq.w	80086aa <_printf_float+0xb6>
 80089fe:	f108 0801 	add.w	r8, r8, #1
 8008a02:	45d0      	cmp	r8, sl
 8008a04:	dbf3      	blt.n	80089ee <_printf_float+0x3fa>
 8008a06:	464b      	mov	r3, r9
 8008a08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a0c:	e6df      	b.n	80087ce <_printf_float+0x1da>
 8008a0e:	f04f 0800 	mov.w	r8, #0
 8008a12:	f104 0b1a 	add.w	fp, r4, #26
 8008a16:	e7f4      	b.n	8008a02 <_printf_float+0x40e>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4642      	mov	r2, r8
 8008a1c:	e7e1      	b.n	80089e2 <_printf_float+0x3ee>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	464a      	mov	r2, r9
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f ae3e 	beq.w	80086aa <_printf_float+0xb6>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	68e3      	ldr	r3, [r4, #12]
 8008a34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a36:	1a5b      	subs	r3, r3, r1
 8008a38:	4543      	cmp	r3, r8
 8008a3a:	dcf0      	bgt.n	8008a1e <_printf_float+0x42a>
 8008a3c:	e6fc      	b.n	8008838 <_printf_float+0x244>
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	f104 0919 	add.w	r9, r4, #25
 8008a46:	e7f4      	b.n	8008a32 <_printf_float+0x43e>

08008a48 <_printf_common>:
 8008a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a4c:	4616      	mov	r6, r2
 8008a4e:	4698      	mov	r8, r3
 8008a50:	688a      	ldr	r2, [r1, #8]
 8008a52:	690b      	ldr	r3, [r1, #16]
 8008a54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	bfb8      	it	lt
 8008a5c:	4613      	movlt	r3, r2
 8008a5e:	6033      	str	r3, [r6, #0]
 8008a60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a64:	4607      	mov	r7, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	b10a      	cbz	r2, 8008a6e <_printf_common+0x26>
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	6033      	str	r3, [r6, #0]
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	0699      	lsls	r1, r3, #26
 8008a72:	bf42      	ittt	mi
 8008a74:	6833      	ldrmi	r3, [r6, #0]
 8008a76:	3302      	addmi	r3, #2
 8008a78:	6033      	strmi	r3, [r6, #0]
 8008a7a:	6825      	ldr	r5, [r4, #0]
 8008a7c:	f015 0506 	ands.w	r5, r5, #6
 8008a80:	d106      	bne.n	8008a90 <_printf_common+0x48>
 8008a82:	f104 0a19 	add.w	sl, r4, #25
 8008a86:	68e3      	ldr	r3, [r4, #12]
 8008a88:	6832      	ldr	r2, [r6, #0]
 8008a8a:	1a9b      	subs	r3, r3, r2
 8008a8c:	42ab      	cmp	r3, r5
 8008a8e:	dc26      	bgt.n	8008ade <_printf_common+0x96>
 8008a90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a94:	6822      	ldr	r2, [r4, #0]
 8008a96:	3b00      	subs	r3, #0
 8008a98:	bf18      	it	ne
 8008a9a:	2301      	movne	r3, #1
 8008a9c:	0692      	lsls	r2, r2, #26
 8008a9e:	d42b      	bmi.n	8008af8 <_printf_common+0xb0>
 8008aa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008aa4:	4641      	mov	r1, r8
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	47c8      	blx	r9
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d01e      	beq.n	8008aec <_printf_common+0xa4>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	6922      	ldr	r2, [r4, #16]
 8008ab2:	f003 0306 	and.w	r3, r3, #6
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	bf02      	ittt	eq
 8008aba:	68e5      	ldreq	r5, [r4, #12]
 8008abc:	6833      	ldreq	r3, [r6, #0]
 8008abe:	1aed      	subeq	r5, r5, r3
 8008ac0:	68a3      	ldr	r3, [r4, #8]
 8008ac2:	bf0c      	ite	eq
 8008ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ac8:	2500      	movne	r5, #0
 8008aca:	4293      	cmp	r3, r2
 8008acc:	bfc4      	itt	gt
 8008ace:	1a9b      	subgt	r3, r3, r2
 8008ad0:	18ed      	addgt	r5, r5, r3
 8008ad2:	2600      	movs	r6, #0
 8008ad4:	341a      	adds	r4, #26
 8008ad6:	42b5      	cmp	r5, r6
 8008ad8:	d11a      	bne.n	8008b10 <_printf_common+0xc8>
 8008ada:	2000      	movs	r0, #0
 8008adc:	e008      	b.n	8008af0 <_printf_common+0xa8>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	4641      	mov	r1, r8
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	47c8      	blx	r9
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d103      	bne.n	8008af4 <_printf_common+0xac>
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af4:	3501      	adds	r5, #1
 8008af6:	e7c6      	b.n	8008a86 <_printf_common+0x3e>
 8008af8:	18e1      	adds	r1, r4, r3
 8008afa:	1c5a      	adds	r2, r3, #1
 8008afc:	2030      	movs	r0, #48	@ 0x30
 8008afe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b02:	4422      	add	r2, r4
 8008b04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b0c:	3302      	adds	r3, #2
 8008b0e:	e7c7      	b.n	8008aa0 <_printf_common+0x58>
 8008b10:	2301      	movs	r3, #1
 8008b12:	4622      	mov	r2, r4
 8008b14:	4641      	mov	r1, r8
 8008b16:	4638      	mov	r0, r7
 8008b18:	47c8      	blx	r9
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	d0e6      	beq.n	8008aec <_printf_common+0xa4>
 8008b1e:	3601      	adds	r6, #1
 8008b20:	e7d9      	b.n	8008ad6 <_printf_common+0x8e>
	...

08008b24 <_printf_i>:
 8008b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b28:	7e0f      	ldrb	r7, [r1, #24]
 8008b2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b2c:	2f78      	cmp	r7, #120	@ 0x78
 8008b2e:	4691      	mov	r9, r2
 8008b30:	4680      	mov	r8, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	469a      	mov	sl, r3
 8008b36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b3a:	d807      	bhi.n	8008b4c <_printf_i+0x28>
 8008b3c:	2f62      	cmp	r7, #98	@ 0x62
 8008b3e:	d80a      	bhi.n	8008b56 <_printf_i+0x32>
 8008b40:	2f00      	cmp	r7, #0
 8008b42:	f000 80d2 	beq.w	8008cea <_printf_i+0x1c6>
 8008b46:	2f58      	cmp	r7, #88	@ 0x58
 8008b48:	f000 80b9 	beq.w	8008cbe <_printf_i+0x19a>
 8008b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b54:	e03a      	b.n	8008bcc <_printf_i+0xa8>
 8008b56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b5a:	2b15      	cmp	r3, #21
 8008b5c:	d8f6      	bhi.n	8008b4c <_printf_i+0x28>
 8008b5e:	a101      	add	r1, pc, #4	@ (adr r1, 8008b64 <_printf_i+0x40>)
 8008b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b64:	08008bbd 	.word	0x08008bbd
 8008b68:	08008bd1 	.word	0x08008bd1
 8008b6c:	08008b4d 	.word	0x08008b4d
 8008b70:	08008b4d 	.word	0x08008b4d
 8008b74:	08008b4d 	.word	0x08008b4d
 8008b78:	08008b4d 	.word	0x08008b4d
 8008b7c:	08008bd1 	.word	0x08008bd1
 8008b80:	08008b4d 	.word	0x08008b4d
 8008b84:	08008b4d 	.word	0x08008b4d
 8008b88:	08008b4d 	.word	0x08008b4d
 8008b8c:	08008b4d 	.word	0x08008b4d
 8008b90:	08008cd1 	.word	0x08008cd1
 8008b94:	08008bfb 	.word	0x08008bfb
 8008b98:	08008c8b 	.word	0x08008c8b
 8008b9c:	08008b4d 	.word	0x08008b4d
 8008ba0:	08008b4d 	.word	0x08008b4d
 8008ba4:	08008cf3 	.word	0x08008cf3
 8008ba8:	08008b4d 	.word	0x08008b4d
 8008bac:	08008bfb 	.word	0x08008bfb
 8008bb0:	08008b4d 	.word	0x08008b4d
 8008bb4:	08008b4d 	.word	0x08008b4d
 8008bb8:	08008c93 	.word	0x08008c93
 8008bbc:	6833      	ldr	r3, [r6, #0]
 8008bbe:	1d1a      	adds	r2, r3, #4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6032      	str	r2, [r6, #0]
 8008bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e09d      	b.n	8008d0c <_printf_i+0x1e8>
 8008bd0:	6833      	ldr	r3, [r6, #0]
 8008bd2:	6820      	ldr	r0, [r4, #0]
 8008bd4:	1d19      	adds	r1, r3, #4
 8008bd6:	6031      	str	r1, [r6, #0]
 8008bd8:	0606      	lsls	r6, r0, #24
 8008bda:	d501      	bpl.n	8008be0 <_printf_i+0xbc>
 8008bdc:	681d      	ldr	r5, [r3, #0]
 8008bde:	e003      	b.n	8008be8 <_printf_i+0xc4>
 8008be0:	0645      	lsls	r5, r0, #25
 8008be2:	d5fb      	bpl.n	8008bdc <_printf_i+0xb8>
 8008be4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008be8:	2d00      	cmp	r5, #0
 8008bea:	da03      	bge.n	8008bf4 <_printf_i+0xd0>
 8008bec:	232d      	movs	r3, #45	@ 0x2d
 8008bee:	426d      	negs	r5, r5
 8008bf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bf4:	4859      	ldr	r0, [pc, #356]	@ (8008d5c <_printf_i+0x238>)
 8008bf6:	230a      	movs	r3, #10
 8008bf8:	e011      	b.n	8008c1e <_printf_i+0xfa>
 8008bfa:	6821      	ldr	r1, [r4, #0]
 8008bfc:	6833      	ldr	r3, [r6, #0]
 8008bfe:	0608      	lsls	r0, r1, #24
 8008c00:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c04:	d402      	bmi.n	8008c0c <_printf_i+0xe8>
 8008c06:	0649      	lsls	r1, r1, #25
 8008c08:	bf48      	it	mi
 8008c0a:	b2ad      	uxthmi	r5, r5
 8008c0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c0e:	4853      	ldr	r0, [pc, #332]	@ (8008d5c <_printf_i+0x238>)
 8008c10:	6033      	str	r3, [r6, #0]
 8008c12:	bf14      	ite	ne
 8008c14:	230a      	movne	r3, #10
 8008c16:	2308      	moveq	r3, #8
 8008c18:	2100      	movs	r1, #0
 8008c1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c1e:	6866      	ldr	r6, [r4, #4]
 8008c20:	60a6      	str	r6, [r4, #8]
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	bfa2      	ittt	ge
 8008c26:	6821      	ldrge	r1, [r4, #0]
 8008c28:	f021 0104 	bicge.w	r1, r1, #4
 8008c2c:	6021      	strge	r1, [r4, #0]
 8008c2e:	b90d      	cbnz	r5, 8008c34 <_printf_i+0x110>
 8008c30:	2e00      	cmp	r6, #0
 8008c32:	d04b      	beq.n	8008ccc <_printf_i+0x1a8>
 8008c34:	4616      	mov	r6, r2
 8008c36:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c3a:	fb03 5711 	mls	r7, r3, r1, r5
 8008c3e:	5dc7      	ldrb	r7, [r0, r7]
 8008c40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c44:	462f      	mov	r7, r5
 8008c46:	42bb      	cmp	r3, r7
 8008c48:	460d      	mov	r5, r1
 8008c4a:	d9f4      	bls.n	8008c36 <_printf_i+0x112>
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d10b      	bne.n	8008c68 <_printf_i+0x144>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	07df      	lsls	r7, r3, #31
 8008c54:	d508      	bpl.n	8008c68 <_printf_i+0x144>
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	6861      	ldr	r1, [r4, #4]
 8008c5a:	4299      	cmp	r1, r3
 8008c5c:	bfde      	ittt	le
 8008c5e:	2330      	movle	r3, #48	@ 0x30
 8008c60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c68:	1b92      	subs	r2, r2, r6
 8008c6a:	6122      	str	r2, [r4, #16]
 8008c6c:	f8cd a000 	str.w	sl, [sp]
 8008c70:	464b      	mov	r3, r9
 8008c72:	aa03      	add	r2, sp, #12
 8008c74:	4621      	mov	r1, r4
 8008c76:	4640      	mov	r0, r8
 8008c78:	f7ff fee6 	bl	8008a48 <_printf_common>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d14a      	bne.n	8008d16 <_printf_i+0x1f2>
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	b004      	add	sp, #16
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	f043 0320 	orr.w	r3, r3, #32
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	4833      	ldr	r0, [pc, #204]	@ (8008d60 <_printf_i+0x23c>)
 8008c94:	2778      	movs	r7, #120	@ 0x78
 8008c96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	6831      	ldr	r1, [r6, #0]
 8008c9e:	061f      	lsls	r7, r3, #24
 8008ca0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ca4:	d402      	bmi.n	8008cac <_printf_i+0x188>
 8008ca6:	065f      	lsls	r7, r3, #25
 8008ca8:	bf48      	it	mi
 8008caa:	b2ad      	uxthmi	r5, r5
 8008cac:	6031      	str	r1, [r6, #0]
 8008cae:	07d9      	lsls	r1, r3, #31
 8008cb0:	bf44      	itt	mi
 8008cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008cb6:	6023      	strmi	r3, [r4, #0]
 8008cb8:	b11d      	cbz	r5, 8008cc2 <_printf_i+0x19e>
 8008cba:	2310      	movs	r3, #16
 8008cbc:	e7ac      	b.n	8008c18 <_printf_i+0xf4>
 8008cbe:	4827      	ldr	r0, [pc, #156]	@ (8008d5c <_printf_i+0x238>)
 8008cc0:	e7e9      	b.n	8008c96 <_printf_i+0x172>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	f023 0320 	bic.w	r3, r3, #32
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	e7f6      	b.n	8008cba <_printf_i+0x196>
 8008ccc:	4616      	mov	r6, r2
 8008cce:	e7bd      	b.n	8008c4c <_printf_i+0x128>
 8008cd0:	6833      	ldr	r3, [r6, #0]
 8008cd2:	6825      	ldr	r5, [r4, #0]
 8008cd4:	6961      	ldr	r1, [r4, #20]
 8008cd6:	1d18      	adds	r0, r3, #4
 8008cd8:	6030      	str	r0, [r6, #0]
 8008cda:	062e      	lsls	r6, r5, #24
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	d501      	bpl.n	8008ce4 <_printf_i+0x1c0>
 8008ce0:	6019      	str	r1, [r3, #0]
 8008ce2:	e002      	b.n	8008cea <_printf_i+0x1c6>
 8008ce4:	0668      	lsls	r0, r5, #25
 8008ce6:	d5fb      	bpl.n	8008ce0 <_printf_i+0x1bc>
 8008ce8:	8019      	strh	r1, [r3, #0]
 8008cea:	2300      	movs	r3, #0
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	4616      	mov	r6, r2
 8008cf0:	e7bc      	b.n	8008c6c <_printf_i+0x148>
 8008cf2:	6833      	ldr	r3, [r6, #0]
 8008cf4:	1d1a      	adds	r2, r3, #4
 8008cf6:	6032      	str	r2, [r6, #0]
 8008cf8:	681e      	ldr	r6, [r3, #0]
 8008cfa:	6862      	ldr	r2, [r4, #4]
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7f7 fa86 	bl	8000210 <memchr>
 8008d04:	b108      	cbz	r0, 8008d0a <_printf_i+0x1e6>
 8008d06:	1b80      	subs	r0, r0, r6
 8008d08:	6060      	str	r0, [r4, #4]
 8008d0a:	6863      	ldr	r3, [r4, #4]
 8008d0c:	6123      	str	r3, [r4, #16]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d14:	e7aa      	b.n	8008c6c <_printf_i+0x148>
 8008d16:	6923      	ldr	r3, [r4, #16]
 8008d18:	4632      	mov	r2, r6
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	47d0      	blx	sl
 8008d20:	3001      	adds	r0, #1
 8008d22:	d0ad      	beq.n	8008c80 <_printf_i+0x15c>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	079b      	lsls	r3, r3, #30
 8008d28:	d413      	bmi.n	8008d52 <_printf_i+0x22e>
 8008d2a:	68e0      	ldr	r0, [r4, #12]
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	4298      	cmp	r0, r3
 8008d30:	bfb8      	it	lt
 8008d32:	4618      	movlt	r0, r3
 8008d34:	e7a6      	b.n	8008c84 <_printf_i+0x160>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4632      	mov	r2, r6
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	47d0      	blx	sl
 8008d40:	3001      	adds	r0, #1
 8008d42:	d09d      	beq.n	8008c80 <_printf_i+0x15c>
 8008d44:	3501      	adds	r5, #1
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	9903      	ldr	r1, [sp, #12]
 8008d4a:	1a5b      	subs	r3, r3, r1
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	dcf2      	bgt.n	8008d36 <_printf_i+0x212>
 8008d50:	e7eb      	b.n	8008d2a <_printf_i+0x206>
 8008d52:	2500      	movs	r5, #0
 8008d54:	f104 0619 	add.w	r6, r4, #25
 8008d58:	e7f5      	b.n	8008d46 <_printf_i+0x222>
 8008d5a:	bf00      	nop
 8008d5c:	0800bf7a 	.word	0x0800bf7a
 8008d60:	0800bf8b 	.word	0x0800bf8b

08008d64 <_scanf_float>:
 8008d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d68:	b087      	sub	sp, #28
 8008d6a:	4617      	mov	r7, r2
 8008d6c:	9303      	str	r3, [sp, #12]
 8008d6e:	688b      	ldr	r3, [r1, #8]
 8008d70:	1e5a      	subs	r2, r3, #1
 8008d72:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008d76:	bf81      	itttt	hi
 8008d78:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008d7c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008d80:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008d84:	608b      	strhi	r3, [r1, #8]
 8008d86:	680b      	ldr	r3, [r1, #0]
 8008d88:	460a      	mov	r2, r1
 8008d8a:	f04f 0500 	mov.w	r5, #0
 8008d8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008d92:	f842 3b1c 	str.w	r3, [r2], #28
 8008d96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d9a:	4680      	mov	r8, r0
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	bf98      	it	ls
 8008da0:	f04f 0b00 	movls.w	fp, #0
 8008da4:	9201      	str	r2, [sp, #4]
 8008da6:	4616      	mov	r6, r2
 8008da8:	46aa      	mov	sl, r5
 8008daa:	46a9      	mov	r9, r5
 8008dac:	9502      	str	r5, [sp, #8]
 8008dae:	68a2      	ldr	r2, [r4, #8]
 8008db0:	b152      	cbz	r2, 8008dc8 <_scanf_float+0x64>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b4e      	cmp	r3, #78	@ 0x4e
 8008db8:	d864      	bhi.n	8008e84 <_scanf_float+0x120>
 8008dba:	2b40      	cmp	r3, #64	@ 0x40
 8008dbc:	d83c      	bhi.n	8008e38 <_scanf_float+0xd4>
 8008dbe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008dc2:	b2c8      	uxtb	r0, r1
 8008dc4:	280e      	cmp	r0, #14
 8008dc6:	d93a      	bls.n	8008e3e <_scanf_float+0xda>
 8008dc8:	f1b9 0f00 	cmp.w	r9, #0
 8008dcc:	d003      	beq.n	8008dd6 <_scanf_float+0x72>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dda:	f1ba 0f01 	cmp.w	sl, #1
 8008dde:	f200 8117 	bhi.w	8009010 <_scanf_float+0x2ac>
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	429e      	cmp	r6, r3
 8008de6:	f200 8108 	bhi.w	8008ffa <_scanf_float+0x296>
 8008dea:	2001      	movs	r0, #1
 8008dec:	b007      	add	sp, #28
 8008dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008df6:	2a0d      	cmp	r2, #13
 8008df8:	d8e6      	bhi.n	8008dc8 <_scanf_float+0x64>
 8008dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8008e00 <_scanf_float+0x9c>)
 8008dfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e00:	08008f47 	.word	0x08008f47
 8008e04:	08008dc9 	.word	0x08008dc9
 8008e08:	08008dc9 	.word	0x08008dc9
 8008e0c:	08008dc9 	.word	0x08008dc9
 8008e10:	08008fa7 	.word	0x08008fa7
 8008e14:	08008f7f 	.word	0x08008f7f
 8008e18:	08008dc9 	.word	0x08008dc9
 8008e1c:	08008dc9 	.word	0x08008dc9
 8008e20:	08008f55 	.word	0x08008f55
 8008e24:	08008dc9 	.word	0x08008dc9
 8008e28:	08008dc9 	.word	0x08008dc9
 8008e2c:	08008dc9 	.word	0x08008dc9
 8008e30:	08008dc9 	.word	0x08008dc9
 8008e34:	08008f0d 	.word	0x08008f0d
 8008e38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008e3c:	e7db      	b.n	8008df6 <_scanf_float+0x92>
 8008e3e:	290e      	cmp	r1, #14
 8008e40:	d8c2      	bhi.n	8008dc8 <_scanf_float+0x64>
 8008e42:	a001      	add	r0, pc, #4	@ (adr r0, 8008e48 <_scanf_float+0xe4>)
 8008e44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e48:	08008efd 	.word	0x08008efd
 8008e4c:	08008dc9 	.word	0x08008dc9
 8008e50:	08008efd 	.word	0x08008efd
 8008e54:	08008f93 	.word	0x08008f93
 8008e58:	08008dc9 	.word	0x08008dc9
 8008e5c:	08008ea5 	.word	0x08008ea5
 8008e60:	08008ee3 	.word	0x08008ee3
 8008e64:	08008ee3 	.word	0x08008ee3
 8008e68:	08008ee3 	.word	0x08008ee3
 8008e6c:	08008ee3 	.word	0x08008ee3
 8008e70:	08008ee3 	.word	0x08008ee3
 8008e74:	08008ee3 	.word	0x08008ee3
 8008e78:	08008ee3 	.word	0x08008ee3
 8008e7c:	08008ee3 	.word	0x08008ee3
 8008e80:	08008ee3 	.word	0x08008ee3
 8008e84:	2b6e      	cmp	r3, #110	@ 0x6e
 8008e86:	d809      	bhi.n	8008e9c <_scanf_float+0x138>
 8008e88:	2b60      	cmp	r3, #96	@ 0x60
 8008e8a:	d8b2      	bhi.n	8008df2 <_scanf_float+0x8e>
 8008e8c:	2b54      	cmp	r3, #84	@ 0x54
 8008e8e:	d07b      	beq.n	8008f88 <_scanf_float+0x224>
 8008e90:	2b59      	cmp	r3, #89	@ 0x59
 8008e92:	d199      	bne.n	8008dc8 <_scanf_float+0x64>
 8008e94:	2d07      	cmp	r5, #7
 8008e96:	d197      	bne.n	8008dc8 <_scanf_float+0x64>
 8008e98:	2508      	movs	r5, #8
 8008e9a:	e02c      	b.n	8008ef6 <_scanf_float+0x192>
 8008e9c:	2b74      	cmp	r3, #116	@ 0x74
 8008e9e:	d073      	beq.n	8008f88 <_scanf_float+0x224>
 8008ea0:	2b79      	cmp	r3, #121	@ 0x79
 8008ea2:	e7f6      	b.n	8008e92 <_scanf_float+0x12e>
 8008ea4:	6821      	ldr	r1, [r4, #0]
 8008ea6:	05c8      	lsls	r0, r1, #23
 8008ea8:	d51b      	bpl.n	8008ee2 <_scanf_float+0x17e>
 8008eaa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008eae:	6021      	str	r1, [r4, #0]
 8008eb0:	f109 0901 	add.w	r9, r9, #1
 8008eb4:	f1bb 0f00 	cmp.w	fp, #0
 8008eb8:	d003      	beq.n	8008ec2 <_scanf_float+0x15e>
 8008eba:	3201      	adds	r2, #1
 8008ebc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ec0:	60a2      	str	r2, [r4, #8]
 8008ec2:	68a3      	ldr	r3, [r4, #8]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	60a3      	str	r3, [r4, #8]
 8008ec8:	6923      	ldr	r3, [r4, #16]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	6123      	str	r3, [r4, #16]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	f340 8087 	ble.w	8008fe8 <_scanf_float+0x284>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	3301      	adds	r3, #1
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	e765      	b.n	8008dae <_scanf_float+0x4a>
 8008ee2:	eb1a 0105 	adds.w	r1, sl, r5
 8008ee6:	f47f af6f 	bne.w	8008dc8 <_scanf_float+0x64>
 8008eea:	6822      	ldr	r2, [r4, #0]
 8008eec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008ef0:	6022      	str	r2, [r4, #0]
 8008ef2:	460d      	mov	r5, r1
 8008ef4:	468a      	mov	sl, r1
 8008ef6:	f806 3b01 	strb.w	r3, [r6], #1
 8008efa:	e7e2      	b.n	8008ec2 <_scanf_float+0x15e>
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	0610      	lsls	r0, r2, #24
 8008f00:	f57f af62 	bpl.w	8008dc8 <_scanf_float+0x64>
 8008f04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f08:	6022      	str	r2, [r4, #0]
 8008f0a:	e7f4      	b.n	8008ef6 <_scanf_float+0x192>
 8008f0c:	f1ba 0f00 	cmp.w	sl, #0
 8008f10:	d10e      	bne.n	8008f30 <_scanf_float+0x1cc>
 8008f12:	f1b9 0f00 	cmp.w	r9, #0
 8008f16:	d10e      	bne.n	8008f36 <_scanf_float+0x1d2>
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f1e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f22:	d108      	bne.n	8008f36 <_scanf_float+0x1d2>
 8008f24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f28:	6022      	str	r2, [r4, #0]
 8008f2a:	f04f 0a01 	mov.w	sl, #1
 8008f2e:	e7e2      	b.n	8008ef6 <_scanf_float+0x192>
 8008f30:	f1ba 0f02 	cmp.w	sl, #2
 8008f34:	d055      	beq.n	8008fe2 <_scanf_float+0x27e>
 8008f36:	2d01      	cmp	r5, #1
 8008f38:	d002      	beq.n	8008f40 <_scanf_float+0x1dc>
 8008f3a:	2d04      	cmp	r5, #4
 8008f3c:	f47f af44 	bne.w	8008dc8 <_scanf_float+0x64>
 8008f40:	3501      	adds	r5, #1
 8008f42:	b2ed      	uxtb	r5, r5
 8008f44:	e7d7      	b.n	8008ef6 <_scanf_float+0x192>
 8008f46:	f1ba 0f01 	cmp.w	sl, #1
 8008f4a:	f47f af3d 	bne.w	8008dc8 <_scanf_float+0x64>
 8008f4e:	f04f 0a02 	mov.w	sl, #2
 8008f52:	e7d0      	b.n	8008ef6 <_scanf_float+0x192>
 8008f54:	b97d      	cbnz	r5, 8008f76 <_scanf_float+0x212>
 8008f56:	f1b9 0f00 	cmp.w	r9, #0
 8008f5a:	f47f af38 	bne.w	8008dce <_scanf_float+0x6a>
 8008f5e:	6822      	ldr	r2, [r4, #0]
 8008f60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f68:	f040 8108 	bne.w	800917c <_scanf_float+0x418>
 8008f6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f70:	6022      	str	r2, [r4, #0]
 8008f72:	2501      	movs	r5, #1
 8008f74:	e7bf      	b.n	8008ef6 <_scanf_float+0x192>
 8008f76:	2d03      	cmp	r5, #3
 8008f78:	d0e2      	beq.n	8008f40 <_scanf_float+0x1dc>
 8008f7a:	2d05      	cmp	r5, #5
 8008f7c:	e7de      	b.n	8008f3c <_scanf_float+0x1d8>
 8008f7e:	2d02      	cmp	r5, #2
 8008f80:	f47f af22 	bne.w	8008dc8 <_scanf_float+0x64>
 8008f84:	2503      	movs	r5, #3
 8008f86:	e7b6      	b.n	8008ef6 <_scanf_float+0x192>
 8008f88:	2d06      	cmp	r5, #6
 8008f8a:	f47f af1d 	bne.w	8008dc8 <_scanf_float+0x64>
 8008f8e:	2507      	movs	r5, #7
 8008f90:	e7b1      	b.n	8008ef6 <_scanf_float+0x192>
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	0591      	lsls	r1, r2, #22
 8008f96:	f57f af17 	bpl.w	8008dc8 <_scanf_float+0x64>
 8008f9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008f9e:	6022      	str	r2, [r4, #0]
 8008fa0:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fa4:	e7a7      	b.n	8008ef6 <_scanf_float+0x192>
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008fac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008fb0:	d006      	beq.n	8008fc0 <_scanf_float+0x25c>
 8008fb2:	0550      	lsls	r0, r2, #21
 8008fb4:	f57f af08 	bpl.w	8008dc8 <_scanf_float+0x64>
 8008fb8:	f1b9 0f00 	cmp.w	r9, #0
 8008fbc:	f000 80de 	beq.w	800917c <_scanf_float+0x418>
 8008fc0:	0591      	lsls	r1, r2, #22
 8008fc2:	bf58      	it	pl
 8008fc4:	9902      	ldrpl	r1, [sp, #8]
 8008fc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008fca:	bf58      	it	pl
 8008fcc:	eba9 0101 	subpl.w	r1, r9, r1
 8008fd0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008fd4:	bf58      	it	pl
 8008fd6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008fda:	6022      	str	r2, [r4, #0]
 8008fdc:	f04f 0900 	mov.w	r9, #0
 8008fe0:	e789      	b.n	8008ef6 <_scanf_float+0x192>
 8008fe2:	f04f 0a03 	mov.w	sl, #3
 8008fe6:	e786      	b.n	8008ef6 <_scanf_float+0x192>
 8008fe8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008fec:	4639      	mov	r1, r7
 8008fee:	4640      	mov	r0, r8
 8008ff0:	4798      	blx	r3
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	f43f aedb 	beq.w	8008dae <_scanf_float+0x4a>
 8008ff8:	e6e6      	b.n	8008dc8 <_scanf_float+0x64>
 8008ffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ffe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009002:	463a      	mov	r2, r7
 8009004:	4640      	mov	r0, r8
 8009006:	4798      	blx	r3
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	3b01      	subs	r3, #1
 800900c:	6123      	str	r3, [r4, #16]
 800900e:	e6e8      	b.n	8008de2 <_scanf_float+0x7e>
 8009010:	1e6b      	subs	r3, r5, #1
 8009012:	2b06      	cmp	r3, #6
 8009014:	d824      	bhi.n	8009060 <_scanf_float+0x2fc>
 8009016:	2d02      	cmp	r5, #2
 8009018:	d836      	bhi.n	8009088 <_scanf_float+0x324>
 800901a:	9b01      	ldr	r3, [sp, #4]
 800901c:	429e      	cmp	r6, r3
 800901e:	f67f aee4 	bls.w	8008dea <_scanf_float+0x86>
 8009022:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009026:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800902a:	463a      	mov	r2, r7
 800902c:	4640      	mov	r0, r8
 800902e:	4798      	blx	r3
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	3b01      	subs	r3, #1
 8009034:	6123      	str	r3, [r4, #16]
 8009036:	e7f0      	b.n	800901a <_scanf_float+0x2b6>
 8009038:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800903c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009040:	463a      	mov	r2, r7
 8009042:	4640      	mov	r0, r8
 8009044:	4798      	blx	r3
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	3b01      	subs	r3, #1
 800904a:	6123      	str	r3, [r4, #16]
 800904c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009050:	fa5f fa8a 	uxtb.w	sl, sl
 8009054:	f1ba 0f02 	cmp.w	sl, #2
 8009058:	d1ee      	bne.n	8009038 <_scanf_float+0x2d4>
 800905a:	3d03      	subs	r5, #3
 800905c:	b2ed      	uxtb	r5, r5
 800905e:	1b76      	subs	r6, r6, r5
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	05da      	lsls	r2, r3, #23
 8009064:	d530      	bpl.n	80090c8 <_scanf_float+0x364>
 8009066:	055b      	lsls	r3, r3, #21
 8009068:	d511      	bpl.n	800908e <_scanf_float+0x32a>
 800906a:	9b01      	ldr	r3, [sp, #4]
 800906c:	429e      	cmp	r6, r3
 800906e:	f67f aebc 	bls.w	8008dea <_scanf_float+0x86>
 8009072:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009076:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800907a:	463a      	mov	r2, r7
 800907c:	4640      	mov	r0, r8
 800907e:	4798      	blx	r3
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	3b01      	subs	r3, #1
 8009084:	6123      	str	r3, [r4, #16]
 8009086:	e7f0      	b.n	800906a <_scanf_float+0x306>
 8009088:	46aa      	mov	sl, r5
 800908a:	46b3      	mov	fp, r6
 800908c:	e7de      	b.n	800904c <_scanf_float+0x2e8>
 800908e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	2965      	cmp	r1, #101	@ 0x65
 8009096:	f103 33ff 	add.w	r3, r3, #4294967295
 800909a:	f106 35ff 	add.w	r5, r6, #4294967295
 800909e:	6123      	str	r3, [r4, #16]
 80090a0:	d00c      	beq.n	80090bc <_scanf_float+0x358>
 80090a2:	2945      	cmp	r1, #69	@ 0x45
 80090a4:	d00a      	beq.n	80090bc <_scanf_float+0x358>
 80090a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090aa:	463a      	mov	r2, r7
 80090ac:	4640      	mov	r0, r8
 80090ae:	4798      	blx	r3
 80090b0:	6923      	ldr	r3, [r4, #16]
 80090b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	1eb5      	subs	r5, r6, #2
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090c0:	463a      	mov	r2, r7
 80090c2:	4640      	mov	r0, r8
 80090c4:	4798      	blx	r3
 80090c6:	462e      	mov	r6, r5
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	f012 0210 	ands.w	r2, r2, #16
 80090ce:	d001      	beq.n	80090d4 <_scanf_float+0x370>
 80090d0:	2000      	movs	r0, #0
 80090d2:	e68b      	b.n	8008dec <_scanf_float+0x88>
 80090d4:	7032      	strb	r2, [r6, #0]
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80090dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090e0:	d11c      	bne.n	800911c <_scanf_float+0x3b8>
 80090e2:	9b02      	ldr	r3, [sp, #8]
 80090e4:	454b      	cmp	r3, r9
 80090e6:	eba3 0209 	sub.w	r2, r3, r9
 80090ea:	d123      	bne.n	8009134 <_scanf_float+0x3d0>
 80090ec:	9901      	ldr	r1, [sp, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	4640      	mov	r0, r8
 80090f2:	f7ff f9d9 	bl	80084a8 <_strtod_r>
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	6821      	ldr	r1, [r4, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f011 0f02 	tst.w	r1, #2
 8009100:	ec57 6b10 	vmov	r6, r7, d0
 8009104:	f103 0204 	add.w	r2, r3, #4
 8009108:	d01f      	beq.n	800914a <_scanf_float+0x3e6>
 800910a:	9903      	ldr	r1, [sp, #12]
 800910c:	600a      	str	r2, [r1, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	e9c3 6700 	strd	r6, r7, [r3]
 8009114:	68e3      	ldr	r3, [r4, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60e3      	str	r3, [r4, #12]
 800911a:	e7d9      	b.n	80090d0 <_scanf_float+0x36c>
 800911c:	9b04      	ldr	r3, [sp, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0e4      	beq.n	80090ec <_scanf_float+0x388>
 8009122:	9905      	ldr	r1, [sp, #20]
 8009124:	230a      	movs	r3, #10
 8009126:	3101      	adds	r1, #1
 8009128:	4640      	mov	r0, r8
 800912a:	f002 f923 	bl	800b374 <_strtol_r>
 800912e:	9b04      	ldr	r3, [sp, #16]
 8009130:	9e05      	ldr	r6, [sp, #20]
 8009132:	1ac2      	subs	r2, r0, r3
 8009134:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009138:	429e      	cmp	r6, r3
 800913a:	bf28      	it	cs
 800913c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009140:	4910      	ldr	r1, [pc, #64]	@ (8009184 <_scanf_float+0x420>)
 8009142:	4630      	mov	r0, r6
 8009144:	f000 f8e4 	bl	8009310 <siprintf>
 8009148:	e7d0      	b.n	80090ec <_scanf_float+0x388>
 800914a:	f011 0f04 	tst.w	r1, #4
 800914e:	9903      	ldr	r1, [sp, #12]
 8009150:	600a      	str	r2, [r1, #0]
 8009152:	d1dc      	bne.n	800910e <_scanf_float+0x3aa>
 8009154:	681d      	ldr	r5, [r3, #0]
 8009156:	4632      	mov	r2, r6
 8009158:	463b      	mov	r3, r7
 800915a:	4630      	mov	r0, r6
 800915c:	4639      	mov	r1, r7
 800915e:	f7f7 fd05 	bl	8000b6c <__aeabi_dcmpun>
 8009162:	b128      	cbz	r0, 8009170 <_scanf_float+0x40c>
 8009164:	4808      	ldr	r0, [pc, #32]	@ (8009188 <_scanf_float+0x424>)
 8009166:	f000 f9ef 	bl	8009548 <nanf>
 800916a:	ed85 0a00 	vstr	s0, [r5]
 800916e:	e7d1      	b.n	8009114 <_scanf_float+0x3b0>
 8009170:	4630      	mov	r0, r6
 8009172:	4639      	mov	r1, r7
 8009174:	f7f7 fd58 	bl	8000c28 <__aeabi_d2f>
 8009178:	6028      	str	r0, [r5, #0]
 800917a:	e7cb      	b.n	8009114 <_scanf_float+0x3b0>
 800917c:	f04f 0900 	mov.w	r9, #0
 8009180:	e629      	b.n	8008dd6 <_scanf_float+0x72>
 8009182:	bf00      	nop
 8009184:	0800bf9c 	.word	0x0800bf9c
 8009188:	0800c33d 	.word	0x0800c33d

0800918c <std>:
 800918c:	2300      	movs	r3, #0
 800918e:	b510      	push	{r4, lr}
 8009190:	4604      	mov	r4, r0
 8009192:	e9c0 3300 	strd	r3, r3, [r0]
 8009196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800919a:	6083      	str	r3, [r0, #8]
 800919c:	8181      	strh	r1, [r0, #12]
 800919e:	6643      	str	r3, [r0, #100]	@ 0x64
 80091a0:	81c2      	strh	r2, [r0, #14]
 80091a2:	6183      	str	r3, [r0, #24]
 80091a4:	4619      	mov	r1, r3
 80091a6:	2208      	movs	r2, #8
 80091a8:	305c      	adds	r0, #92	@ 0x5c
 80091aa:	f000 f914 	bl	80093d6 <memset>
 80091ae:	4b0d      	ldr	r3, [pc, #52]	@ (80091e4 <std+0x58>)
 80091b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80091b2:	4b0d      	ldr	r3, [pc, #52]	@ (80091e8 <std+0x5c>)
 80091b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091b6:	4b0d      	ldr	r3, [pc, #52]	@ (80091ec <std+0x60>)
 80091b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091ba:	4b0d      	ldr	r3, [pc, #52]	@ (80091f0 <std+0x64>)
 80091bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80091be:	4b0d      	ldr	r3, [pc, #52]	@ (80091f4 <std+0x68>)
 80091c0:	6224      	str	r4, [r4, #32]
 80091c2:	429c      	cmp	r4, r3
 80091c4:	d006      	beq.n	80091d4 <std+0x48>
 80091c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80091ca:	4294      	cmp	r4, r2
 80091cc:	d002      	beq.n	80091d4 <std+0x48>
 80091ce:	33d0      	adds	r3, #208	@ 0xd0
 80091d0:	429c      	cmp	r4, r3
 80091d2:	d105      	bne.n	80091e0 <std+0x54>
 80091d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80091d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091dc:	f000 b99a 	b.w	8009514 <__retarget_lock_init_recursive>
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	bf00      	nop
 80091e4:	08009351 	.word	0x08009351
 80091e8:	08009373 	.word	0x08009373
 80091ec:	080093ab 	.word	0x080093ab
 80091f0:	080093cf 	.word	0x080093cf
 80091f4:	2000083c 	.word	0x2000083c

080091f8 <stdio_exit_handler>:
 80091f8:	4a02      	ldr	r2, [pc, #8]	@ (8009204 <stdio_exit_handler+0xc>)
 80091fa:	4903      	ldr	r1, [pc, #12]	@ (8009208 <stdio_exit_handler+0x10>)
 80091fc:	4803      	ldr	r0, [pc, #12]	@ (800920c <stdio_exit_handler+0x14>)
 80091fe:	f000 b869 	b.w	80092d4 <_fwalk_sglue>
 8009202:	bf00      	nop
 8009204:	20000010 	.word	0x20000010
 8009208:	0800b749 	.word	0x0800b749
 800920c:	2000018c 	.word	0x2000018c

08009210 <cleanup_stdio>:
 8009210:	6841      	ldr	r1, [r0, #4]
 8009212:	4b0c      	ldr	r3, [pc, #48]	@ (8009244 <cleanup_stdio+0x34>)
 8009214:	4299      	cmp	r1, r3
 8009216:	b510      	push	{r4, lr}
 8009218:	4604      	mov	r4, r0
 800921a:	d001      	beq.n	8009220 <cleanup_stdio+0x10>
 800921c:	f002 fa94 	bl	800b748 <_fflush_r>
 8009220:	68a1      	ldr	r1, [r4, #8]
 8009222:	4b09      	ldr	r3, [pc, #36]	@ (8009248 <cleanup_stdio+0x38>)
 8009224:	4299      	cmp	r1, r3
 8009226:	d002      	beq.n	800922e <cleanup_stdio+0x1e>
 8009228:	4620      	mov	r0, r4
 800922a:	f002 fa8d 	bl	800b748 <_fflush_r>
 800922e:	68e1      	ldr	r1, [r4, #12]
 8009230:	4b06      	ldr	r3, [pc, #24]	@ (800924c <cleanup_stdio+0x3c>)
 8009232:	4299      	cmp	r1, r3
 8009234:	d004      	beq.n	8009240 <cleanup_stdio+0x30>
 8009236:	4620      	mov	r0, r4
 8009238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800923c:	f002 ba84 	b.w	800b748 <_fflush_r>
 8009240:	bd10      	pop	{r4, pc}
 8009242:	bf00      	nop
 8009244:	2000083c 	.word	0x2000083c
 8009248:	200008a4 	.word	0x200008a4
 800924c:	2000090c 	.word	0x2000090c

08009250 <global_stdio_init.part.0>:
 8009250:	b510      	push	{r4, lr}
 8009252:	4b0b      	ldr	r3, [pc, #44]	@ (8009280 <global_stdio_init.part.0+0x30>)
 8009254:	4c0b      	ldr	r4, [pc, #44]	@ (8009284 <global_stdio_init.part.0+0x34>)
 8009256:	4a0c      	ldr	r2, [pc, #48]	@ (8009288 <global_stdio_init.part.0+0x38>)
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	4620      	mov	r0, r4
 800925c:	2200      	movs	r2, #0
 800925e:	2104      	movs	r1, #4
 8009260:	f7ff ff94 	bl	800918c <std>
 8009264:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009268:	2201      	movs	r2, #1
 800926a:	2109      	movs	r1, #9
 800926c:	f7ff ff8e 	bl	800918c <std>
 8009270:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009274:	2202      	movs	r2, #2
 8009276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800927a:	2112      	movs	r1, #18
 800927c:	f7ff bf86 	b.w	800918c <std>
 8009280:	20000974 	.word	0x20000974
 8009284:	2000083c 	.word	0x2000083c
 8009288:	080091f9 	.word	0x080091f9

0800928c <__sfp_lock_acquire>:
 800928c:	4801      	ldr	r0, [pc, #4]	@ (8009294 <__sfp_lock_acquire+0x8>)
 800928e:	f000 b942 	b.w	8009516 <__retarget_lock_acquire_recursive>
 8009292:	bf00      	nop
 8009294:	2000097d 	.word	0x2000097d

08009298 <__sfp_lock_release>:
 8009298:	4801      	ldr	r0, [pc, #4]	@ (80092a0 <__sfp_lock_release+0x8>)
 800929a:	f000 b93d 	b.w	8009518 <__retarget_lock_release_recursive>
 800929e:	bf00      	nop
 80092a0:	2000097d 	.word	0x2000097d

080092a4 <__sinit>:
 80092a4:	b510      	push	{r4, lr}
 80092a6:	4604      	mov	r4, r0
 80092a8:	f7ff fff0 	bl	800928c <__sfp_lock_acquire>
 80092ac:	6a23      	ldr	r3, [r4, #32]
 80092ae:	b11b      	cbz	r3, 80092b8 <__sinit+0x14>
 80092b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092b4:	f7ff bff0 	b.w	8009298 <__sfp_lock_release>
 80092b8:	4b04      	ldr	r3, [pc, #16]	@ (80092cc <__sinit+0x28>)
 80092ba:	6223      	str	r3, [r4, #32]
 80092bc:	4b04      	ldr	r3, [pc, #16]	@ (80092d0 <__sinit+0x2c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1f5      	bne.n	80092b0 <__sinit+0xc>
 80092c4:	f7ff ffc4 	bl	8009250 <global_stdio_init.part.0>
 80092c8:	e7f2      	b.n	80092b0 <__sinit+0xc>
 80092ca:	bf00      	nop
 80092cc:	08009211 	.word	0x08009211
 80092d0:	20000974 	.word	0x20000974

080092d4 <_fwalk_sglue>:
 80092d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d8:	4607      	mov	r7, r0
 80092da:	4688      	mov	r8, r1
 80092dc:	4614      	mov	r4, r2
 80092de:	2600      	movs	r6, #0
 80092e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092e4:	f1b9 0901 	subs.w	r9, r9, #1
 80092e8:	d505      	bpl.n	80092f6 <_fwalk_sglue+0x22>
 80092ea:	6824      	ldr	r4, [r4, #0]
 80092ec:	2c00      	cmp	r4, #0
 80092ee:	d1f7      	bne.n	80092e0 <_fwalk_sglue+0xc>
 80092f0:	4630      	mov	r0, r6
 80092f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f6:	89ab      	ldrh	r3, [r5, #12]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d907      	bls.n	800930c <_fwalk_sglue+0x38>
 80092fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009300:	3301      	adds	r3, #1
 8009302:	d003      	beq.n	800930c <_fwalk_sglue+0x38>
 8009304:	4629      	mov	r1, r5
 8009306:	4638      	mov	r0, r7
 8009308:	47c0      	blx	r8
 800930a:	4306      	orrs	r6, r0
 800930c:	3568      	adds	r5, #104	@ 0x68
 800930e:	e7e9      	b.n	80092e4 <_fwalk_sglue+0x10>

08009310 <siprintf>:
 8009310:	b40e      	push	{r1, r2, r3}
 8009312:	b500      	push	{lr}
 8009314:	b09c      	sub	sp, #112	@ 0x70
 8009316:	ab1d      	add	r3, sp, #116	@ 0x74
 8009318:	9002      	str	r0, [sp, #8]
 800931a:	9006      	str	r0, [sp, #24]
 800931c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009320:	4809      	ldr	r0, [pc, #36]	@ (8009348 <siprintf+0x38>)
 8009322:	9107      	str	r1, [sp, #28]
 8009324:	9104      	str	r1, [sp, #16]
 8009326:	4909      	ldr	r1, [pc, #36]	@ (800934c <siprintf+0x3c>)
 8009328:	f853 2b04 	ldr.w	r2, [r3], #4
 800932c:	9105      	str	r1, [sp, #20]
 800932e:	6800      	ldr	r0, [r0, #0]
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	a902      	add	r1, sp, #8
 8009334:	f002 f888 	bl	800b448 <_svfiprintf_r>
 8009338:	9b02      	ldr	r3, [sp, #8]
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	b01c      	add	sp, #112	@ 0x70
 8009340:	f85d eb04 	ldr.w	lr, [sp], #4
 8009344:	b003      	add	sp, #12
 8009346:	4770      	bx	lr
 8009348:	20000188 	.word	0x20000188
 800934c:	ffff0208 	.word	0xffff0208

08009350 <__sread>:
 8009350:	b510      	push	{r4, lr}
 8009352:	460c      	mov	r4, r1
 8009354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009358:	f000 f87e 	bl	8009458 <_read_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	bfab      	itete	ge
 8009360:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009362:	89a3      	ldrhlt	r3, [r4, #12]
 8009364:	181b      	addge	r3, r3, r0
 8009366:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800936a:	bfac      	ite	ge
 800936c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800936e:	81a3      	strhlt	r3, [r4, #12]
 8009370:	bd10      	pop	{r4, pc}

08009372 <__swrite>:
 8009372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009376:	461f      	mov	r7, r3
 8009378:	898b      	ldrh	r3, [r1, #12]
 800937a:	05db      	lsls	r3, r3, #23
 800937c:	4605      	mov	r5, r0
 800937e:	460c      	mov	r4, r1
 8009380:	4616      	mov	r6, r2
 8009382:	d505      	bpl.n	8009390 <__swrite+0x1e>
 8009384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009388:	2302      	movs	r3, #2
 800938a:	2200      	movs	r2, #0
 800938c:	f000 f852 	bl	8009434 <_lseek_r>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009396:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	4632      	mov	r2, r6
 800939e:	463b      	mov	r3, r7
 80093a0:	4628      	mov	r0, r5
 80093a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093a6:	f000 b879 	b.w	800949c <_write_r>

080093aa <__sseek>:
 80093aa:	b510      	push	{r4, lr}
 80093ac:	460c      	mov	r4, r1
 80093ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b2:	f000 f83f 	bl	8009434 <_lseek_r>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	bf15      	itete	ne
 80093bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093c6:	81a3      	strheq	r3, [r4, #12]
 80093c8:	bf18      	it	ne
 80093ca:	81a3      	strhne	r3, [r4, #12]
 80093cc:	bd10      	pop	{r4, pc}

080093ce <__sclose>:
 80093ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d2:	f000 b81f 	b.w	8009414 <_close_r>

080093d6 <memset>:
 80093d6:	4402      	add	r2, r0
 80093d8:	4603      	mov	r3, r0
 80093da:	4293      	cmp	r3, r2
 80093dc:	d100      	bne.n	80093e0 <memset+0xa>
 80093de:	4770      	bx	lr
 80093e0:	f803 1b01 	strb.w	r1, [r3], #1
 80093e4:	e7f9      	b.n	80093da <memset+0x4>

080093e6 <strncmp>:
 80093e6:	b510      	push	{r4, lr}
 80093e8:	b16a      	cbz	r2, 8009406 <strncmp+0x20>
 80093ea:	3901      	subs	r1, #1
 80093ec:	1884      	adds	r4, r0, r2
 80093ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d103      	bne.n	8009402 <strncmp+0x1c>
 80093fa:	42a0      	cmp	r0, r4
 80093fc:	d001      	beq.n	8009402 <strncmp+0x1c>
 80093fe:	2a00      	cmp	r2, #0
 8009400:	d1f5      	bne.n	80093ee <strncmp+0x8>
 8009402:	1ad0      	subs	r0, r2, r3
 8009404:	bd10      	pop	{r4, pc}
 8009406:	4610      	mov	r0, r2
 8009408:	e7fc      	b.n	8009404 <strncmp+0x1e>
	...

0800940c <_localeconv_r>:
 800940c:	4800      	ldr	r0, [pc, #0]	@ (8009410 <_localeconv_r+0x4>)
 800940e:	4770      	bx	lr
 8009410:	2000010c 	.word	0x2000010c

08009414 <_close_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4d06      	ldr	r5, [pc, #24]	@ (8009430 <_close_r+0x1c>)
 8009418:	2300      	movs	r3, #0
 800941a:	4604      	mov	r4, r0
 800941c:	4608      	mov	r0, r1
 800941e:	602b      	str	r3, [r5, #0]
 8009420:	f7f9 fe56 	bl	80030d0 <_close>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d102      	bne.n	800942e <_close_r+0x1a>
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	b103      	cbz	r3, 800942e <_close_r+0x1a>
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	20000978 	.word	0x20000978

08009434 <_lseek_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4d07      	ldr	r5, [pc, #28]	@ (8009454 <_lseek_r+0x20>)
 8009438:	4604      	mov	r4, r0
 800943a:	4608      	mov	r0, r1
 800943c:	4611      	mov	r1, r2
 800943e:	2200      	movs	r2, #0
 8009440:	602a      	str	r2, [r5, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	f7f9 fe6b 	bl	800311e <_lseek>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_lseek_r+0x1e>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_lseek_r+0x1e>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	20000978 	.word	0x20000978

08009458 <_read_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4d07      	ldr	r5, [pc, #28]	@ (8009478 <_read_r+0x20>)
 800945c:	4604      	mov	r4, r0
 800945e:	4608      	mov	r0, r1
 8009460:	4611      	mov	r1, r2
 8009462:	2200      	movs	r2, #0
 8009464:	602a      	str	r2, [r5, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	f7f9 fdf9 	bl	800305e <_read>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_read_r+0x1e>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_read_r+0x1e>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	20000978 	.word	0x20000978

0800947c <_sbrk_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d06      	ldr	r5, [pc, #24]	@ (8009498 <_sbrk_r+0x1c>)
 8009480:	2300      	movs	r3, #0
 8009482:	4604      	mov	r4, r0
 8009484:	4608      	mov	r0, r1
 8009486:	602b      	str	r3, [r5, #0]
 8009488:	f7f9 fe56 	bl	8003138 <_sbrk>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_sbrk_r+0x1a>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	b103      	cbz	r3, 8009496 <_sbrk_r+0x1a>
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	20000978 	.word	0x20000978

0800949c <_write_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d07      	ldr	r5, [pc, #28]	@ (80094bc <_write_r+0x20>)
 80094a0:	4604      	mov	r4, r0
 80094a2:	4608      	mov	r0, r1
 80094a4:	4611      	mov	r1, r2
 80094a6:	2200      	movs	r2, #0
 80094a8:	602a      	str	r2, [r5, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f7f9 fdf4 	bl	8003098 <_write>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_write_r+0x1e>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_write_r+0x1e>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20000978 	.word	0x20000978

080094c0 <__errno>:
 80094c0:	4b01      	ldr	r3, [pc, #4]	@ (80094c8 <__errno+0x8>)
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	20000188 	.word	0x20000188

080094cc <__libc_init_array>:
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	4d0d      	ldr	r5, [pc, #52]	@ (8009504 <__libc_init_array+0x38>)
 80094d0:	4c0d      	ldr	r4, [pc, #52]	@ (8009508 <__libc_init_array+0x3c>)
 80094d2:	1b64      	subs	r4, r4, r5
 80094d4:	10a4      	asrs	r4, r4, #2
 80094d6:	2600      	movs	r6, #0
 80094d8:	42a6      	cmp	r6, r4
 80094da:	d109      	bne.n	80094f0 <__libc_init_array+0x24>
 80094dc:	4d0b      	ldr	r5, [pc, #44]	@ (800950c <__libc_init_array+0x40>)
 80094de:	4c0c      	ldr	r4, [pc, #48]	@ (8009510 <__libc_init_array+0x44>)
 80094e0:	f002 fc92 	bl	800be08 <_init>
 80094e4:	1b64      	subs	r4, r4, r5
 80094e6:	10a4      	asrs	r4, r4, #2
 80094e8:	2600      	movs	r6, #0
 80094ea:	42a6      	cmp	r6, r4
 80094ec:	d105      	bne.n	80094fa <__libc_init_array+0x2e>
 80094ee:	bd70      	pop	{r4, r5, r6, pc}
 80094f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f4:	4798      	blx	r3
 80094f6:	3601      	adds	r6, #1
 80094f8:	e7ee      	b.n	80094d8 <__libc_init_array+0xc>
 80094fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fe:	4798      	blx	r3
 8009500:	3601      	adds	r6, #1
 8009502:	e7f2      	b.n	80094ea <__libc_init_array+0x1e>
 8009504:	0800c348 	.word	0x0800c348
 8009508:	0800c348 	.word	0x0800c348
 800950c:	0800c348 	.word	0x0800c348
 8009510:	0800c34c 	.word	0x0800c34c

08009514 <__retarget_lock_init_recursive>:
 8009514:	4770      	bx	lr

08009516 <__retarget_lock_acquire_recursive>:
 8009516:	4770      	bx	lr

08009518 <__retarget_lock_release_recursive>:
 8009518:	4770      	bx	lr

0800951a <memcpy>:
 800951a:	440a      	add	r2, r1
 800951c:	4291      	cmp	r1, r2
 800951e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009522:	d100      	bne.n	8009526 <memcpy+0xc>
 8009524:	4770      	bx	lr
 8009526:	b510      	push	{r4, lr}
 8009528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800952c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009530:	4291      	cmp	r1, r2
 8009532:	d1f9      	bne.n	8009528 <memcpy+0xe>
 8009534:	bd10      	pop	{r4, pc}
	...

08009538 <nan>:
 8009538:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009540 <nan+0x8>
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	00000000 	.word	0x00000000
 8009544:	7ff80000 	.word	0x7ff80000

08009548 <nanf>:
 8009548:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009550 <nanf+0x8>
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	7fc00000 	.word	0x7fc00000

08009554 <quorem>:
 8009554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009558:	6903      	ldr	r3, [r0, #16]
 800955a:	690c      	ldr	r4, [r1, #16]
 800955c:	42a3      	cmp	r3, r4
 800955e:	4607      	mov	r7, r0
 8009560:	db7e      	blt.n	8009660 <quorem+0x10c>
 8009562:	3c01      	subs	r4, #1
 8009564:	f101 0814 	add.w	r8, r1, #20
 8009568:	00a3      	lsls	r3, r4, #2
 800956a:	f100 0514 	add.w	r5, r0, #20
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800957a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800957e:	3301      	adds	r3, #1
 8009580:	429a      	cmp	r2, r3
 8009582:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009586:	fbb2 f6f3 	udiv	r6, r2, r3
 800958a:	d32e      	bcc.n	80095ea <quorem+0x96>
 800958c:	f04f 0a00 	mov.w	sl, #0
 8009590:	46c4      	mov	ip, r8
 8009592:	46ae      	mov	lr, r5
 8009594:	46d3      	mov	fp, sl
 8009596:	f85c 3b04 	ldr.w	r3, [ip], #4
 800959a:	b298      	uxth	r0, r3
 800959c:	fb06 a000 	mla	r0, r6, r0, sl
 80095a0:	0c02      	lsrs	r2, r0, #16
 80095a2:	0c1b      	lsrs	r3, r3, #16
 80095a4:	fb06 2303 	mla	r3, r6, r3, r2
 80095a8:	f8de 2000 	ldr.w	r2, [lr]
 80095ac:	b280      	uxth	r0, r0
 80095ae:	b292      	uxth	r2, r2
 80095b0:	1a12      	subs	r2, r2, r0
 80095b2:	445a      	add	r2, fp
 80095b4:	f8de 0000 	ldr.w	r0, [lr]
 80095b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095bc:	b29b      	uxth	r3, r3
 80095be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80095c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095c6:	b292      	uxth	r2, r2
 80095c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095cc:	45e1      	cmp	r9, ip
 80095ce:	f84e 2b04 	str.w	r2, [lr], #4
 80095d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095d6:	d2de      	bcs.n	8009596 <quorem+0x42>
 80095d8:	9b00      	ldr	r3, [sp, #0]
 80095da:	58eb      	ldr	r3, [r5, r3]
 80095dc:	b92b      	cbnz	r3, 80095ea <quorem+0x96>
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	3b04      	subs	r3, #4
 80095e2:	429d      	cmp	r5, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	d32f      	bcc.n	8009648 <quorem+0xf4>
 80095e8:	613c      	str	r4, [r7, #16]
 80095ea:	4638      	mov	r0, r7
 80095ec:	f001 fc5a 	bl	800aea4 <__mcmp>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	db25      	blt.n	8009640 <quorem+0xec>
 80095f4:	4629      	mov	r1, r5
 80095f6:	2000      	movs	r0, #0
 80095f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80095fc:	f8d1 c000 	ldr.w	ip, [r1]
 8009600:	fa1f fe82 	uxth.w	lr, r2
 8009604:	fa1f f38c 	uxth.w	r3, ip
 8009608:	eba3 030e 	sub.w	r3, r3, lr
 800960c:	4403      	add	r3, r0
 800960e:	0c12      	lsrs	r2, r2, #16
 8009610:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009614:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009618:	b29b      	uxth	r3, r3
 800961a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800961e:	45c1      	cmp	r9, r8
 8009620:	f841 3b04 	str.w	r3, [r1], #4
 8009624:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009628:	d2e6      	bcs.n	80095f8 <quorem+0xa4>
 800962a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800962e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009632:	b922      	cbnz	r2, 800963e <quorem+0xea>
 8009634:	3b04      	subs	r3, #4
 8009636:	429d      	cmp	r5, r3
 8009638:	461a      	mov	r2, r3
 800963a:	d30b      	bcc.n	8009654 <quorem+0x100>
 800963c:	613c      	str	r4, [r7, #16]
 800963e:	3601      	adds	r6, #1
 8009640:	4630      	mov	r0, r6
 8009642:	b003      	add	sp, #12
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	3b04      	subs	r3, #4
 800964c:	2a00      	cmp	r2, #0
 800964e:	d1cb      	bne.n	80095e8 <quorem+0x94>
 8009650:	3c01      	subs	r4, #1
 8009652:	e7c6      	b.n	80095e2 <quorem+0x8e>
 8009654:	6812      	ldr	r2, [r2, #0]
 8009656:	3b04      	subs	r3, #4
 8009658:	2a00      	cmp	r2, #0
 800965a:	d1ef      	bne.n	800963c <quorem+0xe8>
 800965c:	3c01      	subs	r4, #1
 800965e:	e7ea      	b.n	8009636 <quorem+0xe2>
 8009660:	2000      	movs	r0, #0
 8009662:	e7ee      	b.n	8009642 <quorem+0xee>
 8009664:	0000      	movs	r0, r0
	...

08009668 <_dtoa_r>:
 8009668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800966c:	69c7      	ldr	r7, [r0, #28]
 800966e:	b099      	sub	sp, #100	@ 0x64
 8009670:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009674:	ec55 4b10 	vmov	r4, r5, d0
 8009678:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800967a:	9109      	str	r1, [sp, #36]	@ 0x24
 800967c:	4683      	mov	fp, r0
 800967e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009680:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009682:	b97f      	cbnz	r7, 80096a4 <_dtoa_r+0x3c>
 8009684:	2010      	movs	r0, #16
 8009686:	f7fe f857 	bl	8007738 <malloc>
 800968a:	4602      	mov	r2, r0
 800968c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009690:	b920      	cbnz	r0, 800969c <_dtoa_r+0x34>
 8009692:	4ba7      	ldr	r3, [pc, #668]	@ (8009930 <_dtoa_r+0x2c8>)
 8009694:	21ef      	movs	r1, #239	@ 0xef
 8009696:	48a7      	ldr	r0, [pc, #668]	@ (8009934 <_dtoa_r+0x2cc>)
 8009698:	f002 f898 	bl	800b7cc <__assert_func>
 800969c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80096a0:	6007      	str	r7, [r0, #0]
 80096a2:	60c7      	str	r7, [r0, #12]
 80096a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096a8:	6819      	ldr	r1, [r3, #0]
 80096aa:	b159      	cbz	r1, 80096c4 <_dtoa_r+0x5c>
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	604a      	str	r2, [r1, #4]
 80096b0:	2301      	movs	r3, #1
 80096b2:	4093      	lsls	r3, r2
 80096b4:	608b      	str	r3, [r1, #8]
 80096b6:	4658      	mov	r0, fp
 80096b8:	f001 f970 	bl	800a99c <_Bfree>
 80096bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	1e2b      	subs	r3, r5, #0
 80096c6:	bfb9      	ittee	lt
 80096c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096cc:	9303      	strlt	r3, [sp, #12]
 80096ce:	2300      	movge	r3, #0
 80096d0:	6033      	strge	r3, [r6, #0]
 80096d2:	9f03      	ldr	r7, [sp, #12]
 80096d4:	4b98      	ldr	r3, [pc, #608]	@ (8009938 <_dtoa_r+0x2d0>)
 80096d6:	bfbc      	itt	lt
 80096d8:	2201      	movlt	r2, #1
 80096da:	6032      	strlt	r2, [r6, #0]
 80096dc:	43bb      	bics	r3, r7
 80096de:	d112      	bne.n	8009706 <_dtoa_r+0x9e>
 80096e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096ec:	4323      	orrs	r3, r4
 80096ee:	f000 854d 	beq.w	800a18c <_dtoa_r+0xb24>
 80096f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800994c <_dtoa_r+0x2e4>
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 854f 	beq.w	800a19c <_dtoa_r+0xb34>
 80096fe:	f10a 0303 	add.w	r3, sl, #3
 8009702:	f000 bd49 	b.w	800a198 <_dtoa_r+0xb30>
 8009706:	ed9d 7b02 	vldr	d7, [sp, #8]
 800970a:	2200      	movs	r2, #0
 800970c:	ec51 0b17 	vmov	r0, r1, d7
 8009710:	2300      	movs	r3, #0
 8009712:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009716:	f7f7 f9f7 	bl	8000b08 <__aeabi_dcmpeq>
 800971a:	4680      	mov	r8, r0
 800971c:	b158      	cbz	r0, 8009736 <_dtoa_r+0xce>
 800971e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009720:	2301      	movs	r3, #1
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009726:	b113      	cbz	r3, 800972e <_dtoa_r+0xc6>
 8009728:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800972a:	4b84      	ldr	r3, [pc, #528]	@ (800993c <_dtoa_r+0x2d4>)
 800972c:	6013      	str	r3, [r2, #0]
 800972e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009950 <_dtoa_r+0x2e8>
 8009732:	f000 bd33 	b.w	800a19c <_dtoa_r+0xb34>
 8009736:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800973a:	aa16      	add	r2, sp, #88	@ 0x58
 800973c:	a917      	add	r1, sp, #92	@ 0x5c
 800973e:	4658      	mov	r0, fp
 8009740:	f001 fcd0 	bl	800b0e4 <__d2b>
 8009744:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009748:	4681      	mov	r9, r0
 800974a:	2e00      	cmp	r6, #0
 800974c:	d077      	beq.n	800983e <_dtoa_r+0x1d6>
 800974e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009750:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800975c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009760:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009764:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009768:	4619      	mov	r1, r3
 800976a:	2200      	movs	r2, #0
 800976c:	4b74      	ldr	r3, [pc, #464]	@ (8009940 <_dtoa_r+0x2d8>)
 800976e:	f7f6 fdab 	bl	80002c8 <__aeabi_dsub>
 8009772:	a369      	add	r3, pc, #420	@ (adr r3, 8009918 <_dtoa_r+0x2b0>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f7f6 ff5e 	bl	8000638 <__aeabi_dmul>
 800977c:	a368      	add	r3, pc, #416	@ (adr r3, 8009920 <_dtoa_r+0x2b8>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f6 fda3 	bl	80002cc <__adddf3>
 8009786:	4604      	mov	r4, r0
 8009788:	4630      	mov	r0, r6
 800978a:	460d      	mov	r5, r1
 800978c:	f7f6 feea 	bl	8000564 <__aeabi_i2d>
 8009790:	a365      	add	r3, pc, #404	@ (adr r3, 8009928 <_dtoa_r+0x2c0>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 ff4f 	bl	8000638 <__aeabi_dmul>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4620      	mov	r0, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	f7f6 fd93 	bl	80002cc <__adddf3>
 80097a6:	4604      	mov	r4, r0
 80097a8:	460d      	mov	r5, r1
 80097aa:	f7f7 f9f5 	bl	8000b98 <__aeabi_d2iz>
 80097ae:	2200      	movs	r2, #0
 80097b0:	4607      	mov	r7, r0
 80097b2:	2300      	movs	r3, #0
 80097b4:	4620      	mov	r0, r4
 80097b6:	4629      	mov	r1, r5
 80097b8:	f7f7 f9b0 	bl	8000b1c <__aeabi_dcmplt>
 80097bc:	b140      	cbz	r0, 80097d0 <_dtoa_r+0x168>
 80097be:	4638      	mov	r0, r7
 80097c0:	f7f6 fed0 	bl	8000564 <__aeabi_i2d>
 80097c4:	4622      	mov	r2, r4
 80097c6:	462b      	mov	r3, r5
 80097c8:	f7f7 f99e 	bl	8000b08 <__aeabi_dcmpeq>
 80097cc:	b900      	cbnz	r0, 80097d0 <_dtoa_r+0x168>
 80097ce:	3f01      	subs	r7, #1
 80097d0:	2f16      	cmp	r7, #22
 80097d2:	d851      	bhi.n	8009878 <_dtoa_r+0x210>
 80097d4:	4b5b      	ldr	r3, [pc, #364]	@ (8009944 <_dtoa_r+0x2dc>)
 80097d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097e2:	f7f7 f99b 	bl	8000b1c <__aeabi_dcmplt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d048      	beq.n	800987c <_dtoa_r+0x214>
 80097ea:	3f01      	subs	r7, #1
 80097ec:	2300      	movs	r3, #0
 80097ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80097f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097f2:	1b9b      	subs	r3, r3, r6
 80097f4:	1e5a      	subs	r2, r3, #1
 80097f6:	bf44      	itt	mi
 80097f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80097fc:	2300      	movmi	r3, #0
 80097fe:	9208      	str	r2, [sp, #32]
 8009800:	bf54      	ite	pl
 8009802:	f04f 0800 	movpl.w	r8, #0
 8009806:	9308      	strmi	r3, [sp, #32]
 8009808:	2f00      	cmp	r7, #0
 800980a:	db39      	blt.n	8009880 <_dtoa_r+0x218>
 800980c:	9b08      	ldr	r3, [sp, #32]
 800980e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009810:	443b      	add	r3, r7
 8009812:	9308      	str	r3, [sp, #32]
 8009814:	2300      	movs	r3, #0
 8009816:	930a      	str	r3, [sp, #40]	@ 0x28
 8009818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800981a:	2b09      	cmp	r3, #9
 800981c:	d864      	bhi.n	80098e8 <_dtoa_r+0x280>
 800981e:	2b05      	cmp	r3, #5
 8009820:	bfc4      	itt	gt
 8009822:	3b04      	subgt	r3, #4
 8009824:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009828:	f1a3 0302 	sub.w	r3, r3, #2
 800982c:	bfcc      	ite	gt
 800982e:	2400      	movgt	r4, #0
 8009830:	2401      	movle	r4, #1
 8009832:	2b03      	cmp	r3, #3
 8009834:	d863      	bhi.n	80098fe <_dtoa_r+0x296>
 8009836:	e8df f003 	tbb	[pc, r3]
 800983a:	372a      	.short	0x372a
 800983c:	5535      	.short	0x5535
 800983e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009842:	441e      	add	r6, r3
 8009844:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009848:	2b20      	cmp	r3, #32
 800984a:	bfc1      	itttt	gt
 800984c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009850:	409f      	lslgt	r7, r3
 8009852:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009856:	fa24 f303 	lsrgt.w	r3, r4, r3
 800985a:	bfd6      	itet	le
 800985c:	f1c3 0320 	rsble	r3, r3, #32
 8009860:	ea47 0003 	orrgt.w	r0, r7, r3
 8009864:	fa04 f003 	lslle.w	r0, r4, r3
 8009868:	f7f6 fe6c 	bl	8000544 <__aeabi_ui2d>
 800986c:	2201      	movs	r2, #1
 800986e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009872:	3e01      	subs	r6, #1
 8009874:	9214      	str	r2, [sp, #80]	@ 0x50
 8009876:	e777      	b.n	8009768 <_dtoa_r+0x100>
 8009878:	2301      	movs	r3, #1
 800987a:	e7b8      	b.n	80097ee <_dtoa_r+0x186>
 800987c:	9012      	str	r0, [sp, #72]	@ 0x48
 800987e:	e7b7      	b.n	80097f0 <_dtoa_r+0x188>
 8009880:	427b      	negs	r3, r7
 8009882:	930a      	str	r3, [sp, #40]	@ 0x28
 8009884:	2300      	movs	r3, #0
 8009886:	eba8 0807 	sub.w	r8, r8, r7
 800988a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800988c:	e7c4      	b.n	8009818 <_dtoa_r+0x1b0>
 800988e:	2300      	movs	r3, #0
 8009890:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009894:	2b00      	cmp	r3, #0
 8009896:	dc35      	bgt.n	8009904 <_dtoa_r+0x29c>
 8009898:	2301      	movs	r3, #1
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	9307      	str	r3, [sp, #28]
 800989e:	461a      	mov	r2, r3
 80098a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80098a2:	e00b      	b.n	80098bc <_dtoa_r+0x254>
 80098a4:	2301      	movs	r3, #1
 80098a6:	e7f3      	b.n	8009890 <_dtoa_r+0x228>
 80098a8:	2300      	movs	r3, #0
 80098aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098ae:	18fb      	adds	r3, r7, r3
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	3301      	adds	r3, #1
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	9307      	str	r3, [sp, #28]
 80098b8:	bfb8      	it	lt
 80098ba:	2301      	movlt	r3, #1
 80098bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80098c0:	2100      	movs	r1, #0
 80098c2:	2204      	movs	r2, #4
 80098c4:	f102 0514 	add.w	r5, r2, #20
 80098c8:	429d      	cmp	r5, r3
 80098ca:	d91f      	bls.n	800990c <_dtoa_r+0x2a4>
 80098cc:	6041      	str	r1, [r0, #4]
 80098ce:	4658      	mov	r0, fp
 80098d0:	f001 f824 	bl	800a91c <_Balloc>
 80098d4:	4682      	mov	sl, r0
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d13c      	bne.n	8009954 <_dtoa_r+0x2ec>
 80098da:	4b1b      	ldr	r3, [pc, #108]	@ (8009948 <_dtoa_r+0x2e0>)
 80098dc:	4602      	mov	r2, r0
 80098de:	f240 11af 	movw	r1, #431	@ 0x1af
 80098e2:	e6d8      	b.n	8009696 <_dtoa_r+0x2e>
 80098e4:	2301      	movs	r3, #1
 80098e6:	e7e0      	b.n	80098aa <_dtoa_r+0x242>
 80098e8:	2401      	movs	r4, #1
 80098ea:	2300      	movs	r3, #0
 80098ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80098f0:	f04f 33ff 	mov.w	r3, #4294967295
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	9307      	str	r3, [sp, #28]
 80098f8:	2200      	movs	r2, #0
 80098fa:	2312      	movs	r3, #18
 80098fc:	e7d0      	b.n	80098a0 <_dtoa_r+0x238>
 80098fe:	2301      	movs	r3, #1
 8009900:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009902:	e7f5      	b.n	80098f0 <_dtoa_r+0x288>
 8009904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	9307      	str	r3, [sp, #28]
 800990a:	e7d7      	b.n	80098bc <_dtoa_r+0x254>
 800990c:	3101      	adds	r1, #1
 800990e:	0052      	lsls	r2, r2, #1
 8009910:	e7d8      	b.n	80098c4 <_dtoa_r+0x25c>
 8009912:	bf00      	nop
 8009914:	f3af 8000 	nop.w
 8009918:	636f4361 	.word	0x636f4361
 800991c:	3fd287a7 	.word	0x3fd287a7
 8009920:	8b60c8b3 	.word	0x8b60c8b3
 8009924:	3fc68a28 	.word	0x3fc68a28
 8009928:	509f79fb 	.word	0x509f79fb
 800992c:	3fd34413 	.word	0x3fd34413
 8009930:	0800bfb6 	.word	0x0800bfb6
 8009934:	0800bfcd 	.word	0x0800bfcd
 8009938:	7ff00000 	.word	0x7ff00000
 800993c:	0800bf79 	.word	0x0800bf79
 8009940:	3ff80000 	.word	0x3ff80000
 8009944:	0800c128 	.word	0x0800c128
 8009948:	0800c025 	.word	0x0800c025
 800994c:	0800bfb2 	.word	0x0800bfb2
 8009950:	0800bf78 	.word	0x0800bf78
 8009954:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009958:	6018      	str	r0, [r3, #0]
 800995a:	9b07      	ldr	r3, [sp, #28]
 800995c:	2b0e      	cmp	r3, #14
 800995e:	f200 80a4 	bhi.w	8009aaa <_dtoa_r+0x442>
 8009962:	2c00      	cmp	r4, #0
 8009964:	f000 80a1 	beq.w	8009aaa <_dtoa_r+0x442>
 8009968:	2f00      	cmp	r7, #0
 800996a:	dd33      	ble.n	80099d4 <_dtoa_r+0x36c>
 800996c:	4bad      	ldr	r3, [pc, #692]	@ (8009c24 <_dtoa_r+0x5bc>)
 800996e:	f007 020f 	and.w	r2, r7, #15
 8009972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009976:	ed93 7b00 	vldr	d7, [r3]
 800997a:	05f8      	lsls	r0, r7, #23
 800997c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009980:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009984:	d516      	bpl.n	80099b4 <_dtoa_r+0x34c>
 8009986:	4ba8      	ldr	r3, [pc, #672]	@ (8009c28 <_dtoa_r+0x5c0>)
 8009988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800998c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009990:	f7f6 ff7c 	bl	800088c <__aeabi_ddiv>
 8009994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009998:	f004 040f 	and.w	r4, r4, #15
 800999c:	2603      	movs	r6, #3
 800999e:	4da2      	ldr	r5, [pc, #648]	@ (8009c28 <_dtoa_r+0x5c0>)
 80099a0:	b954      	cbnz	r4, 80099b8 <_dtoa_r+0x350>
 80099a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099aa:	f7f6 ff6f 	bl	800088c <__aeabi_ddiv>
 80099ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099b2:	e028      	b.n	8009a06 <_dtoa_r+0x39e>
 80099b4:	2602      	movs	r6, #2
 80099b6:	e7f2      	b.n	800999e <_dtoa_r+0x336>
 80099b8:	07e1      	lsls	r1, r4, #31
 80099ba:	d508      	bpl.n	80099ce <_dtoa_r+0x366>
 80099bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099c4:	f7f6 fe38 	bl	8000638 <__aeabi_dmul>
 80099c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099cc:	3601      	adds	r6, #1
 80099ce:	1064      	asrs	r4, r4, #1
 80099d0:	3508      	adds	r5, #8
 80099d2:	e7e5      	b.n	80099a0 <_dtoa_r+0x338>
 80099d4:	f000 80d2 	beq.w	8009b7c <_dtoa_r+0x514>
 80099d8:	427c      	negs	r4, r7
 80099da:	4b92      	ldr	r3, [pc, #584]	@ (8009c24 <_dtoa_r+0x5bc>)
 80099dc:	4d92      	ldr	r5, [pc, #584]	@ (8009c28 <_dtoa_r+0x5c0>)
 80099de:	f004 020f 	and.w	r2, r4, #15
 80099e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099ee:	f7f6 fe23 	bl	8000638 <__aeabi_dmul>
 80099f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099f6:	1124      	asrs	r4, r4, #4
 80099f8:	2300      	movs	r3, #0
 80099fa:	2602      	movs	r6, #2
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	f040 80b2 	bne.w	8009b66 <_dtoa_r+0x4fe>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1d3      	bne.n	80099ae <_dtoa_r+0x346>
 8009a06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 80b7 	beq.w	8009b80 <_dtoa_r+0x518>
 8009a12:	4b86      	ldr	r3, [pc, #536]	@ (8009c2c <_dtoa_r+0x5c4>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	4620      	mov	r0, r4
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f7f7 f87f 	bl	8000b1c <__aeabi_dcmplt>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f000 80ae 	beq.w	8009b80 <_dtoa_r+0x518>
 8009a24:	9b07      	ldr	r3, [sp, #28]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 80aa 	beq.w	8009b80 <_dtoa_r+0x518>
 8009a2c:	9b00      	ldr	r3, [sp, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	dd37      	ble.n	8009aa2 <_dtoa_r+0x43a>
 8009a32:	1e7b      	subs	r3, r7, #1
 8009a34:	9304      	str	r3, [sp, #16]
 8009a36:	4620      	mov	r0, r4
 8009a38:	4b7d      	ldr	r3, [pc, #500]	@ (8009c30 <_dtoa_r+0x5c8>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	f7f6 fdfb 	bl	8000638 <__aeabi_dmul>
 8009a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a46:	9c00      	ldr	r4, [sp, #0]
 8009a48:	3601      	adds	r6, #1
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7f6 fd8a 	bl	8000564 <__aeabi_i2d>
 8009a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a54:	f7f6 fdf0 	bl	8000638 <__aeabi_dmul>
 8009a58:	4b76      	ldr	r3, [pc, #472]	@ (8009c34 <_dtoa_r+0x5cc>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f7f6 fc36 	bl	80002cc <__adddf3>
 8009a60:	4605      	mov	r5, r0
 8009a62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a66:	2c00      	cmp	r4, #0
 8009a68:	f040 808d 	bne.w	8009b86 <_dtoa_r+0x51e>
 8009a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a70:	4b71      	ldr	r3, [pc, #452]	@ (8009c38 <_dtoa_r+0x5d0>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	f7f6 fc28 	bl	80002c8 <__aeabi_dsub>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a80:	462a      	mov	r2, r5
 8009a82:	4633      	mov	r3, r6
 8009a84:	f7f7 f868 	bl	8000b58 <__aeabi_dcmpgt>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f040 828b 	bne.w	8009fa4 <_dtoa_r+0x93c>
 8009a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a92:	462a      	mov	r2, r5
 8009a94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a98:	f7f7 f840 	bl	8000b1c <__aeabi_dcmplt>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f040 8128 	bne.w	8009cf2 <_dtoa_r+0x68a>
 8009aa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009aa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009aaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f2c0 815a 	blt.w	8009d66 <_dtoa_r+0x6fe>
 8009ab2:	2f0e      	cmp	r7, #14
 8009ab4:	f300 8157 	bgt.w	8009d66 <_dtoa_r+0x6fe>
 8009ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c24 <_dtoa_r+0x5bc>)
 8009aba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009abe:	ed93 7b00 	vldr	d7, [r3]
 8009ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	ed8d 7b00 	vstr	d7, [sp]
 8009aca:	da03      	bge.n	8009ad4 <_dtoa_r+0x46c>
 8009acc:	9b07      	ldr	r3, [sp, #28]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	f340 8101 	ble.w	8009cd6 <_dtoa_r+0x66e>
 8009ad4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ad8:	4656      	mov	r6, sl
 8009ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7f6 fed3 	bl	800088c <__aeabi_ddiv>
 8009ae6:	f7f7 f857 	bl	8000b98 <__aeabi_d2iz>
 8009aea:	4680      	mov	r8, r0
 8009aec:	f7f6 fd3a 	bl	8000564 <__aeabi_i2d>
 8009af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009af4:	f7f6 fda0 	bl	8000638 <__aeabi_dmul>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4620      	mov	r0, r4
 8009afe:	4629      	mov	r1, r5
 8009b00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b04:	f7f6 fbe0 	bl	80002c8 <__aeabi_dsub>
 8009b08:	f806 4b01 	strb.w	r4, [r6], #1
 8009b0c:	9d07      	ldr	r5, [sp, #28]
 8009b0e:	eba6 040a 	sub.w	r4, r6, sl
 8009b12:	42a5      	cmp	r5, r4
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	f040 8117 	bne.w	8009d4a <_dtoa_r+0x6e2>
 8009b1c:	f7f6 fbd6 	bl	80002cc <__adddf3>
 8009b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b24:	4604      	mov	r4, r0
 8009b26:	460d      	mov	r5, r1
 8009b28:	f7f7 f816 	bl	8000b58 <__aeabi_dcmpgt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	f040 80f9 	bne.w	8009d24 <_dtoa_r+0x6bc>
 8009b32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b36:	4620      	mov	r0, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	f7f6 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 8009b3e:	b118      	cbz	r0, 8009b48 <_dtoa_r+0x4e0>
 8009b40:	f018 0f01 	tst.w	r8, #1
 8009b44:	f040 80ee 	bne.w	8009d24 <_dtoa_r+0x6bc>
 8009b48:	4649      	mov	r1, r9
 8009b4a:	4658      	mov	r0, fp
 8009b4c:	f000 ff26 	bl	800a99c <_Bfree>
 8009b50:	2300      	movs	r3, #0
 8009b52:	7033      	strb	r3, [r6, #0]
 8009b54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b56:	3701      	adds	r7, #1
 8009b58:	601f      	str	r7, [r3, #0]
 8009b5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 831d 	beq.w	800a19c <_dtoa_r+0xb34>
 8009b62:	601e      	str	r6, [r3, #0]
 8009b64:	e31a      	b.n	800a19c <_dtoa_r+0xb34>
 8009b66:	07e2      	lsls	r2, r4, #31
 8009b68:	d505      	bpl.n	8009b76 <_dtoa_r+0x50e>
 8009b6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b6e:	f7f6 fd63 	bl	8000638 <__aeabi_dmul>
 8009b72:	3601      	adds	r6, #1
 8009b74:	2301      	movs	r3, #1
 8009b76:	1064      	asrs	r4, r4, #1
 8009b78:	3508      	adds	r5, #8
 8009b7a:	e73f      	b.n	80099fc <_dtoa_r+0x394>
 8009b7c:	2602      	movs	r6, #2
 8009b7e:	e742      	b.n	8009a06 <_dtoa_r+0x39e>
 8009b80:	9c07      	ldr	r4, [sp, #28]
 8009b82:	9704      	str	r7, [sp, #16]
 8009b84:	e761      	b.n	8009a4a <_dtoa_r+0x3e2>
 8009b86:	4b27      	ldr	r3, [pc, #156]	@ (8009c24 <_dtoa_r+0x5bc>)
 8009b88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b92:	4454      	add	r4, sl
 8009b94:	2900      	cmp	r1, #0
 8009b96:	d053      	beq.n	8009c40 <_dtoa_r+0x5d8>
 8009b98:	4928      	ldr	r1, [pc, #160]	@ (8009c3c <_dtoa_r+0x5d4>)
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	f7f6 fe76 	bl	800088c <__aeabi_ddiv>
 8009ba0:	4633      	mov	r3, r6
 8009ba2:	462a      	mov	r2, r5
 8009ba4:	f7f6 fb90 	bl	80002c8 <__aeabi_dsub>
 8009ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bac:	4656      	mov	r6, sl
 8009bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb2:	f7f6 fff1 	bl	8000b98 <__aeabi_d2iz>
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	f7f6 fcd4 	bl	8000564 <__aeabi_i2d>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bc4:	f7f6 fb80 	bl	80002c8 <__aeabi_dsub>
 8009bc8:	3530      	adds	r5, #48	@ 0x30
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bd2:	f806 5b01 	strb.w	r5, [r6], #1
 8009bd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bda:	f7f6 ff9f 	bl	8000b1c <__aeabi_dcmplt>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d171      	bne.n	8009cc6 <_dtoa_r+0x65e>
 8009be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009be6:	4911      	ldr	r1, [pc, #68]	@ (8009c2c <_dtoa_r+0x5c4>)
 8009be8:	2000      	movs	r0, #0
 8009bea:	f7f6 fb6d 	bl	80002c8 <__aeabi_dsub>
 8009bee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bf2:	f7f6 ff93 	bl	8000b1c <__aeabi_dcmplt>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	f040 8095 	bne.w	8009d26 <_dtoa_r+0x6be>
 8009bfc:	42a6      	cmp	r6, r4
 8009bfe:	f43f af50 	beq.w	8009aa2 <_dtoa_r+0x43a>
 8009c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c06:	4b0a      	ldr	r3, [pc, #40]	@ (8009c30 <_dtoa_r+0x5c8>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f7f6 fd15 	bl	8000638 <__aeabi_dmul>
 8009c0e:	4b08      	ldr	r3, [pc, #32]	@ (8009c30 <_dtoa_r+0x5c8>)
 8009c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c14:	2200      	movs	r2, #0
 8009c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c1a:	f7f6 fd0d 	bl	8000638 <__aeabi_dmul>
 8009c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c22:	e7c4      	b.n	8009bae <_dtoa_r+0x546>
 8009c24:	0800c128 	.word	0x0800c128
 8009c28:	0800c100 	.word	0x0800c100
 8009c2c:	3ff00000 	.word	0x3ff00000
 8009c30:	40240000 	.word	0x40240000
 8009c34:	401c0000 	.word	0x401c0000
 8009c38:	40140000 	.word	0x40140000
 8009c3c:	3fe00000 	.word	0x3fe00000
 8009c40:	4631      	mov	r1, r6
 8009c42:	4628      	mov	r0, r5
 8009c44:	f7f6 fcf8 	bl	8000638 <__aeabi_dmul>
 8009c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009c4e:	4656      	mov	r6, sl
 8009c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c54:	f7f6 ffa0 	bl	8000b98 <__aeabi_d2iz>
 8009c58:	4605      	mov	r5, r0
 8009c5a:	f7f6 fc83 	bl	8000564 <__aeabi_i2d>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c66:	f7f6 fb2f 	bl	80002c8 <__aeabi_dsub>
 8009c6a:	3530      	adds	r5, #48	@ 0x30
 8009c6c:	f806 5b01 	strb.w	r5, [r6], #1
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	42a6      	cmp	r6, r4
 8009c76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c7a:	f04f 0200 	mov.w	r2, #0
 8009c7e:	d124      	bne.n	8009cca <_dtoa_r+0x662>
 8009c80:	4bac      	ldr	r3, [pc, #688]	@ (8009f34 <_dtoa_r+0x8cc>)
 8009c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c86:	f7f6 fb21 	bl	80002cc <__adddf3>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c92:	f7f6 ff61 	bl	8000b58 <__aeabi_dcmpgt>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d145      	bne.n	8009d26 <_dtoa_r+0x6be>
 8009c9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c9e:	49a5      	ldr	r1, [pc, #660]	@ (8009f34 <_dtoa_r+0x8cc>)
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	f7f6 fb11 	bl	80002c8 <__aeabi_dsub>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cae:	f7f6 ff35 	bl	8000b1c <__aeabi_dcmplt>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	f43f aef5 	beq.w	8009aa2 <_dtoa_r+0x43a>
 8009cb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009cba:	1e73      	subs	r3, r6, #1
 8009cbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cc2:	2b30      	cmp	r3, #48	@ 0x30
 8009cc4:	d0f8      	beq.n	8009cb8 <_dtoa_r+0x650>
 8009cc6:	9f04      	ldr	r7, [sp, #16]
 8009cc8:	e73e      	b.n	8009b48 <_dtoa_r+0x4e0>
 8009cca:	4b9b      	ldr	r3, [pc, #620]	@ (8009f38 <_dtoa_r+0x8d0>)
 8009ccc:	f7f6 fcb4 	bl	8000638 <__aeabi_dmul>
 8009cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cd4:	e7bc      	b.n	8009c50 <_dtoa_r+0x5e8>
 8009cd6:	d10c      	bne.n	8009cf2 <_dtoa_r+0x68a>
 8009cd8:	4b98      	ldr	r3, [pc, #608]	@ (8009f3c <_dtoa_r+0x8d4>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ce0:	f7f6 fcaa 	bl	8000638 <__aeabi_dmul>
 8009ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ce8:	f7f6 ff2c 	bl	8000b44 <__aeabi_dcmpge>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	f000 8157 	beq.w	8009fa0 <_dtoa_r+0x938>
 8009cf2:	2400      	movs	r4, #0
 8009cf4:	4625      	mov	r5, r4
 8009cf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cf8:	43db      	mvns	r3, r3
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	4656      	mov	r6, sl
 8009cfe:	2700      	movs	r7, #0
 8009d00:	4621      	mov	r1, r4
 8009d02:	4658      	mov	r0, fp
 8009d04:	f000 fe4a 	bl	800a99c <_Bfree>
 8009d08:	2d00      	cmp	r5, #0
 8009d0a:	d0dc      	beq.n	8009cc6 <_dtoa_r+0x65e>
 8009d0c:	b12f      	cbz	r7, 8009d1a <_dtoa_r+0x6b2>
 8009d0e:	42af      	cmp	r7, r5
 8009d10:	d003      	beq.n	8009d1a <_dtoa_r+0x6b2>
 8009d12:	4639      	mov	r1, r7
 8009d14:	4658      	mov	r0, fp
 8009d16:	f000 fe41 	bl	800a99c <_Bfree>
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	4658      	mov	r0, fp
 8009d1e:	f000 fe3d 	bl	800a99c <_Bfree>
 8009d22:	e7d0      	b.n	8009cc6 <_dtoa_r+0x65e>
 8009d24:	9704      	str	r7, [sp, #16]
 8009d26:	4633      	mov	r3, r6
 8009d28:	461e      	mov	r6, r3
 8009d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d2e:	2a39      	cmp	r2, #57	@ 0x39
 8009d30:	d107      	bne.n	8009d42 <_dtoa_r+0x6da>
 8009d32:	459a      	cmp	sl, r3
 8009d34:	d1f8      	bne.n	8009d28 <_dtoa_r+0x6c0>
 8009d36:	9a04      	ldr	r2, [sp, #16]
 8009d38:	3201      	adds	r2, #1
 8009d3a:	9204      	str	r2, [sp, #16]
 8009d3c:	2230      	movs	r2, #48	@ 0x30
 8009d3e:	f88a 2000 	strb.w	r2, [sl]
 8009d42:	781a      	ldrb	r2, [r3, #0]
 8009d44:	3201      	adds	r2, #1
 8009d46:	701a      	strb	r2, [r3, #0]
 8009d48:	e7bd      	b.n	8009cc6 <_dtoa_r+0x65e>
 8009d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8009f38 <_dtoa_r+0x8d0>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f7f6 fc73 	bl	8000638 <__aeabi_dmul>
 8009d52:	2200      	movs	r2, #0
 8009d54:	2300      	movs	r3, #0
 8009d56:	4604      	mov	r4, r0
 8009d58:	460d      	mov	r5, r1
 8009d5a:	f7f6 fed5 	bl	8000b08 <__aeabi_dcmpeq>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f43f aebb 	beq.w	8009ada <_dtoa_r+0x472>
 8009d64:	e6f0      	b.n	8009b48 <_dtoa_r+0x4e0>
 8009d66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	f000 80db 	beq.w	8009f24 <_dtoa_r+0x8bc>
 8009d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d70:	2a01      	cmp	r2, #1
 8009d72:	f300 80bf 	bgt.w	8009ef4 <_dtoa_r+0x88c>
 8009d76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009d78:	2a00      	cmp	r2, #0
 8009d7a:	f000 80b7 	beq.w	8009eec <_dtoa_r+0x884>
 8009d7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d84:	4646      	mov	r6, r8
 8009d86:	9a08      	ldr	r2, [sp, #32]
 8009d88:	2101      	movs	r1, #1
 8009d8a:	441a      	add	r2, r3
 8009d8c:	4658      	mov	r0, fp
 8009d8e:	4498      	add	r8, r3
 8009d90:	9208      	str	r2, [sp, #32]
 8009d92:	f000 ff01 	bl	800ab98 <__i2b>
 8009d96:	4605      	mov	r5, r0
 8009d98:	b15e      	cbz	r6, 8009db2 <_dtoa_r+0x74a>
 8009d9a:	9b08      	ldr	r3, [sp, #32]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd08      	ble.n	8009db2 <_dtoa_r+0x74a>
 8009da0:	42b3      	cmp	r3, r6
 8009da2:	9a08      	ldr	r2, [sp, #32]
 8009da4:	bfa8      	it	ge
 8009da6:	4633      	movge	r3, r6
 8009da8:	eba8 0803 	sub.w	r8, r8, r3
 8009dac:	1af6      	subs	r6, r6, r3
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	9308      	str	r3, [sp, #32]
 8009db2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009db4:	b1f3      	cbz	r3, 8009df4 <_dtoa_r+0x78c>
 8009db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80b7 	beq.w	8009f2c <_dtoa_r+0x8c4>
 8009dbe:	b18c      	cbz	r4, 8009de4 <_dtoa_r+0x77c>
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	4658      	mov	r0, fp
 8009dc6:	f000 ffa7 	bl	800ad18 <__pow5mult>
 8009dca:	464a      	mov	r2, r9
 8009dcc:	4601      	mov	r1, r0
 8009dce:	4605      	mov	r5, r0
 8009dd0:	4658      	mov	r0, fp
 8009dd2:	f000 fef7 	bl	800abc4 <__multiply>
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	9004      	str	r0, [sp, #16]
 8009dda:	4658      	mov	r0, fp
 8009ddc:	f000 fdde 	bl	800a99c <_Bfree>
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	4699      	mov	r9, r3
 8009de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009de6:	1b1a      	subs	r2, r3, r4
 8009de8:	d004      	beq.n	8009df4 <_dtoa_r+0x78c>
 8009dea:	4649      	mov	r1, r9
 8009dec:	4658      	mov	r0, fp
 8009dee:	f000 ff93 	bl	800ad18 <__pow5mult>
 8009df2:	4681      	mov	r9, r0
 8009df4:	2101      	movs	r1, #1
 8009df6:	4658      	mov	r0, fp
 8009df8:	f000 fece 	bl	800ab98 <__i2b>
 8009dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dfe:	4604      	mov	r4, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 81cf 	beq.w	800a1a4 <_dtoa_r+0xb3c>
 8009e06:	461a      	mov	r2, r3
 8009e08:	4601      	mov	r1, r0
 8009e0a:	4658      	mov	r0, fp
 8009e0c:	f000 ff84 	bl	800ad18 <__pow5mult>
 8009e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	4604      	mov	r4, r0
 8009e16:	f300 8095 	bgt.w	8009f44 <_dtoa_r+0x8dc>
 8009e1a:	9b02      	ldr	r3, [sp, #8]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f040 8087 	bne.w	8009f30 <_dtoa_r+0x8c8>
 8009e22:	9b03      	ldr	r3, [sp, #12]
 8009e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f040 8089 	bne.w	8009f40 <_dtoa_r+0x8d8>
 8009e2e:	9b03      	ldr	r3, [sp, #12]
 8009e30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e34:	0d1b      	lsrs	r3, r3, #20
 8009e36:	051b      	lsls	r3, r3, #20
 8009e38:	b12b      	cbz	r3, 8009e46 <_dtoa_r+0x7de>
 8009e3a:	9b08      	ldr	r3, [sp, #32]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	9308      	str	r3, [sp, #32]
 8009e40:	f108 0801 	add.w	r8, r8, #1
 8009e44:	2301      	movs	r3, #1
 8009e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f000 81b0 	beq.w	800a1b0 <_dtoa_r+0xb48>
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e56:	6918      	ldr	r0, [r3, #16]
 8009e58:	f000 fe52 	bl	800ab00 <__hi0bits>
 8009e5c:	f1c0 0020 	rsb	r0, r0, #32
 8009e60:	9b08      	ldr	r3, [sp, #32]
 8009e62:	4418      	add	r0, r3
 8009e64:	f010 001f 	ands.w	r0, r0, #31
 8009e68:	d077      	beq.n	8009f5a <_dtoa_r+0x8f2>
 8009e6a:	f1c0 0320 	rsb	r3, r0, #32
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	dd6b      	ble.n	8009f4a <_dtoa_r+0x8e2>
 8009e72:	9b08      	ldr	r3, [sp, #32]
 8009e74:	f1c0 001c 	rsb	r0, r0, #28
 8009e78:	4403      	add	r3, r0
 8009e7a:	4480      	add	r8, r0
 8009e7c:	4406      	add	r6, r0
 8009e7e:	9308      	str	r3, [sp, #32]
 8009e80:	f1b8 0f00 	cmp.w	r8, #0
 8009e84:	dd05      	ble.n	8009e92 <_dtoa_r+0x82a>
 8009e86:	4649      	mov	r1, r9
 8009e88:	4642      	mov	r2, r8
 8009e8a:	4658      	mov	r0, fp
 8009e8c:	f000 ff9e 	bl	800adcc <__lshift>
 8009e90:	4681      	mov	r9, r0
 8009e92:	9b08      	ldr	r3, [sp, #32]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd05      	ble.n	8009ea4 <_dtoa_r+0x83c>
 8009e98:	4621      	mov	r1, r4
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4658      	mov	r0, fp
 8009e9e:	f000 ff95 	bl	800adcc <__lshift>
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d059      	beq.n	8009f5e <_dtoa_r+0x8f6>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4648      	mov	r0, r9
 8009eae:	f000 fff9 	bl	800aea4 <__mcmp>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	da53      	bge.n	8009f5e <_dtoa_r+0x8f6>
 8009eb6:	1e7b      	subs	r3, r7, #1
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	4649      	mov	r1, r9
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	220a      	movs	r2, #10
 8009ec0:	4658      	mov	r0, fp
 8009ec2:	f000 fd8d 	bl	800a9e0 <__multadd>
 8009ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ec8:	4681      	mov	r9, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f000 8172 	beq.w	800a1b4 <_dtoa_r+0xb4c>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	220a      	movs	r2, #10
 8009ed6:	4658      	mov	r0, fp
 8009ed8:	f000 fd82 	bl	800a9e0 <__multadd>
 8009edc:	9b00      	ldr	r3, [sp, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	dc67      	bgt.n	8009fb4 <_dtoa_r+0x94c>
 8009ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	dc41      	bgt.n	8009f6e <_dtoa_r+0x906>
 8009eea:	e063      	b.n	8009fb4 <_dtoa_r+0x94c>
 8009eec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009eee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ef2:	e746      	b.n	8009d82 <_dtoa_r+0x71a>
 8009ef4:	9b07      	ldr	r3, [sp, #28]
 8009ef6:	1e5c      	subs	r4, r3, #1
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	bfbf      	itttt	lt
 8009efe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009f00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009f02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009f04:	1ae3      	sublt	r3, r4, r3
 8009f06:	bfb4      	ite	lt
 8009f08:	18d2      	addlt	r2, r2, r3
 8009f0a:	1b1c      	subge	r4, r3, r4
 8009f0c:	9b07      	ldr	r3, [sp, #28]
 8009f0e:	bfbc      	itt	lt
 8009f10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009f12:	2400      	movlt	r4, #0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	bfb5      	itete	lt
 8009f18:	eba8 0603 	sublt.w	r6, r8, r3
 8009f1c:	9b07      	ldrge	r3, [sp, #28]
 8009f1e:	2300      	movlt	r3, #0
 8009f20:	4646      	movge	r6, r8
 8009f22:	e730      	b.n	8009d86 <_dtoa_r+0x71e>
 8009f24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f28:	4646      	mov	r6, r8
 8009f2a:	e735      	b.n	8009d98 <_dtoa_r+0x730>
 8009f2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f2e:	e75c      	b.n	8009dea <_dtoa_r+0x782>
 8009f30:	2300      	movs	r3, #0
 8009f32:	e788      	b.n	8009e46 <_dtoa_r+0x7de>
 8009f34:	3fe00000 	.word	0x3fe00000
 8009f38:	40240000 	.word	0x40240000
 8009f3c:	40140000 	.word	0x40140000
 8009f40:	9b02      	ldr	r3, [sp, #8]
 8009f42:	e780      	b.n	8009e46 <_dtoa_r+0x7de>
 8009f44:	2300      	movs	r3, #0
 8009f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f48:	e782      	b.n	8009e50 <_dtoa_r+0x7e8>
 8009f4a:	d099      	beq.n	8009e80 <_dtoa_r+0x818>
 8009f4c:	9a08      	ldr	r2, [sp, #32]
 8009f4e:	331c      	adds	r3, #28
 8009f50:	441a      	add	r2, r3
 8009f52:	4498      	add	r8, r3
 8009f54:	441e      	add	r6, r3
 8009f56:	9208      	str	r2, [sp, #32]
 8009f58:	e792      	b.n	8009e80 <_dtoa_r+0x818>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	e7f6      	b.n	8009f4c <_dtoa_r+0x8e4>
 8009f5e:	9b07      	ldr	r3, [sp, #28]
 8009f60:	9704      	str	r7, [sp, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	dc20      	bgt.n	8009fa8 <_dtoa_r+0x940>
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	dd1e      	ble.n	8009fac <_dtoa_r+0x944>
 8009f6e:	9b00      	ldr	r3, [sp, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f47f aec0 	bne.w	8009cf6 <_dtoa_r+0x68e>
 8009f76:	4621      	mov	r1, r4
 8009f78:	2205      	movs	r2, #5
 8009f7a:	4658      	mov	r0, fp
 8009f7c:	f000 fd30 	bl	800a9e0 <__multadd>
 8009f80:	4601      	mov	r1, r0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4648      	mov	r0, r9
 8009f86:	f000 ff8d 	bl	800aea4 <__mcmp>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	f77f aeb3 	ble.w	8009cf6 <_dtoa_r+0x68e>
 8009f90:	4656      	mov	r6, sl
 8009f92:	2331      	movs	r3, #49	@ 0x31
 8009f94:	f806 3b01 	strb.w	r3, [r6], #1
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	e6ae      	b.n	8009cfe <_dtoa_r+0x696>
 8009fa0:	9c07      	ldr	r4, [sp, #28]
 8009fa2:	9704      	str	r7, [sp, #16]
 8009fa4:	4625      	mov	r5, r4
 8009fa6:	e7f3      	b.n	8009f90 <_dtoa_r+0x928>
 8009fa8:	9b07      	ldr	r3, [sp, #28]
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 8104 	beq.w	800a1bc <_dtoa_r+0xb54>
 8009fb4:	2e00      	cmp	r6, #0
 8009fb6:	dd05      	ble.n	8009fc4 <_dtoa_r+0x95c>
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4632      	mov	r2, r6
 8009fbc:	4658      	mov	r0, fp
 8009fbe:	f000 ff05 	bl	800adcc <__lshift>
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d05a      	beq.n	800a080 <_dtoa_r+0xa18>
 8009fca:	6869      	ldr	r1, [r5, #4]
 8009fcc:	4658      	mov	r0, fp
 8009fce:	f000 fca5 	bl	800a91c <_Balloc>
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	b928      	cbnz	r0, 8009fe2 <_dtoa_r+0x97a>
 8009fd6:	4b84      	ldr	r3, [pc, #528]	@ (800a1e8 <_dtoa_r+0xb80>)
 8009fd8:	4602      	mov	r2, r0
 8009fda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fde:	f7ff bb5a 	b.w	8009696 <_dtoa_r+0x2e>
 8009fe2:	692a      	ldr	r2, [r5, #16]
 8009fe4:	3202      	adds	r2, #2
 8009fe6:	0092      	lsls	r2, r2, #2
 8009fe8:	f105 010c 	add.w	r1, r5, #12
 8009fec:	300c      	adds	r0, #12
 8009fee:	f7ff fa94 	bl	800951a <memcpy>
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4658      	mov	r0, fp
 8009ff8:	f000 fee8 	bl	800adcc <__lshift>
 8009ffc:	f10a 0301 	add.w	r3, sl, #1
 800a000:	9307      	str	r3, [sp, #28]
 800a002:	9b00      	ldr	r3, [sp, #0]
 800a004:	4453      	add	r3, sl
 800a006:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a008:	9b02      	ldr	r3, [sp, #8]
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	462f      	mov	r7, r5
 800a010:	930a      	str	r3, [sp, #40]	@ 0x28
 800a012:	4605      	mov	r5, r0
 800a014:	9b07      	ldr	r3, [sp, #28]
 800a016:	4621      	mov	r1, r4
 800a018:	3b01      	subs	r3, #1
 800a01a:	4648      	mov	r0, r9
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	f7ff fa99 	bl	8009554 <quorem>
 800a022:	4639      	mov	r1, r7
 800a024:	9002      	str	r0, [sp, #8]
 800a026:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a02a:	4648      	mov	r0, r9
 800a02c:	f000 ff3a 	bl	800aea4 <__mcmp>
 800a030:	462a      	mov	r2, r5
 800a032:	9008      	str	r0, [sp, #32]
 800a034:	4621      	mov	r1, r4
 800a036:	4658      	mov	r0, fp
 800a038:	f000 ff50 	bl	800aedc <__mdiff>
 800a03c:	68c2      	ldr	r2, [r0, #12]
 800a03e:	4606      	mov	r6, r0
 800a040:	bb02      	cbnz	r2, 800a084 <_dtoa_r+0xa1c>
 800a042:	4601      	mov	r1, r0
 800a044:	4648      	mov	r0, r9
 800a046:	f000 ff2d 	bl	800aea4 <__mcmp>
 800a04a:	4602      	mov	r2, r0
 800a04c:	4631      	mov	r1, r6
 800a04e:	4658      	mov	r0, fp
 800a050:	920e      	str	r2, [sp, #56]	@ 0x38
 800a052:	f000 fca3 	bl	800a99c <_Bfree>
 800a056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a05a:	9e07      	ldr	r6, [sp, #28]
 800a05c:	ea43 0102 	orr.w	r1, r3, r2
 800a060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a062:	4319      	orrs	r1, r3
 800a064:	d110      	bne.n	800a088 <_dtoa_r+0xa20>
 800a066:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a06a:	d029      	beq.n	800a0c0 <_dtoa_r+0xa58>
 800a06c:	9b08      	ldr	r3, [sp, #32]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	dd02      	ble.n	800a078 <_dtoa_r+0xa10>
 800a072:	9b02      	ldr	r3, [sp, #8]
 800a074:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a078:	9b00      	ldr	r3, [sp, #0]
 800a07a:	f883 8000 	strb.w	r8, [r3]
 800a07e:	e63f      	b.n	8009d00 <_dtoa_r+0x698>
 800a080:	4628      	mov	r0, r5
 800a082:	e7bb      	b.n	8009ffc <_dtoa_r+0x994>
 800a084:	2201      	movs	r2, #1
 800a086:	e7e1      	b.n	800a04c <_dtoa_r+0x9e4>
 800a088:	9b08      	ldr	r3, [sp, #32]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	db04      	blt.n	800a098 <_dtoa_r+0xa30>
 800a08e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a090:	430b      	orrs	r3, r1
 800a092:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a094:	430b      	orrs	r3, r1
 800a096:	d120      	bne.n	800a0da <_dtoa_r+0xa72>
 800a098:	2a00      	cmp	r2, #0
 800a09a:	dded      	ble.n	800a078 <_dtoa_r+0xa10>
 800a09c:	4649      	mov	r1, r9
 800a09e:	2201      	movs	r2, #1
 800a0a0:	4658      	mov	r0, fp
 800a0a2:	f000 fe93 	bl	800adcc <__lshift>
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4681      	mov	r9, r0
 800a0aa:	f000 fefb 	bl	800aea4 <__mcmp>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	dc03      	bgt.n	800a0ba <_dtoa_r+0xa52>
 800a0b2:	d1e1      	bne.n	800a078 <_dtoa_r+0xa10>
 800a0b4:	f018 0f01 	tst.w	r8, #1
 800a0b8:	d0de      	beq.n	800a078 <_dtoa_r+0xa10>
 800a0ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0be:	d1d8      	bne.n	800a072 <_dtoa_r+0xa0a>
 800a0c0:	9a00      	ldr	r2, [sp, #0]
 800a0c2:	2339      	movs	r3, #57	@ 0x39
 800a0c4:	7013      	strb	r3, [r2, #0]
 800a0c6:	4633      	mov	r3, r6
 800a0c8:	461e      	mov	r6, r3
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0d0:	2a39      	cmp	r2, #57	@ 0x39
 800a0d2:	d052      	beq.n	800a17a <_dtoa_r+0xb12>
 800a0d4:	3201      	adds	r2, #1
 800a0d6:	701a      	strb	r2, [r3, #0]
 800a0d8:	e612      	b.n	8009d00 <_dtoa_r+0x698>
 800a0da:	2a00      	cmp	r2, #0
 800a0dc:	dd07      	ble.n	800a0ee <_dtoa_r+0xa86>
 800a0de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0e2:	d0ed      	beq.n	800a0c0 <_dtoa_r+0xa58>
 800a0e4:	9a00      	ldr	r2, [sp, #0]
 800a0e6:	f108 0301 	add.w	r3, r8, #1
 800a0ea:	7013      	strb	r3, [r2, #0]
 800a0ec:	e608      	b.n	8009d00 <_dtoa_r+0x698>
 800a0ee:	9b07      	ldr	r3, [sp, #28]
 800a0f0:	9a07      	ldr	r2, [sp, #28]
 800a0f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a0f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d028      	beq.n	800a14e <_dtoa_r+0xae6>
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	2300      	movs	r3, #0
 800a100:	220a      	movs	r2, #10
 800a102:	4658      	mov	r0, fp
 800a104:	f000 fc6c 	bl	800a9e0 <__multadd>
 800a108:	42af      	cmp	r7, r5
 800a10a:	4681      	mov	r9, r0
 800a10c:	f04f 0300 	mov.w	r3, #0
 800a110:	f04f 020a 	mov.w	r2, #10
 800a114:	4639      	mov	r1, r7
 800a116:	4658      	mov	r0, fp
 800a118:	d107      	bne.n	800a12a <_dtoa_r+0xac2>
 800a11a:	f000 fc61 	bl	800a9e0 <__multadd>
 800a11e:	4607      	mov	r7, r0
 800a120:	4605      	mov	r5, r0
 800a122:	9b07      	ldr	r3, [sp, #28]
 800a124:	3301      	adds	r3, #1
 800a126:	9307      	str	r3, [sp, #28]
 800a128:	e774      	b.n	800a014 <_dtoa_r+0x9ac>
 800a12a:	f000 fc59 	bl	800a9e0 <__multadd>
 800a12e:	4629      	mov	r1, r5
 800a130:	4607      	mov	r7, r0
 800a132:	2300      	movs	r3, #0
 800a134:	220a      	movs	r2, #10
 800a136:	4658      	mov	r0, fp
 800a138:	f000 fc52 	bl	800a9e0 <__multadd>
 800a13c:	4605      	mov	r5, r0
 800a13e:	e7f0      	b.n	800a122 <_dtoa_r+0xaba>
 800a140:	9b00      	ldr	r3, [sp, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfcc      	ite	gt
 800a146:	461e      	movgt	r6, r3
 800a148:	2601      	movle	r6, #1
 800a14a:	4456      	add	r6, sl
 800a14c:	2700      	movs	r7, #0
 800a14e:	4649      	mov	r1, r9
 800a150:	2201      	movs	r2, #1
 800a152:	4658      	mov	r0, fp
 800a154:	f000 fe3a 	bl	800adcc <__lshift>
 800a158:	4621      	mov	r1, r4
 800a15a:	4681      	mov	r9, r0
 800a15c:	f000 fea2 	bl	800aea4 <__mcmp>
 800a160:	2800      	cmp	r0, #0
 800a162:	dcb0      	bgt.n	800a0c6 <_dtoa_r+0xa5e>
 800a164:	d102      	bne.n	800a16c <_dtoa_r+0xb04>
 800a166:	f018 0f01 	tst.w	r8, #1
 800a16a:	d1ac      	bne.n	800a0c6 <_dtoa_r+0xa5e>
 800a16c:	4633      	mov	r3, r6
 800a16e:	461e      	mov	r6, r3
 800a170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a174:	2a30      	cmp	r2, #48	@ 0x30
 800a176:	d0fa      	beq.n	800a16e <_dtoa_r+0xb06>
 800a178:	e5c2      	b.n	8009d00 <_dtoa_r+0x698>
 800a17a:	459a      	cmp	sl, r3
 800a17c:	d1a4      	bne.n	800a0c8 <_dtoa_r+0xa60>
 800a17e:	9b04      	ldr	r3, [sp, #16]
 800a180:	3301      	adds	r3, #1
 800a182:	9304      	str	r3, [sp, #16]
 800a184:	2331      	movs	r3, #49	@ 0x31
 800a186:	f88a 3000 	strb.w	r3, [sl]
 800a18a:	e5b9      	b.n	8009d00 <_dtoa_r+0x698>
 800a18c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a18e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a1ec <_dtoa_r+0xb84>
 800a192:	b11b      	cbz	r3, 800a19c <_dtoa_r+0xb34>
 800a194:	f10a 0308 	add.w	r3, sl, #8
 800a198:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a19a:	6013      	str	r3, [r2, #0]
 800a19c:	4650      	mov	r0, sl
 800a19e:	b019      	add	sp, #100	@ 0x64
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	f77f ae37 	ble.w	8009e1a <_dtoa_r+0x7b2>
 800a1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1b0:	2001      	movs	r0, #1
 800a1b2:	e655      	b.n	8009e60 <_dtoa_r+0x7f8>
 800a1b4:	9b00      	ldr	r3, [sp, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f77f aed6 	ble.w	8009f68 <_dtoa_r+0x900>
 800a1bc:	4656      	mov	r6, sl
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4648      	mov	r0, r9
 800a1c2:	f7ff f9c7 	bl	8009554 <quorem>
 800a1c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1ca:	f806 8b01 	strb.w	r8, [r6], #1
 800a1ce:	9b00      	ldr	r3, [sp, #0]
 800a1d0:	eba6 020a 	sub.w	r2, r6, sl
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	ddb3      	ble.n	800a140 <_dtoa_r+0xad8>
 800a1d8:	4649      	mov	r1, r9
 800a1da:	2300      	movs	r3, #0
 800a1dc:	220a      	movs	r2, #10
 800a1de:	4658      	mov	r0, fp
 800a1e0:	f000 fbfe 	bl	800a9e0 <__multadd>
 800a1e4:	4681      	mov	r9, r0
 800a1e6:	e7ea      	b.n	800a1be <_dtoa_r+0xb56>
 800a1e8:	0800c025 	.word	0x0800c025
 800a1ec:	0800bfa9 	.word	0x0800bfa9

0800a1f0 <_free_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	2900      	cmp	r1, #0
 800a1f6:	d041      	beq.n	800a27c <_free_r+0x8c>
 800a1f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1fc:	1f0c      	subs	r4, r1, #4
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	bfb8      	it	lt
 800a202:	18e4      	addlt	r4, r4, r3
 800a204:	f7fd fb42 	bl	800788c <__malloc_lock>
 800a208:	4a1d      	ldr	r2, [pc, #116]	@ (800a280 <_free_r+0x90>)
 800a20a:	6813      	ldr	r3, [r2, #0]
 800a20c:	b933      	cbnz	r3, 800a21c <_free_r+0x2c>
 800a20e:	6063      	str	r3, [r4, #4]
 800a210:	6014      	str	r4, [r2, #0]
 800a212:	4628      	mov	r0, r5
 800a214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a218:	f7fd bb3e 	b.w	8007898 <__malloc_unlock>
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	d908      	bls.n	800a232 <_free_r+0x42>
 800a220:	6820      	ldr	r0, [r4, #0]
 800a222:	1821      	adds	r1, r4, r0
 800a224:	428b      	cmp	r3, r1
 800a226:	bf01      	itttt	eq
 800a228:	6819      	ldreq	r1, [r3, #0]
 800a22a:	685b      	ldreq	r3, [r3, #4]
 800a22c:	1809      	addeq	r1, r1, r0
 800a22e:	6021      	streq	r1, [r4, #0]
 800a230:	e7ed      	b.n	800a20e <_free_r+0x1e>
 800a232:	461a      	mov	r2, r3
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	b10b      	cbz	r3, 800a23c <_free_r+0x4c>
 800a238:	42a3      	cmp	r3, r4
 800a23a:	d9fa      	bls.n	800a232 <_free_r+0x42>
 800a23c:	6811      	ldr	r1, [r2, #0]
 800a23e:	1850      	adds	r0, r2, r1
 800a240:	42a0      	cmp	r0, r4
 800a242:	d10b      	bne.n	800a25c <_free_r+0x6c>
 800a244:	6820      	ldr	r0, [r4, #0]
 800a246:	4401      	add	r1, r0
 800a248:	1850      	adds	r0, r2, r1
 800a24a:	4283      	cmp	r3, r0
 800a24c:	6011      	str	r1, [r2, #0]
 800a24e:	d1e0      	bne.n	800a212 <_free_r+0x22>
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	6053      	str	r3, [r2, #4]
 800a256:	4408      	add	r0, r1
 800a258:	6010      	str	r0, [r2, #0]
 800a25a:	e7da      	b.n	800a212 <_free_r+0x22>
 800a25c:	d902      	bls.n	800a264 <_free_r+0x74>
 800a25e:	230c      	movs	r3, #12
 800a260:	602b      	str	r3, [r5, #0]
 800a262:	e7d6      	b.n	800a212 <_free_r+0x22>
 800a264:	6820      	ldr	r0, [r4, #0]
 800a266:	1821      	adds	r1, r4, r0
 800a268:	428b      	cmp	r3, r1
 800a26a:	bf04      	itt	eq
 800a26c:	6819      	ldreq	r1, [r3, #0]
 800a26e:	685b      	ldreq	r3, [r3, #4]
 800a270:	6063      	str	r3, [r4, #4]
 800a272:	bf04      	itt	eq
 800a274:	1809      	addeq	r1, r1, r0
 800a276:	6021      	streq	r1, [r4, #0]
 800a278:	6054      	str	r4, [r2, #4]
 800a27a:	e7ca      	b.n	800a212 <_free_r+0x22>
 800a27c:	bd38      	pop	{r3, r4, r5, pc}
 800a27e:	bf00      	nop
 800a280:	20000838 	.word	0x20000838

0800a284 <rshift>:
 800a284:	6903      	ldr	r3, [r0, #16]
 800a286:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a28a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a28e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a292:	f100 0414 	add.w	r4, r0, #20
 800a296:	dd45      	ble.n	800a324 <rshift+0xa0>
 800a298:	f011 011f 	ands.w	r1, r1, #31
 800a29c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2a4:	d10c      	bne.n	800a2c0 <rshift+0x3c>
 800a2a6:	f100 0710 	add.w	r7, r0, #16
 800a2aa:	4629      	mov	r1, r5
 800a2ac:	42b1      	cmp	r1, r6
 800a2ae:	d334      	bcc.n	800a31a <rshift+0x96>
 800a2b0:	1a9b      	subs	r3, r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	1eea      	subs	r2, r5, #3
 800a2b6:	4296      	cmp	r6, r2
 800a2b8:	bf38      	it	cc
 800a2ba:	2300      	movcc	r3, #0
 800a2bc:	4423      	add	r3, r4
 800a2be:	e015      	b.n	800a2ec <rshift+0x68>
 800a2c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2c4:	f1c1 0820 	rsb	r8, r1, #32
 800a2c8:	40cf      	lsrs	r7, r1
 800a2ca:	f105 0e04 	add.w	lr, r5, #4
 800a2ce:	46a1      	mov	r9, r4
 800a2d0:	4576      	cmp	r6, lr
 800a2d2:	46f4      	mov	ip, lr
 800a2d4:	d815      	bhi.n	800a302 <rshift+0x7e>
 800a2d6:	1a9a      	subs	r2, r3, r2
 800a2d8:	0092      	lsls	r2, r2, #2
 800a2da:	3a04      	subs	r2, #4
 800a2dc:	3501      	adds	r5, #1
 800a2de:	42ae      	cmp	r6, r5
 800a2e0:	bf38      	it	cc
 800a2e2:	2200      	movcc	r2, #0
 800a2e4:	18a3      	adds	r3, r4, r2
 800a2e6:	50a7      	str	r7, [r4, r2]
 800a2e8:	b107      	cbz	r7, 800a2ec <rshift+0x68>
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	1b1a      	subs	r2, r3, r4
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a2f4:	bf08      	it	eq
 800a2f6:	2300      	moveq	r3, #0
 800a2f8:	6102      	str	r2, [r0, #16]
 800a2fa:	bf08      	it	eq
 800a2fc:	6143      	streq	r3, [r0, #20]
 800a2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a302:	f8dc c000 	ldr.w	ip, [ip]
 800a306:	fa0c fc08 	lsl.w	ip, ip, r8
 800a30a:	ea4c 0707 	orr.w	r7, ip, r7
 800a30e:	f849 7b04 	str.w	r7, [r9], #4
 800a312:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a316:	40cf      	lsrs	r7, r1
 800a318:	e7da      	b.n	800a2d0 <rshift+0x4c>
 800a31a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a31e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a322:	e7c3      	b.n	800a2ac <rshift+0x28>
 800a324:	4623      	mov	r3, r4
 800a326:	e7e1      	b.n	800a2ec <rshift+0x68>

0800a328 <__hexdig_fun>:
 800a328:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a32c:	2b09      	cmp	r3, #9
 800a32e:	d802      	bhi.n	800a336 <__hexdig_fun+0xe>
 800a330:	3820      	subs	r0, #32
 800a332:	b2c0      	uxtb	r0, r0
 800a334:	4770      	bx	lr
 800a336:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a33a:	2b05      	cmp	r3, #5
 800a33c:	d801      	bhi.n	800a342 <__hexdig_fun+0x1a>
 800a33e:	3847      	subs	r0, #71	@ 0x47
 800a340:	e7f7      	b.n	800a332 <__hexdig_fun+0xa>
 800a342:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a346:	2b05      	cmp	r3, #5
 800a348:	d801      	bhi.n	800a34e <__hexdig_fun+0x26>
 800a34a:	3827      	subs	r0, #39	@ 0x27
 800a34c:	e7f1      	b.n	800a332 <__hexdig_fun+0xa>
 800a34e:	2000      	movs	r0, #0
 800a350:	4770      	bx	lr
	...

0800a354 <__gethex>:
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	b085      	sub	sp, #20
 800a35a:	468a      	mov	sl, r1
 800a35c:	9302      	str	r3, [sp, #8]
 800a35e:	680b      	ldr	r3, [r1, #0]
 800a360:	9001      	str	r0, [sp, #4]
 800a362:	4690      	mov	r8, r2
 800a364:	1c9c      	adds	r4, r3, #2
 800a366:	46a1      	mov	r9, r4
 800a368:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a36c:	2830      	cmp	r0, #48	@ 0x30
 800a36e:	d0fa      	beq.n	800a366 <__gethex+0x12>
 800a370:	eba9 0303 	sub.w	r3, r9, r3
 800a374:	f1a3 0b02 	sub.w	fp, r3, #2
 800a378:	f7ff ffd6 	bl	800a328 <__hexdig_fun>
 800a37c:	4605      	mov	r5, r0
 800a37e:	2800      	cmp	r0, #0
 800a380:	d168      	bne.n	800a454 <__gethex+0x100>
 800a382:	49a0      	ldr	r1, [pc, #640]	@ (800a604 <__gethex+0x2b0>)
 800a384:	2201      	movs	r2, #1
 800a386:	4648      	mov	r0, r9
 800a388:	f7ff f82d 	bl	80093e6 <strncmp>
 800a38c:	4607      	mov	r7, r0
 800a38e:	2800      	cmp	r0, #0
 800a390:	d167      	bne.n	800a462 <__gethex+0x10e>
 800a392:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a396:	4626      	mov	r6, r4
 800a398:	f7ff ffc6 	bl	800a328 <__hexdig_fun>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d062      	beq.n	800a466 <__gethex+0x112>
 800a3a0:	4623      	mov	r3, r4
 800a3a2:	7818      	ldrb	r0, [r3, #0]
 800a3a4:	2830      	cmp	r0, #48	@ 0x30
 800a3a6:	4699      	mov	r9, r3
 800a3a8:	f103 0301 	add.w	r3, r3, #1
 800a3ac:	d0f9      	beq.n	800a3a2 <__gethex+0x4e>
 800a3ae:	f7ff ffbb 	bl	800a328 <__hexdig_fun>
 800a3b2:	fab0 f580 	clz	r5, r0
 800a3b6:	096d      	lsrs	r5, r5, #5
 800a3b8:	f04f 0b01 	mov.w	fp, #1
 800a3bc:	464a      	mov	r2, r9
 800a3be:	4616      	mov	r6, r2
 800a3c0:	3201      	adds	r2, #1
 800a3c2:	7830      	ldrb	r0, [r6, #0]
 800a3c4:	f7ff ffb0 	bl	800a328 <__hexdig_fun>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d1f8      	bne.n	800a3be <__gethex+0x6a>
 800a3cc:	498d      	ldr	r1, [pc, #564]	@ (800a604 <__gethex+0x2b0>)
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f7ff f808 	bl	80093e6 <strncmp>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d13f      	bne.n	800a45a <__gethex+0x106>
 800a3da:	b944      	cbnz	r4, 800a3ee <__gethex+0x9a>
 800a3dc:	1c74      	adds	r4, r6, #1
 800a3de:	4622      	mov	r2, r4
 800a3e0:	4616      	mov	r6, r2
 800a3e2:	3201      	adds	r2, #1
 800a3e4:	7830      	ldrb	r0, [r6, #0]
 800a3e6:	f7ff ff9f 	bl	800a328 <__hexdig_fun>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d1f8      	bne.n	800a3e0 <__gethex+0x8c>
 800a3ee:	1ba4      	subs	r4, r4, r6
 800a3f0:	00a7      	lsls	r7, r4, #2
 800a3f2:	7833      	ldrb	r3, [r6, #0]
 800a3f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a3f8:	2b50      	cmp	r3, #80	@ 0x50
 800a3fa:	d13e      	bne.n	800a47a <__gethex+0x126>
 800a3fc:	7873      	ldrb	r3, [r6, #1]
 800a3fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800a400:	d033      	beq.n	800a46a <__gethex+0x116>
 800a402:	2b2d      	cmp	r3, #45	@ 0x2d
 800a404:	d034      	beq.n	800a470 <__gethex+0x11c>
 800a406:	1c71      	adds	r1, r6, #1
 800a408:	2400      	movs	r4, #0
 800a40a:	7808      	ldrb	r0, [r1, #0]
 800a40c:	f7ff ff8c 	bl	800a328 <__hexdig_fun>
 800a410:	1e43      	subs	r3, r0, #1
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b18      	cmp	r3, #24
 800a416:	d830      	bhi.n	800a47a <__gethex+0x126>
 800a418:	f1a0 0210 	sub.w	r2, r0, #16
 800a41c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a420:	f7ff ff82 	bl	800a328 <__hexdig_fun>
 800a424:	f100 3cff 	add.w	ip, r0, #4294967295
 800a428:	fa5f fc8c 	uxtb.w	ip, ip
 800a42c:	f1bc 0f18 	cmp.w	ip, #24
 800a430:	f04f 030a 	mov.w	r3, #10
 800a434:	d91e      	bls.n	800a474 <__gethex+0x120>
 800a436:	b104      	cbz	r4, 800a43a <__gethex+0xe6>
 800a438:	4252      	negs	r2, r2
 800a43a:	4417      	add	r7, r2
 800a43c:	f8ca 1000 	str.w	r1, [sl]
 800a440:	b1ed      	cbz	r5, 800a47e <__gethex+0x12a>
 800a442:	f1bb 0f00 	cmp.w	fp, #0
 800a446:	bf0c      	ite	eq
 800a448:	2506      	moveq	r5, #6
 800a44a:	2500      	movne	r5, #0
 800a44c:	4628      	mov	r0, r5
 800a44e:	b005      	add	sp, #20
 800a450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a454:	2500      	movs	r5, #0
 800a456:	462c      	mov	r4, r5
 800a458:	e7b0      	b.n	800a3bc <__gethex+0x68>
 800a45a:	2c00      	cmp	r4, #0
 800a45c:	d1c7      	bne.n	800a3ee <__gethex+0x9a>
 800a45e:	4627      	mov	r7, r4
 800a460:	e7c7      	b.n	800a3f2 <__gethex+0x9e>
 800a462:	464e      	mov	r6, r9
 800a464:	462f      	mov	r7, r5
 800a466:	2501      	movs	r5, #1
 800a468:	e7c3      	b.n	800a3f2 <__gethex+0x9e>
 800a46a:	2400      	movs	r4, #0
 800a46c:	1cb1      	adds	r1, r6, #2
 800a46e:	e7cc      	b.n	800a40a <__gethex+0xb6>
 800a470:	2401      	movs	r4, #1
 800a472:	e7fb      	b.n	800a46c <__gethex+0x118>
 800a474:	fb03 0002 	mla	r0, r3, r2, r0
 800a478:	e7ce      	b.n	800a418 <__gethex+0xc4>
 800a47a:	4631      	mov	r1, r6
 800a47c:	e7de      	b.n	800a43c <__gethex+0xe8>
 800a47e:	eba6 0309 	sub.w	r3, r6, r9
 800a482:	3b01      	subs	r3, #1
 800a484:	4629      	mov	r1, r5
 800a486:	2b07      	cmp	r3, #7
 800a488:	dc0a      	bgt.n	800a4a0 <__gethex+0x14c>
 800a48a:	9801      	ldr	r0, [sp, #4]
 800a48c:	f000 fa46 	bl	800a91c <_Balloc>
 800a490:	4604      	mov	r4, r0
 800a492:	b940      	cbnz	r0, 800a4a6 <__gethex+0x152>
 800a494:	4b5c      	ldr	r3, [pc, #368]	@ (800a608 <__gethex+0x2b4>)
 800a496:	4602      	mov	r2, r0
 800a498:	21e4      	movs	r1, #228	@ 0xe4
 800a49a:	485c      	ldr	r0, [pc, #368]	@ (800a60c <__gethex+0x2b8>)
 800a49c:	f001 f996 	bl	800b7cc <__assert_func>
 800a4a0:	3101      	adds	r1, #1
 800a4a2:	105b      	asrs	r3, r3, #1
 800a4a4:	e7ef      	b.n	800a486 <__gethex+0x132>
 800a4a6:	f100 0a14 	add.w	sl, r0, #20
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	4655      	mov	r5, sl
 800a4ae:	469b      	mov	fp, r3
 800a4b0:	45b1      	cmp	r9, r6
 800a4b2:	d337      	bcc.n	800a524 <__gethex+0x1d0>
 800a4b4:	f845 bb04 	str.w	fp, [r5], #4
 800a4b8:	eba5 050a 	sub.w	r5, r5, sl
 800a4bc:	10ad      	asrs	r5, r5, #2
 800a4be:	6125      	str	r5, [r4, #16]
 800a4c0:	4658      	mov	r0, fp
 800a4c2:	f000 fb1d 	bl	800ab00 <__hi0bits>
 800a4c6:	016d      	lsls	r5, r5, #5
 800a4c8:	f8d8 6000 	ldr.w	r6, [r8]
 800a4cc:	1a2d      	subs	r5, r5, r0
 800a4ce:	42b5      	cmp	r5, r6
 800a4d0:	dd54      	ble.n	800a57c <__gethex+0x228>
 800a4d2:	1bad      	subs	r5, r5, r6
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f000 feb1 	bl	800b23e <__any_on>
 800a4dc:	4681      	mov	r9, r0
 800a4de:	b178      	cbz	r0, 800a500 <__gethex+0x1ac>
 800a4e0:	1e6b      	subs	r3, r5, #1
 800a4e2:	1159      	asrs	r1, r3, #5
 800a4e4:	f003 021f 	and.w	r2, r3, #31
 800a4e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a4ec:	f04f 0901 	mov.w	r9, #1
 800a4f0:	fa09 f202 	lsl.w	r2, r9, r2
 800a4f4:	420a      	tst	r2, r1
 800a4f6:	d003      	beq.n	800a500 <__gethex+0x1ac>
 800a4f8:	454b      	cmp	r3, r9
 800a4fa:	dc36      	bgt.n	800a56a <__gethex+0x216>
 800a4fc:	f04f 0902 	mov.w	r9, #2
 800a500:	4629      	mov	r1, r5
 800a502:	4620      	mov	r0, r4
 800a504:	f7ff febe 	bl	800a284 <rshift>
 800a508:	442f      	add	r7, r5
 800a50a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a50e:	42bb      	cmp	r3, r7
 800a510:	da42      	bge.n	800a598 <__gethex+0x244>
 800a512:	9801      	ldr	r0, [sp, #4]
 800a514:	4621      	mov	r1, r4
 800a516:	f000 fa41 	bl	800a99c <_Bfree>
 800a51a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a51c:	2300      	movs	r3, #0
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	25a3      	movs	r5, #163	@ 0xa3
 800a522:	e793      	b.n	800a44c <__gethex+0xf8>
 800a524:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a528:	2a2e      	cmp	r2, #46	@ 0x2e
 800a52a:	d012      	beq.n	800a552 <__gethex+0x1fe>
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	d104      	bne.n	800a53a <__gethex+0x1e6>
 800a530:	f845 bb04 	str.w	fp, [r5], #4
 800a534:	f04f 0b00 	mov.w	fp, #0
 800a538:	465b      	mov	r3, fp
 800a53a:	7830      	ldrb	r0, [r6, #0]
 800a53c:	9303      	str	r3, [sp, #12]
 800a53e:	f7ff fef3 	bl	800a328 <__hexdig_fun>
 800a542:	9b03      	ldr	r3, [sp, #12]
 800a544:	f000 000f 	and.w	r0, r0, #15
 800a548:	4098      	lsls	r0, r3
 800a54a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a54e:	3304      	adds	r3, #4
 800a550:	e7ae      	b.n	800a4b0 <__gethex+0x15c>
 800a552:	45b1      	cmp	r9, r6
 800a554:	d8ea      	bhi.n	800a52c <__gethex+0x1d8>
 800a556:	492b      	ldr	r1, [pc, #172]	@ (800a604 <__gethex+0x2b0>)
 800a558:	9303      	str	r3, [sp, #12]
 800a55a:	2201      	movs	r2, #1
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7fe ff42 	bl	80093e6 <strncmp>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	2800      	cmp	r0, #0
 800a566:	d1e1      	bne.n	800a52c <__gethex+0x1d8>
 800a568:	e7a2      	b.n	800a4b0 <__gethex+0x15c>
 800a56a:	1ea9      	subs	r1, r5, #2
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 fe66 	bl	800b23e <__any_on>
 800a572:	2800      	cmp	r0, #0
 800a574:	d0c2      	beq.n	800a4fc <__gethex+0x1a8>
 800a576:	f04f 0903 	mov.w	r9, #3
 800a57a:	e7c1      	b.n	800a500 <__gethex+0x1ac>
 800a57c:	da09      	bge.n	800a592 <__gethex+0x23e>
 800a57e:	1b75      	subs	r5, r6, r5
 800a580:	4621      	mov	r1, r4
 800a582:	9801      	ldr	r0, [sp, #4]
 800a584:	462a      	mov	r2, r5
 800a586:	f000 fc21 	bl	800adcc <__lshift>
 800a58a:	1b7f      	subs	r7, r7, r5
 800a58c:	4604      	mov	r4, r0
 800a58e:	f100 0a14 	add.w	sl, r0, #20
 800a592:	f04f 0900 	mov.w	r9, #0
 800a596:	e7b8      	b.n	800a50a <__gethex+0x1b6>
 800a598:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a59c:	42bd      	cmp	r5, r7
 800a59e:	dd6f      	ble.n	800a680 <__gethex+0x32c>
 800a5a0:	1bed      	subs	r5, r5, r7
 800a5a2:	42ae      	cmp	r6, r5
 800a5a4:	dc34      	bgt.n	800a610 <__gethex+0x2bc>
 800a5a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d022      	beq.n	800a5f4 <__gethex+0x2a0>
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d024      	beq.n	800a5fc <__gethex+0x2a8>
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d115      	bne.n	800a5e2 <__gethex+0x28e>
 800a5b6:	42ae      	cmp	r6, r5
 800a5b8:	d113      	bne.n	800a5e2 <__gethex+0x28e>
 800a5ba:	2e01      	cmp	r6, #1
 800a5bc:	d10b      	bne.n	800a5d6 <__gethex+0x282>
 800a5be:	9a02      	ldr	r2, [sp, #8]
 800a5c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5c4:	6013      	str	r3, [r2, #0]
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	6123      	str	r3, [r4, #16]
 800a5ca:	f8ca 3000 	str.w	r3, [sl]
 800a5ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5d0:	2562      	movs	r5, #98	@ 0x62
 800a5d2:	601c      	str	r4, [r3, #0]
 800a5d4:	e73a      	b.n	800a44c <__gethex+0xf8>
 800a5d6:	1e71      	subs	r1, r6, #1
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 fe30 	bl	800b23e <__any_on>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d1ed      	bne.n	800a5be <__gethex+0x26a>
 800a5e2:	9801      	ldr	r0, [sp, #4]
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	f000 f9d9 	bl	800a99c <_Bfree>
 800a5ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	2550      	movs	r5, #80	@ 0x50
 800a5f2:	e72b      	b.n	800a44c <__gethex+0xf8>
 800a5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1f3      	bne.n	800a5e2 <__gethex+0x28e>
 800a5fa:	e7e0      	b.n	800a5be <__gethex+0x26a>
 800a5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1dd      	bne.n	800a5be <__gethex+0x26a>
 800a602:	e7ee      	b.n	800a5e2 <__gethex+0x28e>
 800a604:	0800bf10 	.word	0x0800bf10
 800a608:	0800c025 	.word	0x0800c025
 800a60c:	0800c036 	.word	0x0800c036
 800a610:	1e6f      	subs	r7, r5, #1
 800a612:	f1b9 0f00 	cmp.w	r9, #0
 800a616:	d130      	bne.n	800a67a <__gethex+0x326>
 800a618:	b127      	cbz	r7, 800a624 <__gethex+0x2d0>
 800a61a:	4639      	mov	r1, r7
 800a61c:	4620      	mov	r0, r4
 800a61e:	f000 fe0e 	bl	800b23e <__any_on>
 800a622:	4681      	mov	r9, r0
 800a624:	117a      	asrs	r2, r7, #5
 800a626:	2301      	movs	r3, #1
 800a628:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a62c:	f007 071f 	and.w	r7, r7, #31
 800a630:	40bb      	lsls	r3, r7
 800a632:	4213      	tst	r3, r2
 800a634:	4629      	mov	r1, r5
 800a636:	4620      	mov	r0, r4
 800a638:	bf18      	it	ne
 800a63a:	f049 0902 	orrne.w	r9, r9, #2
 800a63e:	f7ff fe21 	bl	800a284 <rshift>
 800a642:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a646:	1b76      	subs	r6, r6, r5
 800a648:	2502      	movs	r5, #2
 800a64a:	f1b9 0f00 	cmp.w	r9, #0
 800a64e:	d047      	beq.n	800a6e0 <__gethex+0x38c>
 800a650:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a654:	2b02      	cmp	r3, #2
 800a656:	d015      	beq.n	800a684 <__gethex+0x330>
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d017      	beq.n	800a68c <__gethex+0x338>
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d109      	bne.n	800a674 <__gethex+0x320>
 800a660:	f019 0f02 	tst.w	r9, #2
 800a664:	d006      	beq.n	800a674 <__gethex+0x320>
 800a666:	f8da 3000 	ldr.w	r3, [sl]
 800a66a:	ea49 0903 	orr.w	r9, r9, r3
 800a66e:	f019 0f01 	tst.w	r9, #1
 800a672:	d10e      	bne.n	800a692 <__gethex+0x33e>
 800a674:	f045 0510 	orr.w	r5, r5, #16
 800a678:	e032      	b.n	800a6e0 <__gethex+0x38c>
 800a67a:	f04f 0901 	mov.w	r9, #1
 800a67e:	e7d1      	b.n	800a624 <__gethex+0x2d0>
 800a680:	2501      	movs	r5, #1
 800a682:	e7e2      	b.n	800a64a <__gethex+0x2f6>
 800a684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a686:	f1c3 0301 	rsb	r3, r3, #1
 800a68a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0f0      	beq.n	800a674 <__gethex+0x320>
 800a692:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a696:	f104 0314 	add.w	r3, r4, #20
 800a69a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a69e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6a2:	f04f 0c00 	mov.w	ip, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a6b0:	d01b      	beq.n	800a6ea <__gethex+0x396>
 800a6b2:	3201      	adds	r2, #1
 800a6b4:	6002      	str	r2, [r0, #0]
 800a6b6:	2d02      	cmp	r5, #2
 800a6b8:	f104 0314 	add.w	r3, r4, #20
 800a6bc:	d13c      	bne.n	800a738 <__gethex+0x3e4>
 800a6be:	f8d8 2000 	ldr.w	r2, [r8]
 800a6c2:	3a01      	subs	r2, #1
 800a6c4:	42b2      	cmp	r2, r6
 800a6c6:	d109      	bne.n	800a6dc <__gethex+0x388>
 800a6c8:	1171      	asrs	r1, r6, #5
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6d0:	f006 061f 	and.w	r6, r6, #31
 800a6d4:	fa02 f606 	lsl.w	r6, r2, r6
 800a6d8:	421e      	tst	r6, r3
 800a6da:	d13a      	bne.n	800a752 <__gethex+0x3fe>
 800a6dc:	f045 0520 	orr.w	r5, r5, #32
 800a6e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6e2:	601c      	str	r4, [r3, #0]
 800a6e4:	9b02      	ldr	r3, [sp, #8]
 800a6e6:	601f      	str	r7, [r3, #0]
 800a6e8:	e6b0      	b.n	800a44c <__gethex+0xf8>
 800a6ea:	4299      	cmp	r1, r3
 800a6ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800a6f0:	d8d9      	bhi.n	800a6a6 <__gethex+0x352>
 800a6f2:	68a3      	ldr	r3, [r4, #8]
 800a6f4:	459b      	cmp	fp, r3
 800a6f6:	db17      	blt.n	800a728 <__gethex+0x3d4>
 800a6f8:	6861      	ldr	r1, [r4, #4]
 800a6fa:	9801      	ldr	r0, [sp, #4]
 800a6fc:	3101      	adds	r1, #1
 800a6fe:	f000 f90d 	bl	800a91c <_Balloc>
 800a702:	4681      	mov	r9, r0
 800a704:	b918      	cbnz	r0, 800a70e <__gethex+0x3ba>
 800a706:	4b1a      	ldr	r3, [pc, #104]	@ (800a770 <__gethex+0x41c>)
 800a708:	4602      	mov	r2, r0
 800a70a:	2184      	movs	r1, #132	@ 0x84
 800a70c:	e6c5      	b.n	800a49a <__gethex+0x146>
 800a70e:	6922      	ldr	r2, [r4, #16]
 800a710:	3202      	adds	r2, #2
 800a712:	f104 010c 	add.w	r1, r4, #12
 800a716:	0092      	lsls	r2, r2, #2
 800a718:	300c      	adds	r0, #12
 800a71a:	f7fe fefe 	bl	800951a <memcpy>
 800a71e:	4621      	mov	r1, r4
 800a720:	9801      	ldr	r0, [sp, #4]
 800a722:	f000 f93b 	bl	800a99c <_Bfree>
 800a726:	464c      	mov	r4, r9
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a730:	6122      	str	r2, [r4, #16]
 800a732:	2201      	movs	r2, #1
 800a734:	615a      	str	r2, [r3, #20]
 800a736:	e7be      	b.n	800a6b6 <__gethex+0x362>
 800a738:	6922      	ldr	r2, [r4, #16]
 800a73a:	455a      	cmp	r2, fp
 800a73c:	dd0b      	ble.n	800a756 <__gethex+0x402>
 800a73e:	2101      	movs	r1, #1
 800a740:	4620      	mov	r0, r4
 800a742:	f7ff fd9f 	bl	800a284 <rshift>
 800a746:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a74a:	3701      	adds	r7, #1
 800a74c:	42bb      	cmp	r3, r7
 800a74e:	f6ff aee0 	blt.w	800a512 <__gethex+0x1be>
 800a752:	2501      	movs	r5, #1
 800a754:	e7c2      	b.n	800a6dc <__gethex+0x388>
 800a756:	f016 061f 	ands.w	r6, r6, #31
 800a75a:	d0fa      	beq.n	800a752 <__gethex+0x3fe>
 800a75c:	4453      	add	r3, sl
 800a75e:	f1c6 0620 	rsb	r6, r6, #32
 800a762:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a766:	f000 f9cb 	bl	800ab00 <__hi0bits>
 800a76a:	42b0      	cmp	r0, r6
 800a76c:	dbe7      	blt.n	800a73e <__gethex+0x3ea>
 800a76e:	e7f0      	b.n	800a752 <__gethex+0x3fe>
 800a770:	0800c025 	.word	0x0800c025

0800a774 <L_shift>:
 800a774:	f1c2 0208 	rsb	r2, r2, #8
 800a778:	0092      	lsls	r2, r2, #2
 800a77a:	b570      	push	{r4, r5, r6, lr}
 800a77c:	f1c2 0620 	rsb	r6, r2, #32
 800a780:	6843      	ldr	r3, [r0, #4]
 800a782:	6804      	ldr	r4, [r0, #0]
 800a784:	fa03 f506 	lsl.w	r5, r3, r6
 800a788:	432c      	orrs	r4, r5
 800a78a:	40d3      	lsrs	r3, r2
 800a78c:	6004      	str	r4, [r0, #0]
 800a78e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a792:	4288      	cmp	r0, r1
 800a794:	d3f4      	bcc.n	800a780 <L_shift+0xc>
 800a796:	bd70      	pop	{r4, r5, r6, pc}

0800a798 <__match>:
 800a798:	b530      	push	{r4, r5, lr}
 800a79a:	6803      	ldr	r3, [r0, #0]
 800a79c:	3301      	adds	r3, #1
 800a79e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7a2:	b914      	cbnz	r4, 800a7aa <__match+0x12>
 800a7a4:	6003      	str	r3, [r0, #0]
 800a7a6:	2001      	movs	r0, #1
 800a7a8:	bd30      	pop	{r4, r5, pc}
 800a7aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a7b2:	2d19      	cmp	r5, #25
 800a7b4:	bf98      	it	ls
 800a7b6:	3220      	addls	r2, #32
 800a7b8:	42a2      	cmp	r2, r4
 800a7ba:	d0f0      	beq.n	800a79e <__match+0x6>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e7f3      	b.n	800a7a8 <__match+0x10>

0800a7c0 <__hexnan>:
 800a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	680b      	ldr	r3, [r1, #0]
 800a7c6:	6801      	ldr	r1, [r0, #0]
 800a7c8:	115e      	asrs	r6, r3, #5
 800a7ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a7ce:	f013 031f 	ands.w	r3, r3, #31
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	bf18      	it	ne
 800a7d6:	3604      	addne	r6, #4
 800a7d8:	2500      	movs	r5, #0
 800a7da:	1f37      	subs	r7, r6, #4
 800a7dc:	4682      	mov	sl, r0
 800a7de:	4690      	mov	r8, r2
 800a7e0:	9301      	str	r3, [sp, #4]
 800a7e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a7e6:	46b9      	mov	r9, r7
 800a7e8:	463c      	mov	r4, r7
 800a7ea:	9502      	str	r5, [sp, #8]
 800a7ec:	46ab      	mov	fp, r5
 800a7ee:	784a      	ldrb	r2, [r1, #1]
 800a7f0:	1c4b      	adds	r3, r1, #1
 800a7f2:	9303      	str	r3, [sp, #12]
 800a7f4:	b342      	cbz	r2, 800a848 <__hexnan+0x88>
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	9105      	str	r1, [sp, #20]
 800a7fa:	9204      	str	r2, [sp, #16]
 800a7fc:	f7ff fd94 	bl	800a328 <__hexdig_fun>
 800a800:	2800      	cmp	r0, #0
 800a802:	d151      	bne.n	800a8a8 <__hexnan+0xe8>
 800a804:	9a04      	ldr	r2, [sp, #16]
 800a806:	9905      	ldr	r1, [sp, #20]
 800a808:	2a20      	cmp	r2, #32
 800a80a:	d818      	bhi.n	800a83e <__hexnan+0x7e>
 800a80c:	9b02      	ldr	r3, [sp, #8]
 800a80e:	459b      	cmp	fp, r3
 800a810:	dd13      	ble.n	800a83a <__hexnan+0x7a>
 800a812:	454c      	cmp	r4, r9
 800a814:	d206      	bcs.n	800a824 <__hexnan+0x64>
 800a816:	2d07      	cmp	r5, #7
 800a818:	dc04      	bgt.n	800a824 <__hexnan+0x64>
 800a81a:	462a      	mov	r2, r5
 800a81c:	4649      	mov	r1, r9
 800a81e:	4620      	mov	r0, r4
 800a820:	f7ff ffa8 	bl	800a774 <L_shift>
 800a824:	4544      	cmp	r4, r8
 800a826:	d952      	bls.n	800a8ce <__hexnan+0x10e>
 800a828:	2300      	movs	r3, #0
 800a82a:	f1a4 0904 	sub.w	r9, r4, #4
 800a82e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a832:	f8cd b008 	str.w	fp, [sp, #8]
 800a836:	464c      	mov	r4, r9
 800a838:	461d      	mov	r5, r3
 800a83a:	9903      	ldr	r1, [sp, #12]
 800a83c:	e7d7      	b.n	800a7ee <__hexnan+0x2e>
 800a83e:	2a29      	cmp	r2, #41	@ 0x29
 800a840:	d157      	bne.n	800a8f2 <__hexnan+0x132>
 800a842:	3102      	adds	r1, #2
 800a844:	f8ca 1000 	str.w	r1, [sl]
 800a848:	f1bb 0f00 	cmp.w	fp, #0
 800a84c:	d051      	beq.n	800a8f2 <__hexnan+0x132>
 800a84e:	454c      	cmp	r4, r9
 800a850:	d206      	bcs.n	800a860 <__hexnan+0xa0>
 800a852:	2d07      	cmp	r5, #7
 800a854:	dc04      	bgt.n	800a860 <__hexnan+0xa0>
 800a856:	462a      	mov	r2, r5
 800a858:	4649      	mov	r1, r9
 800a85a:	4620      	mov	r0, r4
 800a85c:	f7ff ff8a 	bl	800a774 <L_shift>
 800a860:	4544      	cmp	r4, r8
 800a862:	d936      	bls.n	800a8d2 <__hexnan+0x112>
 800a864:	f1a8 0204 	sub.w	r2, r8, #4
 800a868:	4623      	mov	r3, r4
 800a86a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a86e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a872:	429f      	cmp	r7, r3
 800a874:	d2f9      	bcs.n	800a86a <__hexnan+0xaa>
 800a876:	1b3b      	subs	r3, r7, r4
 800a878:	f023 0303 	bic.w	r3, r3, #3
 800a87c:	3304      	adds	r3, #4
 800a87e:	3401      	adds	r4, #1
 800a880:	3e03      	subs	r6, #3
 800a882:	42b4      	cmp	r4, r6
 800a884:	bf88      	it	hi
 800a886:	2304      	movhi	r3, #4
 800a888:	4443      	add	r3, r8
 800a88a:	2200      	movs	r2, #0
 800a88c:	f843 2b04 	str.w	r2, [r3], #4
 800a890:	429f      	cmp	r7, r3
 800a892:	d2fb      	bcs.n	800a88c <__hexnan+0xcc>
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	b91b      	cbnz	r3, 800a8a0 <__hexnan+0xe0>
 800a898:	4547      	cmp	r7, r8
 800a89a:	d128      	bne.n	800a8ee <__hexnan+0x12e>
 800a89c:	2301      	movs	r3, #1
 800a89e:	603b      	str	r3, [r7, #0]
 800a8a0:	2005      	movs	r0, #5
 800a8a2:	b007      	add	sp, #28
 800a8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	2d08      	cmp	r5, #8
 800a8ac:	f10b 0b01 	add.w	fp, fp, #1
 800a8b0:	dd06      	ble.n	800a8c0 <__hexnan+0x100>
 800a8b2:	4544      	cmp	r4, r8
 800a8b4:	d9c1      	bls.n	800a83a <__hexnan+0x7a>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8bc:	2501      	movs	r5, #1
 800a8be:	3c04      	subs	r4, #4
 800a8c0:	6822      	ldr	r2, [r4, #0]
 800a8c2:	f000 000f 	and.w	r0, r0, #15
 800a8c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a8ca:	6020      	str	r0, [r4, #0]
 800a8cc:	e7b5      	b.n	800a83a <__hexnan+0x7a>
 800a8ce:	2508      	movs	r5, #8
 800a8d0:	e7b3      	b.n	800a83a <__hexnan+0x7a>
 800a8d2:	9b01      	ldr	r3, [sp, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d0dd      	beq.n	800a894 <__hexnan+0xd4>
 800a8d8:	f1c3 0320 	rsb	r3, r3, #32
 800a8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e0:	40da      	lsrs	r2, r3
 800a8e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a8ec:	e7d2      	b.n	800a894 <__hexnan+0xd4>
 800a8ee:	3f04      	subs	r7, #4
 800a8f0:	e7d0      	b.n	800a894 <__hexnan+0xd4>
 800a8f2:	2004      	movs	r0, #4
 800a8f4:	e7d5      	b.n	800a8a2 <__hexnan+0xe2>

0800a8f6 <__ascii_mbtowc>:
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	b901      	cbnz	r1, 800a8fc <__ascii_mbtowc+0x6>
 800a8fa:	a901      	add	r1, sp, #4
 800a8fc:	b142      	cbz	r2, 800a910 <__ascii_mbtowc+0x1a>
 800a8fe:	b14b      	cbz	r3, 800a914 <__ascii_mbtowc+0x1e>
 800a900:	7813      	ldrb	r3, [r2, #0]
 800a902:	600b      	str	r3, [r1, #0]
 800a904:	7812      	ldrb	r2, [r2, #0]
 800a906:	1e10      	subs	r0, r2, #0
 800a908:	bf18      	it	ne
 800a90a:	2001      	movne	r0, #1
 800a90c:	b002      	add	sp, #8
 800a90e:	4770      	bx	lr
 800a910:	4610      	mov	r0, r2
 800a912:	e7fb      	b.n	800a90c <__ascii_mbtowc+0x16>
 800a914:	f06f 0001 	mvn.w	r0, #1
 800a918:	e7f8      	b.n	800a90c <__ascii_mbtowc+0x16>
	...

0800a91c <_Balloc>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	69c6      	ldr	r6, [r0, #28]
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	b976      	cbnz	r6, 800a944 <_Balloc+0x28>
 800a926:	2010      	movs	r0, #16
 800a928:	f7fc ff06 	bl	8007738 <malloc>
 800a92c:	4602      	mov	r2, r0
 800a92e:	61e0      	str	r0, [r4, #28]
 800a930:	b920      	cbnz	r0, 800a93c <_Balloc+0x20>
 800a932:	4b18      	ldr	r3, [pc, #96]	@ (800a994 <_Balloc+0x78>)
 800a934:	4818      	ldr	r0, [pc, #96]	@ (800a998 <_Balloc+0x7c>)
 800a936:	216b      	movs	r1, #107	@ 0x6b
 800a938:	f000 ff48 	bl	800b7cc <__assert_func>
 800a93c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a940:	6006      	str	r6, [r0, #0]
 800a942:	60c6      	str	r6, [r0, #12]
 800a944:	69e6      	ldr	r6, [r4, #28]
 800a946:	68f3      	ldr	r3, [r6, #12]
 800a948:	b183      	cbz	r3, 800a96c <_Balloc+0x50>
 800a94a:	69e3      	ldr	r3, [r4, #28]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a952:	b9b8      	cbnz	r0, 800a984 <_Balloc+0x68>
 800a954:	2101      	movs	r1, #1
 800a956:	fa01 f605 	lsl.w	r6, r1, r5
 800a95a:	1d72      	adds	r2, r6, #5
 800a95c:	0092      	lsls	r2, r2, #2
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 ff52 	bl	800b808 <_calloc_r>
 800a964:	b160      	cbz	r0, 800a980 <_Balloc+0x64>
 800a966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a96a:	e00e      	b.n	800a98a <_Balloc+0x6e>
 800a96c:	2221      	movs	r2, #33	@ 0x21
 800a96e:	2104      	movs	r1, #4
 800a970:	4620      	mov	r0, r4
 800a972:	f000 ff49 	bl	800b808 <_calloc_r>
 800a976:	69e3      	ldr	r3, [r4, #28]
 800a978:	60f0      	str	r0, [r6, #12]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e4      	bne.n	800a94a <_Balloc+0x2e>
 800a980:	2000      	movs	r0, #0
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	6802      	ldr	r2, [r0, #0]
 800a986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a98a:	2300      	movs	r3, #0
 800a98c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a990:	e7f7      	b.n	800a982 <_Balloc+0x66>
 800a992:	bf00      	nop
 800a994:	0800bfb6 	.word	0x0800bfb6
 800a998:	0800c096 	.word	0x0800c096

0800a99c <_Bfree>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	69c6      	ldr	r6, [r0, #28]
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	b976      	cbnz	r6, 800a9c4 <_Bfree+0x28>
 800a9a6:	2010      	movs	r0, #16
 800a9a8:	f7fc fec6 	bl	8007738 <malloc>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	61e8      	str	r0, [r5, #28]
 800a9b0:	b920      	cbnz	r0, 800a9bc <_Bfree+0x20>
 800a9b2:	4b09      	ldr	r3, [pc, #36]	@ (800a9d8 <_Bfree+0x3c>)
 800a9b4:	4809      	ldr	r0, [pc, #36]	@ (800a9dc <_Bfree+0x40>)
 800a9b6:	218f      	movs	r1, #143	@ 0x8f
 800a9b8:	f000 ff08 	bl	800b7cc <__assert_func>
 800a9bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9c0:	6006      	str	r6, [r0, #0]
 800a9c2:	60c6      	str	r6, [r0, #12]
 800a9c4:	b13c      	cbz	r4, 800a9d6 <_Bfree+0x3a>
 800a9c6:	69eb      	ldr	r3, [r5, #28]
 800a9c8:	6862      	ldr	r2, [r4, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9d0:	6021      	str	r1, [r4, #0]
 800a9d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	0800bfb6 	.word	0x0800bfb6
 800a9dc:	0800c096 	.word	0x0800c096

0800a9e0 <__multadd>:
 800a9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e4:	690d      	ldr	r5, [r1, #16]
 800a9e6:	4607      	mov	r7, r0
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	461e      	mov	r6, r3
 800a9ec:	f101 0c14 	add.w	ip, r1, #20
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a9f6:	b299      	uxth	r1, r3
 800a9f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a9fc:	0c1e      	lsrs	r6, r3, #16
 800a9fe:	0c0b      	lsrs	r3, r1, #16
 800aa00:	fb02 3306 	mla	r3, r2, r6, r3
 800aa04:	b289      	uxth	r1, r1
 800aa06:	3001      	adds	r0, #1
 800aa08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa0c:	4285      	cmp	r5, r0
 800aa0e:	f84c 1b04 	str.w	r1, [ip], #4
 800aa12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa16:	dcec      	bgt.n	800a9f2 <__multadd+0x12>
 800aa18:	b30e      	cbz	r6, 800aa5e <__multadd+0x7e>
 800aa1a:	68a3      	ldr	r3, [r4, #8]
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	dc19      	bgt.n	800aa54 <__multadd+0x74>
 800aa20:	6861      	ldr	r1, [r4, #4]
 800aa22:	4638      	mov	r0, r7
 800aa24:	3101      	adds	r1, #1
 800aa26:	f7ff ff79 	bl	800a91c <_Balloc>
 800aa2a:	4680      	mov	r8, r0
 800aa2c:	b928      	cbnz	r0, 800aa3a <__multadd+0x5a>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	4b0c      	ldr	r3, [pc, #48]	@ (800aa64 <__multadd+0x84>)
 800aa32:	480d      	ldr	r0, [pc, #52]	@ (800aa68 <__multadd+0x88>)
 800aa34:	21ba      	movs	r1, #186	@ 0xba
 800aa36:	f000 fec9 	bl	800b7cc <__assert_func>
 800aa3a:	6922      	ldr	r2, [r4, #16]
 800aa3c:	3202      	adds	r2, #2
 800aa3e:	f104 010c 	add.w	r1, r4, #12
 800aa42:	0092      	lsls	r2, r2, #2
 800aa44:	300c      	adds	r0, #12
 800aa46:	f7fe fd68 	bl	800951a <memcpy>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff ffa5 	bl	800a99c <_Bfree>
 800aa52:	4644      	mov	r4, r8
 800aa54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa58:	3501      	adds	r5, #1
 800aa5a:	615e      	str	r6, [r3, #20]
 800aa5c:	6125      	str	r5, [r4, #16]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa64:	0800c025 	.word	0x0800c025
 800aa68:	0800c096 	.word	0x0800c096

0800aa6c <__s2b>:
 800aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	460c      	mov	r4, r1
 800aa72:	4615      	mov	r5, r2
 800aa74:	461f      	mov	r7, r3
 800aa76:	2209      	movs	r2, #9
 800aa78:	3308      	adds	r3, #8
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa80:	2100      	movs	r1, #0
 800aa82:	2201      	movs	r2, #1
 800aa84:	429a      	cmp	r2, r3
 800aa86:	db09      	blt.n	800aa9c <__s2b+0x30>
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7ff ff47 	bl	800a91c <_Balloc>
 800aa8e:	b940      	cbnz	r0, 800aaa2 <__s2b+0x36>
 800aa90:	4602      	mov	r2, r0
 800aa92:	4b19      	ldr	r3, [pc, #100]	@ (800aaf8 <__s2b+0x8c>)
 800aa94:	4819      	ldr	r0, [pc, #100]	@ (800aafc <__s2b+0x90>)
 800aa96:	21d3      	movs	r1, #211	@ 0xd3
 800aa98:	f000 fe98 	bl	800b7cc <__assert_func>
 800aa9c:	0052      	lsls	r2, r2, #1
 800aa9e:	3101      	adds	r1, #1
 800aaa0:	e7f0      	b.n	800aa84 <__s2b+0x18>
 800aaa2:	9b08      	ldr	r3, [sp, #32]
 800aaa4:	6143      	str	r3, [r0, #20]
 800aaa6:	2d09      	cmp	r5, #9
 800aaa8:	f04f 0301 	mov.w	r3, #1
 800aaac:	6103      	str	r3, [r0, #16]
 800aaae:	dd16      	ble.n	800aade <__s2b+0x72>
 800aab0:	f104 0909 	add.w	r9, r4, #9
 800aab4:	46c8      	mov	r8, r9
 800aab6:	442c      	add	r4, r5
 800aab8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aabc:	4601      	mov	r1, r0
 800aabe:	3b30      	subs	r3, #48	@ 0x30
 800aac0:	220a      	movs	r2, #10
 800aac2:	4630      	mov	r0, r6
 800aac4:	f7ff ff8c 	bl	800a9e0 <__multadd>
 800aac8:	45a0      	cmp	r8, r4
 800aaca:	d1f5      	bne.n	800aab8 <__s2b+0x4c>
 800aacc:	f1a5 0408 	sub.w	r4, r5, #8
 800aad0:	444c      	add	r4, r9
 800aad2:	1b2d      	subs	r5, r5, r4
 800aad4:	1963      	adds	r3, r4, r5
 800aad6:	42bb      	cmp	r3, r7
 800aad8:	db04      	blt.n	800aae4 <__s2b+0x78>
 800aada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aade:	340a      	adds	r4, #10
 800aae0:	2509      	movs	r5, #9
 800aae2:	e7f6      	b.n	800aad2 <__s2b+0x66>
 800aae4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aae8:	4601      	mov	r1, r0
 800aaea:	3b30      	subs	r3, #48	@ 0x30
 800aaec:	220a      	movs	r2, #10
 800aaee:	4630      	mov	r0, r6
 800aaf0:	f7ff ff76 	bl	800a9e0 <__multadd>
 800aaf4:	e7ee      	b.n	800aad4 <__s2b+0x68>
 800aaf6:	bf00      	nop
 800aaf8:	0800c025 	.word	0x0800c025
 800aafc:	0800c096 	.word	0x0800c096

0800ab00 <__hi0bits>:
 800ab00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab04:	4603      	mov	r3, r0
 800ab06:	bf36      	itet	cc
 800ab08:	0403      	lslcc	r3, r0, #16
 800ab0a:	2000      	movcs	r0, #0
 800ab0c:	2010      	movcc	r0, #16
 800ab0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab12:	bf3c      	itt	cc
 800ab14:	021b      	lslcc	r3, r3, #8
 800ab16:	3008      	addcc	r0, #8
 800ab18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab1c:	bf3c      	itt	cc
 800ab1e:	011b      	lslcc	r3, r3, #4
 800ab20:	3004      	addcc	r0, #4
 800ab22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab26:	bf3c      	itt	cc
 800ab28:	009b      	lslcc	r3, r3, #2
 800ab2a:	3002      	addcc	r0, #2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	db05      	blt.n	800ab3c <__hi0bits+0x3c>
 800ab30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab34:	f100 0001 	add.w	r0, r0, #1
 800ab38:	bf08      	it	eq
 800ab3a:	2020      	moveq	r0, #32
 800ab3c:	4770      	bx	lr

0800ab3e <__lo0bits>:
 800ab3e:	6803      	ldr	r3, [r0, #0]
 800ab40:	4602      	mov	r2, r0
 800ab42:	f013 0007 	ands.w	r0, r3, #7
 800ab46:	d00b      	beq.n	800ab60 <__lo0bits+0x22>
 800ab48:	07d9      	lsls	r1, r3, #31
 800ab4a:	d421      	bmi.n	800ab90 <__lo0bits+0x52>
 800ab4c:	0798      	lsls	r0, r3, #30
 800ab4e:	bf49      	itett	mi
 800ab50:	085b      	lsrmi	r3, r3, #1
 800ab52:	089b      	lsrpl	r3, r3, #2
 800ab54:	2001      	movmi	r0, #1
 800ab56:	6013      	strmi	r3, [r2, #0]
 800ab58:	bf5c      	itt	pl
 800ab5a:	6013      	strpl	r3, [r2, #0]
 800ab5c:	2002      	movpl	r0, #2
 800ab5e:	4770      	bx	lr
 800ab60:	b299      	uxth	r1, r3
 800ab62:	b909      	cbnz	r1, 800ab68 <__lo0bits+0x2a>
 800ab64:	0c1b      	lsrs	r3, r3, #16
 800ab66:	2010      	movs	r0, #16
 800ab68:	b2d9      	uxtb	r1, r3
 800ab6a:	b909      	cbnz	r1, 800ab70 <__lo0bits+0x32>
 800ab6c:	3008      	adds	r0, #8
 800ab6e:	0a1b      	lsrs	r3, r3, #8
 800ab70:	0719      	lsls	r1, r3, #28
 800ab72:	bf04      	itt	eq
 800ab74:	091b      	lsreq	r3, r3, #4
 800ab76:	3004      	addeq	r0, #4
 800ab78:	0799      	lsls	r1, r3, #30
 800ab7a:	bf04      	itt	eq
 800ab7c:	089b      	lsreq	r3, r3, #2
 800ab7e:	3002      	addeq	r0, #2
 800ab80:	07d9      	lsls	r1, r3, #31
 800ab82:	d403      	bmi.n	800ab8c <__lo0bits+0x4e>
 800ab84:	085b      	lsrs	r3, r3, #1
 800ab86:	f100 0001 	add.w	r0, r0, #1
 800ab8a:	d003      	beq.n	800ab94 <__lo0bits+0x56>
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	4770      	bx	lr
 800ab90:	2000      	movs	r0, #0
 800ab92:	4770      	bx	lr
 800ab94:	2020      	movs	r0, #32
 800ab96:	4770      	bx	lr

0800ab98 <__i2b>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	f7ff febd 	bl	800a91c <_Balloc>
 800aba2:	4602      	mov	r2, r0
 800aba4:	b928      	cbnz	r0, 800abb2 <__i2b+0x1a>
 800aba6:	4b05      	ldr	r3, [pc, #20]	@ (800abbc <__i2b+0x24>)
 800aba8:	4805      	ldr	r0, [pc, #20]	@ (800abc0 <__i2b+0x28>)
 800abaa:	f240 1145 	movw	r1, #325	@ 0x145
 800abae:	f000 fe0d 	bl	800b7cc <__assert_func>
 800abb2:	2301      	movs	r3, #1
 800abb4:	6144      	str	r4, [r0, #20]
 800abb6:	6103      	str	r3, [r0, #16]
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	bf00      	nop
 800abbc:	0800c025 	.word	0x0800c025
 800abc0:	0800c096 	.word	0x0800c096

0800abc4 <__multiply>:
 800abc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc8:	4614      	mov	r4, r2
 800abca:	690a      	ldr	r2, [r1, #16]
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	429a      	cmp	r2, r3
 800abd0:	bfa8      	it	ge
 800abd2:	4623      	movge	r3, r4
 800abd4:	460f      	mov	r7, r1
 800abd6:	bfa4      	itt	ge
 800abd8:	460c      	movge	r4, r1
 800abda:	461f      	movge	r7, r3
 800abdc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800abe0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800abe4:	68a3      	ldr	r3, [r4, #8]
 800abe6:	6861      	ldr	r1, [r4, #4]
 800abe8:	eb0a 0609 	add.w	r6, sl, r9
 800abec:	42b3      	cmp	r3, r6
 800abee:	b085      	sub	sp, #20
 800abf0:	bfb8      	it	lt
 800abf2:	3101      	addlt	r1, #1
 800abf4:	f7ff fe92 	bl	800a91c <_Balloc>
 800abf8:	b930      	cbnz	r0, 800ac08 <__multiply+0x44>
 800abfa:	4602      	mov	r2, r0
 800abfc:	4b44      	ldr	r3, [pc, #272]	@ (800ad10 <__multiply+0x14c>)
 800abfe:	4845      	ldr	r0, [pc, #276]	@ (800ad14 <__multiply+0x150>)
 800ac00:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac04:	f000 fde2 	bl	800b7cc <__assert_func>
 800ac08:	f100 0514 	add.w	r5, r0, #20
 800ac0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac10:	462b      	mov	r3, r5
 800ac12:	2200      	movs	r2, #0
 800ac14:	4543      	cmp	r3, r8
 800ac16:	d321      	bcc.n	800ac5c <__multiply+0x98>
 800ac18:	f107 0114 	add.w	r1, r7, #20
 800ac1c:	f104 0214 	add.w	r2, r4, #20
 800ac20:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac24:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac28:	9302      	str	r3, [sp, #8]
 800ac2a:	1b13      	subs	r3, r2, r4
 800ac2c:	3b15      	subs	r3, #21
 800ac2e:	f023 0303 	bic.w	r3, r3, #3
 800ac32:	3304      	adds	r3, #4
 800ac34:	f104 0715 	add.w	r7, r4, #21
 800ac38:	42ba      	cmp	r2, r7
 800ac3a:	bf38      	it	cc
 800ac3c:	2304      	movcc	r3, #4
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	9b02      	ldr	r3, [sp, #8]
 800ac42:	9103      	str	r1, [sp, #12]
 800ac44:	428b      	cmp	r3, r1
 800ac46:	d80c      	bhi.n	800ac62 <__multiply+0x9e>
 800ac48:	2e00      	cmp	r6, #0
 800ac4a:	dd03      	ble.n	800ac54 <__multiply+0x90>
 800ac4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d05b      	beq.n	800ad0c <__multiply+0x148>
 800ac54:	6106      	str	r6, [r0, #16]
 800ac56:	b005      	add	sp, #20
 800ac58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5c:	f843 2b04 	str.w	r2, [r3], #4
 800ac60:	e7d8      	b.n	800ac14 <__multiply+0x50>
 800ac62:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac66:	f1ba 0f00 	cmp.w	sl, #0
 800ac6a:	d024      	beq.n	800acb6 <__multiply+0xf2>
 800ac6c:	f104 0e14 	add.w	lr, r4, #20
 800ac70:	46a9      	mov	r9, r5
 800ac72:	f04f 0c00 	mov.w	ip, #0
 800ac76:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac7a:	f8d9 3000 	ldr.w	r3, [r9]
 800ac7e:	fa1f fb87 	uxth.w	fp, r7
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac88:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ac8c:	f8d9 7000 	ldr.w	r7, [r9]
 800ac90:	4463      	add	r3, ip
 800ac92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac96:	fb0a c70b 	mla	r7, sl, fp, ip
 800ac9a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aca4:	4572      	cmp	r2, lr
 800aca6:	f849 3b04 	str.w	r3, [r9], #4
 800acaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acae:	d8e2      	bhi.n	800ac76 <__multiply+0xb2>
 800acb0:	9b01      	ldr	r3, [sp, #4]
 800acb2:	f845 c003 	str.w	ip, [r5, r3]
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800acbc:	3104      	adds	r1, #4
 800acbe:	f1b9 0f00 	cmp.w	r9, #0
 800acc2:	d021      	beq.n	800ad08 <__multiply+0x144>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	f104 0c14 	add.w	ip, r4, #20
 800acca:	46ae      	mov	lr, r5
 800accc:	f04f 0a00 	mov.w	sl, #0
 800acd0:	f8bc b000 	ldrh.w	fp, [ip]
 800acd4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800acd8:	fb09 770b 	mla	r7, r9, fp, r7
 800acdc:	4457      	add	r7, sl
 800acde:	b29b      	uxth	r3, r3
 800ace0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ace4:	f84e 3b04 	str.w	r3, [lr], #4
 800ace8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800acec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acf0:	f8be 3000 	ldrh.w	r3, [lr]
 800acf4:	fb09 330a 	mla	r3, r9, sl, r3
 800acf8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800acfc:	4562      	cmp	r2, ip
 800acfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad02:	d8e5      	bhi.n	800acd0 <__multiply+0x10c>
 800ad04:	9f01      	ldr	r7, [sp, #4]
 800ad06:	51eb      	str	r3, [r5, r7]
 800ad08:	3504      	adds	r5, #4
 800ad0a:	e799      	b.n	800ac40 <__multiply+0x7c>
 800ad0c:	3e01      	subs	r6, #1
 800ad0e:	e79b      	b.n	800ac48 <__multiply+0x84>
 800ad10:	0800c025 	.word	0x0800c025
 800ad14:	0800c096 	.word	0x0800c096

0800ad18 <__pow5mult>:
 800ad18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad1c:	4615      	mov	r5, r2
 800ad1e:	f012 0203 	ands.w	r2, r2, #3
 800ad22:	4607      	mov	r7, r0
 800ad24:	460e      	mov	r6, r1
 800ad26:	d007      	beq.n	800ad38 <__pow5mult+0x20>
 800ad28:	4c25      	ldr	r4, [pc, #148]	@ (800adc0 <__pow5mult+0xa8>)
 800ad2a:	3a01      	subs	r2, #1
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad32:	f7ff fe55 	bl	800a9e0 <__multadd>
 800ad36:	4606      	mov	r6, r0
 800ad38:	10ad      	asrs	r5, r5, #2
 800ad3a:	d03d      	beq.n	800adb8 <__pow5mult+0xa0>
 800ad3c:	69fc      	ldr	r4, [r7, #28]
 800ad3e:	b97c      	cbnz	r4, 800ad60 <__pow5mult+0x48>
 800ad40:	2010      	movs	r0, #16
 800ad42:	f7fc fcf9 	bl	8007738 <malloc>
 800ad46:	4602      	mov	r2, r0
 800ad48:	61f8      	str	r0, [r7, #28]
 800ad4a:	b928      	cbnz	r0, 800ad58 <__pow5mult+0x40>
 800ad4c:	4b1d      	ldr	r3, [pc, #116]	@ (800adc4 <__pow5mult+0xac>)
 800ad4e:	481e      	ldr	r0, [pc, #120]	@ (800adc8 <__pow5mult+0xb0>)
 800ad50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad54:	f000 fd3a 	bl	800b7cc <__assert_func>
 800ad58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad5c:	6004      	str	r4, [r0, #0]
 800ad5e:	60c4      	str	r4, [r0, #12]
 800ad60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad68:	b94c      	cbnz	r4, 800ad7e <__pow5mult+0x66>
 800ad6a:	f240 2171 	movw	r1, #625	@ 0x271
 800ad6e:	4638      	mov	r0, r7
 800ad70:	f7ff ff12 	bl	800ab98 <__i2b>
 800ad74:	2300      	movs	r3, #0
 800ad76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	6003      	str	r3, [r0, #0]
 800ad7e:	f04f 0900 	mov.w	r9, #0
 800ad82:	07eb      	lsls	r3, r5, #31
 800ad84:	d50a      	bpl.n	800ad9c <__pow5mult+0x84>
 800ad86:	4631      	mov	r1, r6
 800ad88:	4622      	mov	r2, r4
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	f7ff ff1a 	bl	800abc4 <__multiply>
 800ad90:	4631      	mov	r1, r6
 800ad92:	4680      	mov	r8, r0
 800ad94:	4638      	mov	r0, r7
 800ad96:	f7ff fe01 	bl	800a99c <_Bfree>
 800ad9a:	4646      	mov	r6, r8
 800ad9c:	106d      	asrs	r5, r5, #1
 800ad9e:	d00b      	beq.n	800adb8 <__pow5mult+0xa0>
 800ada0:	6820      	ldr	r0, [r4, #0]
 800ada2:	b938      	cbnz	r0, 800adb4 <__pow5mult+0x9c>
 800ada4:	4622      	mov	r2, r4
 800ada6:	4621      	mov	r1, r4
 800ada8:	4638      	mov	r0, r7
 800adaa:	f7ff ff0b 	bl	800abc4 <__multiply>
 800adae:	6020      	str	r0, [r4, #0]
 800adb0:	f8c0 9000 	str.w	r9, [r0]
 800adb4:	4604      	mov	r4, r0
 800adb6:	e7e4      	b.n	800ad82 <__pow5mult+0x6a>
 800adb8:	4630      	mov	r0, r6
 800adba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adbe:	bf00      	nop
 800adc0:	0800c0f0 	.word	0x0800c0f0
 800adc4:	0800bfb6 	.word	0x0800bfb6
 800adc8:	0800c096 	.word	0x0800c096

0800adcc <__lshift>:
 800adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	460c      	mov	r4, r1
 800add2:	6849      	ldr	r1, [r1, #4]
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adda:	68a3      	ldr	r3, [r4, #8]
 800addc:	4607      	mov	r7, r0
 800adde:	4691      	mov	r9, r2
 800ade0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ade4:	f108 0601 	add.w	r6, r8, #1
 800ade8:	42b3      	cmp	r3, r6
 800adea:	db0b      	blt.n	800ae04 <__lshift+0x38>
 800adec:	4638      	mov	r0, r7
 800adee:	f7ff fd95 	bl	800a91c <_Balloc>
 800adf2:	4605      	mov	r5, r0
 800adf4:	b948      	cbnz	r0, 800ae0a <__lshift+0x3e>
 800adf6:	4602      	mov	r2, r0
 800adf8:	4b28      	ldr	r3, [pc, #160]	@ (800ae9c <__lshift+0xd0>)
 800adfa:	4829      	ldr	r0, [pc, #164]	@ (800aea0 <__lshift+0xd4>)
 800adfc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae00:	f000 fce4 	bl	800b7cc <__assert_func>
 800ae04:	3101      	adds	r1, #1
 800ae06:	005b      	lsls	r3, r3, #1
 800ae08:	e7ee      	b.n	800ade8 <__lshift+0x1c>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f100 0114 	add.w	r1, r0, #20
 800ae10:	f100 0210 	add.w	r2, r0, #16
 800ae14:	4618      	mov	r0, r3
 800ae16:	4553      	cmp	r3, sl
 800ae18:	db33      	blt.n	800ae82 <__lshift+0xb6>
 800ae1a:	6920      	ldr	r0, [r4, #16]
 800ae1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae20:	f104 0314 	add.w	r3, r4, #20
 800ae24:	f019 091f 	ands.w	r9, r9, #31
 800ae28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae30:	d02b      	beq.n	800ae8a <__lshift+0xbe>
 800ae32:	f1c9 0e20 	rsb	lr, r9, #32
 800ae36:	468a      	mov	sl, r1
 800ae38:	2200      	movs	r2, #0
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	fa00 f009 	lsl.w	r0, r0, r9
 800ae40:	4310      	orrs	r0, r2
 800ae42:	f84a 0b04 	str.w	r0, [sl], #4
 800ae46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae4a:	459c      	cmp	ip, r3
 800ae4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae50:	d8f3      	bhi.n	800ae3a <__lshift+0x6e>
 800ae52:	ebac 0304 	sub.w	r3, ip, r4
 800ae56:	3b15      	subs	r3, #21
 800ae58:	f023 0303 	bic.w	r3, r3, #3
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	f104 0015 	add.w	r0, r4, #21
 800ae62:	4584      	cmp	ip, r0
 800ae64:	bf38      	it	cc
 800ae66:	2304      	movcc	r3, #4
 800ae68:	50ca      	str	r2, [r1, r3]
 800ae6a:	b10a      	cbz	r2, 800ae70 <__lshift+0xa4>
 800ae6c:	f108 0602 	add.w	r6, r8, #2
 800ae70:	3e01      	subs	r6, #1
 800ae72:	4638      	mov	r0, r7
 800ae74:	612e      	str	r6, [r5, #16]
 800ae76:	4621      	mov	r1, r4
 800ae78:	f7ff fd90 	bl	800a99c <_Bfree>
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae82:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae86:	3301      	adds	r3, #1
 800ae88:	e7c5      	b.n	800ae16 <__lshift+0x4a>
 800ae8a:	3904      	subs	r1, #4
 800ae8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae90:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae94:	459c      	cmp	ip, r3
 800ae96:	d8f9      	bhi.n	800ae8c <__lshift+0xc0>
 800ae98:	e7ea      	b.n	800ae70 <__lshift+0xa4>
 800ae9a:	bf00      	nop
 800ae9c:	0800c025 	.word	0x0800c025
 800aea0:	0800c096 	.word	0x0800c096

0800aea4 <__mcmp>:
 800aea4:	690a      	ldr	r2, [r1, #16]
 800aea6:	4603      	mov	r3, r0
 800aea8:	6900      	ldr	r0, [r0, #16]
 800aeaa:	1a80      	subs	r0, r0, r2
 800aeac:	b530      	push	{r4, r5, lr}
 800aeae:	d10e      	bne.n	800aece <__mcmp+0x2a>
 800aeb0:	3314      	adds	r3, #20
 800aeb2:	3114      	adds	r1, #20
 800aeb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aeb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aebc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aec0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aec4:	4295      	cmp	r5, r2
 800aec6:	d003      	beq.n	800aed0 <__mcmp+0x2c>
 800aec8:	d205      	bcs.n	800aed6 <__mcmp+0x32>
 800aeca:	f04f 30ff 	mov.w	r0, #4294967295
 800aece:	bd30      	pop	{r4, r5, pc}
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	d3f3      	bcc.n	800aebc <__mcmp+0x18>
 800aed4:	e7fb      	b.n	800aece <__mcmp+0x2a>
 800aed6:	2001      	movs	r0, #1
 800aed8:	e7f9      	b.n	800aece <__mcmp+0x2a>
	...

0800aedc <__mdiff>:
 800aedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee0:	4689      	mov	r9, r1
 800aee2:	4606      	mov	r6, r0
 800aee4:	4611      	mov	r1, r2
 800aee6:	4648      	mov	r0, r9
 800aee8:	4614      	mov	r4, r2
 800aeea:	f7ff ffdb 	bl	800aea4 <__mcmp>
 800aeee:	1e05      	subs	r5, r0, #0
 800aef0:	d112      	bne.n	800af18 <__mdiff+0x3c>
 800aef2:	4629      	mov	r1, r5
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7ff fd11 	bl	800a91c <_Balloc>
 800aefa:	4602      	mov	r2, r0
 800aefc:	b928      	cbnz	r0, 800af0a <__mdiff+0x2e>
 800aefe:	4b3f      	ldr	r3, [pc, #252]	@ (800affc <__mdiff+0x120>)
 800af00:	f240 2137 	movw	r1, #567	@ 0x237
 800af04:	483e      	ldr	r0, [pc, #248]	@ (800b000 <__mdiff+0x124>)
 800af06:	f000 fc61 	bl	800b7cc <__assert_func>
 800af0a:	2301      	movs	r3, #1
 800af0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af10:	4610      	mov	r0, r2
 800af12:	b003      	add	sp, #12
 800af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af18:	bfbc      	itt	lt
 800af1a:	464b      	movlt	r3, r9
 800af1c:	46a1      	movlt	r9, r4
 800af1e:	4630      	mov	r0, r6
 800af20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af24:	bfba      	itte	lt
 800af26:	461c      	movlt	r4, r3
 800af28:	2501      	movlt	r5, #1
 800af2a:	2500      	movge	r5, #0
 800af2c:	f7ff fcf6 	bl	800a91c <_Balloc>
 800af30:	4602      	mov	r2, r0
 800af32:	b918      	cbnz	r0, 800af3c <__mdiff+0x60>
 800af34:	4b31      	ldr	r3, [pc, #196]	@ (800affc <__mdiff+0x120>)
 800af36:	f240 2145 	movw	r1, #581	@ 0x245
 800af3a:	e7e3      	b.n	800af04 <__mdiff+0x28>
 800af3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af40:	6926      	ldr	r6, [r4, #16]
 800af42:	60c5      	str	r5, [r0, #12]
 800af44:	f109 0310 	add.w	r3, r9, #16
 800af48:	f109 0514 	add.w	r5, r9, #20
 800af4c:	f104 0e14 	add.w	lr, r4, #20
 800af50:	f100 0b14 	add.w	fp, r0, #20
 800af54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af5c:	9301      	str	r3, [sp, #4]
 800af5e:	46d9      	mov	r9, fp
 800af60:	f04f 0c00 	mov.w	ip, #0
 800af64:	9b01      	ldr	r3, [sp, #4]
 800af66:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	fa1f f38a 	uxth.w	r3, sl
 800af74:	4619      	mov	r1, r3
 800af76:	b283      	uxth	r3, r0
 800af78:	1acb      	subs	r3, r1, r3
 800af7a:	0c00      	lsrs	r0, r0, #16
 800af7c:	4463      	add	r3, ip
 800af7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af86:	b29b      	uxth	r3, r3
 800af88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af8c:	4576      	cmp	r6, lr
 800af8e:	f849 3b04 	str.w	r3, [r9], #4
 800af92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af96:	d8e5      	bhi.n	800af64 <__mdiff+0x88>
 800af98:	1b33      	subs	r3, r6, r4
 800af9a:	3b15      	subs	r3, #21
 800af9c:	f023 0303 	bic.w	r3, r3, #3
 800afa0:	3415      	adds	r4, #21
 800afa2:	3304      	adds	r3, #4
 800afa4:	42a6      	cmp	r6, r4
 800afa6:	bf38      	it	cc
 800afa8:	2304      	movcc	r3, #4
 800afaa:	441d      	add	r5, r3
 800afac:	445b      	add	r3, fp
 800afae:	461e      	mov	r6, r3
 800afb0:	462c      	mov	r4, r5
 800afb2:	4544      	cmp	r4, r8
 800afb4:	d30e      	bcc.n	800afd4 <__mdiff+0xf8>
 800afb6:	f108 0103 	add.w	r1, r8, #3
 800afba:	1b49      	subs	r1, r1, r5
 800afbc:	f021 0103 	bic.w	r1, r1, #3
 800afc0:	3d03      	subs	r5, #3
 800afc2:	45a8      	cmp	r8, r5
 800afc4:	bf38      	it	cc
 800afc6:	2100      	movcc	r1, #0
 800afc8:	440b      	add	r3, r1
 800afca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afce:	b191      	cbz	r1, 800aff6 <__mdiff+0x11a>
 800afd0:	6117      	str	r7, [r2, #16]
 800afd2:	e79d      	b.n	800af10 <__mdiff+0x34>
 800afd4:	f854 1b04 	ldr.w	r1, [r4], #4
 800afd8:	46e6      	mov	lr, ip
 800afda:	0c08      	lsrs	r0, r1, #16
 800afdc:	fa1c fc81 	uxtah	ip, ip, r1
 800afe0:	4471      	add	r1, lr
 800afe2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800afe6:	b289      	uxth	r1, r1
 800afe8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800afec:	f846 1b04 	str.w	r1, [r6], #4
 800aff0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aff4:	e7dd      	b.n	800afb2 <__mdiff+0xd6>
 800aff6:	3f01      	subs	r7, #1
 800aff8:	e7e7      	b.n	800afca <__mdiff+0xee>
 800affa:	bf00      	nop
 800affc:	0800c025 	.word	0x0800c025
 800b000:	0800c096 	.word	0x0800c096

0800b004 <__ulp>:
 800b004:	b082      	sub	sp, #8
 800b006:	ed8d 0b00 	vstr	d0, [sp]
 800b00a:	9a01      	ldr	r2, [sp, #4]
 800b00c:	4b0f      	ldr	r3, [pc, #60]	@ (800b04c <__ulp+0x48>)
 800b00e:	4013      	ands	r3, r2
 800b010:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b014:	2b00      	cmp	r3, #0
 800b016:	dc08      	bgt.n	800b02a <__ulp+0x26>
 800b018:	425b      	negs	r3, r3
 800b01a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b01e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b022:	da04      	bge.n	800b02e <__ulp+0x2a>
 800b024:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b028:	4113      	asrs	r3, r2
 800b02a:	2200      	movs	r2, #0
 800b02c:	e008      	b.n	800b040 <__ulp+0x3c>
 800b02e:	f1a2 0314 	sub.w	r3, r2, #20
 800b032:	2b1e      	cmp	r3, #30
 800b034:	bfda      	itte	le
 800b036:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b03a:	40da      	lsrle	r2, r3
 800b03c:	2201      	movgt	r2, #1
 800b03e:	2300      	movs	r3, #0
 800b040:	4619      	mov	r1, r3
 800b042:	4610      	mov	r0, r2
 800b044:	ec41 0b10 	vmov	d0, r0, r1
 800b048:	b002      	add	sp, #8
 800b04a:	4770      	bx	lr
 800b04c:	7ff00000 	.word	0x7ff00000

0800b050 <__b2d>:
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	6906      	ldr	r6, [r0, #16]
 800b056:	f100 0814 	add.w	r8, r0, #20
 800b05a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b05e:	1f37      	subs	r7, r6, #4
 800b060:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b064:	4610      	mov	r0, r2
 800b066:	f7ff fd4b 	bl	800ab00 <__hi0bits>
 800b06a:	f1c0 0320 	rsb	r3, r0, #32
 800b06e:	280a      	cmp	r0, #10
 800b070:	600b      	str	r3, [r1, #0]
 800b072:	491b      	ldr	r1, [pc, #108]	@ (800b0e0 <__b2d+0x90>)
 800b074:	dc15      	bgt.n	800b0a2 <__b2d+0x52>
 800b076:	f1c0 0c0b 	rsb	ip, r0, #11
 800b07a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b07e:	45b8      	cmp	r8, r7
 800b080:	ea43 0501 	orr.w	r5, r3, r1
 800b084:	bf34      	ite	cc
 800b086:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b08a:	2300      	movcs	r3, #0
 800b08c:	3015      	adds	r0, #21
 800b08e:	fa02 f000 	lsl.w	r0, r2, r0
 800b092:	fa23 f30c 	lsr.w	r3, r3, ip
 800b096:	4303      	orrs	r3, r0
 800b098:	461c      	mov	r4, r3
 800b09a:	ec45 4b10 	vmov	d0, r4, r5
 800b09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a2:	45b8      	cmp	r8, r7
 800b0a4:	bf3a      	itte	cc
 800b0a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b0aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800b0ae:	2300      	movcs	r3, #0
 800b0b0:	380b      	subs	r0, #11
 800b0b2:	d012      	beq.n	800b0da <__b2d+0x8a>
 800b0b4:	f1c0 0120 	rsb	r1, r0, #32
 800b0b8:	fa23 f401 	lsr.w	r4, r3, r1
 800b0bc:	4082      	lsls	r2, r0
 800b0be:	4322      	orrs	r2, r4
 800b0c0:	4547      	cmp	r7, r8
 800b0c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b0c6:	bf8c      	ite	hi
 800b0c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b0cc:	2200      	movls	r2, #0
 800b0ce:	4083      	lsls	r3, r0
 800b0d0:	40ca      	lsrs	r2, r1
 800b0d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	e7de      	b.n	800b098 <__b2d+0x48>
 800b0da:	ea42 0501 	orr.w	r5, r2, r1
 800b0de:	e7db      	b.n	800b098 <__b2d+0x48>
 800b0e0:	3ff00000 	.word	0x3ff00000

0800b0e4 <__d2b>:
 800b0e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0e8:	460f      	mov	r7, r1
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	ec59 8b10 	vmov	r8, r9, d0
 800b0f0:	4616      	mov	r6, r2
 800b0f2:	f7ff fc13 	bl	800a91c <_Balloc>
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	b930      	cbnz	r0, 800b108 <__d2b+0x24>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	4b23      	ldr	r3, [pc, #140]	@ (800b18c <__d2b+0xa8>)
 800b0fe:	4824      	ldr	r0, [pc, #144]	@ (800b190 <__d2b+0xac>)
 800b100:	f240 310f 	movw	r1, #783	@ 0x30f
 800b104:	f000 fb62 	bl	800b7cc <__assert_func>
 800b108:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b10c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b110:	b10d      	cbz	r5, 800b116 <__d2b+0x32>
 800b112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	f1b8 0300 	subs.w	r3, r8, #0
 800b11c:	d023      	beq.n	800b166 <__d2b+0x82>
 800b11e:	4668      	mov	r0, sp
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	f7ff fd0c 	bl	800ab3e <__lo0bits>
 800b126:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b12a:	b1d0      	cbz	r0, 800b162 <__d2b+0x7e>
 800b12c:	f1c0 0320 	rsb	r3, r0, #32
 800b130:	fa02 f303 	lsl.w	r3, r2, r3
 800b134:	430b      	orrs	r3, r1
 800b136:	40c2      	lsrs	r2, r0
 800b138:	6163      	str	r3, [r4, #20]
 800b13a:	9201      	str	r2, [sp, #4]
 800b13c:	9b01      	ldr	r3, [sp, #4]
 800b13e:	61a3      	str	r3, [r4, #24]
 800b140:	2b00      	cmp	r3, #0
 800b142:	bf0c      	ite	eq
 800b144:	2201      	moveq	r2, #1
 800b146:	2202      	movne	r2, #2
 800b148:	6122      	str	r2, [r4, #16]
 800b14a:	b1a5      	cbz	r5, 800b176 <__d2b+0x92>
 800b14c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b150:	4405      	add	r5, r0
 800b152:	603d      	str	r5, [r7, #0]
 800b154:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b158:	6030      	str	r0, [r6, #0]
 800b15a:	4620      	mov	r0, r4
 800b15c:	b003      	add	sp, #12
 800b15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b162:	6161      	str	r1, [r4, #20]
 800b164:	e7ea      	b.n	800b13c <__d2b+0x58>
 800b166:	a801      	add	r0, sp, #4
 800b168:	f7ff fce9 	bl	800ab3e <__lo0bits>
 800b16c:	9b01      	ldr	r3, [sp, #4]
 800b16e:	6163      	str	r3, [r4, #20]
 800b170:	3020      	adds	r0, #32
 800b172:	2201      	movs	r2, #1
 800b174:	e7e8      	b.n	800b148 <__d2b+0x64>
 800b176:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b17a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b17e:	6038      	str	r0, [r7, #0]
 800b180:	6918      	ldr	r0, [r3, #16]
 800b182:	f7ff fcbd 	bl	800ab00 <__hi0bits>
 800b186:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b18a:	e7e5      	b.n	800b158 <__d2b+0x74>
 800b18c:	0800c025 	.word	0x0800c025
 800b190:	0800c096 	.word	0x0800c096

0800b194 <__ratio>:
 800b194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b198:	b085      	sub	sp, #20
 800b19a:	e9cd 1000 	strd	r1, r0, [sp]
 800b19e:	a902      	add	r1, sp, #8
 800b1a0:	f7ff ff56 	bl	800b050 <__b2d>
 800b1a4:	9800      	ldr	r0, [sp, #0]
 800b1a6:	a903      	add	r1, sp, #12
 800b1a8:	ec55 4b10 	vmov	r4, r5, d0
 800b1ac:	f7ff ff50 	bl	800b050 <__b2d>
 800b1b0:	9b01      	ldr	r3, [sp, #4]
 800b1b2:	6919      	ldr	r1, [r3, #16]
 800b1b4:	9b00      	ldr	r3, [sp, #0]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	1ac9      	subs	r1, r1, r3
 800b1ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b1be:	1a9b      	subs	r3, r3, r2
 800b1c0:	ec5b ab10 	vmov	sl, fp, d0
 800b1c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	bfce      	itee	gt
 800b1cc:	462a      	movgt	r2, r5
 800b1ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1d2:	465a      	movle	r2, fp
 800b1d4:	462f      	mov	r7, r5
 800b1d6:	46d9      	mov	r9, fp
 800b1d8:	bfcc      	ite	gt
 800b1da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b1de:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b1e2:	464b      	mov	r3, r9
 800b1e4:	4652      	mov	r2, sl
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	4639      	mov	r1, r7
 800b1ea:	f7f5 fb4f 	bl	800088c <__aeabi_ddiv>
 800b1ee:	ec41 0b10 	vmov	d0, r0, r1
 800b1f2:	b005      	add	sp, #20
 800b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1f8 <__copybits>:
 800b1f8:	3901      	subs	r1, #1
 800b1fa:	b570      	push	{r4, r5, r6, lr}
 800b1fc:	1149      	asrs	r1, r1, #5
 800b1fe:	6914      	ldr	r4, [r2, #16]
 800b200:	3101      	adds	r1, #1
 800b202:	f102 0314 	add.w	r3, r2, #20
 800b206:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b20a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b20e:	1f05      	subs	r5, r0, #4
 800b210:	42a3      	cmp	r3, r4
 800b212:	d30c      	bcc.n	800b22e <__copybits+0x36>
 800b214:	1aa3      	subs	r3, r4, r2
 800b216:	3b11      	subs	r3, #17
 800b218:	f023 0303 	bic.w	r3, r3, #3
 800b21c:	3211      	adds	r2, #17
 800b21e:	42a2      	cmp	r2, r4
 800b220:	bf88      	it	hi
 800b222:	2300      	movhi	r3, #0
 800b224:	4418      	add	r0, r3
 800b226:	2300      	movs	r3, #0
 800b228:	4288      	cmp	r0, r1
 800b22a:	d305      	bcc.n	800b238 <__copybits+0x40>
 800b22c:	bd70      	pop	{r4, r5, r6, pc}
 800b22e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b232:	f845 6f04 	str.w	r6, [r5, #4]!
 800b236:	e7eb      	b.n	800b210 <__copybits+0x18>
 800b238:	f840 3b04 	str.w	r3, [r0], #4
 800b23c:	e7f4      	b.n	800b228 <__copybits+0x30>

0800b23e <__any_on>:
 800b23e:	f100 0214 	add.w	r2, r0, #20
 800b242:	6900      	ldr	r0, [r0, #16]
 800b244:	114b      	asrs	r3, r1, #5
 800b246:	4298      	cmp	r0, r3
 800b248:	b510      	push	{r4, lr}
 800b24a:	db11      	blt.n	800b270 <__any_on+0x32>
 800b24c:	dd0a      	ble.n	800b264 <__any_on+0x26>
 800b24e:	f011 011f 	ands.w	r1, r1, #31
 800b252:	d007      	beq.n	800b264 <__any_on+0x26>
 800b254:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b258:	fa24 f001 	lsr.w	r0, r4, r1
 800b25c:	fa00 f101 	lsl.w	r1, r0, r1
 800b260:	428c      	cmp	r4, r1
 800b262:	d10b      	bne.n	800b27c <__any_on+0x3e>
 800b264:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b268:	4293      	cmp	r3, r2
 800b26a:	d803      	bhi.n	800b274 <__any_on+0x36>
 800b26c:	2000      	movs	r0, #0
 800b26e:	bd10      	pop	{r4, pc}
 800b270:	4603      	mov	r3, r0
 800b272:	e7f7      	b.n	800b264 <__any_on+0x26>
 800b274:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b278:	2900      	cmp	r1, #0
 800b27a:	d0f5      	beq.n	800b268 <__any_on+0x2a>
 800b27c:	2001      	movs	r0, #1
 800b27e:	e7f6      	b.n	800b26e <__any_on+0x30>

0800b280 <_strtol_l.constprop.0>:
 800b280:	2b24      	cmp	r3, #36	@ 0x24
 800b282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b286:	4686      	mov	lr, r0
 800b288:	4690      	mov	r8, r2
 800b28a:	d801      	bhi.n	800b290 <_strtol_l.constprop.0+0x10>
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d106      	bne.n	800b29e <_strtol_l.constprop.0+0x1e>
 800b290:	f7fe f916 	bl	80094c0 <__errno>
 800b294:	2316      	movs	r3, #22
 800b296:	6003      	str	r3, [r0, #0]
 800b298:	2000      	movs	r0, #0
 800b29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b29e:	4834      	ldr	r0, [pc, #208]	@ (800b370 <_strtol_l.constprop.0+0xf0>)
 800b2a0:	460d      	mov	r5, r1
 800b2a2:	462a      	mov	r2, r5
 800b2a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2a8:	5d06      	ldrb	r6, [r0, r4]
 800b2aa:	f016 0608 	ands.w	r6, r6, #8
 800b2ae:	d1f8      	bne.n	800b2a2 <_strtol_l.constprop.0+0x22>
 800b2b0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b2b2:	d12d      	bne.n	800b310 <_strtol_l.constprop.0+0x90>
 800b2b4:	782c      	ldrb	r4, [r5, #0]
 800b2b6:	2601      	movs	r6, #1
 800b2b8:	1c95      	adds	r5, r2, #2
 800b2ba:	f033 0210 	bics.w	r2, r3, #16
 800b2be:	d109      	bne.n	800b2d4 <_strtol_l.constprop.0+0x54>
 800b2c0:	2c30      	cmp	r4, #48	@ 0x30
 800b2c2:	d12a      	bne.n	800b31a <_strtol_l.constprop.0+0x9a>
 800b2c4:	782a      	ldrb	r2, [r5, #0]
 800b2c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2ca:	2a58      	cmp	r2, #88	@ 0x58
 800b2cc:	d125      	bne.n	800b31a <_strtol_l.constprop.0+0x9a>
 800b2ce:	786c      	ldrb	r4, [r5, #1]
 800b2d0:	2310      	movs	r3, #16
 800b2d2:	3502      	adds	r5, #2
 800b2d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b2d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b2dc:	2200      	movs	r2, #0
 800b2de:	fbbc f9f3 	udiv	r9, ip, r3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	fb03 ca19 	mls	sl, r3, r9, ip
 800b2e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b2ec:	2f09      	cmp	r7, #9
 800b2ee:	d81b      	bhi.n	800b328 <_strtol_l.constprop.0+0xa8>
 800b2f0:	463c      	mov	r4, r7
 800b2f2:	42a3      	cmp	r3, r4
 800b2f4:	dd27      	ble.n	800b346 <_strtol_l.constprop.0+0xc6>
 800b2f6:	1c57      	adds	r7, r2, #1
 800b2f8:	d007      	beq.n	800b30a <_strtol_l.constprop.0+0x8a>
 800b2fa:	4581      	cmp	r9, r0
 800b2fc:	d320      	bcc.n	800b340 <_strtol_l.constprop.0+0xc0>
 800b2fe:	d101      	bne.n	800b304 <_strtol_l.constprop.0+0x84>
 800b300:	45a2      	cmp	sl, r4
 800b302:	db1d      	blt.n	800b340 <_strtol_l.constprop.0+0xc0>
 800b304:	fb00 4003 	mla	r0, r0, r3, r4
 800b308:	2201      	movs	r2, #1
 800b30a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b30e:	e7eb      	b.n	800b2e8 <_strtol_l.constprop.0+0x68>
 800b310:	2c2b      	cmp	r4, #43	@ 0x2b
 800b312:	bf04      	itt	eq
 800b314:	782c      	ldrbeq	r4, [r5, #0]
 800b316:	1c95      	addeq	r5, r2, #2
 800b318:	e7cf      	b.n	800b2ba <_strtol_l.constprop.0+0x3a>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1da      	bne.n	800b2d4 <_strtol_l.constprop.0+0x54>
 800b31e:	2c30      	cmp	r4, #48	@ 0x30
 800b320:	bf0c      	ite	eq
 800b322:	2308      	moveq	r3, #8
 800b324:	230a      	movne	r3, #10
 800b326:	e7d5      	b.n	800b2d4 <_strtol_l.constprop.0+0x54>
 800b328:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b32c:	2f19      	cmp	r7, #25
 800b32e:	d801      	bhi.n	800b334 <_strtol_l.constprop.0+0xb4>
 800b330:	3c37      	subs	r4, #55	@ 0x37
 800b332:	e7de      	b.n	800b2f2 <_strtol_l.constprop.0+0x72>
 800b334:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b338:	2f19      	cmp	r7, #25
 800b33a:	d804      	bhi.n	800b346 <_strtol_l.constprop.0+0xc6>
 800b33c:	3c57      	subs	r4, #87	@ 0x57
 800b33e:	e7d8      	b.n	800b2f2 <_strtol_l.constprop.0+0x72>
 800b340:	f04f 32ff 	mov.w	r2, #4294967295
 800b344:	e7e1      	b.n	800b30a <_strtol_l.constprop.0+0x8a>
 800b346:	1c53      	adds	r3, r2, #1
 800b348:	d108      	bne.n	800b35c <_strtol_l.constprop.0+0xdc>
 800b34a:	2322      	movs	r3, #34	@ 0x22
 800b34c:	f8ce 3000 	str.w	r3, [lr]
 800b350:	4660      	mov	r0, ip
 800b352:	f1b8 0f00 	cmp.w	r8, #0
 800b356:	d0a0      	beq.n	800b29a <_strtol_l.constprop.0+0x1a>
 800b358:	1e69      	subs	r1, r5, #1
 800b35a:	e006      	b.n	800b36a <_strtol_l.constprop.0+0xea>
 800b35c:	b106      	cbz	r6, 800b360 <_strtol_l.constprop.0+0xe0>
 800b35e:	4240      	negs	r0, r0
 800b360:	f1b8 0f00 	cmp.w	r8, #0
 800b364:	d099      	beq.n	800b29a <_strtol_l.constprop.0+0x1a>
 800b366:	2a00      	cmp	r2, #0
 800b368:	d1f6      	bne.n	800b358 <_strtol_l.constprop.0+0xd8>
 800b36a:	f8c8 1000 	str.w	r1, [r8]
 800b36e:	e794      	b.n	800b29a <_strtol_l.constprop.0+0x1a>
 800b370:	0800c1f1 	.word	0x0800c1f1

0800b374 <_strtol_r>:
 800b374:	f7ff bf84 	b.w	800b280 <_strtol_l.constprop.0>

0800b378 <__ascii_wctomb>:
 800b378:	4603      	mov	r3, r0
 800b37a:	4608      	mov	r0, r1
 800b37c:	b141      	cbz	r1, 800b390 <__ascii_wctomb+0x18>
 800b37e:	2aff      	cmp	r2, #255	@ 0xff
 800b380:	d904      	bls.n	800b38c <__ascii_wctomb+0x14>
 800b382:	228a      	movs	r2, #138	@ 0x8a
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	f04f 30ff 	mov.w	r0, #4294967295
 800b38a:	4770      	bx	lr
 800b38c:	700a      	strb	r2, [r1, #0]
 800b38e:	2001      	movs	r0, #1
 800b390:	4770      	bx	lr

0800b392 <__ssputs_r>:
 800b392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b396:	688e      	ldr	r6, [r1, #8]
 800b398:	461f      	mov	r7, r3
 800b39a:	42be      	cmp	r6, r7
 800b39c:	680b      	ldr	r3, [r1, #0]
 800b39e:	4682      	mov	sl, r0
 800b3a0:	460c      	mov	r4, r1
 800b3a2:	4690      	mov	r8, r2
 800b3a4:	d82d      	bhi.n	800b402 <__ssputs_r+0x70>
 800b3a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b3ae:	d026      	beq.n	800b3fe <__ssputs_r+0x6c>
 800b3b0:	6965      	ldr	r5, [r4, #20]
 800b3b2:	6909      	ldr	r1, [r1, #16]
 800b3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3b8:	eba3 0901 	sub.w	r9, r3, r1
 800b3bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3c0:	1c7b      	adds	r3, r7, #1
 800b3c2:	444b      	add	r3, r9
 800b3c4:	106d      	asrs	r5, r5, #1
 800b3c6:	429d      	cmp	r5, r3
 800b3c8:	bf38      	it	cc
 800b3ca:	461d      	movcc	r5, r3
 800b3cc:	0553      	lsls	r3, r2, #21
 800b3ce:	d527      	bpl.n	800b420 <__ssputs_r+0x8e>
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7fc f9db 	bl	800778c <_malloc_r>
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	b360      	cbz	r0, 800b434 <__ssputs_r+0xa2>
 800b3da:	6921      	ldr	r1, [r4, #16]
 800b3dc:	464a      	mov	r2, r9
 800b3de:	f7fe f89c 	bl	800951a <memcpy>
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	6126      	str	r6, [r4, #16]
 800b3f0:	6165      	str	r5, [r4, #20]
 800b3f2:	444e      	add	r6, r9
 800b3f4:	eba5 0509 	sub.w	r5, r5, r9
 800b3f8:	6026      	str	r6, [r4, #0]
 800b3fa:	60a5      	str	r5, [r4, #8]
 800b3fc:	463e      	mov	r6, r7
 800b3fe:	42be      	cmp	r6, r7
 800b400:	d900      	bls.n	800b404 <__ssputs_r+0x72>
 800b402:	463e      	mov	r6, r7
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	4632      	mov	r2, r6
 800b408:	4641      	mov	r1, r8
 800b40a:	f000 f9c5 	bl	800b798 <memmove>
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	1b9b      	subs	r3, r3, r6
 800b412:	60a3      	str	r3, [r4, #8]
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	4433      	add	r3, r6
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	2000      	movs	r0, #0
 800b41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b420:	462a      	mov	r2, r5
 800b422:	f000 fa05 	bl	800b830 <_realloc_r>
 800b426:	4606      	mov	r6, r0
 800b428:	2800      	cmp	r0, #0
 800b42a:	d1e0      	bne.n	800b3ee <__ssputs_r+0x5c>
 800b42c:	6921      	ldr	r1, [r4, #16]
 800b42e:	4650      	mov	r0, sl
 800b430:	f7fe fede 	bl	800a1f0 <_free_r>
 800b434:	230c      	movs	r3, #12
 800b436:	f8ca 3000 	str.w	r3, [sl]
 800b43a:	89a3      	ldrh	r3, [r4, #12]
 800b43c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b440:	81a3      	strh	r3, [r4, #12]
 800b442:	f04f 30ff 	mov.w	r0, #4294967295
 800b446:	e7e9      	b.n	800b41c <__ssputs_r+0x8a>

0800b448 <_svfiprintf_r>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	4698      	mov	r8, r3
 800b44e:	898b      	ldrh	r3, [r1, #12]
 800b450:	061b      	lsls	r3, r3, #24
 800b452:	b09d      	sub	sp, #116	@ 0x74
 800b454:	4607      	mov	r7, r0
 800b456:	460d      	mov	r5, r1
 800b458:	4614      	mov	r4, r2
 800b45a:	d510      	bpl.n	800b47e <_svfiprintf_r+0x36>
 800b45c:	690b      	ldr	r3, [r1, #16]
 800b45e:	b973      	cbnz	r3, 800b47e <_svfiprintf_r+0x36>
 800b460:	2140      	movs	r1, #64	@ 0x40
 800b462:	f7fc f993 	bl	800778c <_malloc_r>
 800b466:	6028      	str	r0, [r5, #0]
 800b468:	6128      	str	r0, [r5, #16]
 800b46a:	b930      	cbnz	r0, 800b47a <_svfiprintf_r+0x32>
 800b46c:	230c      	movs	r3, #12
 800b46e:	603b      	str	r3, [r7, #0]
 800b470:	f04f 30ff 	mov.w	r0, #4294967295
 800b474:	b01d      	add	sp, #116	@ 0x74
 800b476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47a:	2340      	movs	r3, #64	@ 0x40
 800b47c:	616b      	str	r3, [r5, #20]
 800b47e:	2300      	movs	r3, #0
 800b480:	9309      	str	r3, [sp, #36]	@ 0x24
 800b482:	2320      	movs	r3, #32
 800b484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b488:	f8cd 800c 	str.w	r8, [sp, #12]
 800b48c:	2330      	movs	r3, #48	@ 0x30
 800b48e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b62c <_svfiprintf_r+0x1e4>
 800b492:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b496:	f04f 0901 	mov.w	r9, #1
 800b49a:	4623      	mov	r3, r4
 800b49c:	469a      	mov	sl, r3
 800b49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a2:	b10a      	cbz	r2, 800b4a8 <_svfiprintf_r+0x60>
 800b4a4:	2a25      	cmp	r2, #37	@ 0x25
 800b4a6:	d1f9      	bne.n	800b49c <_svfiprintf_r+0x54>
 800b4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b4ac:	d00b      	beq.n	800b4c6 <_svfiprintf_r+0x7e>
 800b4ae:	465b      	mov	r3, fp
 800b4b0:	4622      	mov	r2, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	4638      	mov	r0, r7
 800b4b6:	f7ff ff6c 	bl	800b392 <__ssputs_r>
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f000 80a7 	beq.w	800b60e <_svfiprintf_r+0x1c6>
 800b4c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4c2:	445a      	add	r2, fp
 800b4c4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f000 809f 	beq.w	800b60e <_svfiprintf_r+0x1c6>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4da:	f10a 0a01 	add.w	sl, sl, #1
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	9307      	str	r3, [sp, #28]
 800b4e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4e8:	4654      	mov	r4, sl
 800b4ea:	2205      	movs	r2, #5
 800b4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f0:	484e      	ldr	r0, [pc, #312]	@ (800b62c <_svfiprintf_r+0x1e4>)
 800b4f2:	f7f4 fe8d 	bl	8000210 <memchr>
 800b4f6:	9a04      	ldr	r2, [sp, #16]
 800b4f8:	b9d8      	cbnz	r0, 800b532 <_svfiprintf_r+0xea>
 800b4fa:	06d0      	lsls	r0, r2, #27
 800b4fc:	bf44      	itt	mi
 800b4fe:	2320      	movmi	r3, #32
 800b500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b504:	0711      	lsls	r1, r2, #28
 800b506:	bf44      	itt	mi
 800b508:	232b      	movmi	r3, #43	@ 0x2b
 800b50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b50e:	f89a 3000 	ldrb.w	r3, [sl]
 800b512:	2b2a      	cmp	r3, #42	@ 0x2a
 800b514:	d015      	beq.n	800b542 <_svfiprintf_r+0xfa>
 800b516:	9a07      	ldr	r2, [sp, #28]
 800b518:	4654      	mov	r4, sl
 800b51a:	2000      	movs	r0, #0
 800b51c:	f04f 0c0a 	mov.w	ip, #10
 800b520:	4621      	mov	r1, r4
 800b522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b526:	3b30      	subs	r3, #48	@ 0x30
 800b528:	2b09      	cmp	r3, #9
 800b52a:	d94b      	bls.n	800b5c4 <_svfiprintf_r+0x17c>
 800b52c:	b1b0      	cbz	r0, 800b55c <_svfiprintf_r+0x114>
 800b52e:	9207      	str	r2, [sp, #28]
 800b530:	e014      	b.n	800b55c <_svfiprintf_r+0x114>
 800b532:	eba0 0308 	sub.w	r3, r0, r8
 800b536:	fa09 f303 	lsl.w	r3, r9, r3
 800b53a:	4313      	orrs	r3, r2
 800b53c:	9304      	str	r3, [sp, #16]
 800b53e:	46a2      	mov	sl, r4
 800b540:	e7d2      	b.n	800b4e8 <_svfiprintf_r+0xa0>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	1d19      	adds	r1, r3, #4
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	9103      	str	r1, [sp, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	bfbb      	ittet	lt
 800b54e:	425b      	neglt	r3, r3
 800b550:	f042 0202 	orrlt.w	r2, r2, #2
 800b554:	9307      	strge	r3, [sp, #28]
 800b556:	9307      	strlt	r3, [sp, #28]
 800b558:	bfb8      	it	lt
 800b55a:	9204      	strlt	r2, [sp, #16]
 800b55c:	7823      	ldrb	r3, [r4, #0]
 800b55e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b560:	d10a      	bne.n	800b578 <_svfiprintf_r+0x130>
 800b562:	7863      	ldrb	r3, [r4, #1]
 800b564:	2b2a      	cmp	r3, #42	@ 0x2a
 800b566:	d132      	bne.n	800b5ce <_svfiprintf_r+0x186>
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	1d1a      	adds	r2, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	9203      	str	r2, [sp, #12]
 800b570:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b574:	3402      	adds	r4, #2
 800b576:	9305      	str	r3, [sp, #20]
 800b578:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b63c <_svfiprintf_r+0x1f4>
 800b57c:	7821      	ldrb	r1, [r4, #0]
 800b57e:	2203      	movs	r2, #3
 800b580:	4650      	mov	r0, sl
 800b582:	f7f4 fe45 	bl	8000210 <memchr>
 800b586:	b138      	cbz	r0, 800b598 <_svfiprintf_r+0x150>
 800b588:	9b04      	ldr	r3, [sp, #16]
 800b58a:	eba0 000a 	sub.w	r0, r0, sl
 800b58e:	2240      	movs	r2, #64	@ 0x40
 800b590:	4082      	lsls	r2, r0
 800b592:	4313      	orrs	r3, r2
 800b594:	3401      	adds	r4, #1
 800b596:	9304      	str	r3, [sp, #16]
 800b598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59c:	4824      	ldr	r0, [pc, #144]	@ (800b630 <_svfiprintf_r+0x1e8>)
 800b59e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5a2:	2206      	movs	r2, #6
 800b5a4:	f7f4 fe34 	bl	8000210 <memchr>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d036      	beq.n	800b61a <_svfiprintf_r+0x1d2>
 800b5ac:	4b21      	ldr	r3, [pc, #132]	@ (800b634 <_svfiprintf_r+0x1ec>)
 800b5ae:	bb1b      	cbnz	r3, 800b5f8 <_svfiprintf_r+0x1b0>
 800b5b0:	9b03      	ldr	r3, [sp, #12]
 800b5b2:	3307      	adds	r3, #7
 800b5b4:	f023 0307 	bic.w	r3, r3, #7
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	9303      	str	r3, [sp, #12]
 800b5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5be:	4433      	add	r3, r6
 800b5c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5c2:	e76a      	b.n	800b49a <_svfiprintf_r+0x52>
 800b5c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c8:	460c      	mov	r4, r1
 800b5ca:	2001      	movs	r0, #1
 800b5cc:	e7a8      	b.n	800b520 <_svfiprintf_r+0xd8>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	3401      	adds	r4, #1
 800b5d2:	9305      	str	r3, [sp, #20]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	f04f 0c0a 	mov.w	ip, #10
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5e0:	3a30      	subs	r2, #48	@ 0x30
 800b5e2:	2a09      	cmp	r2, #9
 800b5e4:	d903      	bls.n	800b5ee <_svfiprintf_r+0x1a6>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d0c6      	beq.n	800b578 <_svfiprintf_r+0x130>
 800b5ea:	9105      	str	r1, [sp, #20]
 800b5ec:	e7c4      	b.n	800b578 <_svfiprintf_r+0x130>
 800b5ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e7f0      	b.n	800b5da <_svfiprintf_r+0x192>
 800b5f8:	ab03      	add	r3, sp, #12
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	462a      	mov	r2, r5
 800b5fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b638 <_svfiprintf_r+0x1f0>)
 800b600:	a904      	add	r1, sp, #16
 800b602:	4638      	mov	r0, r7
 800b604:	f7fc fff6 	bl	80085f4 <_printf_float>
 800b608:	1c42      	adds	r2, r0, #1
 800b60a:	4606      	mov	r6, r0
 800b60c:	d1d6      	bne.n	800b5bc <_svfiprintf_r+0x174>
 800b60e:	89ab      	ldrh	r3, [r5, #12]
 800b610:	065b      	lsls	r3, r3, #25
 800b612:	f53f af2d 	bmi.w	800b470 <_svfiprintf_r+0x28>
 800b616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b618:	e72c      	b.n	800b474 <_svfiprintf_r+0x2c>
 800b61a:	ab03      	add	r3, sp, #12
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	462a      	mov	r2, r5
 800b620:	4b05      	ldr	r3, [pc, #20]	@ (800b638 <_svfiprintf_r+0x1f0>)
 800b622:	a904      	add	r1, sp, #16
 800b624:	4638      	mov	r0, r7
 800b626:	f7fd fa7d 	bl	8008b24 <_printf_i>
 800b62a:	e7ed      	b.n	800b608 <_svfiprintf_r+0x1c0>
 800b62c:	0800c2f1 	.word	0x0800c2f1
 800b630:	0800c2fb 	.word	0x0800c2fb
 800b634:	080085f5 	.word	0x080085f5
 800b638:	0800b393 	.word	0x0800b393
 800b63c:	0800c2f7 	.word	0x0800c2f7

0800b640 <__sflush_r>:
 800b640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b648:	0716      	lsls	r6, r2, #28
 800b64a:	4605      	mov	r5, r0
 800b64c:	460c      	mov	r4, r1
 800b64e:	d454      	bmi.n	800b6fa <__sflush_r+0xba>
 800b650:	684b      	ldr	r3, [r1, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	dc02      	bgt.n	800b65c <__sflush_r+0x1c>
 800b656:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dd48      	ble.n	800b6ee <__sflush_r+0xae>
 800b65c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b65e:	2e00      	cmp	r6, #0
 800b660:	d045      	beq.n	800b6ee <__sflush_r+0xae>
 800b662:	2300      	movs	r3, #0
 800b664:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b668:	682f      	ldr	r7, [r5, #0]
 800b66a:	6a21      	ldr	r1, [r4, #32]
 800b66c:	602b      	str	r3, [r5, #0]
 800b66e:	d030      	beq.n	800b6d2 <__sflush_r+0x92>
 800b670:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	0759      	lsls	r1, r3, #29
 800b676:	d505      	bpl.n	800b684 <__sflush_r+0x44>
 800b678:	6863      	ldr	r3, [r4, #4]
 800b67a:	1ad2      	subs	r2, r2, r3
 800b67c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b67e:	b10b      	cbz	r3, 800b684 <__sflush_r+0x44>
 800b680:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b682:	1ad2      	subs	r2, r2, r3
 800b684:	2300      	movs	r3, #0
 800b686:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b688:	6a21      	ldr	r1, [r4, #32]
 800b68a:	4628      	mov	r0, r5
 800b68c:	47b0      	blx	r6
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	d106      	bne.n	800b6a2 <__sflush_r+0x62>
 800b694:	6829      	ldr	r1, [r5, #0]
 800b696:	291d      	cmp	r1, #29
 800b698:	d82b      	bhi.n	800b6f2 <__sflush_r+0xb2>
 800b69a:	4a2a      	ldr	r2, [pc, #168]	@ (800b744 <__sflush_r+0x104>)
 800b69c:	410a      	asrs	r2, r1
 800b69e:	07d6      	lsls	r6, r2, #31
 800b6a0:	d427      	bmi.n	800b6f2 <__sflush_r+0xb2>
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	6062      	str	r2, [r4, #4]
 800b6a6:	04d9      	lsls	r1, r3, #19
 800b6a8:	6922      	ldr	r2, [r4, #16]
 800b6aa:	6022      	str	r2, [r4, #0]
 800b6ac:	d504      	bpl.n	800b6b8 <__sflush_r+0x78>
 800b6ae:	1c42      	adds	r2, r0, #1
 800b6b0:	d101      	bne.n	800b6b6 <__sflush_r+0x76>
 800b6b2:	682b      	ldr	r3, [r5, #0]
 800b6b4:	b903      	cbnz	r3, 800b6b8 <__sflush_r+0x78>
 800b6b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6ba:	602f      	str	r7, [r5, #0]
 800b6bc:	b1b9      	cbz	r1, 800b6ee <__sflush_r+0xae>
 800b6be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6c2:	4299      	cmp	r1, r3
 800b6c4:	d002      	beq.n	800b6cc <__sflush_r+0x8c>
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f7fe fd92 	bl	800a1f0 <_free_r>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6d0:	e00d      	b.n	800b6ee <__sflush_r+0xae>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	47b0      	blx	r6
 800b6d8:	4602      	mov	r2, r0
 800b6da:	1c50      	adds	r0, r2, #1
 800b6dc:	d1c9      	bne.n	800b672 <__sflush_r+0x32>
 800b6de:	682b      	ldr	r3, [r5, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d0c6      	beq.n	800b672 <__sflush_r+0x32>
 800b6e4:	2b1d      	cmp	r3, #29
 800b6e6:	d001      	beq.n	800b6ec <__sflush_r+0xac>
 800b6e8:	2b16      	cmp	r3, #22
 800b6ea:	d11e      	bne.n	800b72a <__sflush_r+0xea>
 800b6ec:	602f      	str	r7, [r5, #0]
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	e022      	b.n	800b738 <__sflush_r+0xf8>
 800b6f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6f6:	b21b      	sxth	r3, r3
 800b6f8:	e01b      	b.n	800b732 <__sflush_r+0xf2>
 800b6fa:	690f      	ldr	r7, [r1, #16]
 800b6fc:	2f00      	cmp	r7, #0
 800b6fe:	d0f6      	beq.n	800b6ee <__sflush_r+0xae>
 800b700:	0793      	lsls	r3, r2, #30
 800b702:	680e      	ldr	r6, [r1, #0]
 800b704:	bf08      	it	eq
 800b706:	694b      	ldreq	r3, [r1, #20]
 800b708:	600f      	str	r7, [r1, #0]
 800b70a:	bf18      	it	ne
 800b70c:	2300      	movne	r3, #0
 800b70e:	eba6 0807 	sub.w	r8, r6, r7
 800b712:	608b      	str	r3, [r1, #8]
 800b714:	f1b8 0f00 	cmp.w	r8, #0
 800b718:	dde9      	ble.n	800b6ee <__sflush_r+0xae>
 800b71a:	6a21      	ldr	r1, [r4, #32]
 800b71c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b71e:	4643      	mov	r3, r8
 800b720:	463a      	mov	r2, r7
 800b722:	4628      	mov	r0, r5
 800b724:	47b0      	blx	r6
 800b726:	2800      	cmp	r0, #0
 800b728:	dc08      	bgt.n	800b73c <__sflush_r+0xfc>
 800b72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b732:	81a3      	strh	r3, [r4, #12]
 800b734:	f04f 30ff 	mov.w	r0, #4294967295
 800b738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b73c:	4407      	add	r7, r0
 800b73e:	eba8 0800 	sub.w	r8, r8, r0
 800b742:	e7e7      	b.n	800b714 <__sflush_r+0xd4>
 800b744:	dfbffffe 	.word	0xdfbffffe

0800b748 <_fflush_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	690b      	ldr	r3, [r1, #16]
 800b74c:	4605      	mov	r5, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	b913      	cbnz	r3, 800b758 <_fflush_r+0x10>
 800b752:	2500      	movs	r5, #0
 800b754:	4628      	mov	r0, r5
 800b756:	bd38      	pop	{r3, r4, r5, pc}
 800b758:	b118      	cbz	r0, 800b762 <_fflush_r+0x1a>
 800b75a:	6a03      	ldr	r3, [r0, #32]
 800b75c:	b90b      	cbnz	r3, 800b762 <_fflush_r+0x1a>
 800b75e:	f7fd fda1 	bl	80092a4 <__sinit>
 800b762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0f3      	beq.n	800b752 <_fflush_r+0xa>
 800b76a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b76c:	07d0      	lsls	r0, r2, #31
 800b76e:	d404      	bmi.n	800b77a <_fflush_r+0x32>
 800b770:	0599      	lsls	r1, r3, #22
 800b772:	d402      	bmi.n	800b77a <_fflush_r+0x32>
 800b774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b776:	f7fd fece 	bl	8009516 <__retarget_lock_acquire_recursive>
 800b77a:	4628      	mov	r0, r5
 800b77c:	4621      	mov	r1, r4
 800b77e:	f7ff ff5f 	bl	800b640 <__sflush_r>
 800b782:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b784:	07da      	lsls	r2, r3, #31
 800b786:	4605      	mov	r5, r0
 800b788:	d4e4      	bmi.n	800b754 <_fflush_r+0xc>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	059b      	lsls	r3, r3, #22
 800b78e:	d4e1      	bmi.n	800b754 <_fflush_r+0xc>
 800b790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b792:	f7fd fec1 	bl	8009518 <__retarget_lock_release_recursive>
 800b796:	e7dd      	b.n	800b754 <_fflush_r+0xc>

0800b798 <memmove>:
 800b798:	4288      	cmp	r0, r1
 800b79a:	b510      	push	{r4, lr}
 800b79c:	eb01 0402 	add.w	r4, r1, r2
 800b7a0:	d902      	bls.n	800b7a8 <memmove+0x10>
 800b7a2:	4284      	cmp	r4, r0
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	d807      	bhi.n	800b7b8 <memmove+0x20>
 800b7a8:	1e43      	subs	r3, r0, #1
 800b7aa:	42a1      	cmp	r1, r4
 800b7ac:	d008      	beq.n	800b7c0 <memmove+0x28>
 800b7ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7b6:	e7f8      	b.n	800b7aa <memmove+0x12>
 800b7b8:	4402      	add	r2, r0
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	428a      	cmp	r2, r1
 800b7be:	d100      	bne.n	800b7c2 <memmove+0x2a>
 800b7c0:	bd10      	pop	{r4, pc}
 800b7c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ca:	e7f7      	b.n	800b7bc <memmove+0x24>

0800b7cc <__assert_func>:
 800b7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7ce:	4614      	mov	r4, r2
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4b09      	ldr	r3, [pc, #36]	@ (800b7f8 <__assert_func+0x2c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	68d8      	ldr	r0, [r3, #12]
 800b7da:	b954      	cbnz	r4, 800b7f2 <__assert_func+0x26>
 800b7dc:	4b07      	ldr	r3, [pc, #28]	@ (800b7fc <__assert_func+0x30>)
 800b7de:	461c      	mov	r4, r3
 800b7e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7e4:	9100      	str	r1, [sp, #0]
 800b7e6:	462b      	mov	r3, r5
 800b7e8:	4905      	ldr	r1, [pc, #20]	@ (800b800 <__assert_func+0x34>)
 800b7ea:	f000 f84f 	bl	800b88c <fiprintf>
 800b7ee:	f000 f85f 	bl	800b8b0 <abort>
 800b7f2:	4b04      	ldr	r3, [pc, #16]	@ (800b804 <__assert_func+0x38>)
 800b7f4:	e7f4      	b.n	800b7e0 <__assert_func+0x14>
 800b7f6:	bf00      	nop
 800b7f8:	20000188 	.word	0x20000188
 800b7fc:	0800c33d 	.word	0x0800c33d
 800b800:	0800c30f 	.word	0x0800c30f
 800b804:	0800c302 	.word	0x0800c302

0800b808 <_calloc_r>:
 800b808:	b570      	push	{r4, r5, r6, lr}
 800b80a:	fba1 5402 	umull	r5, r4, r1, r2
 800b80e:	b93c      	cbnz	r4, 800b820 <_calloc_r+0x18>
 800b810:	4629      	mov	r1, r5
 800b812:	f7fb ffbb 	bl	800778c <_malloc_r>
 800b816:	4606      	mov	r6, r0
 800b818:	b928      	cbnz	r0, 800b826 <_calloc_r+0x1e>
 800b81a:	2600      	movs	r6, #0
 800b81c:	4630      	mov	r0, r6
 800b81e:	bd70      	pop	{r4, r5, r6, pc}
 800b820:	220c      	movs	r2, #12
 800b822:	6002      	str	r2, [r0, #0]
 800b824:	e7f9      	b.n	800b81a <_calloc_r+0x12>
 800b826:	462a      	mov	r2, r5
 800b828:	4621      	mov	r1, r4
 800b82a:	f7fd fdd4 	bl	80093d6 <memset>
 800b82e:	e7f5      	b.n	800b81c <_calloc_r+0x14>

0800b830 <_realloc_r>:
 800b830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b834:	4680      	mov	r8, r0
 800b836:	4615      	mov	r5, r2
 800b838:	460c      	mov	r4, r1
 800b83a:	b921      	cbnz	r1, 800b846 <_realloc_r+0x16>
 800b83c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b840:	4611      	mov	r1, r2
 800b842:	f7fb bfa3 	b.w	800778c <_malloc_r>
 800b846:	b92a      	cbnz	r2, 800b854 <_realloc_r+0x24>
 800b848:	f7fe fcd2 	bl	800a1f0 <_free_r>
 800b84c:	2400      	movs	r4, #0
 800b84e:	4620      	mov	r0, r4
 800b850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b854:	f000 f833 	bl	800b8be <_malloc_usable_size_r>
 800b858:	4285      	cmp	r5, r0
 800b85a:	4606      	mov	r6, r0
 800b85c:	d802      	bhi.n	800b864 <_realloc_r+0x34>
 800b85e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b862:	d8f4      	bhi.n	800b84e <_realloc_r+0x1e>
 800b864:	4629      	mov	r1, r5
 800b866:	4640      	mov	r0, r8
 800b868:	f7fb ff90 	bl	800778c <_malloc_r>
 800b86c:	4607      	mov	r7, r0
 800b86e:	2800      	cmp	r0, #0
 800b870:	d0ec      	beq.n	800b84c <_realloc_r+0x1c>
 800b872:	42b5      	cmp	r5, r6
 800b874:	462a      	mov	r2, r5
 800b876:	4621      	mov	r1, r4
 800b878:	bf28      	it	cs
 800b87a:	4632      	movcs	r2, r6
 800b87c:	f7fd fe4d 	bl	800951a <memcpy>
 800b880:	4621      	mov	r1, r4
 800b882:	4640      	mov	r0, r8
 800b884:	f7fe fcb4 	bl	800a1f0 <_free_r>
 800b888:	463c      	mov	r4, r7
 800b88a:	e7e0      	b.n	800b84e <_realloc_r+0x1e>

0800b88c <fiprintf>:
 800b88c:	b40e      	push	{r1, r2, r3}
 800b88e:	b503      	push	{r0, r1, lr}
 800b890:	4601      	mov	r1, r0
 800b892:	ab03      	add	r3, sp, #12
 800b894:	4805      	ldr	r0, [pc, #20]	@ (800b8ac <fiprintf+0x20>)
 800b896:	f853 2b04 	ldr.w	r2, [r3], #4
 800b89a:	6800      	ldr	r0, [r0, #0]
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	f000 f83f 	bl	800b920 <_vfiprintf_r>
 800b8a2:	b002      	add	sp, #8
 800b8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8a8:	b003      	add	sp, #12
 800b8aa:	4770      	bx	lr
 800b8ac:	20000188 	.word	0x20000188

0800b8b0 <abort>:
 800b8b0:	b508      	push	{r3, lr}
 800b8b2:	2006      	movs	r0, #6
 800b8b4:	f000 fa08 	bl	800bcc8 <raise>
 800b8b8:	2001      	movs	r0, #1
 800b8ba:	f7f7 fbc5 	bl	8003048 <_exit>

0800b8be <_malloc_usable_size_r>:
 800b8be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8c2:	1f18      	subs	r0, r3, #4
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	bfbc      	itt	lt
 800b8c8:	580b      	ldrlt	r3, [r1, r0]
 800b8ca:	18c0      	addlt	r0, r0, r3
 800b8cc:	4770      	bx	lr

0800b8ce <__sfputc_r>:
 800b8ce:	6893      	ldr	r3, [r2, #8]
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	b410      	push	{r4}
 800b8d6:	6093      	str	r3, [r2, #8]
 800b8d8:	da08      	bge.n	800b8ec <__sfputc_r+0x1e>
 800b8da:	6994      	ldr	r4, [r2, #24]
 800b8dc:	42a3      	cmp	r3, r4
 800b8de:	db01      	blt.n	800b8e4 <__sfputc_r+0x16>
 800b8e0:	290a      	cmp	r1, #10
 800b8e2:	d103      	bne.n	800b8ec <__sfputc_r+0x1e>
 800b8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e8:	f000 b932 	b.w	800bb50 <__swbuf_r>
 800b8ec:	6813      	ldr	r3, [r2, #0]
 800b8ee:	1c58      	adds	r0, r3, #1
 800b8f0:	6010      	str	r0, [r2, #0]
 800b8f2:	7019      	strb	r1, [r3, #0]
 800b8f4:	4608      	mov	r0, r1
 800b8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <__sfputs_r>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	4606      	mov	r6, r0
 800b900:	460f      	mov	r7, r1
 800b902:	4614      	mov	r4, r2
 800b904:	18d5      	adds	r5, r2, r3
 800b906:	42ac      	cmp	r4, r5
 800b908:	d101      	bne.n	800b90e <__sfputs_r+0x12>
 800b90a:	2000      	movs	r0, #0
 800b90c:	e007      	b.n	800b91e <__sfputs_r+0x22>
 800b90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b912:	463a      	mov	r2, r7
 800b914:	4630      	mov	r0, r6
 800b916:	f7ff ffda 	bl	800b8ce <__sfputc_r>
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	d1f3      	bne.n	800b906 <__sfputs_r+0xa>
 800b91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b920 <_vfiprintf_r>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	460d      	mov	r5, r1
 800b926:	b09d      	sub	sp, #116	@ 0x74
 800b928:	4614      	mov	r4, r2
 800b92a:	4698      	mov	r8, r3
 800b92c:	4606      	mov	r6, r0
 800b92e:	b118      	cbz	r0, 800b938 <_vfiprintf_r+0x18>
 800b930:	6a03      	ldr	r3, [r0, #32]
 800b932:	b90b      	cbnz	r3, 800b938 <_vfiprintf_r+0x18>
 800b934:	f7fd fcb6 	bl	80092a4 <__sinit>
 800b938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b93a:	07d9      	lsls	r1, r3, #31
 800b93c:	d405      	bmi.n	800b94a <_vfiprintf_r+0x2a>
 800b93e:	89ab      	ldrh	r3, [r5, #12]
 800b940:	059a      	lsls	r2, r3, #22
 800b942:	d402      	bmi.n	800b94a <_vfiprintf_r+0x2a>
 800b944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b946:	f7fd fde6 	bl	8009516 <__retarget_lock_acquire_recursive>
 800b94a:	89ab      	ldrh	r3, [r5, #12]
 800b94c:	071b      	lsls	r3, r3, #28
 800b94e:	d501      	bpl.n	800b954 <_vfiprintf_r+0x34>
 800b950:	692b      	ldr	r3, [r5, #16]
 800b952:	b99b      	cbnz	r3, 800b97c <_vfiprintf_r+0x5c>
 800b954:	4629      	mov	r1, r5
 800b956:	4630      	mov	r0, r6
 800b958:	f000 f938 	bl	800bbcc <__swsetup_r>
 800b95c:	b170      	cbz	r0, 800b97c <_vfiprintf_r+0x5c>
 800b95e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b960:	07dc      	lsls	r4, r3, #31
 800b962:	d504      	bpl.n	800b96e <_vfiprintf_r+0x4e>
 800b964:	f04f 30ff 	mov.w	r0, #4294967295
 800b968:	b01d      	add	sp, #116	@ 0x74
 800b96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	0598      	lsls	r0, r3, #22
 800b972:	d4f7      	bmi.n	800b964 <_vfiprintf_r+0x44>
 800b974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b976:	f7fd fdcf 	bl	8009518 <__retarget_lock_release_recursive>
 800b97a:	e7f3      	b.n	800b964 <_vfiprintf_r+0x44>
 800b97c:	2300      	movs	r3, #0
 800b97e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b980:	2320      	movs	r3, #32
 800b982:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b986:	f8cd 800c 	str.w	r8, [sp, #12]
 800b98a:	2330      	movs	r3, #48	@ 0x30
 800b98c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb3c <_vfiprintf_r+0x21c>
 800b990:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b994:	f04f 0901 	mov.w	r9, #1
 800b998:	4623      	mov	r3, r4
 800b99a:	469a      	mov	sl, r3
 800b99c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a0:	b10a      	cbz	r2, 800b9a6 <_vfiprintf_r+0x86>
 800b9a2:	2a25      	cmp	r2, #37	@ 0x25
 800b9a4:	d1f9      	bne.n	800b99a <_vfiprintf_r+0x7a>
 800b9a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b9aa:	d00b      	beq.n	800b9c4 <_vfiprintf_r+0xa4>
 800b9ac:	465b      	mov	r3, fp
 800b9ae:	4622      	mov	r2, r4
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7ff ffa2 	bl	800b8fc <__sfputs_r>
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	f000 80a7 	beq.w	800bb0c <_vfiprintf_r+0x1ec>
 800b9be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9c0:	445a      	add	r2, fp
 800b9c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 809f 	beq.w	800bb0c <_vfiprintf_r+0x1ec>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9d8:	f10a 0a01 	add.w	sl, sl, #1
 800b9dc:	9304      	str	r3, [sp, #16]
 800b9de:	9307      	str	r3, [sp, #28]
 800b9e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9e6:	4654      	mov	r4, sl
 800b9e8:	2205      	movs	r2, #5
 800b9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ee:	4853      	ldr	r0, [pc, #332]	@ (800bb3c <_vfiprintf_r+0x21c>)
 800b9f0:	f7f4 fc0e 	bl	8000210 <memchr>
 800b9f4:	9a04      	ldr	r2, [sp, #16]
 800b9f6:	b9d8      	cbnz	r0, 800ba30 <_vfiprintf_r+0x110>
 800b9f8:	06d1      	lsls	r1, r2, #27
 800b9fa:	bf44      	itt	mi
 800b9fc:	2320      	movmi	r3, #32
 800b9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba02:	0713      	lsls	r3, r2, #28
 800ba04:	bf44      	itt	mi
 800ba06:	232b      	movmi	r3, #43	@ 0x2b
 800ba08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba10:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba12:	d015      	beq.n	800ba40 <_vfiprintf_r+0x120>
 800ba14:	9a07      	ldr	r2, [sp, #28]
 800ba16:	4654      	mov	r4, sl
 800ba18:	2000      	movs	r0, #0
 800ba1a:	f04f 0c0a 	mov.w	ip, #10
 800ba1e:	4621      	mov	r1, r4
 800ba20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba24:	3b30      	subs	r3, #48	@ 0x30
 800ba26:	2b09      	cmp	r3, #9
 800ba28:	d94b      	bls.n	800bac2 <_vfiprintf_r+0x1a2>
 800ba2a:	b1b0      	cbz	r0, 800ba5a <_vfiprintf_r+0x13a>
 800ba2c:	9207      	str	r2, [sp, #28]
 800ba2e:	e014      	b.n	800ba5a <_vfiprintf_r+0x13a>
 800ba30:	eba0 0308 	sub.w	r3, r0, r8
 800ba34:	fa09 f303 	lsl.w	r3, r9, r3
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	46a2      	mov	sl, r4
 800ba3e:	e7d2      	b.n	800b9e6 <_vfiprintf_r+0xc6>
 800ba40:	9b03      	ldr	r3, [sp, #12]
 800ba42:	1d19      	adds	r1, r3, #4
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	9103      	str	r1, [sp, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	bfbb      	ittet	lt
 800ba4c:	425b      	neglt	r3, r3
 800ba4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba52:	9307      	strge	r3, [sp, #28]
 800ba54:	9307      	strlt	r3, [sp, #28]
 800ba56:	bfb8      	it	lt
 800ba58:	9204      	strlt	r2, [sp, #16]
 800ba5a:	7823      	ldrb	r3, [r4, #0]
 800ba5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba5e:	d10a      	bne.n	800ba76 <_vfiprintf_r+0x156>
 800ba60:	7863      	ldrb	r3, [r4, #1]
 800ba62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba64:	d132      	bne.n	800bacc <_vfiprintf_r+0x1ac>
 800ba66:	9b03      	ldr	r3, [sp, #12]
 800ba68:	1d1a      	adds	r2, r3, #4
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	9203      	str	r2, [sp, #12]
 800ba6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba72:	3402      	adds	r4, #2
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb4c <_vfiprintf_r+0x22c>
 800ba7a:	7821      	ldrb	r1, [r4, #0]
 800ba7c:	2203      	movs	r2, #3
 800ba7e:	4650      	mov	r0, sl
 800ba80:	f7f4 fbc6 	bl	8000210 <memchr>
 800ba84:	b138      	cbz	r0, 800ba96 <_vfiprintf_r+0x176>
 800ba86:	9b04      	ldr	r3, [sp, #16]
 800ba88:	eba0 000a 	sub.w	r0, r0, sl
 800ba8c:	2240      	movs	r2, #64	@ 0x40
 800ba8e:	4082      	lsls	r2, r0
 800ba90:	4313      	orrs	r3, r2
 800ba92:	3401      	adds	r4, #1
 800ba94:	9304      	str	r3, [sp, #16]
 800ba96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba9a:	4829      	ldr	r0, [pc, #164]	@ (800bb40 <_vfiprintf_r+0x220>)
 800ba9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800baa0:	2206      	movs	r2, #6
 800baa2:	f7f4 fbb5 	bl	8000210 <memchr>
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d03f      	beq.n	800bb2a <_vfiprintf_r+0x20a>
 800baaa:	4b26      	ldr	r3, [pc, #152]	@ (800bb44 <_vfiprintf_r+0x224>)
 800baac:	bb1b      	cbnz	r3, 800baf6 <_vfiprintf_r+0x1d6>
 800baae:	9b03      	ldr	r3, [sp, #12]
 800bab0:	3307      	adds	r3, #7
 800bab2:	f023 0307 	bic.w	r3, r3, #7
 800bab6:	3308      	adds	r3, #8
 800bab8:	9303      	str	r3, [sp, #12]
 800baba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800babc:	443b      	add	r3, r7
 800babe:	9309      	str	r3, [sp, #36]	@ 0x24
 800bac0:	e76a      	b.n	800b998 <_vfiprintf_r+0x78>
 800bac2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bac6:	460c      	mov	r4, r1
 800bac8:	2001      	movs	r0, #1
 800baca:	e7a8      	b.n	800ba1e <_vfiprintf_r+0xfe>
 800bacc:	2300      	movs	r3, #0
 800bace:	3401      	adds	r4, #1
 800bad0:	9305      	str	r3, [sp, #20]
 800bad2:	4619      	mov	r1, r3
 800bad4:	f04f 0c0a 	mov.w	ip, #10
 800bad8:	4620      	mov	r0, r4
 800bada:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bade:	3a30      	subs	r2, #48	@ 0x30
 800bae0:	2a09      	cmp	r2, #9
 800bae2:	d903      	bls.n	800baec <_vfiprintf_r+0x1cc>
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d0c6      	beq.n	800ba76 <_vfiprintf_r+0x156>
 800bae8:	9105      	str	r1, [sp, #20]
 800baea:	e7c4      	b.n	800ba76 <_vfiprintf_r+0x156>
 800baec:	fb0c 2101 	mla	r1, ip, r1, r2
 800baf0:	4604      	mov	r4, r0
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7f0      	b.n	800bad8 <_vfiprintf_r+0x1b8>
 800baf6:	ab03      	add	r3, sp, #12
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	462a      	mov	r2, r5
 800bafc:	4b12      	ldr	r3, [pc, #72]	@ (800bb48 <_vfiprintf_r+0x228>)
 800bafe:	a904      	add	r1, sp, #16
 800bb00:	4630      	mov	r0, r6
 800bb02:	f7fc fd77 	bl	80085f4 <_printf_float>
 800bb06:	4607      	mov	r7, r0
 800bb08:	1c78      	adds	r0, r7, #1
 800bb0a:	d1d6      	bne.n	800baba <_vfiprintf_r+0x19a>
 800bb0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb0e:	07d9      	lsls	r1, r3, #31
 800bb10:	d405      	bmi.n	800bb1e <_vfiprintf_r+0x1fe>
 800bb12:	89ab      	ldrh	r3, [r5, #12]
 800bb14:	059a      	lsls	r2, r3, #22
 800bb16:	d402      	bmi.n	800bb1e <_vfiprintf_r+0x1fe>
 800bb18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb1a:	f7fd fcfd 	bl	8009518 <__retarget_lock_release_recursive>
 800bb1e:	89ab      	ldrh	r3, [r5, #12]
 800bb20:	065b      	lsls	r3, r3, #25
 800bb22:	f53f af1f 	bmi.w	800b964 <_vfiprintf_r+0x44>
 800bb26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb28:	e71e      	b.n	800b968 <_vfiprintf_r+0x48>
 800bb2a:	ab03      	add	r3, sp, #12
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	462a      	mov	r2, r5
 800bb30:	4b05      	ldr	r3, [pc, #20]	@ (800bb48 <_vfiprintf_r+0x228>)
 800bb32:	a904      	add	r1, sp, #16
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7fc fff5 	bl	8008b24 <_printf_i>
 800bb3a:	e7e4      	b.n	800bb06 <_vfiprintf_r+0x1e6>
 800bb3c:	0800c2f1 	.word	0x0800c2f1
 800bb40:	0800c2fb 	.word	0x0800c2fb
 800bb44:	080085f5 	.word	0x080085f5
 800bb48:	0800b8fd 	.word	0x0800b8fd
 800bb4c:	0800c2f7 	.word	0x0800c2f7

0800bb50 <__swbuf_r>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	460e      	mov	r6, r1
 800bb54:	4614      	mov	r4, r2
 800bb56:	4605      	mov	r5, r0
 800bb58:	b118      	cbz	r0, 800bb62 <__swbuf_r+0x12>
 800bb5a:	6a03      	ldr	r3, [r0, #32]
 800bb5c:	b90b      	cbnz	r3, 800bb62 <__swbuf_r+0x12>
 800bb5e:	f7fd fba1 	bl	80092a4 <__sinit>
 800bb62:	69a3      	ldr	r3, [r4, #24]
 800bb64:	60a3      	str	r3, [r4, #8]
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	071a      	lsls	r2, r3, #28
 800bb6a:	d501      	bpl.n	800bb70 <__swbuf_r+0x20>
 800bb6c:	6923      	ldr	r3, [r4, #16]
 800bb6e:	b943      	cbnz	r3, 800bb82 <__swbuf_r+0x32>
 800bb70:	4621      	mov	r1, r4
 800bb72:	4628      	mov	r0, r5
 800bb74:	f000 f82a 	bl	800bbcc <__swsetup_r>
 800bb78:	b118      	cbz	r0, 800bb82 <__swbuf_r+0x32>
 800bb7a:	f04f 37ff 	mov.w	r7, #4294967295
 800bb7e:	4638      	mov	r0, r7
 800bb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	6922      	ldr	r2, [r4, #16]
 800bb86:	1a98      	subs	r0, r3, r2
 800bb88:	6963      	ldr	r3, [r4, #20]
 800bb8a:	b2f6      	uxtb	r6, r6
 800bb8c:	4283      	cmp	r3, r0
 800bb8e:	4637      	mov	r7, r6
 800bb90:	dc05      	bgt.n	800bb9e <__swbuf_r+0x4e>
 800bb92:	4621      	mov	r1, r4
 800bb94:	4628      	mov	r0, r5
 800bb96:	f7ff fdd7 	bl	800b748 <_fflush_r>
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d1ed      	bne.n	800bb7a <__swbuf_r+0x2a>
 800bb9e:	68a3      	ldr	r3, [r4, #8]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	60a3      	str	r3, [r4, #8]
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	6022      	str	r2, [r4, #0]
 800bbaa:	701e      	strb	r6, [r3, #0]
 800bbac:	6962      	ldr	r2, [r4, #20]
 800bbae:	1c43      	adds	r3, r0, #1
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d004      	beq.n	800bbbe <__swbuf_r+0x6e>
 800bbb4:	89a3      	ldrh	r3, [r4, #12]
 800bbb6:	07db      	lsls	r3, r3, #31
 800bbb8:	d5e1      	bpl.n	800bb7e <__swbuf_r+0x2e>
 800bbba:	2e0a      	cmp	r6, #10
 800bbbc:	d1df      	bne.n	800bb7e <__swbuf_r+0x2e>
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f7ff fdc1 	bl	800b748 <_fflush_r>
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	d0d9      	beq.n	800bb7e <__swbuf_r+0x2e>
 800bbca:	e7d6      	b.n	800bb7a <__swbuf_r+0x2a>

0800bbcc <__swsetup_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4b29      	ldr	r3, [pc, #164]	@ (800bc74 <__swsetup_r+0xa8>)
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	6818      	ldr	r0, [r3, #0]
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	b118      	cbz	r0, 800bbe0 <__swsetup_r+0x14>
 800bbd8:	6a03      	ldr	r3, [r0, #32]
 800bbda:	b90b      	cbnz	r3, 800bbe0 <__swsetup_r+0x14>
 800bbdc:	f7fd fb62 	bl	80092a4 <__sinit>
 800bbe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbe4:	0719      	lsls	r1, r3, #28
 800bbe6:	d422      	bmi.n	800bc2e <__swsetup_r+0x62>
 800bbe8:	06da      	lsls	r2, r3, #27
 800bbea:	d407      	bmi.n	800bbfc <__swsetup_r+0x30>
 800bbec:	2209      	movs	r2, #9
 800bbee:	602a      	str	r2, [r5, #0]
 800bbf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf4:	81a3      	strh	r3, [r4, #12]
 800bbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfa:	e033      	b.n	800bc64 <__swsetup_r+0x98>
 800bbfc:	0758      	lsls	r0, r3, #29
 800bbfe:	d512      	bpl.n	800bc26 <__swsetup_r+0x5a>
 800bc00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc02:	b141      	cbz	r1, 800bc16 <__swsetup_r+0x4a>
 800bc04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc08:	4299      	cmp	r1, r3
 800bc0a:	d002      	beq.n	800bc12 <__swsetup_r+0x46>
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	f7fe faef 	bl	800a1f0 <_free_r>
 800bc12:	2300      	movs	r3, #0
 800bc14:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc1c:	81a3      	strh	r3, [r4, #12]
 800bc1e:	2300      	movs	r3, #0
 800bc20:	6063      	str	r3, [r4, #4]
 800bc22:	6923      	ldr	r3, [r4, #16]
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	89a3      	ldrh	r3, [r4, #12]
 800bc28:	f043 0308 	orr.w	r3, r3, #8
 800bc2c:	81a3      	strh	r3, [r4, #12]
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	b94b      	cbnz	r3, 800bc46 <__swsetup_r+0x7a>
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc3c:	d003      	beq.n	800bc46 <__swsetup_r+0x7a>
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4628      	mov	r0, r5
 800bc42:	f000 f883 	bl	800bd4c <__smakebuf_r>
 800bc46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc4a:	f013 0201 	ands.w	r2, r3, #1
 800bc4e:	d00a      	beq.n	800bc66 <__swsetup_r+0x9a>
 800bc50:	2200      	movs	r2, #0
 800bc52:	60a2      	str	r2, [r4, #8]
 800bc54:	6962      	ldr	r2, [r4, #20]
 800bc56:	4252      	negs	r2, r2
 800bc58:	61a2      	str	r2, [r4, #24]
 800bc5a:	6922      	ldr	r2, [r4, #16]
 800bc5c:	b942      	cbnz	r2, 800bc70 <__swsetup_r+0xa4>
 800bc5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc62:	d1c5      	bne.n	800bbf0 <__swsetup_r+0x24>
 800bc64:	bd38      	pop	{r3, r4, r5, pc}
 800bc66:	0799      	lsls	r1, r3, #30
 800bc68:	bf58      	it	pl
 800bc6a:	6962      	ldrpl	r2, [r4, #20]
 800bc6c:	60a2      	str	r2, [r4, #8]
 800bc6e:	e7f4      	b.n	800bc5a <__swsetup_r+0x8e>
 800bc70:	2000      	movs	r0, #0
 800bc72:	e7f7      	b.n	800bc64 <__swsetup_r+0x98>
 800bc74:	20000188 	.word	0x20000188

0800bc78 <_raise_r>:
 800bc78:	291f      	cmp	r1, #31
 800bc7a:	b538      	push	{r3, r4, r5, lr}
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	460c      	mov	r4, r1
 800bc80:	d904      	bls.n	800bc8c <_raise_r+0x14>
 800bc82:	2316      	movs	r3, #22
 800bc84:	6003      	str	r3, [r0, #0]
 800bc86:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc8e:	b112      	cbz	r2, 800bc96 <_raise_r+0x1e>
 800bc90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc94:	b94b      	cbnz	r3, 800bcaa <_raise_r+0x32>
 800bc96:	4628      	mov	r0, r5
 800bc98:	f000 f830 	bl	800bcfc <_getpid_r>
 800bc9c:	4622      	mov	r2, r4
 800bc9e:	4601      	mov	r1, r0
 800bca0:	4628      	mov	r0, r5
 800bca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bca6:	f000 b817 	b.w	800bcd8 <_kill_r>
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d00a      	beq.n	800bcc4 <_raise_r+0x4c>
 800bcae:	1c59      	adds	r1, r3, #1
 800bcb0:	d103      	bne.n	800bcba <_raise_r+0x42>
 800bcb2:	2316      	movs	r3, #22
 800bcb4:	6003      	str	r3, [r0, #0]
 800bcb6:	2001      	movs	r0, #1
 800bcb8:	e7e7      	b.n	800bc8a <_raise_r+0x12>
 800bcba:	2100      	movs	r1, #0
 800bcbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	4798      	blx	r3
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e7e0      	b.n	800bc8a <_raise_r+0x12>

0800bcc8 <raise>:
 800bcc8:	4b02      	ldr	r3, [pc, #8]	@ (800bcd4 <raise+0xc>)
 800bcca:	4601      	mov	r1, r0
 800bccc:	6818      	ldr	r0, [r3, #0]
 800bcce:	f7ff bfd3 	b.w	800bc78 <_raise_r>
 800bcd2:	bf00      	nop
 800bcd4:	20000188 	.word	0x20000188

0800bcd8 <_kill_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4d07      	ldr	r5, [pc, #28]	@ (800bcf8 <_kill_r+0x20>)
 800bcdc:	2300      	movs	r3, #0
 800bcde:	4604      	mov	r4, r0
 800bce0:	4608      	mov	r0, r1
 800bce2:	4611      	mov	r1, r2
 800bce4:	602b      	str	r3, [r5, #0]
 800bce6:	f7f7 f99f 	bl	8003028 <_kill>
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	d102      	bne.n	800bcf4 <_kill_r+0x1c>
 800bcee:	682b      	ldr	r3, [r5, #0]
 800bcf0:	b103      	cbz	r3, 800bcf4 <_kill_r+0x1c>
 800bcf2:	6023      	str	r3, [r4, #0]
 800bcf4:	bd38      	pop	{r3, r4, r5, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20000978 	.word	0x20000978

0800bcfc <_getpid_r>:
 800bcfc:	f7f7 b98c 	b.w	8003018 <_getpid>

0800bd00 <__swhatbuf_r>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	460c      	mov	r4, r1
 800bd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd08:	2900      	cmp	r1, #0
 800bd0a:	b096      	sub	sp, #88	@ 0x58
 800bd0c:	4615      	mov	r5, r2
 800bd0e:	461e      	mov	r6, r3
 800bd10:	da0d      	bge.n	800bd2e <__swhatbuf_r+0x2e>
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd18:	f04f 0100 	mov.w	r1, #0
 800bd1c:	bf14      	ite	ne
 800bd1e:	2340      	movne	r3, #64	@ 0x40
 800bd20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd24:	2000      	movs	r0, #0
 800bd26:	6031      	str	r1, [r6, #0]
 800bd28:	602b      	str	r3, [r5, #0]
 800bd2a:	b016      	add	sp, #88	@ 0x58
 800bd2c:	bd70      	pop	{r4, r5, r6, pc}
 800bd2e:	466a      	mov	r2, sp
 800bd30:	f000 f848 	bl	800bdc4 <_fstat_r>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	dbec      	blt.n	800bd12 <__swhatbuf_r+0x12>
 800bd38:	9901      	ldr	r1, [sp, #4]
 800bd3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd42:	4259      	negs	r1, r3
 800bd44:	4159      	adcs	r1, r3
 800bd46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd4a:	e7eb      	b.n	800bd24 <__swhatbuf_r+0x24>

0800bd4c <__smakebuf_r>:
 800bd4c:	898b      	ldrh	r3, [r1, #12]
 800bd4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd50:	079d      	lsls	r5, r3, #30
 800bd52:	4606      	mov	r6, r0
 800bd54:	460c      	mov	r4, r1
 800bd56:	d507      	bpl.n	800bd68 <__smakebuf_r+0x1c>
 800bd58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	6123      	str	r3, [r4, #16]
 800bd60:	2301      	movs	r3, #1
 800bd62:	6163      	str	r3, [r4, #20]
 800bd64:	b003      	add	sp, #12
 800bd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd68:	ab01      	add	r3, sp, #4
 800bd6a:	466a      	mov	r2, sp
 800bd6c:	f7ff ffc8 	bl	800bd00 <__swhatbuf_r>
 800bd70:	9f00      	ldr	r7, [sp, #0]
 800bd72:	4605      	mov	r5, r0
 800bd74:	4639      	mov	r1, r7
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7fb fd08 	bl	800778c <_malloc_r>
 800bd7c:	b948      	cbnz	r0, 800bd92 <__smakebuf_r+0x46>
 800bd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd82:	059a      	lsls	r2, r3, #22
 800bd84:	d4ee      	bmi.n	800bd64 <__smakebuf_r+0x18>
 800bd86:	f023 0303 	bic.w	r3, r3, #3
 800bd8a:	f043 0302 	orr.w	r3, r3, #2
 800bd8e:	81a3      	strh	r3, [r4, #12]
 800bd90:	e7e2      	b.n	800bd58 <__smakebuf_r+0xc>
 800bd92:	89a3      	ldrh	r3, [r4, #12]
 800bd94:	6020      	str	r0, [r4, #0]
 800bd96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd9a:	81a3      	strh	r3, [r4, #12]
 800bd9c:	9b01      	ldr	r3, [sp, #4]
 800bd9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bda2:	b15b      	cbz	r3, 800bdbc <__smakebuf_r+0x70>
 800bda4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f000 f81d 	bl	800bde8 <_isatty_r>
 800bdae:	b128      	cbz	r0, 800bdbc <__smakebuf_r+0x70>
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	f023 0303 	bic.w	r3, r3, #3
 800bdb6:	f043 0301 	orr.w	r3, r3, #1
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	431d      	orrs	r5, r3
 800bdc0:	81a5      	strh	r5, [r4, #12]
 800bdc2:	e7cf      	b.n	800bd64 <__smakebuf_r+0x18>

0800bdc4 <_fstat_r>:
 800bdc4:	b538      	push	{r3, r4, r5, lr}
 800bdc6:	4d07      	ldr	r5, [pc, #28]	@ (800bde4 <_fstat_r+0x20>)
 800bdc8:	2300      	movs	r3, #0
 800bdca:	4604      	mov	r4, r0
 800bdcc:	4608      	mov	r0, r1
 800bdce:	4611      	mov	r1, r2
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	f7f7 f989 	bl	80030e8 <_fstat>
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	d102      	bne.n	800bde0 <_fstat_r+0x1c>
 800bdda:	682b      	ldr	r3, [r5, #0]
 800bddc:	b103      	cbz	r3, 800bde0 <_fstat_r+0x1c>
 800bdde:	6023      	str	r3, [r4, #0]
 800bde0:	bd38      	pop	{r3, r4, r5, pc}
 800bde2:	bf00      	nop
 800bde4:	20000978 	.word	0x20000978

0800bde8 <_isatty_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d06      	ldr	r5, [pc, #24]	@ (800be04 <_isatty_r+0x1c>)
 800bdec:	2300      	movs	r3, #0
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	602b      	str	r3, [r5, #0]
 800bdf4:	f7f7 f988 	bl	8003108 <_isatty>
 800bdf8:	1c43      	adds	r3, r0, #1
 800bdfa:	d102      	bne.n	800be02 <_isatty_r+0x1a>
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	b103      	cbz	r3, 800be02 <_isatty_r+0x1a>
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	bd38      	pop	{r3, r4, r5, pc}
 800be04:	20000978 	.word	0x20000978

0800be08 <_init>:
 800be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0a:	bf00      	nop
 800be0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0e:	bc08      	pop	{r3}
 800be10:	469e      	mov	lr, r3
 800be12:	4770      	bx	lr

0800be14 <_fini>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	bf00      	nop
 800be18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1a:	bc08      	pop	{r3}
 800be1c:	469e      	mov	lr, r3
 800be1e:	4770      	bx	lr
